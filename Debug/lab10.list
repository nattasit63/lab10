
lab10.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000686c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000154  08006a0c  08006a0c  00016a0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b60  08006b60  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08006b60  08006b60  00016b60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b68  08006b68  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b68  08006b68  00016b68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b6c  08006b6c  00016b6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08006b70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000260  20000080  08006bec  00020080  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200002e0  08006bec  000202e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001013f  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002234  00000000  00000000  000301eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000fc8  00000000  00000000  00032420  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000eb0  00000000  00000000  000333e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017923  00000000  00000000  00034298  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b9c1  00000000  00000000  0004bbbb  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000946bf  00000000  00000000  0005757c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ebc3b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004680  00000000  00000000  000ebcb8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000080 	.word	0x20000080
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080069f4 	.word	0x080069f4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000084 	.word	0x20000084
 80001dc:	080069f4 	.word	0x080069f4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_d2f>:
 8000608:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800060c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000610:	bf24      	itt	cs
 8000612:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000616:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800061a:	d90d      	bls.n	8000638 <__aeabi_d2f+0x30>
 800061c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000620:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000624:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000628:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800062c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000630:	bf08      	it	eq
 8000632:	f020 0001 	biceq.w	r0, r0, #1
 8000636:	4770      	bx	lr
 8000638:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800063c:	d121      	bne.n	8000682 <__aeabi_d2f+0x7a>
 800063e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000642:	bfbc      	itt	lt
 8000644:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000648:	4770      	bxlt	lr
 800064a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800064e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000652:	f1c2 0218 	rsb	r2, r2, #24
 8000656:	f1c2 0c20 	rsb	ip, r2, #32
 800065a:	fa10 f30c 	lsls.w	r3, r0, ip
 800065e:	fa20 f002 	lsr.w	r0, r0, r2
 8000662:	bf18      	it	ne
 8000664:	f040 0001 	orrne.w	r0, r0, #1
 8000668:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800066c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000670:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000674:	ea40 000c 	orr.w	r0, r0, ip
 8000678:	fa23 f302 	lsr.w	r3, r3, r2
 800067c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000680:	e7cc      	b.n	800061c <__aeabi_d2f+0x14>
 8000682:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000686:	d107      	bne.n	8000698 <__aeabi_d2f+0x90>
 8000688:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800068c:	bf1e      	ittt	ne
 800068e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000692:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000696:	4770      	bxne	lr
 8000698:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800069c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80006a0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop

080006a8 <__aeabi_uldivmod>:
 80006a8:	b953      	cbnz	r3, 80006c0 <__aeabi_uldivmod+0x18>
 80006aa:	b94a      	cbnz	r2, 80006c0 <__aeabi_uldivmod+0x18>
 80006ac:	2900      	cmp	r1, #0
 80006ae:	bf08      	it	eq
 80006b0:	2800      	cmpeq	r0, #0
 80006b2:	bf1c      	itt	ne
 80006b4:	f04f 31ff 	movne.w	r1, #4294967295
 80006b8:	f04f 30ff 	movne.w	r0, #4294967295
 80006bc:	f000 b972 	b.w	80009a4 <__aeabi_idiv0>
 80006c0:	f1ad 0c08 	sub.w	ip, sp, #8
 80006c4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80006c8:	f000 f806 	bl	80006d8 <__udivmoddi4>
 80006cc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006d4:	b004      	add	sp, #16
 80006d6:	4770      	bx	lr

080006d8 <__udivmoddi4>:
 80006d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006dc:	9e08      	ldr	r6, [sp, #32]
 80006de:	4604      	mov	r4, r0
 80006e0:	4688      	mov	r8, r1
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d14b      	bne.n	800077e <__udivmoddi4+0xa6>
 80006e6:	428a      	cmp	r2, r1
 80006e8:	4615      	mov	r5, r2
 80006ea:	d967      	bls.n	80007bc <__udivmoddi4+0xe4>
 80006ec:	fab2 f282 	clz	r2, r2
 80006f0:	b14a      	cbz	r2, 8000706 <__udivmoddi4+0x2e>
 80006f2:	f1c2 0720 	rsb	r7, r2, #32
 80006f6:	fa01 f302 	lsl.w	r3, r1, r2
 80006fa:	fa20 f707 	lsr.w	r7, r0, r7
 80006fe:	4095      	lsls	r5, r2
 8000700:	ea47 0803 	orr.w	r8, r7, r3
 8000704:	4094      	lsls	r4, r2
 8000706:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800070a:	0c23      	lsrs	r3, r4, #16
 800070c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000710:	fa1f fc85 	uxth.w	ip, r5
 8000714:	fb0e 8817 	mls	r8, lr, r7, r8
 8000718:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800071c:	fb07 f10c 	mul.w	r1, r7, ip
 8000720:	4299      	cmp	r1, r3
 8000722:	d909      	bls.n	8000738 <__udivmoddi4+0x60>
 8000724:	18eb      	adds	r3, r5, r3
 8000726:	f107 30ff 	add.w	r0, r7, #4294967295
 800072a:	f080 811b 	bcs.w	8000964 <__udivmoddi4+0x28c>
 800072e:	4299      	cmp	r1, r3
 8000730:	f240 8118 	bls.w	8000964 <__udivmoddi4+0x28c>
 8000734:	3f02      	subs	r7, #2
 8000736:	442b      	add	r3, r5
 8000738:	1a5b      	subs	r3, r3, r1
 800073a:	b2a4      	uxth	r4, r4
 800073c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000740:	fb0e 3310 	mls	r3, lr, r0, r3
 8000744:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000748:	fb00 fc0c 	mul.w	ip, r0, ip
 800074c:	45a4      	cmp	ip, r4
 800074e:	d909      	bls.n	8000764 <__udivmoddi4+0x8c>
 8000750:	192c      	adds	r4, r5, r4
 8000752:	f100 33ff 	add.w	r3, r0, #4294967295
 8000756:	f080 8107 	bcs.w	8000968 <__udivmoddi4+0x290>
 800075a:	45a4      	cmp	ip, r4
 800075c:	f240 8104 	bls.w	8000968 <__udivmoddi4+0x290>
 8000760:	3802      	subs	r0, #2
 8000762:	442c      	add	r4, r5
 8000764:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000768:	eba4 040c 	sub.w	r4, r4, ip
 800076c:	2700      	movs	r7, #0
 800076e:	b11e      	cbz	r6, 8000778 <__udivmoddi4+0xa0>
 8000770:	40d4      	lsrs	r4, r2
 8000772:	2300      	movs	r3, #0
 8000774:	e9c6 4300 	strd	r4, r3, [r6]
 8000778:	4639      	mov	r1, r7
 800077a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800077e:	428b      	cmp	r3, r1
 8000780:	d909      	bls.n	8000796 <__udivmoddi4+0xbe>
 8000782:	2e00      	cmp	r6, #0
 8000784:	f000 80eb 	beq.w	800095e <__udivmoddi4+0x286>
 8000788:	2700      	movs	r7, #0
 800078a:	e9c6 0100 	strd	r0, r1, [r6]
 800078e:	4638      	mov	r0, r7
 8000790:	4639      	mov	r1, r7
 8000792:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000796:	fab3 f783 	clz	r7, r3
 800079a:	2f00      	cmp	r7, #0
 800079c:	d147      	bne.n	800082e <__udivmoddi4+0x156>
 800079e:	428b      	cmp	r3, r1
 80007a0:	d302      	bcc.n	80007a8 <__udivmoddi4+0xd0>
 80007a2:	4282      	cmp	r2, r0
 80007a4:	f200 80fa 	bhi.w	800099c <__udivmoddi4+0x2c4>
 80007a8:	1a84      	subs	r4, r0, r2
 80007aa:	eb61 0303 	sbc.w	r3, r1, r3
 80007ae:	2001      	movs	r0, #1
 80007b0:	4698      	mov	r8, r3
 80007b2:	2e00      	cmp	r6, #0
 80007b4:	d0e0      	beq.n	8000778 <__udivmoddi4+0xa0>
 80007b6:	e9c6 4800 	strd	r4, r8, [r6]
 80007ba:	e7dd      	b.n	8000778 <__udivmoddi4+0xa0>
 80007bc:	b902      	cbnz	r2, 80007c0 <__udivmoddi4+0xe8>
 80007be:	deff      	udf	#255	; 0xff
 80007c0:	fab2 f282 	clz	r2, r2
 80007c4:	2a00      	cmp	r2, #0
 80007c6:	f040 808f 	bne.w	80008e8 <__udivmoddi4+0x210>
 80007ca:	1b49      	subs	r1, r1, r5
 80007cc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80007d0:	fa1f f885 	uxth.w	r8, r5
 80007d4:	2701      	movs	r7, #1
 80007d6:	fbb1 fcfe 	udiv	ip, r1, lr
 80007da:	0c23      	lsrs	r3, r4, #16
 80007dc:	fb0e 111c 	mls	r1, lr, ip, r1
 80007e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007e4:	fb08 f10c 	mul.w	r1, r8, ip
 80007e8:	4299      	cmp	r1, r3
 80007ea:	d907      	bls.n	80007fc <__udivmoddi4+0x124>
 80007ec:	18eb      	adds	r3, r5, r3
 80007ee:	f10c 30ff 	add.w	r0, ip, #4294967295
 80007f2:	d202      	bcs.n	80007fa <__udivmoddi4+0x122>
 80007f4:	4299      	cmp	r1, r3
 80007f6:	f200 80cd 	bhi.w	8000994 <__udivmoddi4+0x2bc>
 80007fa:	4684      	mov	ip, r0
 80007fc:	1a59      	subs	r1, r3, r1
 80007fe:	b2a3      	uxth	r3, r4
 8000800:	fbb1 f0fe 	udiv	r0, r1, lr
 8000804:	fb0e 1410 	mls	r4, lr, r0, r1
 8000808:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800080c:	fb08 f800 	mul.w	r8, r8, r0
 8000810:	45a0      	cmp	r8, r4
 8000812:	d907      	bls.n	8000824 <__udivmoddi4+0x14c>
 8000814:	192c      	adds	r4, r5, r4
 8000816:	f100 33ff 	add.w	r3, r0, #4294967295
 800081a:	d202      	bcs.n	8000822 <__udivmoddi4+0x14a>
 800081c:	45a0      	cmp	r8, r4
 800081e:	f200 80b6 	bhi.w	800098e <__udivmoddi4+0x2b6>
 8000822:	4618      	mov	r0, r3
 8000824:	eba4 0408 	sub.w	r4, r4, r8
 8000828:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800082c:	e79f      	b.n	800076e <__udivmoddi4+0x96>
 800082e:	f1c7 0c20 	rsb	ip, r7, #32
 8000832:	40bb      	lsls	r3, r7
 8000834:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000838:	ea4e 0e03 	orr.w	lr, lr, r3
 800083c:	fa01 f407 	lsl.w	r4, r1, r7
 8000840:	fa20 f50c 	lsr.w	r5, r0, ip
 8000844:	fa21 f30c 	lsr.w	r3, r1, ip
 8000848:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800084c:	4325      	orrs	r5, r4
 800084e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000852:	0c2c      	lsrs	r4, r5, #16
 8000854:	fb08 3319 	mls	r3, r8, r9, r3
 8000858:	fa1f fa8e 	uxth.w	sl, lr
 800085c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000860:	fb09 f40a 	mul.w	r4, r9, sl
 8000864:	429c      	cmp	r4, r3
 8000866:	fa02 f207 	lsl.w	r2, r2, r7
 800086a:	fa00 f107 	lsl.w	r1, r0, r7
 800086e:	d90b      	bls.n	8000888 <__udivmoddi4+0x1b0>
 8000870:	eb1e 0303 	adds.w	r3, lr, r3
 8000874:	f109 30ff 	add.w	r0, r9, #4294967295
 8000878:	f080 8087 	bcs.w	800098a <__udivmoddi4+0x2b2>
 800087c:	429c      	cmp	r4, r3
 800087e:	f240 8084 	bls.w	800098a <__udivmoddi4+0x2b2>
 8000882:	f1a9 0902 	sub.w	r9, r9, #2
 8000886:	4473      	add	r3, lr
 8000888:	1b1b      	subs	r3, r3, r4
 800088a:	b2ad      	uxth	r5, r5
 800088c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000890:	fb08 3310 	mls	r3, r8, r0, r3
 8000894:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000898:	fb00 fa0a 	mul.w	sl, r0, sl
 800089c:	45a2      	cmp	sl, r4
 800089e:	d908      	bls.n	80008b2 <__udivmoddi4+0x1da>
 80008a0:	eb1e 0404 	adds.w	r4, lr, r4
 80008a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80008a8:	d26b      	bcs.n	8000982 <__udivmoddi4+0x2aa>
 80008aa:	45a2      	cmp	sl, r4
 80008ac:	d969      	bls.n	8000982 <__udivmoddi4+0x2aa>
 80008ae:	3802      	subs	r0, #2
 80008b0:	4474      	add	r4, lr
 80008b2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80008b6:	fba0 8902 	umull	r8, r9, r0, r2
 80008ba:	eba4 040a 	sub.w	r4, r4, sl
 80008be:	454c      	cmp	r4, r9
 80008c0:	46c2      	mov	sl, r8
 80008c2:	464b      	mov	r3, r9
 80008c4:	d354      	bcc.n	8000970 <__udivmoddi4+0x298>
 80008c6:	d051      	beq.n	800096c <__udivmoddi4+0x294>
 80008c8:	2e00      	cmp	r6, #0
 80008ca:	d069      	beq.n	80009a0 <__udivmoddi4+0x2c8>
 80008cc:	ebb1 050a 	subs.w	r5, r1, sl
 80008d0:	eb64 0403 	sbc.w	r4, r4, r3
 80008d4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80008d8:	40fd      	lsrs	r5, r7
 80008da:	40fc      	lsrs	r4, r7
 80008dc:	ea4c 0505 	orr.w	r5, ip, r5
 80008e0:	e9c6 5400 	strd	r5, r4, [r6]
 80008e4:	2700      	movs	r7, #0
 80008e6:	e747      	b.n	8000778 <__udivmoddi4+0xa0>
 80008e8:	f1c2 0320 	rsb	r3, r2, #32
 80008ec:	fa20 f703 	lsr.w	r7, r0, r3
 80008f0:	4095      	lsls	r5, r2
 80008f2:	fa01 f002 	lsl.w	r0, r1, r2
 80008f6:	fa21 f303 	lsr.w	r3, r1, r3
 80008fa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80008fe:	4338      	orrs	r0, r7
 8000900:	0c01      	lsrs	r1, r0, #16
 8000902:	fbb3 f7fe 	udiv	r7, r3, lr
 8000906:	fa1f f885 	uxth.w	r8, r5
 800090a:	fb0e 3317 	mls	r3, lr, r7, r3
 800090e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000912:	fb07 f308 	mul.w	r3, r7, r8
 8000916:	428b      	cmp	r3, r1
 8000918:	fa04 f402 	lsl.w	r4, r4, r2
 800091c:	d907      	bls.n	800092e <__udivmoddi4+0x256>
 800091e:	1869      	adds	r1, r5, r1
 8000920:	f107 3cff 	add.w	ip, r7, #4294967295
 8000924:	d22f      	bcs.n	8000986 <__udivmoddi4+0x2ae>
 8000926:	428b      	cmp	r3, r1
 8000928:	d92d      	bls.n	8000986 <__udivmoddi4+0x2ae>
 800092a:	3f02      	subs	r7, #2
 800092c:	4429      	add	r1, r5
 800092e:	1acb      	subs	r3, r1, r3
 8000930:	b281      	uxth	r1, r0
 8000932:	fbb3 f0fe 	udiv	r0, r3, lr
 8000936:	fb0e 3310 	mls	r3, lr, r0, r3
 800093a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800093e:	fb00 f308 	mul.w	r3, r0, r8
 8000942:	428b      	cmp	r3, r1
 8000944:	d907      	bls.n	8000956 <__udivmoddi4+0x27e>
 8000946:	1869      	adds	r1, r5, r1
 8000948:	f100 3cff 	add.w	ip, r0, #4294967295
 800094c:	d217      	bcs.n	800097e <__udivmoddi4+0x2a6>
 800094e:	428b      	cmp	r3, r1
 8000950:	d915      	bls.n	800097e <__udivmoddi4+0x2a6>
 8000952:	3802      	subs	r0, #2
 8000954:	4429      	add	r1, r5
 8000956:	1ac9      	subs	r1, r1, r3
 8000958:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800095c:	e73b      	b.n	80007d6 <__udivmoddi4+0xfe>
 800095e:	4637      	mov	r7, r6
 8000960:	4630      	mov	r0, r6
 8000962:	e709      	b.n	8000778 <__udivmoddi4+0xa0>
 8000964:	4607      	mov	r7, r0
 8000966:	e6e7      	b.n	8000738 <__udivmoddi4+0x60>
 8000968:	4618      	mov	r0, r3
 800096a:	e6fb      	b.n	8000764 <__udivmoddi4+0x8c>
 800096c:	4541      	cmp	r1, r8
 800096e:	d2ab      	bcs.n	80008c8 <__udivmoddi4+0x1f0>
 8000970:	ebb8 0a02 	subs.w	sl, r8, r2
 8000974:	eb69 020e 	sbc.w	r2, r9, lr
 8000978:	3801      	subs	r0, #1
 800097a:	4613      	mov	r3, r2
 800097c:	e7a4      	b.n	80008c8 <__udivmoddi4+0x1f0>
 800097e:	4660      	mov	r0, ip
 8000980:	e7e9      	b.n	8000956 <__udivmoddi4+0x27e>
 8000982:	4618      	mov	r0, r3
 8000984:	e795      	b.n	80008b2 <__udivmoddi4+0x1da>
 8000986:	4667      	mov	r7, ip
 8000988:	e7d1      	b.n	800092e <__udivmoddi4+0x256>
 800098a:	4681      	mov	r9, r0
 800098c:	e77c      	b.n	8000888 <__udivmoddi4+0x1b0>
 800098e:	3802      	subs	r0, #2
 8000990:	442c      	add	r4, r5
 8000992:	e747      	b.n	8000824 <__udivmoddi4+0x14c>
 8000994:	f1ac 0c02 	sub.w	ip, ip, #2
 8000998:	442b      	add	r3, r5
 800099a:	e72f      	b.n	80007fc <__udivmoddi4+0x124>
 800099c:	4638      	mov	r0, r7
 800099e:	e708      	b.n	80007b2 <__udivmoddi4+0xda>
 80009a0:	4637      	mov	r7, r6
 80009a2:	e6e9      	b.n	8000778 <__udivmoddi4+0xa0>

080009a4 <__aeabi_idiv0>:
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop

080009a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009aa:	b083      	sub	sp, #12
 80009ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009ae:	f001 fa1f 	bl	8001df0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009b2:	f000 fc2f 	bl	8001214 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009b6:	f000 fe19 	bl	80015ec <MX_GPIO_Init>
  MX_DMA_Init();
 80009ba:	f000 fdf7 	bl	80015ac <MX_DMA_Init>
  MX_USART2_UART_Init();
 80009be:	f000 fdcb 	bl	8001558 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 80009c2:	f000 fcfd 	bl	80013c0 <MX_SPI3_Init>
  MX_ADC1_Init();
 80009c6:	f000 fca9 	bl	800131c <MX_ADC1_Init>
  MX_TIM3_Init();
 80009ca:	f000 fd31 	bl	8001430 <MX_TIM3_Init>
  MX_TIM11_Init();
 80009ce:	f000 fd7b 	bl	80014c8 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim3);
 80009d2:	48b1      	ldr	r0, [pc, #708]	; (8000c98 <main+0x2f0>)
 80009d4:	f003 fee3 	bl	800479e <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim11);
 80009d8:	48b0      	ldr	r0, [pc, #704]	; (8000c9c <main+0x2f4>)
 80009da:	f003 ff04 	bl	80047e6 <HAL_TIM_Base_Start_IT>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &ADCin, 1);
 80009de:	2201      	movs	r2, #1
 80009e0:	49af      	ldr	r1, [pc, #700]	; (8000ca0 <main+0x2f8>)
 80009e2:	48b0      	ldr	r0, [pc, #704]	; (8000ca4 <main+0x2fc>)
 80009e4:	f001 fbfa 	bl	80021dc <HAL_ADC_Start_DMA>

	HAL_GPIO_WritePin(LOAD_GPIO_Port, LOAD_Pin, GPIO_PIN_RESET);
 80009e8:	2200      	movs	r2, #0
 80009ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009ee:	48ae      	ldr	r0, [pc, #696]	; (8000ca8 <main+0x300>)
 80009f0:	f002 fde6 	bl	80035c0 <HAL_GPIO_WritePin>
//			x+=0.0001;
//			m=-1*(high-low)/period;
//            if(dataOut<=low){dataOut=high;x=0;}
//            else{dataOut=high+(m*x);}
//		    }
			HAL_UART_Receive_IT(&huart2,  (uint8_t*)RxDataBuffer, 32);
 80009f4:	2220      	movs	r2, #32
 80009f6:	49ad      	ldr	r1, [pc, #692]	; (8000cac <main+0x304>)
 80009f8:	48ad      	ldr	r0, [pc, #692]	; (8000cb0 <main+0x308>)
 80009fa:	f004 fd71 	bl	80054e0 <HAL_UART_Receive_IT>
			int16_t inputchar = UARTRecieveIT();
 80009fe:	f000 febb 	bl	8001778 <UARTRecieveIT>
 8000a02:	4603      	mov	r3, r0
 8000a04:	80fb      	strh	r3, [r7, #6]

			switch(state)
 8000a06:	4bab      	ldr	r3, [pc, #684]	; (8000cb4 <main+0x30c>)
 8000a08:	881b      	ldrh	r3, [r3, #0]
 8000a0a:	2b09      	cmp	r3, #9
 8000a0c:	f200 82cc 	bhi.w	8000fa8 <main+0x600>
 8000a10:	a201      	add	r2, pc, #4	; (adr r2, 8000a18 <main+0x70>)
 8000a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a16:	bf00      	nop
 8000a18:	08000a41 	.word	0x08000a41
 8000a1c:	08000a49 	.word	0x08000a49
 8000a20:	08000aa5 	.word	0x08000aa5
 8000a24:	08000fa9 	.word	0x08000fa9
 8000a28:	08000fa9 	.word	0x08000fa9
 8000a2c:	08000fa9 	.word	0x08000fa9
 8000a30:	08000b4f 	.word	0x08000b4f
 8000a34:	08000c53 	.word	0x08000c53
 8000a38:	08000fa9 	.word	0x08000fa9
 8000a3c:	08000b21 	.word	0x08000b21
			{case start :
			  state = menu;
 8000a40:	4b9c      	ldr	r3, [pc, #624]	; (8000cb4 <main+0x30c>)
 8000a42:	2201      	movs	r2, #1
 8000a44:	801a      	strh	r2, [r3, #0]
			break;
 8000a46:	e2af      	b.n	8000fa8 <main+0x600>
			case menu:
			  sprintf(TxDataBuffer,"\r\n WAVE select \r\n 0=sawtooth ");
 8000a48:	4a9b      	ldr	r2, [pc, #620]	; (8000cb8 <main+0x310>)
 8000a4a:	4b9c      	ldr	r3, [pc, #624]	; (8000cbc <main+0x314>)
 8000a4c:	4614      	mov	r4, r2
 8000a4e:	461d      	mov	r5, r3
 8000a50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a54:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000a58:	c407      	stmia	r4!, {r0, r1, r2}
 8000a5a:	8023      	strh	r3, [r4, #0]
			  HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000a5c:	4896      	ldr	r0, [pc, #600]	; (8000cb8 <main+0x310>)
 8000a5e:	f7ff fbbf 	bl	80001e0 <strlen>
 8000a62:	4603      	mov	r3, r0
 8000a64:	b29a      	uxth	r2, r3
 8000a66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a6a:	4993      	ldr	r1, [pc, #588]	; (8000cb8 <main+0x310>)
 8000a6c:	4890      	ldr	r0, [pc, #576]	; (8000cb0 <main+0x308>)
 8000a6e:	f004 fc9e 	bl	80053ae <HAL_UART_Transmit>
			  sprintf(TxDataBuffer,"\r\n 1=sine wave \r\n 2=square wave");
 8000a72:	4a91      	ldr	r2, [pc, #580]	; (8000cb8 <main+0x310>)
 8000a74:	4b92      	ldr	r3, [pc, #584]	; (8000cc0 <main+0x318>)
 8000a76:	4614      	mov	r4, r2
 8000a78:	461d      	mov	r5, r3
 8000a7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a7e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000a82:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			  HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000a86:	488c      	ldr	r0, [pc, #560]	; (8000cb8 <main+0x310>)
 8000a88:	f7ff fbaa 	bl	80001e0 <strlen>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	b29a      	uxth	r2, r3
 8000a90:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a94:	4988      	ldr	r1, [pc, #544]	; (8000cb8 <main+0x310>)
 8000a96:	4886      	ldr	r0, [pc, #536]	; (8000cb0 <main+0x308>)
 8000a98:	f004 fc89 	bl	80053ae <HAL_UART_Transmit>
			  state = waitmenu;
 8000a9c:	4b85      	ldr	r3, [pc, #532]	; (8000cb4 <main+0x30c>)
 8000a9e:	2202      	movs	r2, #2
 8000aa0:	801a      	strh	r2, [r3, #0]
			 break;
 8000aa2:	e281      	b.n	8000fa8 <main+0x600>
			case waitmenu:
				if(inputchar!=-1)
 8000aa4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000aac:	f000 8277 	beq.w	8000f9e <main+0x5f6>
				{if(inputchar=='0')
 8000ab0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ab4:	2b30      	cmp	r3, #48	; 0x30
 8000ab6:	d103      	bne.n	8000ac0 <main+0x118>
				{state = saw_menu;}
 8000ab8:	4b7e      	ldr	r3, [pc, #504]	; (8000cb4 <main+0x30c>)
 8000aba:	2206      	movs	r2, #6
 8000abc:	801a      	strh	r2, [r3, #0]
				else if(inputchar=='2')
				 {state = square_menu;}
				else if (inputchar!='0'|inputchar!='1'|inputchar!='2' )
				{state =X1;}
				}
			break;
 8000abe:	e26e      	b.n	8000f9e <main+0x5f6>
				else if(inputchar=='1')
 8000ac0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ac4:	2b31      	cmp	r3, #49	; 0x31
 8000ac6:	d103      	bne.n	8000ad0 <main+0x128>
				 {state = sin_menu;}
 8000ac8:	4b7a      	ldr	r3, [pc, #488]	; (8000cb4 <main+0x30c>)
 8000aca:	2208      	movs	r2, #8
 8000acc:	801a      	strh	r2, [r3, #0]
			break;
 8000ace:	e266      	b.n	8000f9e <main+0x5f6>
				else if(inputchar=='2')
 8000ad0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ad4:	2b32      	cmp	r3, #50	; 0x32
 8000ad6:	d103      	bne.n	8000ae0 <main+0x138>
				 {state = square_menu;}
 8000ad8:	4b76      	ldr	r3, [pc, #472]	; (8000cb4 <main+0x30c>)
 8000ada:	2205      	movs	r2, #5
 8000adc:	801a      	strh	r2, [r3, #0]
			break;
 8000ade:	e25e      	b.n	8000f9e <main+0x5f6>
				else if (inputchar!='0'|inputchar!='1'|inputchar!='2' )
 8000ae0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ae4:	2b30      	cmp	r3, #48	; 0x30
 8000ae6:	bf14      	ite	ne
 8000ae8:	2301      	movne	r3, #1
 8000aea:	2300      	moveq	r3, #0
 8000aec:	b2da      	uxtb	r2, r3
 8000aee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000af2:	2b31      	cmp	r3, #49	; 0x31
 8000af4:	bf14      	ite	ne
 8000af6:	2301      	movne	r3, #1
 8000af8:	2300      	moveq	r3, #0
 8000afa:	b2db      	uxtb	r3, r3
 8000afc:	4313      	orrs	r3, r2
 8000afe:	b2db      	uxtb	r3, r3
 8000b00:	461a      	mov	r2, r3
 8000b02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b06:	2b32      	cmp	r3, #50	; 0x32
 8000b08:	bf14      	ite	ne
 8000b0a:	2301      	movne	r3, #1
 8000b0c:	2300      	moveq	r3, #0
 8000b0e:	b2db      	uxtb	r3, r3
 8000b10:	4313      	orrs	r3, r2
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	f000 8243 	beq.w	8000f9e <main+0x5f6>
				{state =X1;}
 8000b18:	4b66      	ldr	r3, [pc, #408]	; (8000cb4 <main+0x30c>)
 8000b1a:	2209      	movs	r2, #9
 8000b1c:	801a      	strh	r2, [r3, #0]
			break;
 8000b1e:	e23e      	b.n	8000f9e <main+0x5f6>
			case X1:
				sprintf(TxDataBuffer,"\r\n error\r\n");
 8000b20:	4b65      	ldr	r3, [pc, #404]	; (8000cb8 <main+0x310>)
 8000b22:	4a68      	ldr	r2, [pc, #416]	; (8000cc4 <main+0x31c>)
 8000b24:	ca07      	ldmia	r2, {r0, r1, r2}
 8000b26:	c303      	stmia	r3!, {r0, r1}
 8000b28:	801a      	strh	r2, [r3, #0]
 8000b2a:	3302      	adds	r3, #2
 8000b2c:	0c12      	lsrs	r2, r2, #16
 8000b2e:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000b30:	4861      	ldr	r0, [pc, #388]	; (8000cb8 <main+0x310>)
 8000b32:	f7ff fb55 	bl	80001e0 <strlen>
 8000b36:	4603      	mov	r3, r0
 8000b38:	b29a      	uxth	r2, r3
 8000b3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b3e:	495e      	ldr	r1, [pc, #376]	; (8000cb8 <main+0x310>)
 8000b40:	485b      	ldr	r0, [pc, #364]	; (8000cb0 <main+0x308>)
 8000b42:	f004 fc34 	bl	80053ae <HAL_UART_Transmit>
				state=waitmenu;
 8000b46:	4b5b      	ldr	r3, [pc, #364]	; (8000cb4 <main+0x30c>)
 8000b48:	2202      	movs	r2, #2
 8000b4a:	801a      	strh	r2, [r3, #0]
			break;
 8000b4c:	e22c      	b.n	8000fa8 <main+0x600>
			case saw_menu:
				sprintf(TxDataBuffer,"\r\n SAWTOOTH \r\n ");
 8000b4e:	4a5a      	ldr	r2, [pc, #360]	; (8000cb8 <main+0x310>)
 8000b50:	4b5d      	ldr	r3, [pc, #372]	; (8000cc8 <main+0x320>)
 8000b52:	4614      	mov	r4, r2
 8000b54:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b56:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
				HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000b5a:	4857      	ldr	r0, [pc, #348]	; (8000cb8 <main+0x310>)
 8000b5c:	f7ff fb40 	bl	80001e0 <strlen>
 8000b60:	4603      	mov	r3, r0
 8000b62:	b29a      	uxth	r2, r3
 8000b64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b68:	4953      	ldr	r1, [pc, #332]	; (8000cb8 <main+0x310>)
 8000b6a:	4851      	ldr	r0, [pc, #324]	; (8000cb0 <main+0x308>)
 8000b6c:	f004 fc1f 	bl	80053ae <HAL_UART_Transmit>
				sprintf(TxDataBuffer,"\r\n a=+0.1hz\r\n s=-0.1hz");HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000b70:	4a51      	ldr	r2, [pc, #324]	; (8000cb8 <main+0x310>)
 8000b72:	4b56      	ldr	r3, [pc, #344]	; (8000ccc <main+0x324>)
 8000b74:	4614      	mov	r4, r2
 8000b76:	461d      	mov	r5, r3
 8000b78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b7c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000b80:	6020      	str	r0, [r4, #0]
 8000b82:	3404      	adds	r4, #4
 8000b84:	8021      	strh	r1, [r4, #0]
 8000b86:	3402      	adds	r4, #2
 8000b88:	0c0b      	lsrs	r3, r1, #16
 8000b8a:	7023      	strb	r3, [r4, #0]
 8000b8c:	484a      	ldr	r0, [pc, #296]	; (8000cb8 <main+0x310>)
 8000b8e:	f7ff fb27 	bl	80001e0 <strlen>
 8000b92:	4603      	mov	r3, r0
 8000b94:	b29a      	uxth	r2, r3
 8000b96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b9a:	4947      	ldr	r1, [pc, #284]	; (8000cb8 <main+0x310>)
 8000b9c:	4844      	ldr	r0, [pc, #272]	; (8000cb0 <main+0x308>)
 8000b9e:	f004 fc06 	bl	80053ae <HAL_UART_Transmit>
				sprintf(TxDataBuffer,"\r\n d=+0.1V high \r\n f=-0.1V high \r\n");HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000ba2:	4a45      	ldr	r2, [pc, #276]	; (8000cb8 <main+0x310>)
 8000ba4:	4b4a      	ldr	r3, [pc, #296]	; (8000cd0 <main+0x328>)
 8000ba6:	4614      	mov	r4, r2
 8000ba8:	461d      	mov	r5, r3
 8000baa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bb0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bb2:	682b      	ldr	r3, [r5, #0]
 8000bb4:	461a      	mov	r2, r3
 8000bb6:	8022      	strh	r2, [r4, #0]
 8000bb8:	3402      	adds	r4, #2
 8000bba:	0c1b      	lsrs	r3, r3, #16
 8000bbc:	7023      	strb	r3, [r4, #0]
 8000bbe:	483e      	ldr	r0, [pc, #248]	; (8000cb8 <main+0x310>)
 8000bc0:	f7ff fb0e 	bl	80001e0 <strlen>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	b29a      	uxth	r2, r3
 8000bc8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bcc:	493a      	ldr	r1, [pc, #232]	; (8000cb8 <main+0x310>)
 8000bce:	4838      	ldr	r0, [pc, #224]	; (8000cb0 <main+0x308>)
 8000bd0:	f004 fbed 	bl	80053ae <HAL_UART_Transmit>
				sprintf(TxDataBuffer,"\r\n q=+0.1V low \r\n w=-0.1V low \r\n");HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000bd4:	4a38      	ldr	r2, [pc, #224]	; (8000cb8 <main+0x310>)
 8000bd6:	4b3f      	ldr	r3, [pc, #252]	; (8000cd4 <main+0x32c>)
 8000bd8:	4614      	mov	r4, r2
 8000bda:	461d      	mov	r5, r3
 8000bdc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000be0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000be2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000be4:	682b      	ldr	r3, [r5, #0]
 8000be6:	7023      	strb	r3, [r4, #0]
 8000be8:	4833      	ldr	r0, [pc, #204]	; (8000cb8 <main+0x310>)
 8000bea:	f7ff faf9 	bl	80001e0 <strlen>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	b29a      	uxth	r2, r3
 8000bf2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bf6:	4930      	ldr	r1, [pc, #192]	; (8000cb8 <main+0x310>)
 8000bf8:	482d      	ldr	r0, [pc, #180]	; (8000cb0 <main+0x308>)
 8000bfa:	f004 fbd8 	bl	80053ae <HAL_UART_Transmit>
				sprintf(TxDataBuffer,"\r\n e=slope up \r\n r=slope down \r\n");HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000bfe:	4a2e      	ldr	r2, [pc, #184]	; (8000cb8 <main+0x310>)
 8000c00:	4b35      	ldr	r3, [pc, #212]	; (8000cd8 <main+0x330>)
 8000c02:	4614      	mov	r4, r2
 8000c04:	461d      	mov	r5, r3
 8000c06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c0e:	682b      	ldr	r3, [r5, #0]
 8000c10:	7023      	strb	r3, [r4, #0]
 8000c12:	4829      	ldr	r0, [pc, #164]	; (8000cb8 <main+0x310>)
 8000c14:	f7ff fae4 	bl	80001e0 <strlen>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	b29a      	uxth	r2, r3
 8000c1c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c20:	4925      	ldr	r1, [pc, #148]	; (8000cb8 <main+0x310>)
 8000c22:	4823      	ldr	r0, [pc, #140]	; (8000cb0 <main+0x308>)
 8000c24:	f004 fbc3 	bl	80053ae <HAL_UART_Transmit>
				sprintf(TxDataBuffer,"\r\n x=back \r\n ");HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000c28:	4a23      	ldr	r2, [pc, #140]	; (8000cb8 <main+0x310>)
 8000c2a:	4b2c      	ldr	r3, [pc, #176]	; (8000cdc <main+0x334>)
 8000c2c:	4614      	mov	r4, r2
 8000c2e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c30:	c407      	stmia	r4!, {r0, r1, r2}
 8000c32:	8023      	strh	r3, [r4, #0]
 8000c34:	4820      	ldr	r0, [pc, #128]	; (8000cb8 <main+0x310>)
 8000c36:	f7ff fad3 	bl	80001e0 <strlen>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	b29a      	uxth	r2, r3
 8000c3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c42:	491d      	ldr	r1, [pc, #116]	; (8000cb8 <main+0x310>)
 8000c44:	481a      	ldr	r0, [pc, #104]	; (8000cb0 <main+0x308>)
 8000c46:	f004 fbb2 	bl	80053ae <HAL_UART_Transmit>
				state=waitsaw;
 8000c4a:	4b1a      	ldr	r3, [pc, #104]	; (8000cb4 <main+0x30c>)
 8000c4c:	2207      	movs	r2, #7
 8000c4e:	801a      	strh	r2, [r3, #0]
			break;
 8000c50:	e1aa      	b.n	8000fa8 <main+0x600>
			case waitsaw:
				if(inputchar!=-1)
 8000c52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c5a:	f000 81a2 	beq.w	8000fa2 <main+0x5fa>
				{if(inputchar=='a')
 8000c5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c62:	2b61      	cmp	r3, #97	; 0x61
 8000c64:	d13e      	bne.n	8000ce4 <main+0x33c>
				 {fq_saw+=0.1;}
 8000c66:	4b1e      	ldr	r3, [pc, #120]	; (8000ce0 <main+0x338>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f7ff fc74 	bl	8000558 <__aeabi_f2d>
 8000c70:	a307      	add	r3, pc, #28	; (adr r3, 8000c90 <main+0x2e8>)
 8000c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c76:	f7ff fb11 	bl	800029c <__adddf3>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	460c      	mov	r4, r1
 8000c7e:	4618      	mov	r0, r3
 8000c80:	4621      	mov	r1, r4
 8000c82:	f7ff fcc1 	bl	8000608 <__aeabi_d2f>
 8000c86:	4602      	mov	r2, r0
 8000c88:	4b15      	ldr	r3, [pc, #84]	; (8000ce0 <main+0x338>)
 8000c8a:	601a      	str	r2, [r3, #0]

				}
				else if(inputchar=='x')
				{state=menu;}
				}
			break;
 8000c8c:	e189      	b.n	8000fa2 <main+0x5fa>
 8000c8e:	bf00      	nop
 8000c90:	9999999a 	.word	0x9999999a
 8000c94:	3fb99999 	.word	0x3fb99999
 8000c98:	20000118 	.word	0x20000118
 8000c9c:	200001f8 	.word	0x200001f8
 8000ca0:	2000009c 	.word	0x2000009c
 8000ca4:	200001b0 	.word	0x200001b0
 8000ca8:	40020000 	.word	0x40020000
 8000cac:	200000dc 	.word	0x200000dc
 8000cb0:	20000298 	.word	0x20000298
 8000cb4:	200000fc 	.word	0x200000fc
 8000cb8:	200000bc 	.word	0x200000bc
 8000cbc:	08006a0c 	.word	0x08006a0c
 8000cc0:	08006a2c 	.word	0x08006a2c
 8000cc4:	08006a4c 	.word	0x08006a4c
 8000cc8:	08006a58 	.word	0x08006a58
 8000ccc:	08006a68 	.word	0x08006a68
 8000cd0:	08006a80 	.word	0x08006a80
 8000cd4:	08006aa4 	.word	0x08006aa4
 8000cd8:	08006ac8 	.word	0x08006ac8
 8000cdc:	08006aec 	.word	0x08006aec
 8000ce0:	20000004 	.word	0x20000004
				else if(inputchar=='s')
 8000ce4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ce8:	2b73      	cmp	r3, #115	; 0x73
 8000cea:	d113      	bne.n	8000d14 <main+0x36c>
				 {fq_saw-=0.1;}
 8000cec:	4bb6      	ldr	r3, [pc, #728]	; (8000fc8 <main+0x620>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff fc31 	bl	8000558 <__aeabi_f2d>
 8000cf6:	a3b0      	add	r3, pc, #704	; (adr r3, 8000fb8 <main+0x610>)
 8000cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cfc:	f7ff facc 	bl	8000298 <__aeabi_dsub>
 8000d00:	4603      	mov	r3, r0
 8000d02:	460c      	mov	r4, r1
 8000d04:	4618      	mov	r0, r3
 8000d06:	4621      	mov	r1, r4
 8000d08:	f7ff fc7e 	bl	8000608 <__aeabi_d2f>
 8000d0c:	4602      	mov	r2, r0
 8000d0e:	4bae      	ldr	r3, [pc, #696]	; (8000fc8 <main+0x620>)
 8000d10:	601a      	str	r2, [r3, #0]
			break;
 8000d12:	e146      	b.n	8000fa2 <main+0x5fa>
				else if(inputchar=='d')
 8000d14:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d18:	2b64      	cmp	r3, #100	; 0x64
 8000d1a:	d113      	bne.n	8000d44 <main+0x39c>
				 {high_saw+=0.1;}
 8000d1c:	4bab      	ldr	r3, [pc, #684]	; (8000fcc <main+0x624>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4618      	mov	r0, r3
 8000d22:	f7ff fc19 	bl	8000558 <__aeabi_f2d>
 8000d26:	a3a4      	add	r3, pc, #656	; (adr r3, 8000fb8 <main+0x610>)
 8000d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d2c:	f7ff fab6 	bl	800029c <__adddf3>
 8000d30:	4603      	mov	r3, r0
 8000d32:	460c      	mov	r4, r1
 8000d34:	4618      	mov	r0, r3
 8000d36:	4621      	mov	r1, r4
 8000d38:	f7ff fc66 	bl	8000608 <__aeabi_d2f>
 8000d3c:	4602      	mov	r2, r0
 8000d3e:	4ba3      	ldr	r3, [pc, #652]	; (8000fcc <main+0x624>)
 8000d40:	601a      	str	r2, [r3, #0]
			break;
 8000d42:	e12e      	b.n	8000fa2 <main+0x5fa>
				else if (inputchar=='f')
 8000d44:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d48:	2b66      	cmp	r3, #102	; 0x66
 8000d4a:	d113      	bne.n	8000d74 <main+0x3cc>
				{high_saw-=0.1;}
 8000d4c:	4b9f      	ldr	r3, [pc, #636]	; (8000fcc <main+0x624>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4618      	mov	r0, r3
 8000d52:	f7ff fc01 	bl	8000558 <__aeabi_f2d>
 8000d56:	a398      	add	r3, pc, #608	; (adr r3, 8000fb8 <main+0x610>)
 8000d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d5c:	f7ff fa9c 	bl	8000298 <__aeabi_dsub>
 8000d60:	4603      	mov	r3, r0
 8000d62:	460c      	mov	r4, r1
 8000d64:	4618      	mov	r0, r3
 8000d66:	4621      	mov	r1, r4
 8000d68:	f7ff fc4e 	bl	8000608 <__aeabi_d2f>
 8000d6c:	4602      	mov	r2, r0
 8000d6e:	4b97      	ldr	r3, [pc, #604]	; (8000fcc <main+0x624>)
 8000d70:	601a      	str	r2, [r3, #0]
			break;
 8000d72:	e116      	b.n	8000fa2 <main+0x5fa>
				else if(inputchar=='q')
 8000d74:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d78:	2b71      	cmp	r3, #113	; 0x71
 8000d7a:	d113      	bne.n	8000da4 <main+0x3fc>
			    {low_saw+=0.1;}
 8000d7c:	4b94      	ldr	r3, [pc, #592]	; (8000fd0 <main+0x628>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4618      	mov	r0, r3
 8000d82:	f7ff fbe9 	bl	8000558 <__aeabi_f2d>
 8000d86:	a38c      	add	r3, pc, #560	; (adr r3, 8000fb8 <main+0x610>)
 8000d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d8c:	f7ff fa86 	bl	800029c <__adddf3>
 8000d90:	4603      	mov	r3, r0
 8000d92:	460c      	mov	r4, r1
 8000d94:	4618      	mov	r0, r3
 8000d96:	4621      	mov	r1, r4
 8000d98:	f7ff fc36 	bl	8000608 <__aeabi_d2f>
 8000d9c:	4602      	mov	r2, r0
 8000d9e:	4b8c      	ldr	r3, [pc, #560]	; (8000fd0 <main+0x628>)
 8000da0:	601a      	str	r2, [r3, #0]
			break;
 8000da2:	e0fe      	b.n	8000fa2 <main+0x5fa>
				else if(inputchar=='w')
 8000da4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000da8:	2b77      	cmp	r3, #119	; 0x77
 8000daa:	d113      	bne.n	8000dd4 <main+0x42c>
				{low_saw-=0.1;}
 8000dac:	4b88      	ldr	r3, [pc, #544]	; (8000fd0 <main+0x628>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4618      	mov	r0, r3
 8000db2:	f7ff fbd1 	bl	8000558 <__aeabi_f2d>
 8000db6:	a380      	add	r3, pc, #512	; (adr r3, 8000fb8 <main+0x610>)
 8000db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dbc:	f7ff fa6c 	bl	8000298 <__aeabi_dsub>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	460c      	mov	r4, r1
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	4621      	mov	r1, r4
 8000dc8:	f7ff fc1e 	bl	8000608 <__aeabi_d2f>
 8000dcc:	4602      	mov	r2, r0
 8000dce:	4b80      	ldr	r3, [pc, #512]	; (8000fd0 <main+0x628>)
 8000dd0:	601a      	str	r2, [r3, #0]
			break;
 8000dd2:	e0e6      	b.n	8000fa2 <main+0x5fa>
				else if(inputchar=='e')
 8000dd4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000dd8:	2b65      	cmp	r3, #101	; 0x65
 8000dda:	d169      	bne.n	8000eb0 <main+0x508>
				if (micros() - timestamp > 100)
 8000ddc:	f000 fd4a 	bl	8001874 <micros>
 8000de0:	460a      	mov	r2, r1
 8000de2:	4601      	mov	r1, r0
 8000de4:	4b7b      	ldr	r3, [pc, #492]	; (8000fd4 <main+0x62c>)
 8000de6:	e9d3 5600 	ldrd	r5, r6, [r3]
 8000dea:	460b      	mov	r3, r1
 8000dec:	4614      	mov	r4, r2
 8000dee:	1b5b      	subs	r3, r3, r5
 8000df0:	eb64 0406 	sbc.w	r4, r4, r6
 8000df4:	2c00      	cmp	r4, #0
 8000df6:	bf08      	it	eq
 8000df8:	2b65      	cmpeq	r3, #101	; 0x65
 8000dfa:	f0c0 80d2 	bcc.w	8000fa2 <main+0x5fa>
				{timestamp = micros();
 8000dfe:	f000 fd39 	bl	8001874 <micros>
 8000e02:	4603      	mov	r3, r0
 8000e04:	460c      	mov	r4, r1
 8000e06:	4a73      	ldr	r2, [pc, #460]	; (8000fd4 <main+0x62c>)
 8000e08:	e9c2 3400 	strd	r3, r4, [r2]
				period = 1/fq_saw;                    //sawtooth
 8000e0c:	4b6e      	ldr	r3, [pc, #440]	; (8000fc8 <main+0x620>)
 8000e0e:	ed93 7a00 	vldr	s14, [r3]
 8000e12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000e16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e1a:	4b6f      	ldr	r3, [pc, #444]	; (8000fd8 <main+0x630>)
 8000e1c:	edc3 7a00 	vstr	s15, [r3]
				x+=0.0001;
 8000e20:	4b6e      	ldr	r3, [pc, #440]	; (8000fdc <main+0x634>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4618      	mov	r0, r3
 8000e26:	f7ff fb97 	bl	8000558 <__aeabi_f2d>
 8000e2a:	a365      	add	r3, pc, #404	; (adr r3, 8000fc0 <main+0x618>)
 8000e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e30:	f7ff fa34 	bl	800029c <__adddf3>
 8000e34:	4603      	mov	r3, r0
 8000e36:	460c      	mov	r4, r1
 8000e38:	4618      	mov	r0, r3
 8000e3a:	4621      	mov	r1, r4
 8000e3c:	f7ff fbe4 	bl	8000608 <__aeabi_d2f>
 8000e40:	4602      	mov	r2, r0
 8000e42:	4b66      	ldr	r3, [pc, #408]	; (8000fdc <main+0x634>)
 8000e44:	601a      	str	r2, [r3, #0]
				m=(high_saw-low_saw)/period;
 8000e46:	4b61      	ldr	r3, [pc, #388]	; (8000fcc <main+0x624>)
 8000e48:	ed93 7a00 	vldr	s14, [r3]
 8000e4c:	4b60      	ldr	r3, [pc, #384]	; (8000fd0 <main+0x628>)
 8000e4e:	edd3 7a00 	vldr	s15, [r3]
 8000e52:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000e56:	4b60      	ldr	r3, [pc, #384]	; (8000fd8 <main+0x630>)
 8000e58:	ed93 7a00 	vldr	s14, [r3]
 8000e5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e60:	4b5f      	ldr	r3, [pc, #380]	; (8000fe0 <main+0x638>)
 8000e62:	edc3 7a00 	vstr	s15, [r3]
				if(m*x<=high_saw)
 8000e66:	4b5e      	ldr	r3, [pc, #376]	; (8000fe0 <main+0x638>)
 8000e68:	ed93 7a00 	vldr	s14, [r3]
 8000e6c:	4b5b      	ldr	r3, [pc, #364]	; (8000fdc <main+0x634>)
 8000e6e:	edd3 7a00 	vldr	s15, [r3]
 8000e72:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000e76:	4b55      	ldr	r3, [pc, #340]	; (8000fcc <main+0x624>)
 8000e78:	edd3 7a00 	vldr	s15, [r3]
 8000e7c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000e80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e84:	d80b      	bhi.n	8000e9e <main+0x4f6>
				{dataOut=m*x;}
 8000e86:	4b56      	ldr	r3, [pc, #344]	; (8000fe0 <main+0x638>)
 8000e88:	ed93 7a00 	vldr	s14, [r3]
 8000e8c:	4b53      	ldr	r3, [pc, #332]	; (8000fdc <main+0x634>)
 8000e8e:	edd3 7a00 	vldr	s15, [r3]
 8000e92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e96:	4b53      	ldr	r3, [pc, #332]	; (8000fe4 <main+0x63c>)
 8000e98:	edc3 7a00 	vstr	s15, [r3]
			break;
 8000e9c:	e081      	b.n	8000fa2 <main+0x5fa>
				else{dataOut=low_saw;x=0;}
 8000e9e:	4b4c      	ldr	r3, [pc, #304]	; (8000fd0 <main+0x628>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	4a50      	ldr	r2, [pc, #320]	; (8000fe4 <main+0x63c>)
 8000ea4:	6013      	str	r3, [r2, #0]
 8000ea6:	4b4d      	ldr	r3, [pc, #308]	; (8000fdc <main+0x634>)
 8000ea8:	f04f 0200 	mov.w	r2, #0
 8000eac:	601a      	str	r2, [r3, #0]
			break;
 8000eae:	e078      	b.n	8000fa2 <main+0x5fa>
				else if(inputchar=='r')
 8000eb0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000eb4:	2b72      	cmp	r3, #114	; 0x72
 8000eb6:	d16a      	bne.n	8000f8e <main+0x5e6>
				if (micros() - timestamp > 100)
 8000eb8:	f000 fcdc 	bl	8001874 <micros>
 8000ebc:	460a      	mov	r2, r1
 8000ebe:	4601      	mov	r1, r0
 8000ec0:	4b44      	ldr	r3, [pc, #272]	; (8000fd4 <main+0x62c>)
 8000ec2:	e9d3 5600 	ldrd	r5, r6, [r3]
 8000ec6:	460b      	mov	r3, r1
 8000ec8:	4614      	mov	r4, r2
 8000eca:	1b5b      	subs	r3, r3, r5
 8000ecc:	eb64 0406 	sbc.w	r4, r4, r6
 8000ed0:	2c00      	cmp	r4, #0
 8000ed2:	bf08      	it	eq
 8000ed4:	2b65      	cmpeq	r3, #101	; 0x65
 8000ed6:	d366      	bcc.n	8000fa6 <main+0x5fe>
				{timestamp = micros();
 8000ed8:	f000 fccc 	bl	8001874 <micros>
 8000edc:	4603      	mov	r3, r0
 8000ede:	460c      	mov	r4, r1
 8000ee0:	4a3c      	ldr	r2, [pc, #240]	; (8000fd4 <main+0x62c>)
 8000ee2:	e9c2 3400 	strd	r3, r4, [r2]
				period=1/fq_saw; 							//invese sawtooth
 8000ee6:	4b38      	ldr	r3, [pc, #224]	; (8000fc8 <main+0x620>)
 8000ee8:	ed93 7a00 	vldr	s14, [r3]
 8000eec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000ef0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ef4:	4b38      	ldr	r3, [pc, #224]	; (8000fd8 <main+0x630>)
 8000ef6:	edc3 7a00 	vstr	s15, [r3]
				x+=0.0001;
 8000efa:	4b38      	ldr	r3, [pc, #224]	; (8000fdc <main+0x634>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4618      	mov	r0, r3
 8000f00:	f7ff fb2a 	bl	8000558 <__aeabi_f2d>
 8000f04:	a32e      	add	r3, pc, #184	; (adr r3, 8000fc0 <main+0x618>)
 8000f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f0a:	f7ff f9c7 	bl	800029c <__adddf3>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	460c      	mov	r4, r1
 8000f12:	4618      	mov	r0, r3
 8000f14:	4621      	mov	r1, r4
 8000f16:	f7ff fb77 	bl	8000608 <__aeabi_d2f>
 8000f1a:	4602      	mov	r2, r0
 8000f1c:	4b2f      	ldr	r3, [pc, #188]	; (8000fdc <main+0x634>)
 8000f1e:	601a      	str	r2, [r3, #0]
				m=-1*(high_saw-low_saw)/period;
 8000f20:	4b2a      	ldr	r3, [pc, #168]	; (8000fcc <main+0x624>)
 8000f22:	ed93 7a00 	vldr	s14, [r3]
 8000f26:	4b2a      	ldr	r3, [pc, #168]	; (8000fd0 <main+0x628>)
 8000f28:	edd3 7a00 	vldr	s15, [r3]
 8000f2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f30:	eef1 6a67 	vneg.f32	s13, s15
 8000f34:	4b28      	ldr	r3, [pc, #160]	; (8000fd8 <main+0x630>)
 8000f36:	ed93 7a00 	vldr	s14, [r3]
 8000f3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f3e:	4b28      	ldr	r3, [pc, #160]	; (8000fe0 <main+0x638>)
 8000f40:	edc3 7a00 	vstr	s15, [r3]
				if(dataOut<=low_saw){dataOut=high_saw;x=0;}
 8000f44:	4b27      	ldr	r3, [pc, #156]	; (8000fe4 <main+0x63c>)
 8000f46:	ed93 7a00 	vldr	s14, [r3]
 8000f4a:	4b21      	ldr	r3, [pc, #132]	; (8000fd0 <main+0x628>)
 8000f4c:	edd3 7a00 	vldr	s15, [r3]
 8000f50:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f58:	d808      	bhi.n	8000f6c <main+0x5c4>
 8000f5a:	4b1c      	ldr	r3, [pc, #112]	; (8000fcc <main+0x624>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4a21      	ldr	r2, [pc, #132]	; (8000fe4 <main+0x63c>)
 8000f60:	6013      	str	r3, [r2, #0]
 8000f62:	4b1e      	ldr	r3, [pc, #120]	; (8000fdc <main+0x634>)
 8000f64:	f04f 0200 	mov.w	r2, #0
 8000f68:	601a      	str	r2, [r3, #0]
				break;
 8000f6a:	e01c      	b.n	8000fa6 <main+0x5fe>
				else{dataOut=high_saw+(m*x);}
 8000f6c:	4b1c      	ldr	r3, [pc, #112]	; (8000fe0 <main+0x638>)
 8000f6e:	ed93 7a00 	vldr	s14, [r3]
 8000f72:	4b1a      	ldr	r3, [pc, #104]	; (8000fdc <main+0x634>)
 8000f74:	edd3 7a00 	vldr	s15, [r3]
 8000f78:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f7c:	4b13      	ldr	r3, [pc, #76]	; (8000fcc <main+0x624>)
 8000f7e:	edd3 7a00 	vldr	s15, [r3]
 8000f82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f86:	4b17      	ldr	r3, [pc, #92]	; (8000fe4 <main+0x63c>)
 8000f88:	edc3 7a00 	vstr	s15, [r3]
				break;
 8000f8c:	e00b      	b.n	8000fa6 <main+0x5fe>
				else if(inputchar=='x')
 8000f8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f92:	2b78      	cmp	r3, #120	; 0x78
 8000f94:	d105      	bne.n	8000fa2 <main+0x5fa>
				{state=menu;}
 8000f96:	4b14      	ldr	r3, [pc, #80]	; (8000fe8 <main+0x640>)
 8000f98:	2201      	movs	r2, #1
 8000f9a:	801a      	strh	r2, [r3, #0]
			break;
 8000f9c:	e001      	b.n	8000fa2 <main+0x5fa>
			break;
 8000f9e:	bf00      	nop
 8000fa0:	e002      	b.n	8000fa8 <main+0x600>
			break;
 8000fa2:	bf00      	nop
 8000fa4:	e000      	b.n	8000fa8 <main+0x600>
				break;
 8000fa6:	bf00      	nop
			}



			switch(statesaw)
 8000fa8:	4b10      	ldr	r3, [pc, #64]	; (8000fec <main+0x644>)
 8000faa:	881b      	ldrh	r3, [r3, #0]
 8000fac:	2b0a      	cmp	r3, #10
 8000fae:	d01f      	beq.n	8000ff0 <main+0x648>
 8000fb0:	2b0b      	cmp	r3, #11
 8000fb2:	f000 8087 	beq.w	80010c4 <main+0x71c>
 8000fb6:	e0f3      	b.n	80011a0 <main+0x7f8>
 8000fb8:	9999999a 	.word	0x9999999a
 8000fbc:	3fb99999 	.word	0x3fb99999
 8000fc0:	eb1c432d 	.word	0xeb1c432d
 8000fc4:	3f1a36e2 	.word	0x3f1a36e2
 8000fc8:	20000004 	.word	0x20000004
 8000fcc:	20000000 	.word	0x20000000
 8000fd0:	200000ac 	.word	0x200000ac
 8000fd4:	20000100 	.word	0x20000100
 8000fd8:	200000b0 	.word	0x200000b0
 8000fdc:	200000b8 	.word	0x200000b8
 8000fe0:	200000b4 	.word	0x200000b4
 8000fe4:	200000a8 	.word	0x200000a8
 8000fe8:	200000fc 	.word	0x200000fc
 8000fec:	200000fe 	.word	0x200000fe
			{case slopeup:
				if (micros() - timestamp > 100)
 8000ff0:	f000 fc40 	bl	8001874 <micros>
 8000ff4:	460a      	mov	r2, r1
 8000ff6:	4601      	mov	r1, r0
 8000ff8:	4b7b      	ldr	r3, [pc, #492]	; (80011e8 <main+0x840>)
 8000ffa:	e9d3 5600 	ldrd	r5, r6, [r3]
 8000ffe:	460b      	mov	r3, r1
 8001000:	4614      	mov	r4, r2
 8001002:	1b5b      	subs	r3, r3, r5
 8001004:	eb64 0406 	sbc.w	r4, r4, r6
 8001008:	2c00      	cmp	r4, #0
 800100a:	bf08      	it	eq
 800100c:	2b65      	cmpeq	r3, #101	; 0x65
 800100e:	f0c0 80c4 	bcc.w	800119a <main+0x7f2>
				{timestamp = micros();
 8001012:	f000 fc2f 	bl	8001874 <micros>
 8001016:	4603      	mov	r3, r0
 8001018:	460c      	mov	r4, r1
 800101a:	4a73      	ldr	r2, [pc, #460]	; (80011e8 <main+0x840>)
 800101c:	e9c2 3400 	strd	r3, r4, [r2]
				period = 1/fq_saw;                    //sawtooth
 8001020:	4b72      	ldr	r3, [pc, #456]	; (80011ec <main+0x844>)
 8001022:	ed93 7a00 	vldr	s14, [r3]
 8001026:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800102a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800102e:	4b70      	ldr	r3, [pc, #448]	; (80011f0 <main+0x848>)
 8001030:	edc3 7a00 	vstr	s15, [r3]
				x+=0.0001;
 8001034:	4b6f      	ldr	r3, [pc, #444]	; (80011f4 <main+0x84c>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4618      	mov	r0, r3
 800103a:	f7ff fa8d 	bl	8000558 <__aeabi_f2d>
 800103e:	a368      	add	r3, pc, #416	; (adr r3, 80011e0 <main+0x838>)
 8001040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001044:	f7ff f92a 	bl	800029c <__adddf3>
 8001048:	4603      	mov	r3, r0
 800104a:	460c      	mov	r4, r1
 800104c:	4618      	mov	r0, r3
 800104e:	4621      	mov	r1, r4
 8001050:	f7ff fada 	bl	8000608 <__aeabi_d2f>
 8001054:	4602      	mov	r2, r0
 8001056:	4b67      	ldr	r3, [pc, #412]	; (80011f4 <main+0x84c>)
 8001058:	601a      	str	r2, [r3, #0]
				m=(high_saw-low_saw)/period;
 800105a:	4b67      	ldr	r3, [pc, #412]	; (80011f8 <main+0x850>)
 800105c:	ed93 7a00 	vldr	s14, [r3]
 8001060:	4b66      	ldr	r3, [pc, #408]	; (80011fc <main+0x854>)
 8001062:	edd3 7a00 	vldr	s15, [r3]
 8001066:	ee77 6a67 	vsub.f32	s13, s14, s15
 800106a:	4b61      	ldr	r3, [pc, #388]	; (80011f0 <main+0x848>)
 800106c:	ed93 7a00 	vldr	s14, [r3]
 8001070:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001074:	4b62      	ldr	r3, [pc, #392]	; (8001200 <main+0x858>)
 8001076:	edc3 7a00 	vstr	s15, [r3]
				if(m*x<=high_saw)
 800107a:	4b61      	ldr	r3, [pc, #388]	; (8001200 <main+0x858>)
 800107c:	ed93 7a00 	vldr	s14, [r3]
 8001080:	4b5c      	ldr	r3, [pc, #368]	; (80011f4 <main+0x84c>)
 8001082:	edd3 7a00 	vldr	s15, [r3]
 8001086:	ee27 7a27 	vmul.f32	s14, s14, s15
 800108a:	4b5b      	ldr	r3, [pc, #364]	; (80011f8 <main+0x850>)
 800108c:	edd3 7a00 	vldr	s15, [r3]
 8001090:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001098:	d80b      	bhi.n	80010b2 <main+0x70a>
				{dataOut=m*x;}
 800109a:	4b59      	ldr	r3, [pc, #356]	; (8001200 <main+0x858>)
 800109c:	ed93 7a00 	vldr	s14, [r3]
 80010a0:	4b54      	ldr	r3, [pc, #336]	; (80011f4 <main+0x84c>)
 80010a2:	edd3 7a00 	vldr	s15, [r3]
 80010a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010aa:	4b56      	ldr	r3, [pc, #344]	; (8001204 <main+0x85c>)
 80010ac:	edc3 7a00 	vstr	s15, [r3]
				else{dataOut=low_saw;x=0;}
				}
		     break;
 80010b0:	e073      	b.n	800119a <main+0x7f2>
				else{dataOut=low_saw;x=0;}
 80010b2:	4b52      	ldr	r3, [pc, #328]	; (80011fc <main+0x854>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4a53      	ldr	r2, [pc, #332]	; (8001204 <main+0x85c>)
 80010b8:	6013      	str	r3, [r2, #0]
 80010ba:	4b4e      	ldr	r3, [pc, #312]	; (80011f4 <main+0x84c>)
 80010bc:	f04f 0200 	mov.w	r2, #0
 80010c0:	601a      	str	r2, [r3, #0]
		     break;
 80010c2:	e06a      	b.n	800119a <main+0x7f2>
			case slopedown:
				if (micros() - timestamp > 100)
 80010c4:	f000 fbd6 	bl	8001874 <micros>
 80010c8:	460a      	mov	r2, r1
 80010ca:	4601      	mov	r1, r0
 80010cc:	4b46      	ldr	r3, [pc, #280]	; (80011e8 <main+0x840>)
 80010ce:	e9d3 5600 	ldrd	r5, r6, [r3]
 80010d2:	460b      	mov	r3, r1
 80010d4:	4614      	mov	r4, r2
 80010d6:	1b5b      	subs	r3, r3, r5
 80010d8:	eb64 0406 	sbc.w	r4, r4, r6
 80010dc:	2c00      	cmp	r4, #0
 80010de:	bf08      	it	eq
 80010e0:	2b65      	cmpeq	r3, #101	; 0x65
 80010e2:	d35c      	bcc.n	800119e <main+0x7f6>
					{timestamp = micros();
 80010e4:	f000 fbc6 	bl	8001874 <micros>
 80010e8:	4603      	mov	r3, r0
 80010ea:	460c      	mov	r4, r1
 80010ec:	4a3e      	ldr	r2, [pc, #248]	; (80011e8 <main+0x840>)
 80010ee:	e9c2 3400 	strd	r3, r4, [r2]
					period=1/fq_saw; 							//invese sawtooth
 80010f2:	4b3e      	ldr	r3, [pc, #248]	; (80011ec <main+0x844>)
 80010f4:	ed93 7a00 	vldr	s14, [r3]
 80010f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80010fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001100:	4b3b      	ldr	r3, [pc, #236]	; (80011f0 <main+0x848>)
 8001102:	edc3 7a00 	vstr	s15, [r3]
					x+=0.0001;
 8001106:	4b3b      	ldr	r3, [pc, #236]	; (80011f4 <main+0x84c>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4618      	mov	r0, r3
 800110c:	f7ff fa24 	bl	8000558 <__aeabi_f2d>
 8001110:	a333      	add	r3, pc, #204	; (adr r3, 80011e0 <main+0x838>)
 8001112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001116:	f7ff f8c1 	bl	800029c <__adddf3>
 800111a:	4603      	mov	r3, r0
 800111c:	460c      	mov	r4, r1
 800111e:	4618      	mov	r0, r3
 8001120:	4621      	mov	r1, r4
 8001122:	f7ff fa71 	bl	8000608 <__aeabi_d2f>
 8001126:	4602      	mov	r2, r0
 8001128:	4b32      	ldr	r3, [pc, #200]	; (80011f4 <main+0x84c>)
 800112a:	601a      	str	r2, [r3, #0]
					m=-1*(high_saw-low_saw)/period;
 800112c:	4b32      	ldr	r3, [pc, #200]	; (80011f8 <main+0x850>)
 800112e:	ed93 7a00 	vldr	s14, [r3]
 8001132:	4b32      	ldr	r3, [pc, #200]	; (80011fc <main+0x854>)
 8001134:	edd3 7a00 	vldr	s15, [r3]
 8001138:	ee77 7a67 	vsub.f32	s15, s14, s15
 800113c:	eef1 6a67 	vneg.f32	s13, s15
 8001140:	4b2b      	ldr	r3, [pc, #172]	; (80011f0 <main+0x848>)
 8001142:	ed93 7a00 	vldr	s14, [r3]
 8001146:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800114a:	4b2d      	ldr	r3, [pc, #180]	; (8001200 <main+0x858>)
 800114c:	edc3 7a00 	vstr	s15, [r3]
					if(dataOut<=low_saw){dataOut=high_saw;x=0;}
 8001150:	4b2c      	ldr	r3, [pc, #176]	; (8001204 <main+0x85c>)
 8001152:	ed93 7a00 	vldr	s14, [r3]
 8001156:	4b29      	ldr	r3, [pc, #164]	; (80011fc <main+0x854>)
 8001158:	edd3 7a00 	vldr	s15, [r3]
 800115c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001160:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001164:	d808      	bhi.n	8001178 <main+0x7d0>
 8001166:	4b24      	ldr	r3, [pc, #144]	; (80011f8 <main+0x850>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4a26      	ldr	r2, [pc, #152]	; (8001204 <main+0x85c>)
 800116c:	6013      	str	r3, [r2, #0]
 800116e:	4b21      	ldr	r3, [pc, #132]	; (80011f4 <main+0x84c>)
 8001170:	f04f 0200 	mov.w	r2, #0
 8001174:	601a      	str	r2, [r3, #0]
					else{dataOut=high_saw+(m*x);}
					}
			 break;
 8001176:	e012      	b.n	800119e <main+0x7f6>
					else{dataOut=high_saw+(m*x);}
 8001178:	4b21      	ldr	r3, [pc, #132]	; (8001200 <main+0x858>)
 800117a:	ed93 7a00 	vldr	s14, [r3]
 800117e:	4b1d      	ldr	r3, [pc, #116]	; (80011f4 <main+0x84c>)
 8001180:	edd3 7a00 	vldr	s15, [r3]
 8001184:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001188:	4b1b      	ldr	r3, [pc, #108]	; (80011f8 <main+0x850>)
 800118a:	edd3 7a00 	vldr	s15, [r3]
 800118e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001192:	4b1c      	ldr	r3, [pc, #112]	; (8001204 <main+0x85c>)
 8001194:	edc3 7a00 	vstr	s15, [r3]
			 break;
 8001198:	e001      	b.n	800119e <main+0x7f6>
		     break;
 800119a:	bf00      	nop
 800119c:	e000      	b.n	80011a0 <main+0x7f8>
			 break;
 800119e:	bf00      	nop

			}


			if (hspi3.State == HAL_SPI_STATE_READY&& HAL_GPIO_ReadPin(SPI_SS_GPIO_Port, SPI_SS_Pin)== GPIO_PIN_SET)
 80011a0:	4b19      	ldr	r3, [pc, #100]	; (8001208 <main+0x860>)
 80011a2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	2b01      	cmp	r3, #1
 80011aa:	f47f ac23 	bne.w	80009f4 <main+0x4c>
 80011ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011b2:	4816      	ldr	r0, [pc, #88]	; (800120c <main+0x864>)
 80011b4:	f002 f9ec 	bl	8003590 <HAL_GPIO_ReadPin>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b01      	cmp	r3, #1
 80011bc:	f47f ac1a 	bne.w	80009f4 <main+0x4c>
			{
			MCP4922SetOutput(DACConfig, dataOut);
 80011c0:	4b13      	ldr	r3, [pc, #76]	; (8001210 <main+0x868>)
 80011c2:	781a      	ldrb	r2, [r3, #0]
 80011c4:	4b0f      	ldr	r3, [pc, #60]	; (8001204 <main+0x85c>)
 80011c6:	edd3 7a00 	vldr	s15, [r3]
 80011ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011ce:	ee17 3a90 	vmov	r3, s15
 80011d2:	b29b      	uxth	r3, r3
 80011d4:	4619      	mov	r1, r3
 80011d6:	4610      	mov	r0, r2
 80011d8:	f000 faa8 	bl	800172c <MCP4922SetOutput>
	{
 80011dc:	e40a      	b.n	80009f4 <main+0x4c>
 80011de:	bf00      	nop
 80011e0:	eb1c432d 	.word	0xeb1c432d
 80011e4:	3f1a36e2 	.word	0x3f1a36e2
 80011e8:	20000100 	.word	0x20000100
 80011ec:	20000004 	.word	0x20000004
 80011f0:	200000b0 	.word	0x200000b0
 80011f4:	200000b8 	.word	0x200000b8
 80011f8:	20000000 	.word	0x20000000
 80011fc:	200000ac 	.word	0x200000ac
 8001200:	200000b4 	.word	0x200000b4
 8001204:	200000a8 	.word	0x200000a8
 8001208:	20000158 	.word	0x20000158
 800120c:	40020400 	.word	0x40020400
 8001210:	20000008 	.word	0x20000008

08001214 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b09a      	sub	sp, #104	; 0x68
 8001218:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800121a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800121e:	2230      	movs	r2, #48	; 0x30
 8001220:	2100      	movs	r1, #0
 8001222:	4618      	mov	r0, r3
 8001224:	f004 ffd8 	bl	80061d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001228:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	605a      	str	r2, [r3, #4]
 8001232:	609a      	str	r2, [r3, #8]
 8001234:	60da      	str	r2, [r3, #12]
 8001236:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001238:	f107 030c 	add.w	r3, r7, #12
 800123c:	2200      	movs	r2, #0
 800123e:	601a      	str	r2, [r3, #0]
 8001240:	605a      	str	r2, [r3, #4]
 8001242:	609a      	str	r2, [r3, #8]
 8001244:	60da      	str	r2, [r3, #12]
 8001246:	611a      	str	r2, [r3, #16]
 8001248:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800124a:	2300      	movs	r3, #0
 800124c:	60bb      	str	r3, [r7, #8]
 800124e:	4b31      	ldr	r3, [pc, #196]	; (8001314 <SystemClock_Config+0x100>)
 8001250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001252:	4a30      	ldr	r2, [pc, #192]	; (8001314 <SystemClock_Config+0x100>)
 8001254:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001258:	6413      	str	r3, [r2, #64]	; 0x40
 800125a:	4b2e      	ldr	r3, [pc, #184]	; (8001314 <SystemClock_Config+0x100>)
 800125c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001262:	60bb      	str	r3, [r7, #8]
 8001264:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001266:	2300      	movs	r3, #0
 8001268:	607b      	str	r3, [r7, #4]
 800126a:	4b2b      	ldr	r3, [pc, #172]	; (8001318 <SystemClock_Config+0x104>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a2a      	ldr	r2, [pc, #168]	; (8001318 <SystemClock_Config+0x104>)
 8001270:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001274:	6013      	str	r3, [r2, #0]
 8001276:	4b28      	ldr	r3, [pc, #160]	; (8001318 <SystemClock_Config+0x104>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800127e:	607b      	str	r3, [r7, #4]
 8001280:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001282:	2303      	movs	r3, #3
 8001284:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001286:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800128a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800128c:	2301      	movs	r3, #1
 800128e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001290:	2310      	movs	r3, #16
 8001292:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001294:	2302      	movs	r3, #2
 8001296:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001298:	2300      	movs	r3, #0
 800129a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 8;
 800129c:	2308      	movs	r3, #8
 800129e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 100;
 80012a0:	2364      	movs	r3, #100	; 0x64
 80012a2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012a4:	2302      	movs	r3, #2
 80012a6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80012a8:	2304      	movs	r3, #4
 80012aa:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012ac:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80012b0:	4618      	mov	r0, r3
 80012b2:	f002 f99f 	bl	80035f4 <HAL_RCC_OscConfig>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80012bc:	f000 faf4 	bl	80018a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012c0:	230f      	movs	r3, #15
 80012c2:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012c4:	2302      	movs	r3, #2
 80012c6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012c8:	2300      	movs	r3, #0
 80012ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012d0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012d2:	2300      	movs	r3, #0
 80012d4:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80012d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012da:	2103      	movs	r1, #3
 80012dc:	4618      	mov	r0, r3
 80012de:	f002 fbf9 	bl	8003ad4 <HAL_RCC_ClockConfig>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <SystemClock_Config+0xd8>
  {
    Error_Handler();
 80012e8:	f000 fade 	bl	80018a8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80012ec:	2302      	movs	r3, #2
 80012ee:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80012f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012f4:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012f6:	f107 030c 	add.w	r3, r7, #12
 80012fa:	4618      	mov	r0, r3
 80012fc:	f002 fddc 	bl	8003eb8 <HAL_RCCEx_PeriphCLKConfig>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8001306:	f000 facf 	bl	80018a8 <Error_Handler>
  }
}
 800130a:	bf00      	nop
 800130c:	3768      	adds	r7, #104	; 0x68
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	40023800 	.word	0x40023800
 8001318:	40007000 	.word	0x40007000

0800131c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001322:	463b      	mov	r3, r7
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	605a      	str	r2, [r3, #4]
 800132a:	609a      	str	r2, [r3, #8]
 800132c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800132e:	4b22      	ldr	r3, [pc, #136]	; (80013b8 <MX_ADC1_Init+0x9c>)
 8001330:	4a22      	ldr	r2, [pc, #136]	; (80013bc <MX_ADC1_Init+0xa0>)
 8001332:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001334:	4b20      	ldr	r3, [pc, #128]	; (80013b8 <MX_ADC1_Init+0x9c>)
 8001336:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800133a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800133c:	4b1e      	ldr	r3, [pc, #120]	; (80013b8 <MX_ADC1_Init+0x9c>)
 800133e:	2200      	movs	r2, #0
 8001340:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001342:	4b1d      	ldr	r3, [pc, #116]	; (80013b8 <MX_ADC1_Init+0x9c>)
 8001344:	2201      	movs	r2, #1
 8001346:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001348:	4b1b      	ldr	r3, [pc, #108]	; (80013b8 <MX_ADC1_Init+0x9c>)
 800134a:	2200      	movs	r2, #0
 800134c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800134e:	4b1a      	ldr	r3, [pc, #104]	; (80013b8 <MX_ADC1_Init+0x9c>)
 8001350:	2200      	movs	r2, #0
 8001352:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001356:	4b18      	ldr	r3, [pc, #96]	; (80013b8 <MX_ADC1_Init+0x9c>)
 8001358:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800135c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 800135e:	4b16      	ldr	r3, [pc, #88]	; (80013b8 <MX_ADC1_Init+0x9c>)
 8001360:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001364:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001366:	4b14      	ldr	r3, [pc, #80]	; (80013b8 <MX_ADC1_Init+0x9c>)
 8001368:	2200      	movs	r2, #0
 800136a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800136c:	4b12      	ldr	r3, [pc, #72]	; (80013b8 <MX_ADC1_Init+0x9c>)
 800136e:	2201      	movs	r2, #1
 8001370:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001372:	4b11      	ldr	r3, [pc, #68]	; (80013b8 <MX_ADC1_Init+0x9c>)
 8001374:	2201      	movs	r2, #1
 8001376:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800137a:	4b0f      	ldr	r3, [pc, #60]	; (80013b8 <MX_ADC1_Init+0x9c>)
 800137c:	2201      	movs	r2, #1
 800137e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001380:	480d      	ldr	r0, [pc, #52]	; (80013b8 <MX_ADC1_Init+0x9c>)
 8001382:	f000 fda7 	bl	8001ed4 <HAL_ADC_Init>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 800138c:	f000 fa8c 	bl	80018a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001390:	2300      	movs	r3, #0
 8001392:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001394:	2301      	movs	r3, #1
 8001396:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001398:	2300      	movs	r3, #0
 800139a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800139c:	463b      	mov	r3, r7
 800139e:	4619      	mov	r1, r3
 80013a0:	4805      	ldr	r0, [pc, #20]	; (80013b8 <MX_ADC1_Init+0x9c>)
 80013a2:	f001 f817 	bl	80023d4 <HAL_ADC_ConfigChannel>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80013ac:	f000 fa7c 	bl	80018a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80013b0:	bf00      	nop
 80013b2:	3710      	adds	r7, #16
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	200001b0 	.word	0x200001b0
 80013bc:	40012000 	.word	0x40012000

080013c0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80013c4:	4b18      	ldr	r3, [pc, #96]	; (8001428 <MX_SPI3_Init+0x68>)
 80013c6:	4a19      	ldr	r2, [pc, #100]	; (800142c <MX_SPI3_Init+0x6c>)
 80013c8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80013ca:	4b17      	ldr	r3, [pc, #92]	; (8001428 <MX_SPI3_Init+0x68>)
 80013cc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80013d0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80013d2:	4b15      	ldr	r3, [pc, #84]	; (8001428 <MX_SPI3_Init+0x68>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 80013d8:	4b13      	ldr	r3, [pc, #76]	; (8001428 <MX_SPI3_Init+0x68>)
 80013da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80013de:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013e0:	4b11      	ldr	r3, [pc, #68]	; (8001428 <MX_SPI3_Init+0x68>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013e6:	4b10      	ldr	r3, [pc, #64]	; (8001428 <MX_SPI3_Init+0x68>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80013ec:	4b0e      	ldr	r3, [pc, #56]	; (8001428 <MX_SPI3_Init+0x68>)
 80013ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013f2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80013f4:	4b0c      	ldr	r3, [pc, #48]	; (8001428 <MX_SPI3_Init+0x68>)
 80013f6:	2208      	movs	r2, #8
 80013f8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013fa:	4b0b      	ldr	r3, [pc, #44]	; (8001428 <MX_SPI3_Init+0x68>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001400:	4b09      	ldr	r3, [pc, #36]	; (8001428 <MX_SPI3_Init+0x68>)
 8001402:	2200      	movs	r2, #0
 8001404:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001406:	4b08      	ldr	r3, [pc, #32]	; (8001428 <MX_SPI3_Init+0x68>)
 8001408:	2200      	movs	r2, #0
 800140a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800140c:	4b06      	ldr	r3, [pc, #24]	; (8001428 <MX_SPI3_Init+0x68>)
 800140e:	220a      	movs	r2, #10
 8001410:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001412:	4805      	ldr	r0, [pc, #20]	; (8001428 <MX_SPI3_Init+0x68>)
 8001414:	f002 fe40 	bl	8004098 <HAL_SPI_Init>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <MX_SPI3_Init+0x62>
  {
    Error_Handler();
 800141e:	f000 fa43 	bl	80018a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001422:	bf00      	nop
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	20000158 	.word	0x20000158
 800142c:	40003c00 	.word	0x40003c00

08001430 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b086      	sub	sp, #24
 8001434:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001436:	f107 0308 	add.w	r3, r7, #8
 800143a:	2200      	movs	r2, #0
 800143c:	601a      	str	r2, [r3, #0]
 800143e:	605a      	str	r2, [r3, #4]
 8001440:	609a      	str	r2, [r3, #8]
 8001442:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001444:	463b      	mov	r3, r7
 8001446:	2200      	movs	r2, #0
 8001448:	601a      	str	r2, [r3, #0]
 800144a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800144c:	4b1c      	ldr	r3, [pc, #112]	; (80014c0 <MX_TIM3_Init+0x90>)
 800144e:	4a1d      	ldr	r2, [pc, #116]	; (80014c4 <MX_TIM3_Init+0x94>)
 8001450:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 99;
 8001452:	4b1b      	ldr	r3, [pc, #108]	; (80014c0 <MX_TIM3_Init+0x90>)
 8001454:	2263      	movs	r2, #99	; 0x63
 8001456:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001458:	4b19      	ldr	r3, [pc, #100]	; (80014c0 <MX_TIM3_Init+0x90>)
 800145a:	2200      	movs	r2, #0
 800145c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 800145e:	4b18      	ldr	r3, [pc, #96]	; (80014c0 <MX_TIM3_Init+0x90>)
 8001460:	2264      	movs	r2, #100	; 0x64
 8001462:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001464:	4b16      	ldr	r3, [pc, #88]	; (80014c0 <MX_TIM3_Init+0x90>)
 8001466:	2200      	movs	r2, #0
 8001468:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800146a:	4b15      	ldr	r3, [pc, #84]	; (80014c0 <MX_TIM3_Init+0x90>)
 800146c:	2200      	movs	r2, #0
 800146e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001470:	4813      	ldr	r0, [pc, #76]	; (80014c0 <MX_TIM3_Init+0x90>)
 8001472:	f003 f969 	bl	8004748 <HAL_TIM_Base_Init>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 800147c:	f000 fa14 	bl	80018a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001480:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001484:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001486:	f107 0308 	add.w	r3, r7, #8
 800148a:	4619      	mov	r1, r3
 800148c:	480c      	ldr	r0, [pc, #48]	; (80014c0 <MX_TIM3_Init+0x90>)
 800148e:	f003 fba7 	bl	8004be0 <HAL_TIM_ConfigClockSource>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8001498:	f000 fa06 	bl	80018a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800149c:	2320      	movs	r3, #32
 800149e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014a0:	2300      	movs	r3, #0
 80014a2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014a4:	463b      	mov	r3, r7
 80014a6:	4619      	mov	r1, r3
 80014a8:	4805      	ldr	r0, [pc, #20]	; (80014c0 <MX_TIM3_Init+0x90>)
 80014aa:	f003 feb1 	bl	8005210 <HAL_TIMEx_MasterConfigSynchronization>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 80014b4:	f000 f9f8 	bl	80018a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80014b8:	bf00      	nop
 80014ba:	3718      	adds	r7, #24
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	20000118 	.word	0x20000118
 80014c4:	40000400 	.word	0x40000400

080014c8 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 80014ce:	463b      	mov	r3, r7
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]
 80014d4:	605a      	str	r2, [r3, #4]
 80014d6:	609a      	str	r2, [r3, #8]
 80014d8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80014da:	4b1d      	ldr	r3, [pc, #116]	; (8001550 <MX_TIM11_Init+0x88>)
 80014dc:	4a1d      	ldr	r2, [pc, #116]	; (8001554 <MX_TIM11_Init+0x8c>)
 80014de:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 80014e0:	4b1b      	ldr	r3, [pc, #108]	; (8001550 <MX_TIM11_Init+0x88>)
 80014e2:	2263      	movs	r2, #99	; 0x63
 80014e4:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014e6:	4b1a      	ldr	r3, [pc, #104]	; (8001550 <MX_TIM11_Init+0x88>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 80014ec:	4b18      	ldr	r3, [pc, #96]	; (8001550 <MX_TIM11_Init+0x88>)
 80014ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014f2:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014f4:	4b16      	ldr	r3, [pc, #88]	; (8001550 <MX_TIM11_Init+0x88>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014fa:	4b15      	ldr	r3, [pc, #84]	; (8001550 <MX_TIM11_Init+0x88>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001500:	4813      	ldr	r0, [pc, #76]	; (8001550 <MX_TIM11_Init+0x88>)
 8001502:	f003 f921 	bl	8004748 <HAL_TIM_Base_Init>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <MX_TIM11_Init+0x48>
  {
    Error_Handler();
 800150c:	f000 f9cc 	bl	80018a8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim11) != HAL_OK)
 8001510:	480f      	ldr	r0, [pc, #60]	; (8001550 <MX_TIM11_Init+0x88>)
 8001512:	f003 f98c 	bl	800482e <HAL_TIM_IC_Init>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <MX_TIM11_Init+0x58>
  {
    Error_Handler();
 800151c:	f000 f9c4 	bl	80018a8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001520:	2300      	movs	r3, #0
 8001522:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001524:	2301      	movs	r3, #1
 8001526:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001528:	2300      	movs	r3, #0
 800152a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800152c:	2300      	movs	r3, #0
 800152e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim11, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001530:	463b      	mov	r3, r7
 8001532:	2200      	movs	r2, #0
 8001534:	4619      	mov	r1, r3
 8001536:	4806      	ldr	r0, [pc, #24]	; (8001550 <MX_TIM11_Init+0x88>)
 8001538:	f003 fab6 	bl	8004aa8 <HAL_TIM_IC_ConfigChannel>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <MX_TIM11_Init+0x7e>
  {
    Error_Handler();
 8001542:	f000 f9b1 	bl	80018a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8001546:	bf00      	nop
 8001548:	3710      	adds	r7, #16
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	200001f8 	.word	0x200001f8
 8001554:	40014800 	.word	0x40014800

08001558 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800155c:	4b11      	ldr	r3, [pc, #68]	; (80015a4 <MX_USART2_UART_Init+0x4c>)
 800155e:	4a12      	ldr	r2, [pc, #72]	; (80015a8 <MX_USART2_UART_Init+0x50>)
 8001560:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001562:	4b10      	ldr	r3, [pc, #64]	; (80015a4 <MX_USART2_UART_Init+0x4c>)
 8001564:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001568:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800156a:	4b0e      	ldr	r3, [pc, #56]	; (80015a4 <MX_USART2_UART_Init+0x4c>)
 800156c:	2200      	movs	r2, #0
 800156e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001570:	4b0c      	ldr	r3, [pc, #48]	; (80015a4 <MX_USART2_UART_Init+0x4c>)
 8001572:	2200      	movs	r2, #0
 8001574:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001576:	4b0b      	ldr	r3, [pc, #44]	; (80015a4 <MX_USART2_UART_Init+0x4c>)
 8001578:	2200      	movs	r2, #0
 800157a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800157c:	4b09      	ldr	r3, [pc, #36]	; (80015a4 <MX_USART2_UART_Init+0x4c>)
 800157e:	220c      	movs	r2, #12
 8001580:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001582:	4b08      	ldr	r3, [pc, #32]	; (80015a4 <MX_USART2_UART_Init+0x4c>)
 8001584:	2200      	movs	r2, #0
 8001586:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001588:	4b06      	ldr	r3, [pc, #24]	; (80015a4 <MX_USART2_UART_Init+0x4c>)
 800158a:	2200      	movs	r2, #0
 800158c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800158e:	4805      	ldr	r0, [pc, #20]	; (80015a4 <MX_USART2_UART_Init+0x4c>)
 8001590:	f003 fec0 	bl	8005314 <HAL_UART_Init>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800159a:	f000 f985 	bl	80018a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800159e:	bf00      	nop
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	20000298 	.word	0x20000298
 80015a8:	40004400 	.word	0x40004400

080015ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80015b2:	2300      	movs	r3, #0
 80015b4:	607b      	str	r3, [r7, #4]
 80015b6:	4b0c      	ldr	r3, [pc, #48]	; (80015e8 <MX_DMA_Init+0x3c>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ba:	4a0b      	ldr	r2, [pc, #44]	; (80015e8 <MX_DMA_Init+0x3c>)
 80015bc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80015c0:	6313      	str	r3, [r2, #48]	; 0x30
 80015c2:	4b09      	ldr	r3, [pc, #36]	; (80015e8 <MX_DMA_Init+0x3c>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015ca:	607b      	str	r3, [r7, #4]
 80015cc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80015ce:	2200      	movs	r2, #0
 80015d0:	2100      	movs	r1, #0
 80015d2:	2038      	movs	r0, #56	; 0x38
 80015d4:	f001 fa93 	bl	8002afe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80015d8:	2038      	movs	r0, #56	; 0x38
 80015da:	f001 faac 	bl	8002b36 <HAL_NVIC_EnableIRQ>

}
 80015de:	bf00      	nop
 80015e0:	3708      	adds	r7, #8
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	40023800 	.word	0x40023800

080015ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b08a      	sub	sp, #40	; 0x28
 80015f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f2:	f107 0314 	add.w	r3, r7, #20
 80015f6:	2200      	movs	r2, #0
 80015f8:	601a      	str	r2, [r3, #0]
 80015fa:	605a      	str	r2, [r3, #4]
 80015fc:	609a      	str	r2, [r3, #8]
 80015fe:	60da      	str	r2, [r3, #12]
 8001600:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001602:	2300      	movs	r3, #0
 8001604:	613b      	str	r3, [r7, #16]
 8001606:	4b44      	ldr	r3, [pc, #272]	; (8001718 <MX_GPIO_Init+0x12c>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160a:	4a43      	ldr	r2, [pc, #268]	; (8001718 <MX_GPIO_Init+0x12c>)
 800160c:	f043 0304 	orr.w	r3, r3, #4
 8001610:	6313      	str	r3, [r2, #48]	; 0x30
 8001612:	4b41      	ldr	r3, [pc, #260]	; (8001718 <MX_GPIO_Init+0x12c>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001616:	f003 0304 	and.w	r3, r3, #4
 800161a:	613b      	str	r3, [r7, #16]
 800161c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800161e:	2300      	movs	r3, #0
 8001620:	60fb      	str	r3, [r7, #12]
 8001622:	4b3d      	ldr	r3, [pc, #244]	; (8001718 <MX_GPIO_Init+0x12c>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001626:	4a3c      	ldr	r2, [pc, #240]	; (8001718 <MX_GPIO_Init+0x12c>)
 8001628:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800162c:	6313      	str	r3, [r2, #48]	; 0x30
 800162e:	4b3a      	ldr	r3, [pc, #232]	; (8001718 <MX_GPIO_Init+0x12c>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001632:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001636:	60fb      	str	r3, [r7, #12]
 8001638:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800163a:	2300      	movs	r3, #0
 800163c:	60bb      	str	r3, [r7, #8]
 800163e:	4b36      	ldr	r3, [pc, #216]	; (8001718 <MX_GPIO_Init+0x12c>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001642:	4a35      	ldr	r2, [pc, #212]	; (8001718 <MX_GPIO_Init+0x12c>)
 8001644:	f043 0301 	orr.w	r3, r3, #1
 8001648:	6313      	str	r3, [r2, #48]	; 0x30
 800164a:	4b33      	ldr	r3, [pc, #204]	; (8001718 <MX_GPIO_Init+0x12c>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164e:	f003 0301 	and.w	r3, r3, #1
 8001652:	60bb      	str	r3, [r7, #8]
 8001654:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001656:	2300      	movs	r3, #0
 8001658:	607b      	str	r3, [r7, #4]
 800165a:	4b2f      	ldr	r3, [pc, #188]	; (8001718 <MX_GPIO_Init+0x12c>)
 800165c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165e:	4a2e      	ldr	r2, [pc, #184]	; (8001718 <MX_GPIO_Init+0x12c>)
 8001660:	f043 0302 	orr.w	r3, r3, #2
 8001664:	6313      	str	r3, [r2, #48]	; 0x30
 8001666:	4b2c      	ldr	r3, [pc, #176]	; (8001718 <MX_GPIO_Init+0x12c>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166a:	f003 0302 	and.w	r3, r3, #2
 800166e:	607b      	str	r3, [r7, #4]
 8001670:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001672:	2200      	movs	r2, #0
 8001674:	2120      	movs	r1, #32
 8001676:	4829      	ldr	r0, [pc, #164]	; (800171c <MX_GPIO_Init+0x130>)
 8001678:	f001 ffa2 	bl	80035c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_SET);
 800167c:	2201      	movs	r2, #1
 800167e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001682:	4827      	ldr	r0, [pc, #156]	; (8001720 <MX_GPIO_Init+0x134>)
 8001684:	f001 ff9c 	bl	80035c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SHDN_GPIO_Port, SHDN_Pin, GPIO_PIN_SET);
 8001688:	2201      	movs	r2, #1
 800168a:	2180      	movs	r1, #128	; 0x80
 800168c:	4825      	ldr	r0, [pc, #148]	; (8001724 <MX_GPIO_Init+0x138>)
 800168e:	f001 ff97 	bl	80035c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LOAD_GPIO_Port, LOAD_Pin, GPIO_PIN_SET);
 8001692:	2201      	movs	r2, #1
 8001694:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001698:	4820      	ldr	r0, [pc, #128]	; (800171c <MX_GPIO_Init+0x130>)
 800169a:	f001 ff91 	bl	80035c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800169e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80016a4:	4b20      	ldr	r3, [pc, #128]	; (8001728 <MX_GPIO_Init+0x13c>)
 80016a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a8:	2300      	movs	r3, #0
 80016aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80016ac:	f107 0314 	add.w	r3, r7, #20
 80016b0:	4619      	mov	r1, r3
 80016b2:	481c      	ldr	r0, [pc, #112]	; (8001724 <MX_GPIO_Init+0x138>)
 80016b4:	f001 fdea 	bl	800328c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LOAD_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LOAD_Pin;
 80016b8:	f44f 7308 	mov.w	r3, #544	; 0x220
 80016bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016be:	2301      	movs	r3, #1
 80016c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c2:	2300      	movs	r3, #0
 80016c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c6:	2300      	movs	r3, #0
 80016c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ca:	f107 0314 	add.w	r3, r7, #20
 80016ce:	4619      	mov	r1, r3
 80016d0:	4812      	ldr	r0, [pc, #72]	; (800171c <MX_GPIO_Init+0x130>)
 80016d2:	f001 fddb 	bl	800328c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_SS_Pin */
  GPIO_InitStruct.Pin = SPI_SS_Pin;
 80016d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016dc:	2301      	movs	r3, #1
 80016de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e0:	2300      	movs	r3, #0
 80016e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e4:	2300      	movs	r3, #0
 80016e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_SS_GPIO_Port, &GPIO_InitStruct);
 80016e8:	f107 0314 	add.w	r3, r7, #20
 80016ec:	4619      	mov	r1, r3
 80016ee:	480c      	ldr	r0, [pc, #48]	; (8001720 <MX_GPIO_Init+0x134>)
 80016f0:	f001 fdcc 	bl	800328c <HAL_GPIO_Init>

  /*Configure GPIO pin : SHDN_Pin */
  GPIO_InitStruct.Pin = SHDN_Pin;
 80016f4:	2380      	movs	r3, #128	; 0x80
 80016f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016f8:	2301      	movs	r3, #1
 80016fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fc:	2300      	movs	r3, #0
 80016fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001700:	2300      	movs	r3, #0
 8001702:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SHDN_GPIO_Port, &GPIO_InitStruct);
 8001704:	f107 0314 	add.w	r3, r7, #20
 8001708:	4619      	mov	r1, r3
 800170a:	4806      	ldr	r0, [pc, #24]	; (8001724 <MX_GPIO_Init+0x138>)
 800170c:	f001 fdbe 	bl	800328c <HAL_GPIO_Init>

}
 8001710:	bf00      	nop
 8001712:	3728      	adds	r7, #40	; 0x28
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	40023800 	.word	0x40023800
 800171c:	40020000 	.word	0x40020000
 8001720:	40020400 	.word	0x40020400
 8001724:	40020800 	.word	0x40020800
 8001728:	10210000 	.word	0x10210000

0800172c <MCP4922SetOutput>:

/* USER CODE BEGIN 4 */
void MCP4922SetOutput(uint8_t Config, uint16_t DACOutput)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
 8001732:	4603      	mov	r3, r0
 8001734:	460a      	mov	r2, r1
 8001736:	71fb      	strb	r3, [r7, #7]
 8001738:	4613      	mov	r3, r2
 800173a:	80bb      	strh	r3, [r7, #4]
	uint32_t OutputPacket = (DACOutput & 0x0fff) | ((Config & 0xf) << 12);
 800173c:	88bb      	ldrh	r3, [r7, #4]
 800173e:	f3c3 020b 	ubfx	r2, r3, #0, #12
 8001742:	79fb      	ldrb	r3, [r7, #7]
 8001744:	031b      	lsls	r3, r3, #12
 8001746:	b29b      	uxth	r3, r3
 8001748:	4313      	orrs	r3, r2
 800174a:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_RESET);
 800174c:	2200      	movs	r2, #0
 800174e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001752:	4807      	ldr	r0, [pc, #28]	; (8001770 <MCP4922SetOutput+0x44>)
 8001754:	f001 ff34 	bl	80035c0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_IT(&hspi3, &OutputPacket, 1);
 8001758:	f107 030c 	add.w	r3, r7, #12
 800175c:	2201      	movs	r2, #1
 800175e:	4619      	mov	r1, r3
 8001760:	4804      	ldr	r0, [pc, #16]	; (8001774 <MCP4922SetOutput+0x48>)
 8001762:	f002 fcfd 	bl	8004160 <HAL_SPI_Transmit_IT>
}
 8001766:	bf00      	nop
 8001768:	3710      	adds	r7, #16
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	40020400 	.word	0x40020400
 8001774:	20000158 	.word	0x20000158

08001778 <UARTRecieveIT>:
int16_t UARTRecieveIT()
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
	static uint32_t dataPos =0;
	int16_t data=-1;
 800177e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001782:	80fb      	strh	r3, [r7, #6]

	if(huart2.RxXferSize - huart2.RxXferCount!=dataPos)
 8001784:	4b12      	ldr	r3, [pc, #72]	; (80017d0 <UARTRecieveIT+0x58>)
 8001786:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001788:	461a      	mov	r2, r3
 800178a:	4b11      	ldr	r3, [pc, #68]	; (80017d0 <UARTRecieveIT+0x58>)
 800178c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800178e:	b29b      	uxth	r3, r3
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	461a      	mov	r2, r3
 8001794:	4b0f      	ldr	r3, [pc, #60]	; (80017d4 <UARTRecieveIT+0x5c>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	429a      	cmp	r2, r3
 800179a:	d010      	beq.n	80017be <UARTRecieveIT+0x46>
	{
		data=RxDataBuffer[dataPos];
 800179c:	4b0d      	ldr	r3, [pc, #52]	; (80017d4 <UARTRecieveIT+0x5c>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a0d      	ldr	r2, [pc, #52]	; (80017d8 <UARTRecieveIT+0x60>)
 80017a2:	5cd3      	ldrb	r3, [r2, r3]
 80017a4:	80fb      	strh	r3, [r7, #6]
		dataPos= (dataPos+1)%huart2.RxXferSize;
 80017a6:	4b0b      	ldr	r3, [pc, #44]	; (80017d4 <UARTRecieveIT+0x5c>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	3301      	adds	r3, #1
 80017ac:	4a08      	ldr	r2, [pc, #32]	; (80017d0 <UARTRecieveIT+0x58>)
 80017ae:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 80017b0:	fbb3 f1f2 	udiv	r1, r3, r2
 80017b4:	fb02 f201 	mul.w	r2, r2, r1
 80017b8:	1a9b      	subs	r3, r3, r2
 80017ba:	4a06      	ldr	r2, [pc, #24]	; (80017d4 <UARTRecieveIT+0x5c>)
 80017bc:	6013      	str	r3, [r2, #0]
	}
	return data;
 80017be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	370c      	adds	r7, #12
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	20000298 	.word	0x20000298
 80017d4:	20000108 	.word	0x20000108
 80017d8:	200000dc 	.word	0x200000dc

080017dc <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi3)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	4a06      	ldr	r2, [pc, #24]	; (8001800 <HAL_SPI_TxCpltCallback+0x24>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d105      	bne.n	80017f8 <HAL_SPI_TxCpltCallback+0x1c>
	{
		HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_SET);
 80017ec:	2201      	movs	r2, #1
 80017ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017f2:	4804      	ldr	r0, [pc, #16]	; (8001804 <HAL_SPI_TxCpltCallback+0x28>)
 80017f4:	f001 fee4 	bl	80035c0 <HAL_GPIO_WritePin>
	}
}
 80017f8:	bf00      	nop
 80017fa:	3708      	adds	r7, #8
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	20000158 	.word	0x20000158
 8001804:	40020400 	.word	0x40020400

08001808 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001808:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 800180c:	b083      	sub	sp, #12
 800180e:	af00      	add	r7, sp, #0
 8001810:	6078      	str	r0, [r7, #4]
	if (htim == &htim11)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4a0b      	ldr	r2, [pc, #44]	; (8001844 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d10d      	bne.n	8001836 <HAL_TIM_PeriodElapsedCallback+0x2e>
	{
		_micro += 65535;
 800181a:	4b0b      	ldr	r3, [pc, #44]	; (8001848 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800181c:	e9d3 bc00 	ldrd	fp, ip, [r3]
 8001820:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001824:	f04f 0200 	mov.w	r2, #0
 8001828:	eb1b 0301 	adds.w	r3, fp, r1
 800182c:	eb4c 0402 	adc.w	r4, ip, r2
 8001830:	4a05      	ldr	r2, [pc, #20]	; (8001848 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001832:	e9c2 3400 	strd	r3, r4, [r2]
	}
}
 8001836:	bf00      	nop
 8001838:	370c      	adds	r7, #12
 800183a:	46bd      	mov	sp, r7
 800183c:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	200001f8 	.word	0x200001f8
 8001848:	200000a0 	.word	0x200000a0

0800184c <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
	sprintf(TxDataBuffer, "Received:[%s]\r\n", RxDataBuffer);
 8001854:	4a04      	ldr	r2, [pc, #16]	; (8001868 <HAL_UART_RxCpltCallback+0x1c>)
 8001856:	4905      	ldr	r1, [pc, #20]	; (800186c <HAL_UART_RxCpltCallback+0x20>)
 8001858:	4805      	ldr	r0, [pc, #20]	; (8001870 <HAL_UART_RxCpltCallback+0x24>)
 800185a:	f004 fcc5 	bl	80061e8 <siprintf>
	//HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
}
 800185e:	bf00      	nop
 8001860:	3708      	adds	r7, #8
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	200000dc 	.word	0x200000dc
 800186c:	08006afc 	.word	0x08006afc
 8001870:	200000bc 	.word	0x200000bc

08001874 <micros>:

inline uint64_t micros()
{
 8001874:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 8001878:	af00      	add	r7, sp, #0
	return htim11.Instance->CNT + _micro;
 800187a:	4b09      	ldr	r3, [pc, #36]	; (80018a0 <micros+0x2c>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001880:	4619      	mov	r1, r3
 8001882:	f04f 0200 	mov.w	r2, #0
 8001886:	4b07      	ldr	r3, [pc, #28]	; (80018a4 <micros+0x30>)
 8001888:	e9d3 bc00 	ldrd	fp, ip, [r3]
 800188c:	eb1b 0301 	adds.w	r3, fp, r1
 8001890:	eb4c 0402 	adc.w	r4, ip, r2
}
 8001894:	4618      	mov	r0, r3
 8001896:	4621      	mov	r1, r4
 8001898:	46bd      	mov	sp, r7
 800189a:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 800189e:	4770      	bx	lr
 80018a0:	200001f8 	.word	0x200001f8
 80018a4:	200000a0 	.word	0x200000a0

080018a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018ac:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80018ae:	e7fe      	b.n	80018ae <Error_Handler+0x6>

080018b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018b6:	2300      	movs	r3, #0
 80018b8:	607b      	str	r3, [r7, #4]
 80018ba:	4b10      	ldr	r3, [pc, #64]	; (80018fc <HAL_MspInit+0x4c>)
 80018bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018be:	4a0f      	ldr	r2, [pc, #60]	; (80018fc <HAL_MspInit+0x4c>)
 80018c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018c4:	6453      	str	r3, [r2, #68]	; 0x44
 80018c6:	4b0d      	ldr	r3, [pc, #52]	; (80018fc <HAL_MspInit+0x4c>)
 80018c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018ce:	607b      	str	r3, [r7, #4]
 80018d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018d2:	2300      	movs	r3, #0
 80018d4:	603b      	str	r3, [r7, #0]
 80018d6:	4b09      	ldr	r3, [pc, #36]	; (80018fc <HAL_MspInit+0x4c>)
 80018d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018da:	4a08      	ldr	r2, [pc, #32]	; (80018fc <HAL_MspInit+0x4c>)
 80018dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018e0:	6413      	str	r3, [r2, #64]	; 0x40
 80018e2:	4b06      	ldr	r3, [pc, #24]	; (80018fc <HAL_MspInit+0x4c>)
 80018e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ea:	603b      	str	r3, [r7, #0]
 80018ec:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80018ee:	2007      	movs	r0, #7
 80018f0:	f001 f8fa 	bl	8002ae8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018f4:	bf00      	nop
 80018f6:	3708      	adds	r7, #8
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	40023800 	.word	0x40023800

08001900 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b08a      	sub	sp, #40	; 0x28
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001908:	f107 0314 	add.w	r3, r7, #20
 800190c:	2200      	movs	r2, #0
 800190e:	601a      	str	r2, [r3, #0]
 8001910:	605a      	str	r2, [r3, #4]
 8001912:	609a      	str	r2, [r3, #8]
 8001914:	60da      	str	r2, [r3, #12]
 8001916:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a33      	ldr	r2, [pc, #204]	; (80019ec <HAL_ADC_MspInit+0xec>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d15f      	bne.n	80019e2 <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001922:	2300      	movs	r3, #0
 8001924:	613b      	str	r3, [r7, #16]
 8001926:	4b32      	ldr	r3, [pc, #200]	; (80019f0 <HAL_ADC_MspInit+0xf0>)
 8001928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800192a:	4a31      	ldr	r2, [pc, #196]	; (80019f0 <HAL_ADC_MspInit+0xf0>)
 800192c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001930:	6453      	str	r3, [r2, #68]	; 0x44
 8001932:	4b2f      	ldr	r3, [pc, #188]	; (80019f0 <HAL_ADC_MspInit+0xf0>)
 8001934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001936:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800193a:	613b      	str	r3, [r7, #16]
 800193c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800193e:	2300      	movs	r3, #0
 8001940:	60fb      	str	r3, [r7, #12]
 8001942:	4b2b      	ldr	r3, [pc, #172]	; (80019f0 <HAL_ADC_MspInit+0xf0>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001946:	4a2a      	ldr	r2, [pc, #168]	; (80019f0 <HAL_ADC_MspInit+0xf0>)
 8001948:	f043 0301 	orr.w	r3, r3, #1
 800194c:	6313      	str	r3, [r2, #48]	; 0x30
 800194e:	4b28      	ldr	r3, [pc, #160]	; (80019f0 <HAL_ADC_MspInit+0xf0>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001952:	f003 0301 	and.w	r3, r3, #1
 8001956:	60fb      	str	r3, [r7, #12]
 8001958:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800195a:	2301      	movs	r3, #1
 800195c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800195e:	2303      	movs	r3, #3
 8001960:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001962:	2300      	movs	r3, #0
 8001964:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001966:	f107 0314 	add.w	r3, r7, #20
 800196a:	4619      	mov	r1, r3
 800196c:	4821      	ldr	r0, [pc, #132]	; (80019f4 <HAL_ADC_MspInit+0xf4>)
 800196e:	f001 fc8d 	bl	800328c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001972:	4b21      	ldr	r3, [pc, #132]	; (80019f8 <HAL_ADC_MspInit+0xf8>)
 8001974:	4a21      	ldr	r2, [pc, #132]	; (80019fc <HAL_ADC_MspInit+0xfc>)
 8001976:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001978:	4b1f      	ldr	r3, [pc, #124]	; (80019f8 <HAL_ADC_MspInit+0xf8>)
 800197a:	2200      	movs	r2, #0
 800197c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800197e:	4b1e      	ldr	r3, [pc, #120]	; (80019f8 <HAL_ADC_MspInit+0xf8>)
 8001980:	2200      	movs	r2, #0
 8001982:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001984:	4b1c      	ldr	r3, [pc, #112]	; (80019f8 <HAL_ADC_MspInit+0xf8>)
 8001986:	2200      	movs	r2, #0
 8001988:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800198a:	4b1b      	ldr	r3, [pc, #108]	; (80019f8 <HAL_ADC_MspInit+0xf8>)
 800198c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001990:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001992:	4b19      	ldr	r3, [pc, #100]	; (80019f8 <HAL_ADC_MspInit+0xf8>)
 8001994:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001998:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800199a:	4b17      	ldr	r3, [pc, #92]	; (80019f8 <HAL_ADC_MspInit+0xf8>)
 800199c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019a0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80019a2:	4b15      	ldr	r3, [pc, #84]	; (80019f8 <HAL_ADC_MspInit+0xf8>)
 80019a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019a8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80019aa:	4b13      	ldr	r3, [pc, #76]	; (80019f8 <HAL_ADC_MspInit+0xf8>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80019b0:	4b11      	ldr	r3, [pc, #68]	; (80019f8 <HAL_ADC_MspInit+0xf8>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80019b6:	4810      	ldr	r0, [pc, #64]	; (80019f8 <HAL_ADC_MspInit+0xf8>)
 80019b8:	f001 f8d8 	bl	8002b6c <HAL_DMA_Init>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80019c2:	f7ff ff71 	bl	80018a8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4a0b      	ldr	r2, [pc, #44]	; (80019f8 <HAL_ADC_MspInit+0xf8>)
 80019ca:	639a      	str	r2, [r3, #56]	; 0x38
 80019cc:	4a0a      	ldr	r2, [pc, #40]	; (80019f8 <HAL_ADC_MspInit+0xf8>)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80019d2:	2200      	movs	r2, #0
 80019d4:	2100      	movs	r1, #0
 80019d6:	2012      	movs	r0, #18
 80019d8:	f001 f891 	bl	8002afe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80019dc:	2012      	movs	r0, #18
 80019de:	f001 f8aa 	bl	8002b36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80019e2:	bf00      	nop
 80019e4:	3728      	adds	r7, #40	; 0x28
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	40012000 	.word	0x40012000
 80019f0:	40023800 	.word	0x40023800
 80019f4:	40020000 	.word	0x40020000
 80019f8:	20000238 	.word	0x20000238
 80019fc:	40026410 	.word	0x40026410

08001a00 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b08a      	sub	sp, #40	; 0x28
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a08:	f107 0314 	add.w	r3, r7, #20
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	601a      	str	r2, [r3, #0]
 8001a10:	605a      	str	r2, [r3, #4]
 8001a12:	609a      	str	r2, [r3, #8]
 8001a14:	60da      	str	r2, [r3, #12]
 8001a16:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a2c      	ldr	r2, [pc, #176]	; (8001ad0 <HAL_SPI_MspInit+0xd0>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d152      	bne.n	8001ac8 <HAL_SPI_MspInit+0xc8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001a22:	2300      	movs	r3, #0
 8001a24:	613b      	str	r3, [r7, #16]
 8001a26:	4b2b      	ldr	r3, [pc, #172]	; (8001ad4 <HAL_SPI_MspInit+0xd4>)
 8001a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2a:	4a2a      	ldr	r2, [pc, #168]	; (8001ad4 <HAL_SPI_MspInit+0xd4>)
 8001a2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a30:	6413      	str	r3, [r2, #64]	; 0x40
 8001a32:	4b28      	ldr	r3, [pc, #160]	; (8001ad4 <HAL_SPI_MspInit+0xd4>)
 8001a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a36:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a3a:	613b      	str	r3, [r7, #16]
 8001a3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a3e:	2300      	movs	r3, #0
 8001a40:	60fb      	str	r3, [r7, #12]
 8001a42:	4b24      	ldr	r3, [pc, #144]	; (8001ad4 <HAL_SPI_MspInit+0xd4>)
 8001a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a46:	4a23      	ldr	r2, [pc, #140]	; (8001ad4 <HAL_SPI_MspInit+0xd4>)
 8001a48:	f043 0304 	orr.w	r3, r3, #4
 8001a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a4e:	4b21      	ldr	r3, [pc, #132]	; (8001ad4 <HAL_SPI_MspInit+0xd4>)
 8001a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a52:	f003 0304 	and.w	r3, r3, #4
 8001a56:	60fb      	str	r3, [r7, #12]
 8001a58:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	60bb      	str	r3, [r7, #8]
 8001a5e:	4b1d      	ldr	r3, [pc, #116]	; (8001ad4 <HAL_SPI_MspInit+0xd4>)
 8001a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a62:	4a1c      	ldr	r2, [pc, #112]	; (8001ad4 <HAL_SPI_MspInit+0xd4>)
 8001a64:	f043 0302 	orr.w	r3, r3, #2
 8001a68:	6313      	str	r3, [r2, #48]	; 0x30
 8001a6a:	4b1a      	ldr	r3, [pc, #104]	; (8001ad4 <HAL_SPI_MspInit+0xd4>)
 8001a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6e:	f003 0302 	and.w	r3, r3, #2
 8001a72:	60bb      	str	r3, [r7, #8]
 8001a74:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC11     ------> SPI3_MISO
    PB3     ------> SPI3_SCK
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001a76:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001a7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a7c:	2302      	movs	r3, #2
 8001a7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a80:	2300      	movs	r3, #0
 8001a82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a84:	2303      	movs	r3, #3
 8001a86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001a88:	2306      	movs	r3, #6
 8001a8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a8c:	f107 0314 	add.w	r3, r7, #20
 8001a90:	4619      	mov	r1, r3
 8001a92:	4811      	ldr	r0, [pc, #68]	; (8001ad8 <HAL_SPI_MspInit+0xd8>)
 8001a94:	f001 fbfa 	bl	800328c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8001a98:	2328      	movs	r3, #40	; 0x28
 8001a9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001aa8:	2306      	movs	r3, #6
 8001aaa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aac:	f107 0314 	add.w	r3, r7, #20
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	480a      	ldr	r0, [pc, #40]	; (8001adc <HAL_SPI_MspInit+0xdc>)
 8001ab4:	f001 fbea 	bl	800328c <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8001ab8:	2200      	movs	r2, #0
 8001aba:	2100      	movs	r1, #0
 8001abc:	2033      	movs	r0, #51	; 0x33
 8001abe:	f001 f81e 	bl	8002afe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8001ac2:	2033      	movs	r0, #51	; 0x33
 8001ac4:	f001 f837 	bl	8002b36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001ac8:	bf00      	nop
 8001aca:	3728      	adds	r7, #40	; 0x28
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	40003c00 	.word	0x40003c00
 8001ad4:	40023800 	.word	0x40023800
 8001ad8:	40020800 	.word	0x40020800
 8001adc:	40020400 	.word	0x40020400

08001ae0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b08a      	sub	sp, #40	; 0x28
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae8:	f107 0314 	add.w	r3, r7, #20
 8001aec:	2200      	movs	r2, #0
 8001aee:	601a      	str	r2, [r3, #0]
 8001af0:	605a      	str	r2, [r3, #4]
 8001af2:	609a      	str	r2, [r3, #8]
 8001af4:	60da      	str	r2, [r3, #12]
 8001af6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM3)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a27      	ldr	r2, [pc, #156]	; (8001b9c <HAL_TIM_Base_MspInit+0xbc>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d10e      	bne.n	8001b20 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b02:	2300      	movs	r3, #0
 8001b04:	613b      	str	r3, [r7, #16]
 8001b06:	4b26      	ldr	r3, [pc, #152]	; (8001ba0 <HAL_TIM_Base_MspInit+0xc0>)
 8001b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0a:	4a25      	ldr	r2, [pc, #148]	; (8001ba0 <HAL_TIM_Base_MspInit+0xc0>)
 8001b0c:	f043 0302 	orr.w	r3, r3, #2
 8001b10:	6413      	str	r3, [r2, #64]	; 0x40
 8001b12:	4b23      	ldr	r3, [pc, #140]	; (8001ba0 <HAL_TIM_Base_MspInit+0xc0>)
 8001b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b16:	f003 0302 	and.w	r3, r3, #2
 8001b1a:	613b      	str	r3, [r7, #16]
 8001b1c:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8001b1e:	e039      	b.n	8001b94 <HAL_TIM_Base_MspInit+0xb4>
  else if(htim_base->Instance==TIM11)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a1f      	ldr	r2, [pc, #124]	; (8001ba4 <HAL_TIM_Base_MspInit+0xc4>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d134      	bne.n	8001b94 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	60fb      	str	r3, [r7, #12]
 8001b2e:	4b1c      	ldr	r3, [pc, #112]	; (8001ba0 <HAL_TIM_Base_MspInit+0xc0>)
 8001b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b32:	4a1b      	ldr	r2, [pc, #108]	; (8001ba0 <HAL_TIM_Base_MspInit+0xc0>)
 8001b34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b38:	6453      	str	r3, [r2, #68]	; 0x44
 8001b3a:	4b19      	ldr	r3, [pc, #100]	; (8001ba0 <HAL_TIM_Base_MspInit+0xc0>)
 8001b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b42:	60fb      	str	r3, [r7, #12]
 8001b44:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b46:	2300      	movs	r3, #0
 8001b48:	60bb      	str	r3, [r7, #8]
 8001b4a:	4b15      	ldr	r3, [pc, #84]	; (8001ba0 <HAL_TIM_Base_MspInit+0xc0>)
 8001b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4e:	4a14      	ldr	r2, [pc, #80]	; (8001ba0 <HAL_TIM_Base_MspInit+0xc0>)
 8001b50:	f043 0302 	orr.w	r3, r3, #2
 8001b54:	6313      	str	r3, [r2, #48]	; 0x30
 8001b56:	4b12      	ldr	r3, [pc, #72]	; (8001ba0 <HAL_TIM_Base_MspInit+0xc0>)
 8001b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5a:	f003 0302 	and.w	r3, r3, #2
 8001b5e:	60bb      	str	r3, [r7, #8]
 8001b60:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001b62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b68:	2302      	movs	r3, #2
 8001b6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b70:	2300      	movs	r3, #0
 8001b72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8001b74:	2303      	movs	r3, #3
 8001b76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b78:	f107 0314 	add.w	r3, r7, #20
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	480a      	ldr	r0, [pc, #40]	; (8001ba8 <HAL_TIM_Base_MspInit+0xc8>)
 8001b80:	f001 fb84 	bl	800328c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001b84:	2200      	movs	r2, #0
 8001b86:	2100      	movs	r1, #0
 8001b88:	201a      	movs	r0, #26
 8001b8a:	f000 ffb8 	bl	8002afe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001b8e:	201a      	movs	r0, #26
 8001b90:	f000 ffd1 	bl	8002b36 <HAL_NVIC_EnableIRQ>
}
 8001b94:	bf00      	nop
 8001b96:	3728      	adds	r7, #40	; 0x28
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	40000400 	.word	0x40000400
 8001ba0:	40023800 	.word	0x40023800
 8001ba4:	40014800 	.word	0x40014800
 8001ba8:	40020400 	.word	0x40020400

08001bac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b08a      	sub	sp, #40	; 0x28
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb4:	f107 0314 	add.w	r3, r7, #20
 8001bb8:	2200      	movs	r2, #0
 8001bba:	601a      	str	r2, [r3, #0]
 8001bbc:	605a      	str	r2, [r3, #4]
 8001bbe:	609a      	str	r2, [r3, #8]
 8001bc0:	60da      	str	r2, [r3, #12]
 8001bc2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a1d      	ldr	r2, [pc, #116]	; (8001c40 <HAL_UART_MspInit+0x94>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d133      	bne.n	8001c36 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001bce:	2300      	movs	r3, #0
 8001bd0:	613b      	str	r3, [r7, #16]
 8001bd2:	4b1c      	ldr	r3, [pc, #112]	; (8001c44 <HAL_UART_MspInit+0x98>)
 8001bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd6:	4a1b      	ldr	r2, [pc, #108]	; (8001c44 <HAL_UART_MspInit+0x98>)
 8001bd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bdc:	6413      	str	r3, [r2, #64]	; 0x40
 8001bde:	4b19      	ldr	r3, [pc, #100]	; (8001c44 <HAL_UART_MspInit+0x98>)
 8001be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001be6:	613b      	str	r3, [r7, #16]
 8001be8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bea:	2300      	movs	r3, #0
 8001bec:	60fb      	str	r3, [r7, #12]
 8001bee:	4b15      	ldr	r3, [pc, #84]	; (8001c44 <HAL_UART_MspInit+0x98>)
 8001bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf2:	4a14      	ldr	r2, [pc, #80]	; (8001c44 <HAL_UART_MspInit+0x98>)
 8001bf4:	f043 0301 	orr.w	r3, r3, #1
 8001bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bfa:	4b12      	ldr	r3, [pc, #72]	; (8001c44 <HAL_UART_MspInit+0x98>)
 8001bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfe:	f003 0301 	and.w	r3, r3, #1
 8001c02:	60fb      	str	r3, [r7, #12]
 8001c04:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001c06:	230c      	movs	r3, #12
 8001c08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c12:	2303      	movs	r3, #3
 8001c14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c16:	2307      	movs	r3, #7
 8001c18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c1a:	f107 0314 	add.w	r3, r7, #20
 8001c1e:	4619      	mov	r1, r3
 8001c20:	4809      	ldr	r0, [pc, #36]	; (8001c48 <HAL_UART_MspInit+0x9c>)
 8001c22:	f001 fb33 	bl	800328c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001c26:	2200      	movs	r2, #0
 8001c28:	2100      	movs	r1, #0
 8001c2a:	2026      	movs	r0, #38	; 0x26
 8001c2c:	f000 ff67 	bl	8002afe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001c30:	2026      	movs	r0, #38	; 0x26
 8001c32:	f000 ff80 	bl	8002b36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001c36:	bf00      	nop
 8001c38:	3728      	adds	r7, #40	; 0x28
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	40004400 	.word	0x40004400
 8001c44:	40023800 	.word	0x40023800
 8001c48:	40020000 	.word	0x40020000

08001c4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c50:	e7fe      	b.n	8001c50 <NMI_Handler+0x4>

08001c52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c52:	b480      	push	{r7}
 8001c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c56:	e7fe      	b.n	8001c56 <HardFault_Handler+0x4>

08001c58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c5c:	e7fe      	b.n	8001c5c <MemManage_Handler+0x4>

08001c5e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c5e:	b480      	push	{r7}
 8001c60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c62:	e7fe      	b.n	8001c62 <BusFault_Handler+0x4>

08001c64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c68:	e7fe      	b.n	8001c68 <UsageFault_Handler+0x4>

08001c6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c6a:	b480      	push	{r7}
 8001c6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c6e:	bf00      	nop
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr

08001c78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c7c:	bf00      	nop
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr

08001c86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c86:	b480      	push	{r7}
 8001c88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c8a:	bf00      	nop
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr

08001c94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c98:	f000 f8fc 	bl	8001e94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c9c:	bf00      	nop
 8001c9e:	bd80      	pop	{r7, pc}

08001ca0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001ca4:	4802      	ldr	r0, [pc, #8]	; (8001cb0 <ADC_IRQHandler+0x10>)
 8001ca6:	f000 f958 	bl	8001f5a <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001caa:	bf00      	nop
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	200001b0 	.word	0x200001b0

08001cb4 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8001cb8:	4802      	ldr	r0, [pc, #8]	; (8001cc4 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8001cba:	f002 fded 	bl	8004898 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001cbe:	bf00      	nop
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	200001f8 	.word	0x200001f8

08001cc8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001ccc:	4802      	ldr	r0, [pc, #8]	; (8001cd8 <USART2_IRQHandler+0x10>)
 8001cce:	f003 fc5d 	bl	800558c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001cd2:	bf00      	nop
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	20000298 	.word	0x20000298

08001cdc <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8001ce0:	4802      	ldr	r0, [pc, #8]	; (8001cec <SPI3_IRQHandler+0x10>)
 8001ce2:	f002 fabf 	bl	8004264 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8001ce6:	bf00      	nop
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	20000158 	.word	0x20000158

08001cf0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001cf4:	4802      	ldr	r0, [pc, #8]	; (8001d00 <DMA2_Stream0_IRQHandler+0x10>)
 8001cf6:	f001 f861 	bl	8002dbc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001cfa:	bf00      	nop
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	20000238 	.word	0x20000238

08001d04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b086      	sub	sp, #24
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d0c:	4a14      	ldr	r2, [pc, #80]	; (8001d60 <_sbrk+0x5c>)
 8001d0e:	4b15      	ldr	r3, [pc, #84]	; (8001d64 <_sbrk+0x60>)
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d18:	4b13      	ldr	r3, [pc, #76]	; (8001d68 <_sbrk+0x64>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d102      	bne.n	8001d26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d20:	4b11      	ldr	r3, [pc, #68]	; (8001d68 <_sbrk+0x64>)
 8001d22:	4a12      	ldr	r2, [pc, #72]	; (8001d6c <_sbrk+0x68>)
 8001d24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d26:	4b10      	ldr	r3, [pc, #64]	; (8001d68 <_sbrk+0x64>)
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4413      	add	r3, r2
 8001d2e:	693a      	ldr	r2, [r7, #16]
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d207      	bcs.n	8001d44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d34:	f004 fa26 	bl	8006184 <__errno>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	230c      	movs	r3, #12
 8001d3c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001d3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d42:	e009      	b.n	8001d58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d44:	4b08      	ldr	r3, [pc, #32]	; (8001d68 <_sbrk+0x64>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d4a:	4b07      	ldr	r3, [pc, #28]	; (8001d68 <_sbrk+0x64>)
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4413      	add	r3, r2
 8001d52:	4a05      	ldr	r2, [pc, #20]	; (8001d68 <_sbrk+0x64>)
 8001d54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d56:	68fb      	ldr	r3, [r7, #12]
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	3718      	adds	r7, #24
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	20020000 	.word	0x20020000
 8001d64:	00000400 	.word	0x00000400
 8001d68:	2000010c 	.word	0x2000010c
 8001d6c:	200002e0 	.word	0x200002e0

08001d70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d74:	4b08      	ldr	r3, [pc, #32]	; (8001d98 <SystemInit+0x28>)
 8001d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d7a:	4a07      	ldr	r2, [pc, #28]	; (8001d98 <SystemInit+0x28>)
 8001d7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001d84:	4b04      	ldr	r3, [pc, #16]	; (8001d98 <SystemInit+0x28>)
 8001d86:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d8a:	609a      	str	r2, [r3, #8]
#endif
}
 8001d8c:	bf00      	nop
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	e000ed00 	.word	0xe000ed00

08001d9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001dd4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001da0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001da2:	e003      	b.n	8001dac <LoopCopyDataInit>

08001da4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001da4:	4b0c      	ldr	r3, [pc, #48]	; (8001dd8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001da6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001da8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001daa:	3104      	adds	r1, #4

08001dac <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001dac:	480b      	ldr	r0, [pc, #44]	; (8001ddc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001dae:	4b0c      	ldr	r3, [pc, #48]	; (8001de0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001db0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001db2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001db4:	d3f6      	bcc.n	8001da4 <CopyDataInit>
  ldr  r2, =_sbss
 8001db6:	4a0b      	ldr	r2, [pc, #44]	; (8001de4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001db8:	e002      	b.n	8001dc0 <LoopFillZerobss>

08001dba <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001dba:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001dbc:	f842 3b04 	str.w	r3, [r2], #4

08001dc0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001dc0:	4b09      	ldr	r3, [pc, #36]	; (8001de8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001dc2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001dc4:	d3f9      	bcc.n	8001dba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001dc6:	f7ff ffd3 	bl	8001d70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001dca:	f004 f9e1 	bl	8006190 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001dce:	f7fe fdeb 	bl	80009a8 <main>
  bx  lr    
 8001dd2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001dd4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001dd8:	08006b70 	.word	0x08006b70
  ldr  r0, =_sdata
 8001ddc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001de0:	2000007c 	.word	0x2000007c
  ldr  r2, =_sbss
 8001de4:	20000080 	.word	0x20000080
  ldr  r3, = _ebss
 8001de8:	200002e0 	.word	0x200002e0

08001dec <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001dec:	e7fe      	b.n	8001dec <DMA1_Stream0_IRQHandler>
	...

08001df0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001df4:	4b0e      	ldr	r3, [pc, #56]	; (8001e30 <HAL_Init+0x40>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a0d      	ldr	r2, [pc, #52]	; (8001e30 <HAL_Init+0x40>)
 8001dfa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001dfe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e00:	4b0b      	ldr	r3, [pc, #44]	; (8001e30 <HAL_Init+0x40>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a0a      	ldr	r2, [pc, #40]	; (8001e30 <HAL_Init+0x40>)
 8001e06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e0a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e0c:	4b08      	ldr	r3, [pc, #32]	; (8001e30 <HAL_Init+0x40>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a07      	ldr	r2, [pc, #28]	; (8001e30 <HAL_Init+0x40>)
 8001e12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e18:	2003      	movs	r0, #3
 8001e1a:	f000 fe65 	bl	8002ae8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e1e:	2000      	movs	r0, #0
 8001e20:	f000 f808 	bl	8001e34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e24:	f7ff fd44 	bl	80018b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e28:	2300      	movs	r3, #0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	40023c00 	.word	0x40023c00

08001e34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e3c:	4b12      	ldr	r3, [pc, #72]	; (8001e88 <HAL_InitTick+0x54>)
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	4b12      	ldr	r3, [pc, #72]	; (8001e8c <HAL_InitTick+0x58>)
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	4619      	mov	r1, r3
 8001e46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e52:	4618      	mov	r0, r3
 8001e54:	f000 fe7d 	bl	8002b52 <HAL_SYSTICK_Config>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d001      	beq.n	8001e62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e00e      	b.n	8001e80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2b0f      	cmp	r3, #15
 8001e66:	d80a      	bhi.n	8001e7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e68:	2200      	movs	r2, #0
 8001e6a:	6879      	ldr	r1, [r7, #4]
 8001e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e70:	f000 fe45 	bl	8002afe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e74:	4a06      	ldr	r2, [pc, #24]	; (8001e90 <HAL_InitTick+0x5c>)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	e000      	b.n	8001e80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3708      	adds	r7, #8
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	2000000c 	.word	0x2000000c
 8001e8c:	20000014 	.word	0x20000014
 8001e90:	20000010 	.word	0x20000010

08001e94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e98:	4b06      	ldr	r3, [pc, #24]	; (8001eb4 <HAL_IncTick+0x20>)
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	4b06      	ldr	r3, [pc, #24]	; (8001eb8 <HAL_IncTick+0x24>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	4a04      	ldr	r2, [pc, #16]	; (8001eb8 <HAL_IncTick+0x24>)
 8001ea6:	6013      	str	r3, [r2, #0]
}
 8001ea8:	bf00      	nop
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	20000014 	.word	0x20000014
 8001eb8:	200002d8 	.word	0x200002d8

08001ebc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
  return uwTick;
 8001ec0:	4b03      	ldr	r3, [pc, #12]	; (8001ed0 <HAL_GetTick+0x14>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	200002d8 	.word	0x200002d8

08001ed4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b084      	sub	sp, #16
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001edc:	2300      	movs	r3, #0
 8001ede:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d101      	bne.n	8001eea <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e033      	b.n	8001f52 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d109      	bne.n	8001f06 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f7ff fd04 	bl	8001900 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2200      	movs	r2, #0
 8001efc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2200      	movs	r2, #0
 8001f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0a:	f003 0310 	and.w	r3, r3, #16
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d118      	bne.n	8001f44 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f16:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001f1a:	f023 0302 	bic.w	r3, r3, #2
 8001f1e:	f043 0202 	orr.w	r2, r3, #2
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f000 fb86 	bl	8002638 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f36:	f023 0303 	bic.w	r3, r3, #3
 8001f3a:	f043 0201 	orr.w	r2, r3, #1
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	641a      	str	r2, [r3, #64]	; 0x40
 8001f42:	e001      	b.n	8001f48 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001f50:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3710      	adds	r7, #16
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}

08001f5a <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001f5a:	b580      	push	{r7, lr}
 8001f5c:	b084      	sub	sp, #16
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001f62:	2300      	movs	r3, #0
 8001f64:	60fb      	str	r3, [r7, #12]
 8001f66:	2300      	movs	r3, #0
 8001f68:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 0302 	and.w	r3, r3, #2
 8001f74:	2b02      	cmp	r3, #2
 8001f76:	bf0c      	ite	eq
 8001f78:	2301      	moveq	r3, #1
 8001f7a:	2300      	movne	r3, #0
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f003 0320 	and.w	r3, r3, #32
 8001f8a:	2b20      	cmp	r3, #32
 8001f8c:	bf0c      	ite	eq
 8001f8e:	2301      	moveq	r3, #1
 8001f90:	2300      	movne	r3, #0
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d049      	beq.n	8002030 <HAL_ADC_IRQHandler+0xd6>
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d046      	beq.n	8002030 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa6:	f003 0310 	and.w	r3, r3, #16
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d105      	bne.n	8001fba <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d12b      	bne.n	8002020 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d127      	bne.n	8002020 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fd6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d006      	beq.n	8001fec <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d119      	bne.n	8002020 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	685a      	ldr	r2, [r3, #4]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f022 0220 	bic.w	r2, r2, #32
 8001ffa:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002000:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002010:	2b00      	cmp	r3, #0
 8002012:	d105      	bne.n	8002020 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002018:	f043 0201 	orr.w	r2, r3, #1
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	f000 f9af 	bl	8002384 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f06f 0212 	mvn.w	r2, #18
 800202e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0304 	and.w	r3, r3, #4
 800203a:	2b04      	cmp	r3, #4
 800203c:	bf0c      	ite	eq
 800203e:	2301      	moveq	r3, #1
 8002040:	2300      	movne	r3, #0
 8002042:	b2db      	uxtb	r3, r3
 8002044:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002050:	2b80      	cmp	r3, #128	; 0x80
 8002052:	bf0c      	ite	eq
 8002054:	2301      	moveq	r3, #1
 8002056:	2300      	movne	r3, #0
 8002058:	b2db      	uxtb	r3, r3
 800205a:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d057      	beq.n	8002112 <HAL_ADC_IRQHandler+0x1b8>
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d054      	beq.n	8002112 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206c:	f003 0310 	and.w	r3, r3, #16
 8002070:	2b00      	cmp	r3, #0
 8002072:	d105      	bne.n	8002080 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002078:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d139      	bne.n	8002102 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002094:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002098:	2b00      	cmp	r3, #0
 800209a:	d006      	beq.n	80020aa <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d12b      	bne.n	8002102 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d124      	bne.n	8002102 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d11d      	bne.n	8002102 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d119      	bne.n	8002102 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	685a      	ldr	r2, [r3, #4]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80020dc:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d105      	bne.n	8002102 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fa:	f043 0201 	orr.w	r2, r3, #1
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f000 fc16 	bl	8002934 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f06f 020c 	mvn.w	r2, #12
 8002110:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 0301 	and.w	r3, r3, #1
 800211c:	2b01      	cmp	r3, #1
 800211e:	bf0c      	ite	eq
 8002120:	2301      	moveq	r3, #1
 8002122:	2300      	movne	r3, #0
 8002124:	b2db      	uxtb	r3, r3
 8002126:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002132:	2b40      	cmp	r3, #64	; 0x40
 8002134:	bf0c      	ite	eq
 8002136:	2301      	moveq	r3, #1
 8002138:	2300      	movne	r3, #0
 800213a:	b2db      	uxtb	r3, r3
 800213c:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d017      	beq.n	8002174 <HAL_ADC_IRQHandler+0x21a>
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d014      	beq.n	8002174 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0301 	and.w	r3, r3, #1
 8002154:	2b01      	cmp	r3, #1
 8002156:	d10d      	bne.n	8002174 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f000 f921 	bl	80023ac <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f06f 0201 	mvn.w	r2, #1
 8002172:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0320 	and.w	r3, r3, #32
 800217e:	2b20      	cmp	r3, #32
 8002180:	bf0c      	ite	eq
 8002182:	2301      	moveq	r3, #1
 8002184:	2300      	movne	r3, #0
 8002186:	b2db      	uxtb	r3, r3
 8002188:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002194:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002198:	bf0c      	ite	eq
 800219a:	2301      	moveq	r3, #1
 800219c:	2300      	movne	r3, #0
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d015      	beq.n	80021d4 <HAL_ADC_IRQHandler+0x27a>
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d012      	beq.n	80021d4 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021b2:	f043 0202 	orr.w	r2, r3, #2
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f06f 0220 	mvn.w	r2, #32
 80021c2:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	f000 f8fb 	bl	80023c0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f06f 0220 	mvn.w	r2, #32
 80021d2:	601a      	str	r2, [r3, #0]
  }
}
 80021d4:	bf00      	nop
 80021d6:	3710      	adds	r7, #16
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}

080021dc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b086      	sub	sp, #24
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	60f8      	str	r0, [r7, #12]
 80021e4:	60b9      	str	r1, [r7, #8]
 80021e6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80021e8:	2300      	movs	r3, #0
 80021ea:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d101      	bne.n	80021fa <HAL_ADC_Start_DMA+0x1e>
 80021f6:	2302      	movs	r3, #2
 80021f8:	e0b1      	b.n	800235e <HAL_ADC_Start_DMA+0x182>
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2201      	movs	r2, #1
 80021fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	f003 0301 	and.w	r3, r3, #1
 800220c:	2b01      	cmp	r3, #1
 800220e:	d018      	beq.n	8002242 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	689a      	ldr	r2, [r3, #8]
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f042 0201 	orr.w	r2, r2, #1
 800221e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002220:	4b51      	ldr	r3, [pc, #324]	; (8002368 <HAL_ADC_Start_DMA+0x18c>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a51      	ldr	r2, [pc, #324]	; (800236c <HAL_ADC_Start_DMA+0x190>)
 8002226:	fba2 2303 	umull	r2, r3, r2, r3
 800222a:	0c9a      	lsrs	r2, r3, #18
 800222c:	4613      	mov	r3, r2
 800222e:	005b      	lsls	r3, r3, #1
 8002230:	4413      	add	r3, r2
 8002232:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002234:	e002      	b.n	800223c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	3b01      	subs	r3, #1
 800223a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d1f9      	bne.n	8002236 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	f003 0301 	and.w	r3, r3, #1
 800224c:	2b01      	cmp	r3, #1
 800224e:	f040 8085 	bne.w	800235c <HAL_ADC_Start_DMA+0x180>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002256:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800225a:	f023 0301 	bic.w	r3, r3, #1
 800225e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002270:	2b00      	cmp	r3, #0
 8002272:	d007      	beq.n	8002284 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002278:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800227c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002288:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800228c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002290:	d106      	bne.n	80022a0 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002296:	f023 0206 	bic.w	r2, r3, #6
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	645a      	str	r2, [r3, #68]	; 0x44
 800229e:	e002      	b.n	80022a6 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2200      	movs	r2, #0
 80022a4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	2200      	movs	r2, #0
 80022aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80022ae:	4b30      	ldr	r3, [pc, #192]	; (8002370 <HAL_ADC_Start_DMA+0x194>)
 80022b0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022b6:	4a2f      	ldr	r2, [pc, #188]	; (8002374 <HAL_ADC_Start_DMA+0x198>)
 80022b8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022be:	4a2e      	ldr	r2, [pc, #184]	; (8002378 <HAL_ADC_Start_DMA+0x19c>)
 80022c0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022c6:	4a2d      	ldr	r2, [pc, #180]	; (800237c <HAL_ADC_Start_DMA+0x1a0>)
 80022c8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80022d2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	685a      	ldr	r2, [r3, #4]
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80022e2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	689a      	ldr	r2, [r3, #8]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80022f2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	334c      	adds	r3, #76	; 0x4c
 80022fe:	4619      	mov	r1, r3
 8002300:	68ba      	ldr	r2, [r7, #8]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	f000 fce0 	bl	8002cc8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f003 031f 	and.w	r3, r3, #31
 8002310:	2b00      	cmp	r3, #0
 8002312:	d10f      	bne.n	8002334 <HAL_ADC_Start_DMA+0x158>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d11c      	bne.n	800235c <HAL_ADC_Start_DMA+0x180>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	689a      	ldr	r2, [r3, #8]
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002330:	609a      	str	r2, [r3, #8]
 8002332:	e013      	b.n	800235c <HAL_ADC_Start_DMA+0x180>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a11      	ldr	r2, [pc, #68]	; (8002380 <HAL_ADC_Start_DMA+0x1a4>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d10e      	bne.n	800235c <HAL_ADC_Start_DMA+0x180>
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002348:	2b00      	cmp	r3, #0
 800234a:	d107      	bne.n	800235c <HAL_ADC_Start_DMA+0x180>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	689a      	ldr	r2, [r3, #8]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800235a:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800235c:	2300      	movs	r3, #0
}
 800235e:	4618      	mov	r0, r3
 8002360:	3718      	adds	r7, #24
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	2000000c 	.word	0x2000000c
 800236c:	431bde83 	.word	0x431bde83
 8002370:	40012300 	.word	0x40012300
 8002374:	08002831 	.word	0x08002831
 8002378:	080028eb 	.word	0x080028eb
 800237c:	08002907 	.word	0x08002907
 8002380:	40012000 	.word	0x40012000

08002384 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800238c:	bf00      	nop
 800238e:	370c      	adds	r7, #12
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr

08002398 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80023a0:	bf00      	nop
 80023a2:	370c      	adds	r7, #12
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr

080023ac <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80023b4:	bf00      	nop
 80023b6:	370c      	adds	r7, #12
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr

080023c0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80023c8:	bf00      	nop
 80023ca:	370c      	adds	r7, #12
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr

080023d4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b085      	sub	sp, #20
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80023de:	2300      	movs	r3, #0
 80023e0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d101      	bne.n	80023f0 <HAL_ADC_ConfigChannel+0x1c>
 80023ec:	2302      	movs	r3, #2
 80023ee:	e113      	b.n	8002618 <HAL_ADC_ConfigChannel+0x244>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2201      	movs	r2, #1
 80023f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	2b09      	cmp	r3, #9
 80023fe:	d925      	bls.n	800244c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	68d9      	ldr	r1, [r3, #12]
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	b29b      	uxth	r3, r3
 800240c:	461a      	mov	r2, r3
 800240e:	4613      	mov	r3, r2
 8002410:	005b      	lsls	r3, r3, #1
 8002412:	4413      	add	r3, r2
 8002414:	3b1e      	subs	r3, #30
 8002416:	2207      	movs	r2, #7
 8002418:	fa02 f303 	lsl.w	r3, r2, r3
 800241c:	43da      	mvns	r2, r3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	400a      	ands	r2, r1
 8002424:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	68d9      	ldr	r1, [r3, #12]
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	689a      	ldr	r2, [r3, #8]
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	b29b      	uxth	r3, r3
 8002436:	4618      	mov	r0, r3
 8002438:	4603      	mov	r3, r0
 800243a:	005b      	lsls	r3, r3, #1
 800243c:	4403      	add	r3, r0
 800243e:	3b1e      	subs	r3, #30
 8002440:	409a      	lsls	r2, r3
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	430a      	orrs	r2, r1
 8002448:	60da      	str	r2, [r3, #12]
 800244a:	e022      	b.n	8002492 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	6919      	ldr	r1, [r3, #16]
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	b29b      	uxth	r3, r3
 8002458:	461a      	mov	r2, r3
 800245a:	4613      	mov	r3, r2
 800245c:	005b      	lsls	r3, r3, #1
 800245e:	4413      	add	r3, r2
 8002460:	2207      	movs	r2, #7
 8002462:	fa02 f303 	lsl.w	r3, r2, r3
 8002466:	43da      	mvns	r2, r3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	400a      	ands	r2, r1
 800246e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	6919      	ldr	r1, [r3, #16]
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	689a      	ldr	r2, [r3, #8]
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	b29b      	uxth	r3, r3
 8002480:	4618      	mov	r0, r3
 8002482:	4603      	mov	r3, r0
 8002484:	005b      	lsls	r3, r3, #1
 8002486:	4403      	add	r3, r0
 8002488:	409a      	lsls	r2, r3
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	430a      	orrs	r2, r1
 8002490:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	2b06      	cmp	r3, #6
 8002498:	d824      	bhi.n	80024e4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	685a      	ldr	r2, [r3, #4]
 80024a4:	4613      	mov	r3, r2
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	4413      	add	r3, r2
 80024aa:	3b05      	subs	r3, #5
 80024ac:	221f      	movs	r2, #31
 80024ae:	fa02 f303 	lsl.w	r3, r2, r3
 80024b2:	43da      	mvns	r2, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	400a      	ands	r2, r1
 80024ba:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	b29b      	uxth	r3, r3
 80024c8:	4618      	mov	r0, r3
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	685a      	ldr	r2, [r3, #4]
 80024ce:	4613      	mov	r3, r2
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	4413      	add	r3, r2
 80024d4:	3b05      	subs	r3, #5
 80024d6:	fa00 f203 	lsl.w	r2, r0, r3
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	430a      	orrs	r2, r1
 80024e0:	635a      	str	r2, [r3, #52]	; 0x34
 80024e2:	e04c      	b.n	800257e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	2b0c      	cmp	r3, #12
 80024ea:	d824      	bhi.n	8002536 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	685a      	ldr	r2, [r3, #4]
 80024f6:	4613      	mov	r3, r2
 80024f8:	009b      	lsls	r3, r3, #2
 80024fa:	4413      	add	r3, r2
 80024fc:	3b23      	subs	r3, #35	; 0x23
 80024fe:	221f      	movs	r2, #31
 8002500:	fa02 f303 	lsl.w	r3, r2, r3
 8002504:	43da      	mvns	r2, r3
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	400a      	ands	r2, r1
 800250c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	b29b      	uxth	r3, r3
 800251a:	4618      	mov	r0, r3
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	685a      	ldr	r2, [r3, #4]
 8002520:	4613      	mov	r3, r2
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	4413      	add	r3, r2
 8002526:	3b23      	subs	r3, #35	; 0x23
 8002528:	fa00 f203 	lsl.w	r2, r0, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	430a      	orrs	r2, r1
 8002532:	631a      	str	r2, [r3, #48]	; 0x30
 8002534:	e023      	b.n	800257e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	685a      	ldr	r2, [r3, #4]
 8002540:	4613      	mov	r3, r2
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	4413      	add	r3, r2
 8002546:	3b41      	subs	r3, #65	; 0x41
 8002548:	221f      	movs	r2, #31
 800254a:	fa02 f303 	lsl.w	r3, r2, r3
 800254e:	43da      	mvns	r2, r3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	400a      	ands	r2, r1
 8002556:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	b29b      	uxth	r3, r3
 8002564:	4618      	mov	r0, r3
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	685a      	ldr	r2, [r3, #4]
 800256a:	4613      	mov	r3, r2
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	4413      	add	r3, r2
 8002570:	3b41      	subs	r3, #65	; 0x41
 8002572:	fa00 f203 	lsl.w	r2, r0, r3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	430a      	orrs	r2, r1
 800257c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800257e:	4b29      	ldr	r3, [pc, #164]	; (8002624 <HAL_ADC_ConfigChannel+0x250>)
 8002580:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a28      	ldr	r2, [pc, #160]	; (8002628 <HAL_ADC_ConfigChannel+0x254>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d10f      	bne.n	80025ac <HAL_ADC_ConfigChannel+0x1d8>
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2b12      	cmp	r3, #18
 8002592:	d10b      	bne.n	80025ac <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a1d      	ldr	r2, [pc, #116]	; (8002628 <HAL_ADC_ConfigChannel+0x254>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d12b      	bne.n	800260e <HAL_ADC_ConfigChannel+0x23a>
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a1c      	ldr	r2, [pc, #112]	; (800262c <HAL_ADC_ConfigChannel+0x258>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d003      	beq.n	80025c8 <HAL_ADC_ConfigChannel+0x1f4>
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	2b11      	cmp	r3, #17
 80025c6:	d122      	bne.n	800260e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a11      	ldr	r2, [pc, #68]	; (800262c <HAL_ADC_ConfigChannel+0x258>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d111      	bne.n	800260e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80025ea:	4b11      	ldr	r3, [pc, #68]	; (8002630 <HAL_ADC_ConfigChannel+0x25c>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a11      	ldr	r2, [pc, #68]	; (8002634 <HAL_ADC_ConfigChannel+0x260>)
 80025f0:	fba2 2303 	umull	r2, r3, r2, r3
 80025f4:	0c9a      	lsrs	r2, r3, #18
 80025f6:	4613      	mov	r3, r2
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	4413      	add	r3, r2
 80025fc:	005b      	lsls	r3, r3, #1
 80025fe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002600:	e002      	b.n	8002608 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	3b01      	subs	r3, #1
 8002606:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d1f9      	bne.n	8002602 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2200      	movs	r2, #0
 8002612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002616:	2300      	movs	r3, #0
}
 8002618:	4618      	mov	r0, r3
 800261a:	3714      	adds	r7, #20
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr
 8002624:	40012300 	.word	0x40012300
 8002628:	40012000 	.word	0x40012000
 800262c:	10000012 	.word	0x10000012
 8002630:	2000000c 	.word	0x2000000c
 8002634:	431bde83 	.word	0x431bde83

08002638 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002638:	b480      	push	{r7}
 800263a:	b085      	sub	sp, #20
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002640:	4b79      	ldr	r3, [pc, #484]	; (8002828 <ADC_Init+0x1f0>)
 8002642:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	685a      	ldr	r2, [r3, #4]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	431a      	orrs	r2, r3
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	685a      	ldr	r2, [r3, #4]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800266c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	6859      	ldr	r1, [r3, #4]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	691b      	ldr	r3, [r3, #16]
 8002678:	021a      	lsls	r2, r3, #8
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	430a      	orrs	r2, r1
 8002680:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	685a      	ldr	r2, [r3, #4]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002690:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	6859      	ldr	r1, [r3, #4]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	689a      	ldr	r2, [r3, #8]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	430a      	orrs	r2, r1
 80026a2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	689a      	ldr	r2, [r3, #8]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	6899      	ldr	r1, [r3, #8]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	68da      	ldr	r2, [r3, #12]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	430a      	orrs	r2, r1
 80026c4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ca:	4a58      	ldr	r2, [pc, #352]	; (800282c <ADC_Init+0x1f4>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d022      	beq.n	8002716 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	689a      	ldr	r2, [r3, #8]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80026de:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	6899      	ldr	r1, [r3, #8]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	430a      	orrs	r2, r1
 80026f0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	689a      	ldr	r2, [r3, #8]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002700:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	6899      	ldr	r1, [r3, #8]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	430a      	orrs	r2, r1
 8002712:	609a      	str	r2, [r3, #8]
 8002714:	e00f      	b.n	8002736 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	689a      	ldr	r2, [r3, #8]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002724:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	689a      	ldr	r2, [r3, #8]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002734:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	689a      	ldr	r2, [r3, #8]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f022 0202 	bic.w	r2, r2, #2
 8002744:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	6899      	ldr	r1, [r3, #8]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	7e1b      	ldrb	r3, [r3, #24]
 8002750:	005a      	lsls	r2, r3, #1
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	430a      	orrs	r2, r1
 8002758:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d01b      	beq.n	800279c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	685a      	ldr	r2, [r3, #4]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002772:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	685a      	ldr	r2, [r3, #4]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002782:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	6859      	ldr	r1, [r3, #4]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278e:	3b01      	subs	r3, #1
 8002790:	035a      	lsls	r2, r3, #13
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	430a      	orrs	r2, r1
 8002798:	605a      	str	r2, [r3, #4]
 800279a:	e007      	b.n	80027ac <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	685a      	ldr	r2, [r3, #4]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027aa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80027ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	69db      	ldr	r3, [r3, #28]
 80027c6:	3b01      	subs	r3, #1
 80027c8:	051a      	lsls	r2, r3, #20
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	430a      	orrs	r2, r1
 80027d0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	689a      	ldr	r2, [r3, #8]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80027e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	6899      	ldr	r1, [r3, #8]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80027ee:	025a      	lsls	r2, r3, #9
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	430a      	orrs	r2, r1
 80027f6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	689a      	ldr	r2, [r3, #8]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002806:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	6899      	ldr	r1, [r3, #8]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	695b      	ldr	r3, [r3, #20]
 8002812:	029a      	lsls	r2, r3, #10
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	430a      	orrs	r2, r1
 800281a:	609a      	str	r2, [r3, #8]
}
 800281c:	bf00      	nop
 800281e:	3714      	adds	r7, #20
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr
 8002828:	40012300 	.word	0x40012300
 800282c:	0f000001 	.word	0x0f000001

08002830 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b084      	sub	sp, #16
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800283c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002842:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002846:	2b00      	cmp	r3, #0
 8002848:	d13c      	bne.n	80028c4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002860:	2b00      	cmp	r3, #0
 8002862:	d12b      	bne.n	80028bc <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002868:	2b00      	cmp	r3, #0
 800286a:	d127      	bne.n	80028bc <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002872:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002876:	2b00      	cmp	r3, #0
 8002878:	d006      	beq.n	8002888 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002884:	2b00      	cmp	r3, #0
 8002886:	d119      	bne.n	80028bc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	685a      	ldr	r2, [r3, #4]
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f022 0220 	bic.w	r2, r2, #32
 8002896:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d105      	bne.n	80028bc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b4:	f043 0201 	orr.w	r2, r3, #1
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80028bc:	68f8      	ldr	r0, [r7, #12]
 80028be:	f7ff fd61 	bl	8002384 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80028c2:	e00e      	b.n	80028e2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c8:	f003 0310 	and.w	r3, r3, #16
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d003      	beq.n	80028d8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80028d0:	68f8      	ldr	r0, [r7, #12]
 80028d2:	f7ff fd75 	bl	80023c0 <HAL_ADC_ErrorCallback>
}
 80028d6:	e004      	b.n	80028e2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	4798      	blx	r3
}
 80028e2:	bf00      	nop
 80028e4:	3710      	adds	r7, #16
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}

080028ea <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80028ea:	b580      	push	{r7, lr}
 80028ec:	b084      	sub	sp, #16
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028f6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80028f8:	68f8      	ldr	r0, [r7, #12]
 80028fa:	f7ff fd4d 	bl	8002398 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80028fe:	bf00      	nop
 8002900:	3710      	adds	r7, #16
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}

08002906 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002906:	b580      	push	{r7, lr}
 8002908:	b084      	sub	sp, #16
 800290a:	af00      	add	r7, sp, #0
 800290c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002912:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2240      	movs	r2, #64	; 0x40
 8002918:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800291e:	f043 0204 	orr.w	r2, r3, #4
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002926:	68f8      	ldr	r0, [r7, #12]
 8002928:	f7ff fd4a 	bl	80023c0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800292c:	bf00      	nop
 800292e:	3710      	adds	r7, #16
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}

08002934 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002934:	b480      	push	{r7}
 8002936:	b083      	sub	sp, #12
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800293c:	bf00      	nop
 800293e:	370c      	adds	r7, #12
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr

08002948 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002948:	b480      	push	{r7}
 800294a:	b085      	sub	sp, #20
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	f003 0307 	and.w	r3, r3, #7
 8002956:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002958:	4b0c      	ldr	r3, [pc, #48]	; (800298c <__NVIC_SetPriorityGrouping+0x44>)
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800295e:	68ba      	ldr	r2, [r7, #8]
 8002960:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002964:	4013      	ands	r3, r2
 8002966:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002970:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002974:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002978:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800297a:	4a04      	ldr	r2, [pc, #16]	; (800298c <__NVIC_SetPriorityGrouping+0x44>)
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	60d3      	str	r3, [r2, #12]
}
 8002980:	bf00      	nop
 8002982:	3714      	adds	r7, #20
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr
 800298c:	e000ed00 	.word	0xe000ed00

08002990 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002990:	b480      	push	{r7}
 8002992:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002994:	4b04      	ldr	r3, [pc, #16]	; (80029a8 <__NVIC_GetPriorityGrouping+0x18>)
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	0a1b      	lsrs	r3, r3, #8
 800299a:	f003 0307 	and.w	r3, r3, #7
}
 800299e:	4618      	mov	r0, r3
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr
 80029a8:	e000ed00 	.word	0xe000ed00

080029ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b083      	sub	sp, #12
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	4603      	mov	r3, r0
 80029b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	db0b      	blt.n	80029d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029be:	79fb      	ldrb	r3, [r7, #7]
 80029c0:	f003 021f 	and.w	r2, r3, #31
 80029c4:	4907      	ldr	r1, [pc, #28]	; (80029e4 <__NVIC_EnableIRQ+0x38>)
 80029c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ca:	095b      	lsrs	r3, r3, #5
 80029cc:	2001      	movs	r0, #1
 80029ce:	fa00 f202 	lsl.w	r2, r0, r2
 80029d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80029d6:	bf00      	nop
 80029d8:	370c      	adds	r7, #12
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr
 80029e2:	bf00      	nop
 80029e4:	e000e100 	.word	0xe000e100

080029e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b083      	sub	sp, #12
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	4603      	mov	r3, r0
 80029f0:	6039      	str	r1, [r7, #0]
 80029f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	db0a      	blt.n	8002a12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	b2da      	uxtb	r2, r3
 8002a00:	490c      	ldr	r1, [pc, #48]	; (8002a34 <__NVIC_SetPriority+0x4c>)
 8002a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a06:	0112      	lsls	r2, r2, #4
 8002a08:	b2d2      	uxtb	r2, r2
 8002a0a:	440b      	add	r3, r1
 8002a0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a10:	e00a      	b.n	8002a28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	b2da      	uxtb	r2, r3
 8002a16:	4908      	ldr	r1, [pc, #32]	; (8002a38 <__NVIC_SetPriority+0x50>)
 8002a18:	79fb      	ldrb	r3, [r7, #7]
 8002a1a:	f003 030f 	and.w	r3, r3, #15
 8002a1e:	3b04      	subs	r3, #4
 8002a20:	0112      	lsls	r2, r2, #4
 8002a22:	b2d2      	uxtb	r2, r2
 8002a24:	440b      	add	r3, r1
 8002a26:	761a      	strb	r2, [r3, #24]
}
 8002a28:	bf00      	nop
 8002a2a:	370c      	adds	r7, #12
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr
 8002a34:	e000e100 	.word	0xe000e100
 8002a38:	e000ed00 	.word	0xe000ed00

08002a3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b089      	sub	sp, #36	; 0x24
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	60f8      	str	r0, [r7, #12]
 8002a44:	60b9      	str	r1, [r7, #8]
 8002a46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	f003 0307 	and.w	r3, r3, #7
 8002a4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	f1c3 0307 	rsb	r3, r3, #7
 8002a56:	2b04      	cmp	r3, #4
 8002a58:	bf28      	it	cs
 8002a5a:	2304      	movcs	r3, #4
 8002a5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	3304      	adds	r3, #4
 8002a62:	2b06      	cmp	r3, #6
 8002a64:	d902      	bls.n	8002a6c <NVIC_EncodePriority+0x30>
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	3b03      	subs	r3, #3
 8002a6a:	e000      	b.n	8002a6e <NVIC_EncodePriority+0x32>
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a70:	f04f 32ff 	mov.w	r2, #4294967295
 8002a74:	69bb      	ldr	r3, [r7, #24]
 8002a76:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7a:	43da      	mvns	r2, r3
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	401a      	ands	r2, r3
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a84:	f04f 31ff 	mov.w	r1, #4294967295
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a8e:	43d9      	mvns	r1, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a94:	4313      	orrs	r3, r2
         );
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3724      	adds	r7, #36	; 0x24
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr
	...

08002aa4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	3b01      	subs	r3, #1
 8002ab0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ab4:	d301      	bcc.n	8002aba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e00f      	b.n	8002ada <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002aba:	4a0a      	ldr	r2, [pc, #40]	; (8002ae4 <SysTick_Config+0x40>)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	3b01      	subs	r3, #1
 8002ac0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ac2:	210f      	movs	r1, #15
 8002ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ac8:	f7ff ff8e 	bl	80029e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002acc:	4b05      	ldr	r3, [pc, #20]	; (8002ae4 <SysTick_Config+0x40>)
 8002ace:	2200      	movs	r2, #0
 8002ad0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ad2:	4b04      	ldr	r3, [pc, #16]	; (8002ae4 <SysTick_Config+0x40>)
 8002ad4:	2207      	movs	r2, #7
 8002ad6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ad8:	2300      	movs	r3, #0
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3708      	adds	r7, #8
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	e000e010 	.word	0xe000e010

08002ae8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b082      	sub	sp, #8
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002af0:	6878      	ldr	r0, [r7, #4]
 8002af2:	f7ff ff29 	bl	8002948 <__NVIC_SetPriorityGrouping>
}
 8002af6:	bf00      	nop
 8002af8:	3708      	adds	r7, #8
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}

08002afe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002afe:	b580      	push	{r7, lr}
 8002b00:	b086      	sub	sp, #24
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	4603      	mov	r3, r0
 8002b06:	60b9      	str	r1, [r7, #8]
 8002b08:	607a      	str	r2, [r7, #4]
 8002b0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b10:	f7ff ff3e 	bl	8002990 <__NVIC_GetPriorityGrouping>
 8002b14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b16:	687a      	ldr	r2, [r7, #4]
 8002b18:	68b9      	ldr	r1, [r7, #8]
 8002b1a:	6978      	ldr	r0, [r7, #20]
 8002b1c:	f7ff ff8e 	bl	8002a3c <NVIC_EncodePriority>
 8002b20:	4602      	mov	r2, r0
 8002b22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b26:	4611      	mov	r1, r2
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f7ff ff5d 	bl	80029e8 <__NVIC_SetPriority>
}
 8002b2e:	bf00      	nop
 8002b30:	3718      	adds	r7, #24
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}

08002b36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b36:	b580      	push	{r7, lr}
 8002b38:	b082      	sub	sp, #8
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b44:	4618      	mov	r0, r3
 8002b46:	f7ff ff31 	bl	80029ac <__NVIC_EnableIRQ>
}
 8002b4a:	bf00      	nop
 8002b4c:	3708      	adds	r7, #8
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}

08002b52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b52:	b580      	push	{r7, lr}
 8002b54:	b082      	sub	sp, #8
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f7ff ffa2 	bl	8002aa4 <SysTick_Config>
 8002b60:	4603      	mov	r3, r0
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3708      	adds	r7, #8
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
	...

08002b6c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b086      	sub	sp, #24
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002b74:	2300      	movs	r3, #0
 8002b76:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002b78:	f7ff f9a0 	bl	8001ebc <HAL_GetTick>
 8002b7c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d101      	bne.n	8002b88 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e099      	b.n	8002cbc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2202      	movs	r2, #2
 8002b94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f022 0201 	bic.w	r2, r2, #1
 8002ba6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ba8:	e00f      	b.n	8002bca <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002baa:	f7ff f987 	bl	8001ebc <HAL_GetTick>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	1ad3      	subs	r3, r2, r3
 8002bb4:	2b05      	cmp	r3, #5
 8002bb6:	d908      	bls.n	8002bca <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2220      	movs	r2, #32
 8002bbc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2203      	movs	r2, #3
 8002bc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	e078      	b.n	8002cbc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 0301 	and.w	r3, r3, #1
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d1e8      	bne.n	8002baa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002be0:	697a      	ldr	r2, [r7, #20]
 8002be2:	4b38      	ldr	r3, [pc, #224]	; (8002cc4 <HAL_DMA_Init+0x158>)
 8002be4:	4013      	ands	r3, r2
 8002be6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	685a      	ldr	r2, [r3, #4]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002bf6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	691b      	ldr	r3, [r3, #16]
 8002bfc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c02:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	699b      	ldr	r3, [r3, #24]
 8002c08:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c0e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6a1b      	ldr	r3, [r3, #32]
 8002c14:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c16:	697a      	ldr	r2, [r7, #20]
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c20:	2b04      	cmp	r3, #4
 8002c22:	d107      	bne.n	8002c34 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	697a      	ldr	r2, [r7, #20]
 8002c30:	4313      	orrs	r3, r2
 8002c32:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	697a      	ldr	r2, [r7, #20]
 8002c3a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	695b      	ldr	r3, [r3, #20]
 8002c42:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	f023 0307 	bic.w	r3, r3, #7
 8002c4a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c50:	697a      	ldr	r2, [r7, #20]
 8002c52:	4313      	orrs	r3, r2
 8002c54:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5a:	2b04      	cmp	r3, #4
 8002c5c:	d117      	bne.n	8002c8e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c62:	697a      	ldr	r2, [r7, #20]
 8002c64:	4313      	orrs	r3, r2
 8002c66:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d00e      	beq.n	8002c8e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	f000 fa91 	bl	8003198 <DMA_CheckFifoParam>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d008      	beq.n	8002c8e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2240      	movs	r2, #64	; 0x40
 8002c80:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2201      	movs	r2, #1
 8002c86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e016      	b.n	8002cbc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	697a      	ldr	r2, [r7, #20]
 8002c94:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f000 fa48 	bl	800312c <DMA_CalcBaseAndBitshift>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ca4:	223f      	movs	r2, #63	; 0x3f
 8002ca6:	409a      	lsls	r2, r3
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002cba:	2300      	movs	r3, #0
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3718      	adds	r7, #24
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	f010803f 	.word	0xf010803f

08002cc8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b086      	sub	sp, #24
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	60f8      	str	r0, [r7, #12]
 8002cd0:	60b9      	str	r1, [r7, #8]
 8002cd2:	607a      	str	r2, [r7, #4]
 8002cd4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cde:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d101      	bne.n	8002cee <HAL_DMA_Start_IT+0x26>
 8002cea:	2302      	movs	r3, #2
 8002cec:	e040      	b.n	8002d70 <HAL_DMA_Start_IT+0xa8>
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d12f      	bne.n	8002d62 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2202      	movs	r2, #2
 8002d06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	687a      	ldr	r2, [r7, #4]
 8002d14:	68b9      	ldr	r1, [r7, #8]
 8002d16:	68f8      	ldr	r0, [r7, #12]
 8002d18:	f000 f9da 	bl	80030d0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d20:	223f      	movs	r2, #63	; 0x3f
 8002d22:	409a      	lsls	r2, r3
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f042 0216 	orr.w	r2, r2, #22
 8002d36:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d007      	beq.n	8002d50 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f042 0208 	orr.w	r2, r2, #8
 8002d4e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f042 0201 	orr.w	r2, r2, #1
 8002d5e:	601a      	str	r2, [r3, #0]
 8002d60:	e005      	b.n	8002d6e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2200      	movs	r2, #0
 8002d66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002d6a:	2302      	movs	r3, #2
 8002d6c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002d6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	3718      	adds	r7, #24
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}

08002d78 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b083      	sub	sp, #12
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	2b02      	cmp	r3, #2
 8002d8a:	d004      	beq.n	8002d96 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2280      	movs	r2, #128	; 0x80
 8002d90:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e00c      	b.n	8002db0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2205      	movs	r2, #5
 8002d9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f022 0201 	bic.w	r2, r2, #1
 8002dac:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002dae:	2300      	movs	r3, #0
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	370c      	adds	r7, #12
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr

08002dbc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b086      	sub	sp, #24
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002dc8:	4b92      	ldr	r3, [pc, #584]	; (8003014 <HAL_DMA_IRQHandler+0x258>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a92      	ldr	r2, [pc, #584]	; (8003018 <HAL_DMA_IRQHandler+0x25c>)
 8002dce:	fba2 2303 	umull	r2, r3, r2, r3
 8002dd2:	0a9b      	lsrs	r3, r3, #10
 8002dd4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dda:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002de6:	2208      	movs	r2, #8
 8002de8:	409a      	lsls	r2, r3
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	4013      	ands	r3, r2
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d01a      	beq.n	8002e28 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 0304 	and.w	r3, r3, #4
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d013      	beq.n	8002e28 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f022 0204 	bic.w	r2, r2, #4
 8002e0e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e14:	2208      	movs	r2, #8
 8002e16:	409a      	lsls	r2, r3
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e20:	f043 0201 	orr.w	r2, r3, #1
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	409a      	lsls	r2, r3
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	4013      	ands	r3, r2
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d012      	beq.n	8002e5e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	695b      	ldr	r3, [r3, #20]
 8002e3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d00b      	beq.n	8002e5e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	409a      	lsls	r2, r3
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e56:	f043 0202 	orr.w	r2, r3, #2
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e62:	2204      	movs	r2, #4
 8002e64:	409a      	lsls	r2, r3
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	4013      	ands	r3, r2
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d012      	beq.n	8002e94 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0302 	and.w	r3, r3, #2
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d00b      	beq.n	8002e94 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e80:	2204      	movs	r2, #4
 8002e82:	409a      	lsls	r2, r3
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e8c:	f043 0204 	orr.w	r2, r3, #4
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e98:	2210      	movs	r2, #16
 8002e9a:	409a      	lsls	r2, r3
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d043      	beq.n	8002f2c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 0308 	and.w	r3, r3, #8
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d03c      	beq.n	8002f2c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eb6:	2210      	movs	r2, #16
 8002eb8:	409a      	lsls	r2, r3
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d018      	beq.n	8002efe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d108      	bne.n	8002eec <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d024      	beq.n	8002f2c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	4798      	blx	r3
 8002eea:	e01f      	b.n	8002f2c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d01b      	beq.n	8002f2c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ef8:	6878      	ldr	r0, [r7, #4]
 8002efa:	4798      	blx	r3
 8002efc:	e016      	b.n	8002f2c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d107      	bne.n	8002f1c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f022 0208 	bic.w	r2, r2, #8
 8002f1a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d003      	beq.n	8002f2c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f30:	2220      	movs	r2, #32
 8002f32:	409a      	lsls	r2, r3
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	4013      	ands	r3, r2
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	f000 808e 	beq.w	800305a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0310 	and.w	r3, r3, #16
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	f000 8086 	beq.w	800305a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f52:	2220      	movs	r2, #32
 8002f54:	409a      	lsls	r2, r3
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	2b05      	cmp	r3, #5
 8002f64:	d136      	bne.n	8002fd4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f022 0216 	bic.w	r2, r2, #22
 8002f74:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	695a      	ldr	r2, [r3, #20]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f84:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d103      	bne.n	8002f96 <HAL_DMA_IRQHandler+0x1da>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d007      	beq.n	8002fa6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f022 0208 	bic.w	r2, r2, #8
 8002fa4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002faa:	223f      	movs	r2, #63	; 0x3f
 8002fac:	409a      	lsls	r2, r3
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d07d      	beq.n	80030c6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	4798      	blx	r3
        }
        return;
 8002fd2:	e078      	b.n	80030c6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d01c      	beq.n	800301c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d108      	bne.n	8003002 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d030      	beq.n	800305a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	4798      	blx	r3
 8003000:	e02b      	b.n	800305a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003006:	2b00      	cmp	r3, #0
 8003008:	d027      	beq.n	800305a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	4798      	blx	r3
 8003012:	e022      	b.n	800305a <HAL_DMA_IRQHandler+0x29e>
 8003014:	2000000c 	.word	0x2000000c
 8003018:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003026:	2b00      	cmp	r3, #0
 8003028:	d10f      	bne.n	800304a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f022 0210 	bic.w	r2, r2, #16
 8003038:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2200      	movs	r2, #0
 800303e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2201      	movs	r2, #1
 8003046:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800304e:	2b00      	cmp	r3, #0
 8003050:	d003      	beq.n	800305a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800305e:	2b00      	cmp	r3, #0
 8003060:	d032      	beq.n	80030c8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003066:	f003 0301 	and.w	r3, r3, #1
 800306a:	2b00      	cmp	r3, #0
 800306c:	d022      	beq.n	80030b4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2205      	movs	r2, #5
 8003072:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f022 0201 	bic.w	r2, r2, #1
 8003084:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	3301      	adds	r3, #1
 800308a:	60bb      	str	r3, [r7, #8]
 800308c:	697a      	ldr	r2, [r7, #20]
 800308e:	429a      	cmp	r2, r3
 8003090:	d307      	bcc.n	80030a2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 0301 	and.w	r3, r3, #1
 800309c:	2b00      	cmp	r3, #0
 800309e:	d1f2      	bne.n	8003086 <HAL_DMA_IRQHandler+0x2ca>
 80030a0:	e000      	b.n	80030a4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80030a2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2200      	movs	r2, #0
 80030a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2201      	movs	r2, #1
 80030b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d005      	beq.n	80030c8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	4798      	blx	r3
 80030c4:	e000      	b.n	80030c8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80030c6:	bf00      	nop
    }
  }
}
 80030c8:	3718      	adds	r7, #24
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop

080030d0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b085      	sub	sp, #20
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	60f8      	str	r0, [r7, #12]
 80030d8:	60b9      	str	r1, [r7, #8]
 80030da:	607a      	str	r2, [r7, #4]
 80030dc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80030ec:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	683a      	ldr	r2, [r7, #0]
 80030f4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	2b40      	cmp	r3, #64	; 0x40
 80030fc:	d108      	bne.n	8003110 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	68ba      	ldr	r2, [r7, #8]
 800310c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800310e:	e007      	b.n	8003120 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	68ba      	ldr	r2, [r7, #8]
 8003116:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	687a      	ldr	r2, [r7, #4]
 800311e:	60da      	str	r2, [r3, #12]
}
 8003120:	bf00      	nop
 8003122:	3714      	adds	r7, #20
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr

0800312c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800312c:	b480      	push	{r7}
 800312e:	b085      	sub	sp, #20
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	b2db      	uxtb	r3, r3
 800313a:	3b10      	subs	r3, #16
 800313c:	4a14      	ldr	r2, [pc, #80]	; (8003190 <DMA_CalcBaseAndBitshift+0x64>)
 800313e:	fba2 2303 	umull	r2, r3, r2, r3
 8003142:	091b      	lsrs	r3, r3, #4
 8003144:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003146:	4a13      	ldr	r2, [pc, #76]	; (8003194 <DMA_CalcBaseAndBitshift+0x68>)
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	4413      	add	r3, r2
 800314c:	781b      	ldrb	r3, [r3, #0]
 800314e:	461a      	mov	r2, r3
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2b03      	cmp	r3, #3
 8003158:	d909      	bls.n	800316e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003162:	f023 0303 	bic.w	r3, r3, #3
 8003166:	1d1a      	adds	r2, r3, #4
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	659a      	str	r2, [r3, #88]	; 0x58
 800316c:	e007      	b.n	800317e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003176:	f023 0303 	bic.w	r3, r3, #3
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003182:	4618      	mov	r0, r3
 8003184:	3714      	adds	r7, #20
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr
 800318e:	bf00      	nop
 8003190:	aaaaaaab 	.word	0xaaaaaaab
 8003194:	08006b24 	.word	0x08006b24

08003198 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003198:	b480      	push	{r7}
 800319a:	b085      	sub	sp, #20
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031a0:	2300      	movs	r3, #0
 80031a2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031a8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	699b      	ldr	r3, [r3, #24]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d11f      	bne.n	80031f2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	2b03      	cmp	r3, #3
 80031b6:	d855      	bhi.n	8003264 <DMA_CheckFifoParam+0xcc>
 80031b8:	a201      	add	r2, pc, #4	; (adr r2, 80031c0 <DMA_CheckFifoParam+0x28>)
 80031ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031be:	bf00      	nop
 80031c0:	080031d1 	.word	0x080031d1
 80031c4:	080031e3 	.word	0x080031e3
 80031c8:	080031d1 	.word	0x080031d1
 80031cc:	08003265 	.word	0x08003265
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d045      	beq.n	8003268 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031e0:	e042      	b.n	8003268 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80031ea:	d13f      	bne.n	800326c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031f0:	e03c      	b.n	800326c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	699b      	ldr	r3, [r3, #24]
 80031f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031fa:	d121      	bne.n	8003240 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	2b03      	cmp	r3, #3
 8003200:	d836      	bhi.n	8003270 <DMA_CheckFifoParam+0xd8>
 8003202:	a201      	add	r2, pc, #4	; (adr r2, 8003208 <DMA_CheckFifoParam+0x70>)
 8003204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003208:	08003219 	.word	0x08003219
 800320c:	0800321f 	.word	0x0800321f
 8003210:	08003219 	.word	0x08003219
 8003214:	08003231 	.word	0x08003231
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	73fb      	strb	r3, [r7, #15]
      break;
 800321c:	e02f      	b.n	800327e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003222:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003226:	2b00      	cmp	r3, #0
 8003228:	d024      	beq.n	8003274 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800322e:	e021      	b.n	8003274 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003234:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003238:	d11e      	bne.n	8003278 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800323e:	e01b      	b.n	8003278 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	2b02      	cmp	r3, #2
 8003244:	d902      	bls.n	800324c <DMA_CheckFifoParam+0xb4>
 8003246:	2b03      	cmp	r3, #3
 8003248:	d003      	beq.n	8003252 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800324a:	e018      	b.n	800327e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	73fb      	strb	r3, [r7, #15]
      break;
 8003250:	e015      	b.n	800327e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003256:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800325a:	2b00      	cmp	r3, #0
 800325c:	d00e      	beq.n	800327c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	73fb      	strb	r3, [r7, #15]
      break;
 8003262:	e00b      	b.n	800327c <DMA_CheckFifoParam+0xe4>
      break;
 8003264:	bf00      	nop
 8003266:	e00a      	b.n	800327e <DMA_CheckFifoParam+0xe6>
      break;
 8003268:	bf00      	nop
 800326a:	e008      	b.n	800327e <DMA_CheckFifoParam+0xe6>
      break;
 800326c:	bf00      	nop
 800326e:	e006      	b.n	800327e <DMA_CheckFifoParam+0xe6>
      break;
 8003270:	bf00      	nop
 8003272:	e004      	b.n	800327e <DMA_CheckFifoParam+0xe6>
      break;
 8003274:	bf00      	nop
 8003276:	e002      	b.n	800327e <DMA_CheckFifoParam+0xe6>
      break;   
 8003278:	bf00      	nop
 800327a:	e000      	b.n	800327e <DMA_CheckFifoParam+0xe6>
      break;
 800327c:	bf00      	nop
    }
  } 
  
  return status; 
 800327e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003280:	4618      	mov	r0, r3
 8003282:	3714      	adds	r7, #20
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr

0800328c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800328c:	b480      	push	{r7}
 800328e:	b089      	sub	sp, #36	; 0x24
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003296:	2300      	movs	r3, #0
 8003298:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800329a:	2300      	movs	r3, #0
 800329c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800329e:	2300      	movs	r3, #0
 80032a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032a2:	2300      	movs	r3, #0
 80032a4:	61fb      	str	r3, [r7, #28]
 80032a6:	e159      	b.n	800355c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80032a8:	2201      	movs	r2, #1
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	fa02 f303 	lsl.w	r3, r2, r3
 80032b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	697a      	ldr	r2, [r7, #20]
 80032b8:	4013      	ands	r3, r2
 80032ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80032bc:	693a      	ldr	r2, [r7, #16]
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	429a      	cmp	r2, r3
 80032c2:	f040 8148 	bne.w	8003556 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d00b      	beq.n	80032e6 <HAL_GPIO_Init+0x5a>
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	d007      	beq.n	80032e6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80032da:	2b11      	cmp	r3, #17
 80032dc:	d003      	beq.n	80032e6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	2b12      	cmp	r3, #18
 80032e4:	d130      	bne.n	8003348 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80032ec:	69fb      	ldr	r3, [r7, #28]
 80032ee:	005b      	lsls	r3, r3, #1
 80032f0:	2203      	movs	r2, #3
 80032f2:	fa02 f303 	lsl.w	r3, r2, r3
 80032f6:	43db      	mvns	r3, r3
 80032f8:	69ba      	ldr	r2, [r7, #24]
 80032fa:	4013      	ands	r3, r2
 80032fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	68da      	ldr	r2, [r3, #12]
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	005b      	lsls	r3, r3, #1
 8003306:	fa02 f303 	lsl.w	r3, r2, r3
 800330a:	69ba      	ldr	r2, [r7, #24]
 800330c:	4313      	orrs	r3, r2
 800330e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	69ba      	ldr	r2, [r7, #24]
 8003314:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800331c:	2201      	movs	r2, #1
 800331e:	69fb      	ldr	r3, [r7, #28]
 8003320:	fa02 f303 	lsl.w	r3, r2, r3
 8003324:	43db      	mvns	r3, r3
 8003326:	69ba      	ldr	r2, [r7, #24]
 8003328:	4013      	ands	r3, r2
 800332a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	091b      	lsrs	r3, r3, #4
 8003332:	f003 0201 	and.w	r2, r3, #1
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	fa02 f303 	lsl.w	r3, r2, r3
 800333c:	69ba      	ldr	r2, [r7, #24]
 800333e:	4313      	orrs	r3, r2
 8003340:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	69ba      	ldr	r2, [r7, #24]
 8003346:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	005b      	lsls	r3, r3, #1
 8003352:	2203      	movs	r2, #3
 8003354:	fa02 f303 	lsl.w	r3, r2, r3
 8003358:	43db      	mvns	r3, r3
 800335a:	69ba      	ldr	r2, [r7, #24]
 800335c:	4013      	ands	r3, r2
 800335e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	689a      	ldr	r2, [r3, #8]
 8003364:	69fb      	ldr	r3, [r7, #28]
 8003366:	005b      	lsls	r3, r3, #1
 8003368:	fa02 f303 	lsl.w	r3, r2, r3
 800336c:	69ba      	ldr	r2, [r7, #24]
 800336e:	4313      	orrs	r3, r2
 8003370:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	69ba      	ldr	r2, [r7, #24]
 8003376:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	2b02      	cmp	r3, #2
 800337e:	d003      	beq.n	8003388 <HAL_GPIO_Init+0xfc>
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	2b12      	cmp	r3, #18
 8003386:	d123      	bne.n	80033d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003388:	69fb      	ldr	r3, [r7, #28]
 800338a:	08da      	lsrs	r2, r3, #3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	3208      	adds	r2, #8
 8003390:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003394:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	f003 0307 	and.w	r3, r3, #7
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	220f      	movs	r2, #15
 80033a0:	fa02 f303 	lsl.w	r3, r2, r3
 80033a4:	43db      	mvns	r3, r3
 80033a6:	69ba      	ldr	r2, [r7, #24]
 80033a8:	4013      	ands	r3, r2
 80033aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	691a      	ldr	r2, [r3, #16]
 80033b0:	69fb      	ldr	r3, [r7, #28]
 80033b2:	f003 0307 	and.w	r3, r3, #7
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	fa02 f303 	lsl.w	r3, r2, r3
 80033bc:	69ba      	ldr	r2, [r7, #24]
 80033be:	4313      	orrs	r3, r2
 80033c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80033c2:	69fb      	ldr	r3, [r7, #28]
 80033c4:	08da      	lsrs	r2, r3, #3
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	3208      	adds	r2, #8
 80033ca:	69b9      	ldr	r1, [r7, #24]
 80033cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	005b      	lsls	r3, r3, #1
 80033da:	2203      	movs	r2, #3
 80033dc:	fa02 f303 	lsl.w	r3, r2, r3
 80033e0:	43db      	mvns	r3, r3
 80033e2:	69ba      	ldr	r2, [r7, #24]
 80033e4:	4013      	ands	r3, r2
 80033e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f003 0203 	and.w	r2, r3, #3
 80033f0:	69fb      	ldr	r3, [r7, #28]
 80033f2:	005b      	lsls	r3, r3, #1
 80033f4:	fa02 f303 	lsl.w	r3, r2, r3
 80033f8:	69ba      	ldr	r2, [r7, #24]
 80033fa:	4313      	orrs	r3, r2
 80033fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	69ba      	ldr	r2, [r7, #24]
 8003402:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800340c:	2b00      	cmp	r3, #0
 800340e:	f000 80a2 	beq.w	8003556 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003412:	2300      	movs	r3, #0
 8003414:	60fb      	str	r3, [r7, #12]
 8003416:	4b56      	ldr	r3, [pc, #344]	; (8003570 <HAL_GPIO_Init+0x2e4>)
 8003418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800341a:	4a55      	ldr	r2, [pc, #340]	; (8003570 <HAL_GPIO_Init+0x2e4>)
 800341c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003420:	6453      	str	r3, [r2, #68]	; 0x44
 8003422:	4b53      	ldr	r3, [pc, #332]	; (8003570 <HAL_GPIO_Init+0x2e4>)
 8003424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003426:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800342a:	60fb      	str	r3, [r7, #12]
 800342c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800342e:	4a51      	ldr	r2, [pc, #324]	; (8003574 <HAL_GPIO_Init+0x2e8>)
 8003430:	69fb      	ldr	r3, [r7, #28]
 8003432:	089b      	lsrs	r3, r3, #2
 8003434:	3302      	adds	r3, #2
 8003436:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800343a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800343c:	69fb      	ldr	r3, [r7, #28]
 800343e:	f003 0303 	and.w	r3, r3, #3
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	220f      	movs	r2, #15
 8003446:	fa02 f303 	lsl.w	r3, r2, r3
 800344a:	43db      	mvns	r3, r3
 800344c:	69ba      	ldr	r2, [r7, #24]
 800344e:	4013      	ands	r3, r2
 8003450:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	4a48      	ldr	r2, [pc, #288]	; (8003578 <HAL_GPIO_Init+0x2ec>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d019      	beq.n	800348e <HAL_GPIO_Init+0x202>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4a47      	ldr	r2, [pc, #284]	; (800357c <HAL_GPIO_Init+0x2f0>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d013      	beq.n	800348a <HAL_GPIO_Init+0x1fe>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	4a46      	ldr	r2, [pc, #280]	; (8003580 <HAL_GPIO_Init+0x2f4>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d00d      	beq.n	8003486 <HAL_GPIO_Init+0x1fa>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	4a45      	ldr	r2, [pc, #276]	; (8003584 <HAL_GPIO_Init+0x2f8>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d007      	beq.n	8003482 <HAL_GPIO_Init+0x1f6>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4a44      	ldr	r2, [pc, #272]	; (8003588 <HAL_GPIO_Init+0x2fc>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d101      	bne.n	800347e <HAL_GPIO_Init+0x1f2>
 800347a:	2304      	movs	r3, #4
 800347c:	e008      	b.n	8003490 <HAL_GPIO_Init+0x204>
 800347e:	2307      	movs	r3, #7
 8003480:	e006      	b.n	8003490 <HAL_GPIO_Init+0x204>
 8003482:	2303      	movs	r3, #3
 8003484:	e004      	b.n	8003490 <HAL_GPIO_Init+0x204>
 8003486:	2302      	movs	r3, #2
 8003488:	e002      	b.n	8003490 <HAL_GPIO_Init+0x204>
 800348a:	2301      	movs	r3, #1
 800348c:	e000      	b.n	8003490 <HAL_GPIO_Init+0x204>
 800348e:	2300      	movs	r3, #0
 8003490:	69fa      	ldr	r2, [r7, #28]
 8003492:	f002 0203 	and.w	r2, r2, #3
 8003496:	0092      	lsls	r2, r2, #2
 8003498:	4093      	lsls	r3, r2
 800349a:	69ba      	ldr	r2, [r7, #24]
 800349c:	4313      	orrs	r3, r2
 800349e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80034a0:	4934      	ldr	r1, [pc, #208]	; (8003574 <HAL_GPIO_Init+0x2e8>)
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	089b      	lsrs	r3, r3, #2
 80034a6:	3302      	adds	r3, #2
 80034a8:	69ba      	ldr	r2, [r7, #24]
 80034aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80034ae:	4b37      	ldr	r3, [pc, #220]	; (800358c <HAL_GPIO_Init+0x300>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	43db      	mvns	r3, r3
 80034b8:	69ba      	ldr	r2, [r7, #24]
 80034ba:	4013      	ands	r3, r2
 80034bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d003      	beq.n	80034d2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80034ca:	69ba      	ldr	r2, [r7, #24]
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80034d2:	4a2e      	ldr	r2, [pc, #184]	; (800358c <HAL_GPIO_Init+0x300>)
 80034d4:	69bb      	ldr	r3, [r7, #24]
 80034d6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80034d8:	4b2c      	ldr	r3, [pc, #176]	; (800358c <HAL_GPIO_Init+0x300>)
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	43db      	mvns	r3, r3
 80034e2:	69ba      	ldr	r2, [r7, #24]
 80034e4:	4013      	ands	r3, r2
 80034e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d003      	beq.n	80034fc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80034f4:	69ba      	ldr	r2, [r7, #24]
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	4313      	orrs	r3, r2
 80034fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80034fc:	4a23      	ldr	r2, [pc, #140]	; (800358c <HAL_GPIO_Init+0x300>)
 80034fe:	69bb      	ldr	r3, [r7, #24]
 8003500:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003502:	4b22      	ldr	r3, [pc, #136]	; (800358c <HAL_GPIO_Init+0x300>)
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	43db      	mvns	r3, r3
 800350c:	69ba      	ldr	r2, [r7, #24]
 800350e:	4013      	ands	r3, r2
 8003510:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d003      	beq.n	8003526 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800351e:	69ba      	ldr	r2, [r7, #24]
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	4313      	orrs	r3, r2
 8003524:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003526:	4a19      	ldr	r2, [pc, #100]	; (800358c <HAL_GPIO_Init+0x300>)
 8003528:	69bb      	ldr	r3, [r7, #24]
 800352a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800352c:	4b17      	ldr	r3, [pc, #92]	; (800358c <HAL_GPIO_Init+0x300>)
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	43db      	mvns	r3, r3
 8003536:	69ba      	ldr	r2, [r7, #24]
 8003538:	4013      	ands	r3, r2
 800353a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003544:	2b00      	cmp	r3, #0
 8003546:	d003      	beq.n	8003550 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003548:	69ba      	ldr	r2, [r7, #24]
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	4313      	orrs	r3, r2
 800354e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003550:	4a0e      	ldr	r2, [pc, #56]	; (800358c <HAL_GPIO_Init+0x300>)
 8003552:	69bb      	ldr	r3, [r7, #24]
 8003554:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003556:	69fb      	ldr	r3, [r7, #28]
 8003558:	3301      	adds	r3, #1
 800355a:	61fb      	str	r3, [r7, #28]
 800355c:	69fb      	ldr	r3, [r7, #28]
 800355e:	2b0f      	cmp	r3, #15
 8003560:	f67f aea2 	bls.w	80032a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003564:	bf00      	nop
 8003566:	3724      	adds	r7, #36	; 0x24
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr
 8003570:	40023800 	.word	0x40023800
 8003574:	40013800 	.word	0x40013800
 8003578:	40020000 	.word	0x40020000
 800357c:	40020400 	.word	0x40020400
 8003580:	40020800 	.word	0x40020800
 8003584:	40020c00 	.word	0x40020c00
 8003588:	40021000 	.word	0x40021000
 800358c:	40013c00 	.word	0x40013c00

08003590 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003590:	b480      	push	{r7}
 8003592:	b085      	sub	sp, #20
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
 8003598:	460b      	mov	r3, r1
 800359a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	691a      	ldr	r2, [r3, #16]
 80035a0:	887b      	ldrh	r3, [r7, #2]
 80035a2:	4013      	ands	r3, r2
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d002      	beq.n	80035ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80035a8:	2301      	movs	r3, #1
 80035aa:	73fb      	strb	r3, [r7, #15]
 80035ac:	e001      	b.n	80035b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80035ae:	2300      	movs	r3, #0
 80035b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80035b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	3714      	adds	r7, #20
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr

080035c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	460b      	mov	r3, r1
 80035ca:	807b      	strh	r3, [r7, #2]
 80035cc:	4613      	mov	r3, r2
 80035ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80035d0:	787b      	ldrb	r3, [r7, #1]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d003      	beq.n	80035de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80035d6:	887a      	ldrh	r2, [r7, #2]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80035dc:	e003      	b.n	80035e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80035de:	887b      	ldrh	r3, [r7, #2]
 80035e0:	041a      	lsls	r2, r3, #16
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	619a      	str	r2, [r3, #24]
}
 80035e6:	bf00      	nop
 80035e8:	370c      	adds	r7, #12
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr
	...

080035f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b086      	sub	sp, #24
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d101      	bne.n	8003606 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e25b      	b.n	8003abe <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 0301 	and.w	r3, r3, #1
 800360e:	2b00      	cmp	r3, #0
 8003610:	d075      	beq.n	80036fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003612:	4ba3      	ldr	r3, [pc, #652]	; (80038a0 <HAL_RCC_OscConfig+0x2ac>)
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	f003 030c 	and.w	r3, r3, #12
 800361a:	2b04      	cmp	r3, #4
 800361c:	d00c      	beq.n	8003638 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800361e:	4ba0      	ldr	r3, [pc, #640]	; (80038a0 <HAL_RCC_OscConfig+0x2ac>)
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003626:	2b08      	cmp	r3, #8
 8003628:	d112      	bne.n	8003650 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800362a:	4b9d      	ldr	r3, [pc, #628]	; (80038a0 <HAL_RCC_OscConfig+0x2ac>)
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003632:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003636:	d10b      	bne.n	8003650 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003638:	4b99      	ldr	r3, [pc, #612]	; (80038a0 <HAL_RCC_OscConfig+0x2ac>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003640:	2b00      	cmp	r3, #0
 8003642:	d05b      	beq.n	80036fc <HAL_RCC_OscConfig+0x108>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d157      	bne.n	80036fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e236      	b.n	8003abe <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003658:	d106      	bne.n	8003668 <HAL_RCC_OscConfig+0x74>
 800365a:	4b91      	ldr	r3, [pc, #580]	; (80038a0 <HAL_RCC_OscConfig+0x2ac>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a90      	ldr	r2, [pc, #576]	; (80038a0 <HAL_RCC_OscConfig+0x2ac>)
 8003660:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003664:	6013      	str	r3, [r2, #0]
 8003666:	e01d      	b.n	80036a4 <HAL_RCC_OscConfig+0xb0>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003670:	d10c      	bne.n	800368c <HAL_RCC_OscConfig+0x98>
 8003672:	4b8b      	ldr	r3, [pc, #556]	; (80038a0 <HAL_RCC_OscConfig+0x2ac>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a8a      	ldr	r2, [pc, #552]	; (80038a0 <HAL_RCC_OscConfig+0x2ac>)
 8003678:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800367c:	6013      	str	r3, [r2, #0]
 800367e:	4b88      	ldr	r3, [pc, #544]	; (80038a0 <HAL_RCC_OscConfig+0x2ac>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a87      	ldr	r2, [pc, #540]	; (80038a0 <HAL_RCC_OscConfig+0x2ac>)
 8003684:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003688:	6013      	str	r3, [r2, #0]
 800368a:	e00b      	b.n	80036a4 <HAL_RCC_OscConfig+0xb0>
 800368c:	4b84      	ldr	r3, [pc, #528]	; (80038a0 <HAL_RCC_OscConfig+0x2ac>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a83      	ldr	r2, [pc, #524]	; (80038a0 <HAL_RCC_OscConfig+0x2ac>)
 8003692:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003696:	6013      	str	r3, [r2, #0]
 8003698:	4b81      	ldr	r3, [pc, #516]	; (80038a0 <HAL_RCC_OscConfig+0x2ac>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a80      	ldr	r2, [pc, #512]	; (80038a0 <HAL_RCC_OscConfig+0x2ac>)
 800369e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d013      	beq.n	80036d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036ac:	f7fe fc06 	bl	8001ebc <HAL_GetTick>
 80036b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036b2:	e008      	b.n	80036c6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036b4:	f7fe fc02 	bl	8001ebc <HAL_GetTick>
 80036b8:	4602      	mov	r2, r0
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	2b64      	cmp	r3, #100	; 0x64
 80036c0:	d901      	bls.n	80036c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80036c2:	2303      	movs	r3, #3
 80036c4:	e1fb      	b.n	8003abe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036c6:	4b76      	ldr	r3, [pc, #472]	; (80038a0 <HAL_RCC_OscConfig+0x2ac>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d0f0      	beq.n	80036b4 <HAL_RCC_OscConfig+0xc0>
 80036d2:	e014      	b.n	80036fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036d4:	f7fe fbf2 	bl	8001ebc <HAL_GetTick>
 80036d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036da:	e008      	b.n	80036ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036dc:	f7fe fbee 	bl	8001ebc <HAL_GetTick>
 80036e0:	4602      	mov	r2, r0
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	1ad3      	subs	r3, r2, r3
 80036e6:	2b64      	cmp	r3, #100	; 0x64
 80036e8:	d901      	bls.n	80036ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80036ea:	2303      	movs	r3, #3
 80036ec:	e1e7      	b.n	8003abe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036ee:	4b6c      	ldr	r3, [pc, #432]	; (80038a0 <HAL_RCC_OscConfig+0x2ac>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d1f0      	bne.n	80036dc <HAL_RCC_OscConfig+0xe8>
 80036fa:	e000      	b.n	80036fe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 0302 	and.w	r3, r3, #2
 8003706:	2b00      	cmp	r3, #0
 8003708:	d063      	beq.n	80037d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800370a:	4b65      	ldr	r3, [pc, #404]	; (80038a0 <HAL_RCC_OscConfig+0x2ac>)
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	f003 030c 	and.w	r3, r3, #12
 8003712:	2b00      	cmp	r3, #0
 8003714:	d00b      	beq.n	800372e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003716:	4b62      	ldr	r3, [pc, #392]	; (80038a0 <HAL_RCC_OscConfig+0x2ac>)
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800371e:	2b08      	cmp	r3, #8
 8003720:	d11c      	bne.n	800375c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003722:	4b5f      	ldr	r3, [pc, #380]	; (80038a0 <HAL_RCC_OscConfig+0x2ac>)
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d116      	bne.n	800375c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800372e:	4b5c      	ldr	r3, [pc, #368]	; (80038a0 <HAL_RCC_OscConfig+0x2ac>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0302 	and.w	r3, r3, #2
 8003736:	2b00      	cmp	r3, #0
 8003738:	d005      	beq.n	8003746 <HAL_RCC_OscConfig+0x152>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	68db      	ldr	r3, [r3, #12]
 800373e:	2b01      	cmp	r3, #1
 8003740:	d001      	beq.n	8003746 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e1bb      	b.n	8003abe <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003746:	4b56      	ldr	r3, [pc, #344]	; (80038a0 <HAL_RCC_OscConfig+0x2ac>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	691b      	ldr	r3, [r3, #16]
 8003752:	00db      	lsls	r3, r3, #3
 8003754:	4952      	ldr	r1, [pc, #328]	; (80038a0 <HAL_RCC_OscConfig+0x2ac>)
 8003756:	4313      	orrs	r3, r2
 8003758:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800375a:	e03a      	b.n	80037d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	68db      	ldr	r3, [r3, #12]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d020      	beq.n	80037a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003764:	4b4f      	ldr	r3, [pc, #316]	; (80038a4 <HAL_RCC_OscConfig+0x2b0>)
 8003766:	2201      	movs	r2, #1
 8003768:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800376a:	f7fe fba7 	bl	8001ebc <HAL_GetTick>
 800376e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003770:	e008      	b.n	8003784 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003772:	f7fe fba3 	bl	8001ebc <HAL_GetTick>
 8003776:	4602      	mov	r2, r0
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	1ad3      	subs	r3, r2, r3
 800377c:	2b02      	cmp	r3, #2
 800377e:	d901      	bls.n	8003784 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003780:	2303      	movs	r3, #3
 8003782:	e19c      	b.n	8003abe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003784:	4b46      	ldr	r3, [pc, #280]	; (80038a0 <HAL_RCC_OscConfig+0x2ac>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 0302 	and.w	r3, r3, #2
 800378c:	2b00      	cmp	r3, #0
 800378e:	d0f0      	beq.n	8003772 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003790:	4b43      	ldr	r3, [pc, #268]	; (80038a0 <HAL_RCC_OscConfig+0x2ac>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	691b      	ldr	r3, [r3, #16]
 800379c:	00db      	lsls	r3, r3, #3
 800379e:	4940      	ldr	r1, [pc, #256]	; (80038a0 <HAL_RCC_OscConfig+0x2ac>)
 80037a0:	4313      	orrs	r3, r2
 80037a2:	600b      	str	r3, [r1, #0]
 80037a4:	e015      	b.n	80037d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037a6:	4b3f      	ldr	r3, [pc, #252]	; (80038a4 <HAL_RCC_OscConfig+0x2b0>)
 80037a8:	2200      	movs	r2, #0
 80037aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ac:	f7fe fb86 	bl	8001ebc <HAL_GetTick>
 80037b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037b2:	e008      	b.n	80037c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037b4:	f7fe fb82 	bl	8001ebc <HAL_GetTick>
 80037b8:	4602      	mov	r2, r0
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	2b02      	cmp	r3, #2
 80037c0:	d901      	bls.n	80037c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80037c2:	2303      	movs	r3, #3
 80037c4:	e17b      	b.n	8003abe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037c6:	4b36      	ldr	r3, [pc, #216]	; (80038a0 <HAL_RCC_OscConfig+0x2ac>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 0302 	and.w	r3, r3, #2
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d1f0      	bne.n	80037b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 0308 	and.w	r3, r3, #8
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d030      	beq.n	8003840 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	695b      	ldr	r3, [r3, #20]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d016      	beq.n	8003814 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037e6:	4b30      	ldr	r3, [pc, #192]	; (80038a8 <HAL_RCC_OscConfig+0x2b4>)
 80037e8:	2201      	movs	r2, #1
 80037ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037ec:	f7fe fb66 	bl	8001ebc <HAL_GetTick>
 80037f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037f2:	e008      	b.n	8003806 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037f4:	f7fe fb62 	bl	8001ebc <HAL_GetTick>
 80037f8:	4602      	mov	r2, r0
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	2b02      	cmp	r3, #2
 8003800:	d901      	bls.n	8003806 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003802:	2303      	movs	r3, #3
 8003804:	e15b      	b.n	8003abe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003806:	4b26      	ldr	r3, [pc, #152]	; (80038a0 <HAL_RCC_OscConfig+0x2ac>)
 8003808:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800380a:	f003 0302 	and.w	r3, r3, #2
 800380e:	2b00      	cmp	r3, #0
 8003810:	d0f0      	beq.n	80037f4 <HAL_RCC_OscConfig+0x200>
 8003812:	e015      	b.n	8003840 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003814:	4b24      	ldr	r3, [pc, #144]	; (80038a8 <HAL_RCC_OscConfig+0x2b4>)
 8003816:	2200      	movs	r2, #0
 8003818:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800381a:	f7fe fb4f 	bl	8001ebc <HAL_GetTick>
 800381e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003820:	e008      	b.n	8003834 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003822:	f7fe fb4b 	bl	8001ebc <HAL_GetTick>
 8003826:	4602      	mov	r2, r0
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	1ad3      	subs	r3, r2, r3
 800382c:	2b02      	cmp	r3, #2
 800382e:	d901      	bls.n	8003834 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003830:	2303      	movs	r3, #3
 8003832:	e144      	b.n	8003abe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003834:	4b1a      	ldr	r3, [pc, #104]	; (80038a0 <HAL_RCC_OscConfig+0x2ac>)
 8003836:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003838:	f003 0302 	and.w	r3, r3, #2
 800383c:	2b00      	cmp	r3, #0
 800383e:	d1f0      	bne.n	8003822 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f003 0304 	and.w	r3, r3, #4
 8003848:	2b00      	cmp	r3, #0
 800384a:	f000 80a0 	beq.w	800398e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800384e:	2300      	movs	r3, #0
 8003850:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003852:	4b13      	ldr	r3, [pc, #76]	; (80038a0 <HAL_RCC_OscConfig+0x2ac>)
 8003854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003856:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800385a:	2b00      	cmp	r3, #0
 800385c:	d10f      	bne.n	800387e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800385e:	2300      	movs	r3, #0
 8003860:	60bb      	str	r3, [r7, #8]
 8003862:	4b0f      	ldr	r3, [pc, #60]	; (80038a0 <HAL_RCC_OscConfig+0x2ac>)
 8003864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003866:	4a0e      	ldr	r2, [pc, #56]	; (80038a0 <HAL_RCC_OscConfig+0x2ac>)
 8003868:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800386c:	6413      	str	r3, [r2, #64]	; 0x40
 800386e:	4b0c      	ldr	r3, [pc, #48]	; (80038a0 <HAL_RCC_OscConfig+0x2ac>)
 8003870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003872:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003876:	60bb      	str	r3, [r7, #8]
 8003878:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800387a:	2301      	movs	r3, #1
 800387c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800387e:	4b0b      	ldr	r3, [pc, #44]	; (80038ac <HAL_RCC_OscConfig+0x2b8>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003886:	2b00      	cmp	r3, #0
 8003888:	d121      	bne.n	80038ce <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800388a:	4b08      	ldr	r3, [pc, #32]	; (80038ac <HAL_RCC_OscConfig+0x2b8>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a07      	ldr	r2, [pc, #28]	; (80038ac <HAL_RCC_OscConfig+0x2b8>)
 8003890:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003894:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003896:	f7fe fb11 	bl	8001ebc <HAL_GetTick>
 800389a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800389c:	e011      	b.n	80038c2 <HAL_RCC_OscConfig+0x2ce>
 800389e:	bf00      	nop
 80038a0:	40023800 	.word	0x40023800
 80038a4:	42470000 	.word	0x42470000
 80038a8:	42470e80 	.word	0x42470e80
 80038ac:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038b0:	f7fe fb04 	bl	8001ebc <HAL_GetTick>
 80038b4:	4602      	mov	r2, r0
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d901      	bls.n	80038c2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	e0fd      	b.n	8003abe <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038c2:	4b81      	ldr	r3, [pc, #516]	; (8003ac8 <HAL_RCC_OscConfig+0x4d4>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d0f0      	beq.n	80038b0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	2b01      	cmp	r3, #1
 80038d4:	d106      	bne.n	80038e4 <HAL_RCC_OscConfig+0x2f0>
 80038d6:	4b7d      	ldr	r3, [pc, #500]	; (8003acc <HAL_RCC_OscConfig+0x4d8>)
 80038d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038da:	4a7c      	ldr	r2, [pc, #496]	; (8003acc <HAL_RCC_OscConfig+0x4d8>)
 80038dc:	f043 0301 	orr.w	r3, r3, #1
 80038e0:	6713      	str	r3, [r2, #112]	; 0x70
 80038e2:	e01c      	b.n	800391e <HAL_RCC_OscConfig+0x32a>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	2b05      	cmp	r3, #5
 80038ea:	d10c      	bne.n	8003906 <HAL_RCC_OscConfig+0x312>
 80038ec:	4b77      	ldr	r3, [pc, #476]	; (8003acc <HAL_RCC_OscConfig+0x4d8>)
 80038ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038f0:	4a76      	ldr	r2, [pc, #472]	; (8003acc <HAL_RCC_OscConfig+0x4d8>)
 80038f2:	f043 0304 	orr.w	r3, r3, #4
 80038f6:	6713      	str	r3, [r2, #112]	; 0x70
 80038f8:	4b74      	ldr	r3, [pc, #464]	; (8003acc <HAL_RCC_OscConfig+0x4d8>)
 80038fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038fc:	4a73      	ldr	r2, [pc, #460]	; (8003acc <HAL_RCC_OscConfig+0x4d8>)
 80038fe:	f043 0301 	orr.w	r3, r3, #1
 8003902:	6713      	str	r3, [r2, #112]	; 0x70
 8003904:	e00b      	b.n	800391e <HAL_RCC_OscConfig+0x32a>
 8003906:	4b71      	ldr	r3, [pc, #452]	; (8003acc <HAL_RCC_OscConfig+0x4d8>)
 8003908:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800390a:	4a70      	ldr	r2, [pc, #448]	; (8003acc <HAL_RCC_OscConfig+0x4d8>)
 800390c:	f023 0301 	bic.w	r3, r3, #1
 8003910:	6713      	str	r3, [r2, #112]	; 0x70
 8003912:	4b6e      	ldr	r3, [pc, #440]	; (8003acc <HAL_RCC_OscConfig+0x4d8>)
 8003914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003916:	4a6d      	ldr	r2, [pc, #436]	; (8003acc <HAL_RCC_OscConfig+0x4d8>)
 8003918:	f023 0304 	bic.w	r3, r3, #4
 800391c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d015      	beq.n	8003952 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003926:	f7fe fac9 	bl	8001ebc <HAL_GetTick>
 800392a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800392c:	e00a      	b.n	8003944 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800392e:	f7fe fac5 	bl	8001ebc <HAL_GetTick>
 8003932:	4602      	mov	r2, r0
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	1ad3      	subs	r3, r2, r3
 8003938:	f241 3288 	movw	r2, #5000	; 0x1388
 800393c:	4293      	cmp	r3, r2
 800393e:	d901      	bls.n	8003944 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003940:	2303      	movs	r3, #3
 8003942:	e0bc      	b.n	8003abe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003944:	4b61      	ldr	r3, [pc, #388]	; (8003acc <HAL_RCC_OscConfig+0x4d8>)
 8003946:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003948:	f003 0302 	and.w	r3, r3, #2
 800394c:	2b00      	cmp	r3, #0
 800394e:	d0ee      	beq.n	800392e <HAL_RCC_OscConfig+0x33a>
 8003950:	e014      	b.n	800397c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003952:	f7fe fab3 	bl	8001ebc <HAL_GetTick>
 8003956:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003958:	e00a      	b.n	8003970 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800395a:	f7fe faaf 	bl	8001ebc <HAL_GetTick>
 800395e:	4602      	mov	r2, r0
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	1ad3      	subs	r3, r2, r3
 8003964:	f241 3288 	movw	r2, #5000	; 0x1388
 8003968:	4293      	cmp	r3, r2
 800396a:	d901      	bls.n	8003970 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800396c:	2303      	movs	r3, #3
 800396e:	e0a6      	b.n	8003abe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003970:	4b56      	ldr	r3, [pc, #344]	; (8003acc <HAL_RCC_OscConfig+0x4d8>)
 8003972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003974:	f003 0302 	and.w	r3, r3, #2
 8003978:	2b00      	cmp	r3, #0
 800397a:	d1ee      	bne.n	800395a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800397c:	7dfb      	ldrb	r3, [r7, #23]
 800397e:	2b01      	cmp	r3, #1
 8003980:	d105      	bne.n	800398e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003982:	4b52      	ldr	r3, [pc, #328]	; (8003acc <HAL_RCC_OscConfig+0x4d8>)
 8003984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003986:	4a51      	ldr	r2, [pc, #324]	; (8003acc <HAL_RCC_OscConfig+0x4d8>)
 8003988:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800398c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	699b      	ldr	r3, [r3, #24]
 8003992:	2b00      	cmp	r3, #0
 8003994:	f000 8092 	beq.w	8003abc <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003998:	4b4c      	ldr	r3, [pc, #304]	; (8003acc <HAL_RCC_OscConfig+0x4d8>)
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	f003 030c 	and.w	r3, r3, #12
 80039a0:	2b08      	cmp	r3, #8
 80039a2:	d05c      	beq.n	8003a5e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	699b      	ldr	r3, [r3, #24]
 80039a8:	2b02      	cmp	r3, #2
 80039aa:	d141      	bne.n	8003a30 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039ac:	4b48      	ldr	r3, [pc, #288]	; (8003ad0 <HAL_RCC_OscConfig+0x4dc>)
 80039ae:	2200      	movs	r2, #0
 80039b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039b2:	f7fe fa83 	bl	8001ebc <HAL_GetTick>
 80039b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039b8:	e008      	b.n	80039cc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039ba:	f7fe fa7f 	bl	8001ebc <HAL_GetTick>
 80039be:	4602      	mov	r2, r0
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	1ad3      	subs	r3, r2, r3
 80039c4:	2b02      	cmp	r3, #2
 80039c6:	d901      	bls.n	80039cc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80039c8:	2303      	movs	r3, #3
 80039ca:	e078      	b.n	8003abe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039cc:	4b3f      	ldr	r3, [pc, #252]	; (8003acc <HAL_RCC_OscConfig+0x4d8>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d1f0      	bne.n	80039ba <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	69da      	ldr	r2, [r3, #28]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6a1b      	ldr	r3, [r3, #32]
 80039e0:	431a      	orrs	r2, r3
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e6:	019b      	lsls	r3, r3, #6
 80039e8:	431a      	orrs	r2, r3
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ee:	085b      	lsrs	r3, r3, #1
 80039f0:	3b01      	subs	r3, #1
 80039f2:	041b      	lsls	r3, r3, #16
 80039f4:	431a      	orrs	r2, r3
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039fa:	061b      	lsls	r3, r3, #24
 80039fc:	4933      	ldr	r1, [pc, #204]	; (8003acc <HAL_RCC_OscConfig+0x4d8>)
 80039fe:	4313      	orrs	r3, r2
 8003a00:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a02:	4b33      	ldr	r3, [pc, #204]	; (8003ad0 <HAL_RCC_OscConfig+0x4dc>)
 8003a04:	2201      	movs	r2, #1
 8003a06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a08:	f7fe fa58 	bl	8001ebc <HAL_GetTick>
 8003a0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a0e:	e008      	b.n	8003a22 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a10:	f7fe fa54 	bl	8001ebc <HAL_GetTick>
 8003a14:	4602      	mov	r2, r0
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	2b02      	cmp	r3, #2
 8003a1c:	d901      	bls.n	8003a22 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003a1e:	2303      	movs	r3, #3
 8003a20:	e04d      	b.n	8003abe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a22:	4b2a      	ldr	r3, [pc, #168]	; (8003acc <HAL_RCC_OscConfig+0x4d8>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d0f0      	beq.n	8003a10 <HAL_RCC_OscConfig+0x41c>
 8003a2e:	e045      	b.n	8003abc <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a30:	4b27      	ldr	r3, [pc, #156]	; (8003ad0 <HAL_RCC_OscConfig+0x4dc>)
 8003a32:	2200      	movs	r2, #0
 8003a34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a36:	f7fe fa41 	bl	8001ebc <HAL_GetTick>
 8003a3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a3c:	e008      	b.n	8003a50 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a3e:	f7fe fa3d 	bl	8001ebc <HAL_GetTick>
 8003a42:	4602      	mov	r2, r0
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	1ad3      	subs	r3, r2, r3
 8003a48:	2b02      	cmp	r3, #2
 8003a4a:	d901      	bls.n	8003a50 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003a4c:	2303      	movs	r3, #3
 8003a4e:	e036      	b.n	8003abe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a50:	4b1e      	ldr	r3, [pc, #120]	; (8003acc <HAL_RCC_OscConfig+0x4d8>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d1f0      	bne.n	8003a3e <HAL_RCC_OscConfig+0x44a>
 8003a5c:	e02e      	b.n	8003abc <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	699b      	ldr	r3, [r3, #24]
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d101      	bne.n	8003a6a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	e029      	b.n	8003abe <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003a6a:	4b18      	ldr	r3, [pc, #96]	; (8003acc <HAL_RCC_OscConfig+0x4d8>)
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	69db      	ldr	r3, [r3, #28]
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	d11c      	bne.n	8003ab8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d115      	bne.n	8003ab8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003a8c:	68fa      	ldr	r2, [r7, #12]
 8003a8e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003a92:	4013      	ands	r3, r2
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d10d      	bne.n	8003ab8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d106      	bne.n	8003ab8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d001      	beq.n	8003abc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e000      	b.n	8003abe <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003abc:	2300      	movs	r3, #0
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3718      	adds	r7, #24
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	40007000 	.word	0x40007000
 8003acc:	40023800 	.word	0x40023800
 8003ad0:	42470060 	.word	0x42470060

08003ad4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b084      	sub	sp, #16
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
 8003adc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d101      	bne.n	8003ae8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	e0cc      	b.n	8003c82 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ae8:	4b68      	ldr	r3, [pc, #416]	; (8003c8c <HAL_RCC_ClockConfig+0x1b8>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f003 030f 	and.w	r3, r3, #15
 8003af0:	683a      	ldr	r2, [r7, #0]
 8003af2:	429a      	cmp	r2, r3
 8003af4:	d90c      	bls.n	8003b10 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003af6:	4b65      	ldr	r3, [pc, #404]	; (8003c8c <HAL_RCC_ClockConfig+0x1b8>)
 8003af8:	683a      	ldr	r2, [r7, #0]
 8003afa:	b2d2      	uxtb	r2, r2
 8003afc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003afe:	4b63      	ldr	r3, [pc, #396]	; (8003c8c <HAL_RCC_ClockConfig+0x1b8>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 030f 	and.w	r3, r3, #15
 8003b06:	683a      	ldr	r2, [r7, #0]
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d001      	beq.n	8003b10 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e0b8      	b.n	8003c82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 0302 	and.w	r3, r3, #2
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d020      	beq.n	8003b5e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 0304 	and.w	r3, r3, #4
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d005      	beq.n	8003b34 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b28:	4b59      	ldr	r3, [pc, #356]	; (8003c90 <HAL_RCC_ClockConfig+0x1bc>)
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	4a58      	ldr	r2, [pc, #352]	; (8003c90 <HAL_RCC_ClockConfig+0x1bc>)
 8003b2e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003b32:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 0308 	and.w	r3, r3, #8
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d005      	beq.n	8003b4c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b40:	4b53      	ldr	r3, [pc, #332]	; (8003c90 <HAL_RCC_ClockConfig+0x1bc>)
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	4a52      	ldr	r2, [pc, #328]	; (8003c90 <HAL_RCC_ClockConfig+0x1bc>)
 8003b46:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003b4a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b4c:	4b50      	ldr	r3, [pc, #320]	; (8003c90 <HAL_RCC_ClockConfig+0x1bc>)
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	494d      	ldr	r1, [pc, #308]	; (8003c90 <HAL_RCC_ClockConfig+0x1bc>)
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 0301 	and.w	r3, r3, #1
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d044      	beq.n	8003bf4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d107      	bne.n	8003b82 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b72:	4b47      	ldr	r3, [pc, #284]	; (8003c90 <HAL_RCC_ClockConfig+0x1bc>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d119      	bne.n	8003bb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e07f      	b.n	8003c82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	2b02      	cmp	r3, #2
 8003b88:	d003      	beq.n	8003b92 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b8e:	2b03      	cmp	r3, #3
 8003b90:	d107      	bne.n	8003ba2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b92:	4b3f      	ldr	r3, [pc, #252]	; (8003c90 <HAL_RCC_ClockConfig+0x1bc>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d109      	bne.n	8003bb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e06f      	b.n	8003c82 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ba2:	4b3b      	ldr	r3, [pc, #236]	; (8003c90 <HAL_RCC_ClockConfig+0x1bc>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 0302 	and.w	r3, r3, #2
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d101      	bne.n	8003bb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e067      	b.n	8003c82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003bb2:	4b37      	ldr	r3, [pc, #220]	; (8003c90 <HAL_RCC_ClockConfig+0x1bc>)
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	f023 0203 	bic.w	r2, r3, #3
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	4934      	ldr	r1, [pc, #208]	; (8003c90 <HAL_RCC_ClockConfig+0x1bc>)
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003bc4:	f7fe f97a 	bl	8001ebc <HAL_GetTick>
 8003bc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bca:	e00a      	b.n	8003be2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bcc:	f7fe f976 	bl	8001ebc <HAL_GetTick>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	1ad3      	subs	r3, r2, r3
 8003bd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d901      	bls.n	8003be2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003bde:	2303      	movs	r3, #3
 8003be0:	e04f      	b.n	8003c82 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003be2:	4b2b      	ldr	r3, [pc, #172]	; (8003c90 <HAL_RCC_ClockConfig+0x1bc>)
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	f003 020c 	and.w	r2, r3, #12
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d1eb      	bne.n	8003bcc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003bf4:	4b25      	ldr	r3, [pc, #148]	; (8003c8c <HAL_RCC_ClockConfig+0x1b8>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 030f 	and.w	r3, r3, #15
 8003bfc:	683a      	ldr	r2, [r7, #0]
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	d20c      	bcs.n	8003c1c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c02:	4b22      	ldr	r3, [pc, #136]	; (8003c8c <HAL_RCC_ClockConfig+0x1b8>)
 8003c04:	683a      	ldr	r2, [r7, #0]
 8003c06:	b2d2      	uxtb	r2, r2
 8003c08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c0a:	4b20      	ldr	r3, [pc, #128]	; (8003c8c <HAL_RCC_ClockConfig+0x1b8>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 030f 	and.w	r3, r3, #15
 8003c12:	683a      	ldr	r2, [r7, #0]
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d001      	beq.n	8003c1c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e032      	b.n	8003c82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 0304 	and.w	r3, r3, #4
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d008      	beq.n	8003c3a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c28:	4b19      	ldr	r3, [pc, #100]	; (8003c90 <HAL_RCC_ClockConfig+0x1bc>)
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	68db      	ldr	r3, [r3, #12]
 8003c34:	4916      	ldr	r1, [pc, #88]	; (8003c90 <HAL_RCC_ClockConfig+0x1bc>)
 8003c36:	4313      	orrs	r3, r2
 8003c38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 0308 	and.w	r3, r3, #8
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d009      	beq.n	8003c5a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c46:	4b12      	ldr	r3, [pc, #72]	; (8003c90 <HAL_RCC_ClockConfig+0x1bc>)
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	691b      	ldr	r3, [r3, #16]
 8003c52:	00db      	lsls	r3, r3, #3
 8003c54:	490e      	ldr	r1, [pc, #56]	; (8003c90 <HAL_RCC_ClockConfig+0x1bc>)
 8003c56:	4313      	orrs	r3, r2
 8003c58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003c5a:	f000 f821 	bl	8003ca0 <HAL_RCC_GetSysClockFreq>
 8003c5e:	4601      	mov	r1, r0
 8003c60:	4b0b      	ldr	r3, [pc, #44]	; (8003c90 <HAL_RCC_ClockConfig+0x1bc>)
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	091b      	lsrs	r3, r3, #4
 8003c66:	f003 030f 	and.w	r3, r3, #15
 8003c6a:	4a0a      	ldr	r2, [pc, #40]	; (8003c94 <HAL_RCC_ClockConfig+0x1c0>)
 8003c6c:	5cd3      	ldrb	r3, [r2, r3]
 8003c6e:	fa21 f303 	lsr.w	r3, r1, r3
 8003c72:	4a09      	ldr	r2, [pc, #36]	; (8003c98 <HAL_RCC_ClockConfig+0x1c4>)
 8003c74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003c76:	4b09      	ldr	r3, [pc, #36]	; (8003c9c <HAL_RCC_ClockConfig+0x1c8>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f7fe f8da 	bl	8001e34 <HAL_InitTick>

  return HAL_OK;
 8003c80:	2300      	movs	r3, #0
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3710      	adds	r7, #16
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	bf00      	nop
 8003c8c:	40023c00 	.word	0x40023c00
 8003c90:	40023800 	.word	0x40023800
 8003c94:	08006b0c 	.word	0x08006b0c
 8003c98:	2000000c 	.word	0x2000000c
 8003c9c:	20000010 	.word	0x20000010

08003ca0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ca2:	b085      	sub	sp, #20
 8003ca4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	607b      	str	r3, [r7, #4]
 8003caa:	2300      	movs	r3, #0
 8003cac:	60fb      	str	r3, [r7, #12]
 8003cae:	2300      	movs	r3, #0
 8003cb0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003cb6:	4b63      	ldr	r3, [pc, #396]	; (8003e44 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	f003 030c 	and.w	r3, r3, #12
 8003cbe:	2b04      	cmp	r3, #4
 8003cc0:	d007      	beq.n	8003cd2 <HAL_RCC_GetSysClockFreq+0x32>
 8003cc2:	2b08      	cmp	r3, #8
 8003cc4:	d008      	beq.n	8003cd8 <HAL_RCC_GetSysClockFreq+0x38>
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	f040 80b4 	bne.w	8003e34 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ccc:	4b5e      	ldr	r3, [pc, #376]	; (8003e48 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003cce:	60bb      	str	r3, [r7, #8]
       break;
 8003cd0:	e0b3      	b.n	8003e3a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003cd2:	4b5e      	ldr	r3, [pc, #376]	; (8003e4c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003cd4:	60bb      	str	r3, [r7, #8]
      break;
 8003cd6:	e0b0      	b.n	8003e3a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003cd8:	4b5a      	ldr	r3, [pc, #360]	; (8003e44 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ce0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ce2:	4b58      	ldr	r3, [pc, #352]	; (8003e44 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d04a      	beq.n	8003d84 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cee:	4b55      	ldr	r3, [pc, #340]	; (8003e44 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	099b      	lsrs	r3, r3, #6
 8003cf4:	f04f 0400 	mov.w	r4, #0
 8003cf8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003cfc:	f04f 0200 	mov.w	r2, #0
 8003d00:	ea03 0501 	and.w	r5, r3, r1
 8003d04:	ea04 0602 	and.w	r6, r4, r2
 8003d08:	4629      	mov	r1, r5
 8003d0a:	4632      	mov	r2, r6
 8003d0c:	f04f 0300 	mov.w	r3, #0
 8003d10:	f04f 0400 	mov.w	r4, #0
 8003d14:	0154      	lsls	r4, r2, #5
 8003d16:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003d1a:	014b      	lsls	r3, r1, #5
 8003d1c:	4619      	mov	r1, r3
 8003d1e:	4622      	mov	r2, r4
 8003d20:	1b49      	subs	r1, r1, r5
 8003d22:	eb62 0206 	sbc.w	r2, r2, r6
 8003d26:	f04f 0300 	mov.w	r3, #0
 8003d2a:	f04f 0400 	mov.w	r4, #0
 8003d2e:	0194      	lsls	r4, r2, #6
 8003d30:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003d34:	018b      	lsls	r3, r1, #6
 8003d36:	1a5b      	subs	r3, r3, r1
 8003d38:	eb64 0402 	sbc.w	r4, r4, r2
 8003d3c:	f04f 0100 	mov.w	r1, #0
 8003d40:	f04f 0200 	mov.w	r2, #0
 8003d44:	00e2      	lsls	r2, r4, #3
 8003d46:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003d4a:	00d9      	lsls	r1, r3, #3
 8003d4c:	460b      	mov	r3, r1
 8003d4e:	4614      	mov	r4, r2
 8003d50:	195b      	adds	r3, r3, r5
 8003d52:	eb44 0406 	adc.w	r4, r4, r6
 8003d56:	f04f 0100 	mov.w	r1, #0
 8003d5a:	f04f 0200 	mov.w	r2, #0
 8003d5e:	0262      	lsls	r2, r4, #9
 8003d60:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003d64:	0259      	lsls	r1, r3, #9
 8003d66:	460b      	mov	r3, r1
 8003d68:	4614      	mov	r4, r2
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	4621      	mov	r1, r4
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	f04f 0400 	mov.w	r4, #0
 8003d74:	461a      	mov	r2, r3
 8003d76:	4623      	mov	r3, r4
 8003d78:	f7fc fc96 	bl	80006a8 <__aeabi_uldivmod>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	460c      	mov	r4, r1
 8003d80:	60fb      	str	r3, [r7, #12]
 8003d82:	e049      	b.n	8003e18 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d84:	4b2f      	ldr	r3, [pc, #188]	; (8003e44 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	099b      	lsrs	r3, r3, #6
 8003d8a:	f04f 0400 	mov.w	r4, #0
 8003d8e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003d92:	f04f 0200 	mov.w	r2, #0
 8003d96:	ea03 0501 	and.w	r5, r3, r1
 8003d9a:	ea04 0602 	and.w	r6, r4, r2
 8003d9e:	4629      	mov	r1, r5
 8003da0:	4632      	mov	r2, r6
 8003da2:	f04f 0300 	mov.w	r3, #0
 8003da6:	f04f 0400 	mov.w	r4, #0
 8003daa:	0154      	lsls	r4, r2, #5
 8003dac:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003db0:	014b      	lsls	r3, r1, #5
 8003db2:	4619      	mov	r1, r3
 8003db4:	4622      	mov	r2, r4
 8003db6:	1b49      	subs	r1, r1, r5
 8003db8:	eb62 0206 	sbc.w	r2, r2, r6
 8003dbc:	f04f 0300 	mov.w	r3, #0
 8003dc0:	f04f 0400 	mov.w	r4, #0
 8003dc4:	0194      	lsls	r4, r2, #6
 8003dc6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003dca:	018b      	lsls	r3, r1, #6
 8003dcc:	1a5b      	subs	r3, r3, r1
 8003dce:	eb64 0402 	sbc.w	r4, r4, r2
 8003dd2:	f04f 0100 	mov.w	r1, #0
 8003dd6:	f04f 0200 	mov.w	r2, #0
 8003dda:	00e2      	lsls	r2, r4, #3
 8003ddc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003de0:	00d9      	lsls	r1, r3, #3
 8003de2:	460b      	mov	r3, r1
 8003de4:	4614      	mov	r4, r2
 8003de6:	195b      	adds	r3, r3, r5
 8003de8:	eb44 0406 	adc.w	r4, r4, r6
 8003dec:	f04f 0100 	mov.w	r1, #0
 8003df0:	f04f 0200 	mov.w	r2, #0
 8003df4:	02a2      	lsls	r2, r4, #10
 8003df6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003dfa:	0299      	lsls	r1, r3, #10
 8003dfc:	460b      	mov	r3, r1
 8003dfe:	4614      	mov	r4, r2
 8003e00:	4618      	mov	r0, r3
 8003e02:	4621      	mov	r1, r4
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	f04f 0400 	mov.w	r4, #0
 8003e0a:	461a      	mov	r2, r3
 8003e0c:	4623      	mov	r3, r4
 8003e0e:	f7fc fc4b 	bl	80006a8 <__aeabi_uldivmod>
 8003e12:	4603      	mov	r3, r0
 8003e14:	460c      	mov	r4, r1
 8003e16:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003e18:	4b0a      	ldr	r3, [pc, #40]	; (8003e44 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	0c1b      	lsrs	r3, r3, #16
 8003e1e:	f003 0303 	and.w	r3, r3, #3
 8003e22:	3301      	adds	r3, #1
 8003e24:	005b      	lsls	r3, r3, #1
 8003e26:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003e28:	68fa      	ldr	r2, [r7, #12]
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e30:	60bb      	str	r3, [r7, #8]
      break;
 8003e32:	e002      	b.n	8003e3a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e34:	4b04      	ldr	r3, [pc, #16]	; (8003e48 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003e36:	60bb      	str	r3, [r7, #8]
      break;
 8003e38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e3a:	68bb      	ldr	r3, [r7, #8]
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3714      	adds	r7, #20
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e44:	40023800 	.word	0x40023800
 8003e48:	00f42400 	.word	0x00f42400
 8003e4c:	007a1200 	.word	0x007a1200

08003e50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e50:	b480      	push	{r7}
 8003e52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e54:	4b03      	ldr	r3, [pc, #12]	; (8003e64 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e56:	681b      	ldr	r3, [r3, #0]
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e60:	4770      	bx	lr
 8003e62:	bf00      	nop
 8003e64:	2000000c 	.word	0x2000000c

08003e68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003e6c:	f7ff fff0 	bl	8003e50 <HAL_RCC_GetHCLKFreq>
 8003e70:	4601      	mov	r1, r0
 8003e72:	4b05      	ldr	r3, [pc, #20]	; (8003e88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	0a9b      	lsrs	r3, r3, #10
 8003e78:	f003 0307 	and.w	r3, r3, #7
 8003e7c:	4a03      	ldr	r2, [pc, #12]	; (8003e8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e7e:	5cd3      	ldrb	r3, [r2, r3]
 8003e80:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	bd80      	pop	{r7, pc}
 8003e88:	40023800 	.word	0x40023800
 8003e8c:	08006b1c 	.word	0x08006b1c

08003e90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003e94:	f7ff ffdc 	bl	8003e50 <HAL_RCC_GetHCLKFreq>
 8003e98:	4601      	mov	r1, r0
 8003e9a:	4b05      	ldr	r3, [pc, #20]	; (8003eb0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	0b5b      	lsrs	r3, r3, #13
 8003ea0:	f003 0307 	and.w	r3, r3, #7
 8003ea4:	4a03      	ldr	r2, [pc, #12]	; (8003eb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ea6:	5cd3      	ldrb	r3, [r2, r3]
 8003ea8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	bd80      	pop	{r7, pc}
 8003eb0:	40023800 	.word	0x40023800
 8003eb4:	08006b1c 	.word	0x08006b1c

08003eb8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b086      	sub	sp, #24
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 0301 	and.w	r3, r3, #1
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d105      	bne.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d038      	beq.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003ee0:	4b68      	ldr	r3, [pc, #416]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003ee6:	f7fd ffe9 	bl	8001ebc <HAL_GetTick>
 8003eea:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003eec:	e008      	b.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003eee:	f7fd ffe5 	bl	8001ebc <HAL_GetTick>
 8003ef2:	4602      	mov	r2, r0
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	1ad3      	subs	r3, r2, r3
 8003ef8:	2b02      	cmp	r3, #2
 8003efa:	d901      	bls.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003efc:	2303      	movs	r3, #3
 8003efe:	e0bd      	b.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003f00:	4b61      	ldr	r3, [pc, #388]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d1f0      	bne.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	685a      	ldr	r2, [r3, #4]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	019b      	lsls	r3, r3, #6
 8003f16:	431a      	orrs	r2, r3
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	68db      	ldr	r3, [r3, #12]
 8003f1c:	071b      	lsls	r3, r3, #28
 8003f1e:	495a      	ldr	r1, [pc, #360]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f20:	4313      	orrs	r3, r2
 8003f22:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003f26:	4b57      	ldr	r3, [pc, #348]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003f28:	2201      	movs	r2, #1
 8003f2a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003f2c:	f7fd ffc6 	bl	8001ebc <HAL_GetTick>
 8003f30:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003f32:	e008      	b.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003f34:	f7fd ffc2 	bl	8001ebc <HAL_GetTick>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	1ad3      	subs	r3, r2, r3
 8003f3e:	2b02      	cmp	r3, #2
 8003f40:	d901      	bls.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f42:	2303      	movs	r3, #3
 8003f44:	e09a      	b.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003f46:	4b50      	ldr	r3, [pc, #320]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d0f0      	beq.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 0302 	and.w	r3, r3, #2
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	f000 8083 	beq.w	8004066 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003f60:	2300      	movs	r3, #0
 8003f62:	60fb      	str	r3, [r7, #12]
 8003f64:	4b48      	ldr	r3, [pc, #288]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f68:	4a47      	ldr	r2, [pc, #284]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f6e:	6413      	str	r3, [r2, #64]	; 0x40
 8003f70:	4b45      	ldr	r3, [pc, #276]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f78:	60fb      	str	r3, [r7, #12]
 8003f7a:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003f7c:	4b43      	ldr	r3, [pc, #268]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a42      	ldr	r2, [pc, #264]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003f82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f86:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003f88:	f7fd ff98 	bl	8001ebc <HAL_GetTick>
 8003f8c:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003f8e:	e008      	b.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003f90:	f7fd ff94 	bl	8001ebc <HAL_GetTick>
 8003f94:	4602      	mov	r2, r0
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	2b02      	cmp	r3, #2
 8003f9c:	d901      	bls.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	e06c      	b.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003fa2:	4b3a      	ldr	r3, [pc, #232]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d0f0      	beq.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003fae:	4b36      	ldr	r3, [pc, #216]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fb6:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d02f      	beq.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	691b      	ldr	r3, [r3, #16]
 8003fc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fc6:	693a      	ldr	r2, [r7, #16]
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d028      	beq.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003fcc:	4b2e      	ldr	r3, [pc, #184]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fd4:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003fd6:	4b2e      	ldr	r3, [pc, #184]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003fd8:	2201      	movs	r2, #1
 8003fda:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003fdc:	4b2c      	ldr	r3, [pc, #176]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003fde:	2200      	movs	r2, #0
 8003fe0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003fe2:	4a29      	ldr	r2, [pc, #164]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003fe8:	4b27      	ldr	r3, [pc, #156]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fec:	f003 0301 	and.w	r3, r3, #1
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d114      	bne.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003ff4:	f7fd ff62 	bl	8001ebc <HAL_GetTick>
 8003ff8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ffa:	e00a      	b.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ffc:	f7fd ff5e 	bl	8001ebc <HAL_GetTick>
 8004000:	4602      	mov	r2, r0
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	1ad3      	subs	r3, r2, r3
 8004006:	f241 3288 	movw	r2, #5000	; 0x1388
 800400a:	4293      	cmp	r3, r2
 800400c:	d901      	bls.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800400e:	2303      	movs	r3, #3
 8004010:	e034      	b.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004012:	4b1d      	ldr	r3, [pc, #116]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004014:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004016:	f003 0302 	and.w	r3, r3, #2
 800401a:	2b00      	cmp	r3, #0
 800401c:	d0ee      	beq.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	691b      	ldr	r3, [r3, #16]
 8004022:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004026:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800402a:	d10d      	bne.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x190>
 800402c:	4b16      	ldr	r3, [pc, #88]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	691b      	ldr	r3, [r3, #16]
 8004038:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800403c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004040:	4911      	ldr	r1, [pc, #68]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004042:	4313      	orrs	r3, r2
 8004044:	608b      	str	r3, [r1, #8]
 8004046:	e005      	b.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8004048:	4b0f      	ldr	r3, [pc, #60]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	4a0e      	ldr	r2, [pc, #56]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800404e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004052:	6093      	str	r3, [r2, #8]
 8004054:	4b0c      	ldr	r3, [pc, #48]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004056:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	691b      	ldr	r3, [r3, #16]
 800405c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004060:	4909      	ldr	r1, [pc, #36]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004062:	4313      	orrs	r3, r2
 8004064:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 0308 	and.w	r3, r3, #8
 800406e:	2b00      	cmp	r3, #0
 8004070:	d003      	beq.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	7d1a      	ldrb	r2, [r3, #20]
 8004076:	4b07      	ldr	r3, [pc, #28]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8004078:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800407a:	2300      	movs	r3, #0
}
 800407c:	4618      	mov	r0, r3
 800407e:	3718      	adds	r7, #24
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}
 8004084:	42470068 	.word	0x42470068
 8004088:	40023800 	.word	0x40023800
 800408c:	40007000 	.word	0x40007000
 8004090:	42470e40 	.word	0x42470e40
 8004094:	424711e0 	.word	0x424711e0

08004098 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b082      	sub	sp, #8
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d101      	bne.n	80040aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	e056      	b.n	8004158 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2200      	movs	r2, #0
 80040ae:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d106      	bne.n	80040ca <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2200      	movs	r2, #0
 80040c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	f7fd fc9b 	bl	8001a00 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2202      	movs	r2, #2
 80040ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040e0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	685a      	ldr	r2, [r3, #4]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	431a      	orrs	r2, r3
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	431a      	orrs	r2, r3
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	691b      	ldr	r3, [r3, #16]
 80040f6:	431a      	orrs	r2, r3
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	695b      	ldr	r3, [r3, #20]
 80040fc:	431a      	orrs	r2, r3
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	699b      	ldr	r3, [r3, #24]
 8004102:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004106:	431a      	orrs	r2, r3
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	69db      	ldr	r3, [r3, #28]
 800410c:	431a      	orrs	r2, r3
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6a1b      	ldr	r3, [r3, #32]
 8004112:	ea42 0103 	orr.w	r1, r2, r3
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	430a      	orrs	r2, r1
 8004120:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	699b      	ldr	r3, [r3, #24]
 8004126:	0c1b      	lsrs	r3, r3, #16
 8004128:	f003 0104 	and.w	r1, r3, #4
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	430a      	orrs	r2, r1
 8004136:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	69da      	ldr	r2, [r3, #28]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004146:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2201      	movs	r2, #1
 8004152:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004156:	2300      	movs	r3, #0
}
 8004158:	4618      	mov	r0, r3
 800415a:	3708      	adds	r7, #8
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}

08004160 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8004160:	b480      	push	{r7}
 8004162:	b087      	sub	sp, #28
 8004164:	af00      	add	r7, sp, #0
 8004166:	60f8      	str	r0, [r7, #12]
 8004168:	60b9      	str	r1, [r7, #8]
 800416a:	4613      	mov	r3, r2
 800416c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800416e:	2300      	movs	r3, #0
 8004170:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004178:	2b01      	cmp	r3, #1
 800417a:	d101      	bne.n	8004180 <HAL_SPI_Transmit_IT+0x20>
 800417c:	2302      	movs	r3, #2
 800417e:	e067      	b.n	8004250 <HAL_SPI_Transmit_IT+0xf0>
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2201      	movs	r2, #1
 8004184:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if ((pData == NULL) || (Size == 0U))
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d002      	beq.n	8004194 <HAL_SPI_Transmit_IT+0x34>
 800418e:	88fb      	ldrh	r3, [r7, #6]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d102      	bne.n	800419a <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004198:	e055      	b.n	8004246 <HAL_SPI_Transmit_IT+0xe6>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d002      	beq.n	80041ac <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 80041a6:	2302      	movs	r3, #2
 80041a8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80041aa:	e04c      	b.n	8004246 <HAL_SPI_Transmit_IT+0xe6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2203      	movs	r2, #3
 80041b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2200      	movs	r2, #0
 80041b8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	68ba      	ldr	r2, [r7, #8]
 80041be:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	88fa      	ldrh	r2, [r7, #6]
 80041c4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	88fa      	ldrh	r2, [r7, #6]
 80041ca:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2200      	movs	r2, #0
 80041d0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2200      	movs	r2, #0
 80041d6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2200      	movs	r2, #0
 80041dc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2200      	movs	r2, #0
 80041e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	68db      	ldr	r3, [r3, #12]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d003      	beq.n	80041f4 <HAL_SPI_Transmit_IT+0x94>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	4a1b      	ldr	r2, [pc, #108]	; (800425c <HAL_SPI_Transmit_IT+0xfc>)
 80041f0:	645a      	str	r2, [r3, #68]	; 0x44
 80041f2:	e002      	b.n	80041fa <HAL_SPI_Transmit_IT+0x9a>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	4a1a      	ldr	r2, [pc, #104]	; (8004260 <HAL_SPI_Transmit_IT+0x100>)
 80041f8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004202:	d107      	bne.n	8004214 <HAL_SPI_Transmit_IT+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004212:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	685a      	ldr	r2, [r3, #4]
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8004222:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800422e:	2b40      	cmp	r3, #64	; 0x40
 8004230:	d008      	beq.n	8004244 <HAL_SPI_Transmit_IT+0xe4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004240:	601a      	str	r2, [r3, #0]
 8004242:	e000      	b.n	8004246 <HAL_SPI_Transmit_IT+0xe6>
  }

error :
 8004244:	bf00      	nop
  __HAL_UNLOCK(hspi);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2200      	movs	r2, #0
 800424a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800424e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004250:	4618      	mov	r0, r3
 8004252:	371c      	adds	r7, #28
 8004254:	46bd      	mov	sp, r7
 8004256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425a:	4770      	bx	lr
 800425c:	080044e7 	.word	0x080044e7
 8004260:	080044a1 	.word	0x080044a1

08004264 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b088      	sub	sp, #32
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800427c:	69bb      	ldr	r3, [r7, #24]
 800427e:	099b      	lsrs	r3, r3, #6
 8004280:	f003 0301 	and.w	r3, r3, #1
 8004284:	2b00      	cmp	r3, #0
 8004286:	d10f      	bne.n	80042a8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004288:	69bb      	ldr	r3, [r7, #24]
 800428a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800428e:	2b00      	cmp	r3, #0
 8004290:	d00a      	beq.n	80042a8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004292:	69fb      	ldr	r3, [r7, #28]
 8004294:	099b      	lsrs	r3, r3, #6
 8004296:	f003 0301 	and.w	r3, r3, #1
 800429a:	2b00      	cmp	r3, #0
 800429c:	d004      	beq.n	80042a8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	4798      	blx	r3
    return;
 80042a6:	e0d8      	b.n	800445a <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80042a8:	69bb      	ldr	r3, [r7, #24]
 80042aa:	085b      	lsrs	r3, r3, #1
 80042ac:	f003 0301 	and.w	r3, r3, #1
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d00a      	beq.n	80042ca <HAL_SPI_IRQHandler+0x66>
 80042b4:	69fb      	ldr	r3, [r7, #28]
 80042b6:	09db      	lsrs	r3, r3, #7
 80042b8:	f003 0301 	and.w	r3, r3, #1
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d004      	beq.n	80042ca <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042c4:	6878      	ldr	r0, [r7, #4]
 80042c6:	4798      	blx	r3
    return;
 80042c8:	e0c7      	b.n	800445a <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80042ca:	69bb      	ldr	r3, [r7, #24]
 80042cc:	095b      	lsrs	r3, r3, #5
 80042ce:	f003 0301 	and.w	r3, r3, #1
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d10c      	bne.n	80042f0 <HAL_SPI_IRQHandler+0x8c>
 80042d6:	69bb      	ldr	r3, [r7, #24]
 80042d8:	099b      	lsrs	r3, r3, #6
 80042da:	f003 0301 	and.w	r3, r3, #1
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d106      	bne.n	80042f0 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80042e2:	69bb      	ldr	r3, [r7, #24]
 80042e4:	0a1b      	lsrs	r3, r3, #8
 80042e6:	f003 0301 	and.w	r3, r3, #1
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	f000 80b5 	beq.w	800445a <HAL_SPI_IRQHandler+0x1f6>
 80042f0:	69fb      	ldr	r3, [r7, #28]
 80042f2:	095b      	lsrs	r3, r3, #5
 80042f4:	f003 0301 	and.w	r3, r3, #1
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	f000 80ae 	beq.w	800445a <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80042fe:	69bb      	ldr	r3, [r7, #24]
 8004300:	099b      	lsrs	r3, r3, #6
 8004302:	f003 0301 	and.w	r3, r3, #1
 8004306:	2b00      	cmp	r3, #0
 8004308:	d023      	beq.n	8004352 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004310:	b2db      	uxtb	r3, r3
 8004312:	2b03      	cmp	r3, #3
 8004314:	d011      	beq.n	800433a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800431a:	f043 0204 	orr.w	r2, r3, #4
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004322:	2300      	movs	r3, #0
 8004324:	617b      	str	r3, [r7, #20]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	68db      	ldr	r3, [r3, #12]
 800432c:	617b      	str	r3, [r7, #20]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	617b      	str	r3, [r7, #20]
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	e00b      	b.n	8004352 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800433a:	2300      	movs	r3, #0
 800433c:	613b      	str	r3, [r7, #16]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	613b      	str	r3, [r7, #16]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	613b      	str	r3, [r7, #16]
 800434e:	693b      	ldr	r3, [r7, #16]
        return;
 8004350:	e083      	b.n	800445a <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004352:	69bb      	ldr	r3, [r7, #24]
 8004354:	095b      	lsrs	r3, r3, #5
 8004356:	f003 0301 	and.w	r3, r3, #1
 800435a:	2b00      	cmp	r3, #0
 800435c:	d014      	beq.n	8004388 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004362:	f043 0201 	orr.w	r2, r3, #1
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800436a:	2300      	movs	r3, #0
 800436c:	60fb      	str	r3, [r7, #12]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	60fb      	str	r3, [r7, #12]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004384:	601a      	str	r2, [r3, #0]
 8004386:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004388:	69bb      	ldr	r3, [r7, #24]
 800438a:	0a1b      	lsrs	r3, r3, #8
 800438c:	f003 0301 	and.w	r3, r3, #1
 8004390:	2b00      	cmp	r3, #0
 8004392:	d00c      	beq.n	80043ae <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004398:	f043 0208 	orr.w	r2, r3, #8
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80043a0:	2300      	movs	r3, #0
 80043a2:	60bb      	str	r3, [r7, #8]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	60bb      	str	r3, [r7, #8]
 80043ac:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d050      	beq.n	8004458 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	685a      	ldr	r2, [r3, #4]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80043c4:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2201      	movs	r2, #1
 80043ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80043ce:	69fb      	ldr	r3, [r7, #28]
 80043d0:	f003 0302 	and.w	r3, r3, #2
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d104      	bne.n	80043e2 <HAL_SPI_IRQHandler+0x17e>
 80043d8:	69fb      	ldr	r3, [r7, #28]
 80043da:	f003 0301 	and.w	r3, r3, #1
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d034      	beq.n	800444c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	685a      	ldr	r2, [r3, #4]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f022 0203 	bic.w	r2, r2, #3
 80043f0:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d011      	beq.n	800441e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043fe:	4a18      	ldr	r2, [pc, #96]	; (8004460 <HAL_SPI_IRQHandler+0x1fc>)
 8004400:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004406:	4618      	mov	r0, r3
 8004408:	f7fe fcb6 	bl	8002d78 <HAL_DMA_Abort_IT>
 800440c:	4603      	mov	r3, r0
 800440e:	2b00      	cmp	r3, #0
 8004410:	d005      	beq.n	800441e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004416:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004422:	2b00      	cmp	r3, #0
 8004424:	d016      	beq.n	8004454 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800442a:	4a0d      	ldr	r2, [pc, #52]	; (8004460 <HAL_SPI_IRQHandler+0x1fc>)
 800442c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004432:	4618      	mov	r0, r3
 8004434:	f7fe fca0 	bl	8002d78 <HAL_DMA_Abort_IT>
 8004438:	4603      	mov	r3, r0
 800443a:	2b00      	cmp	r3, #0
 800443c:	d00a      	beq.n	8004454 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004442:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800444a:	e003      	b.n	8004454 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f000 f809 	bl	8004464 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004452:	e000      	b.n	8004456 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8004454:	bf00      	nop
    return;
 8004456:	bf00      	nop
 8004458:	bf00      	nop
  }
}
 800445a:	3720      	adds	r7, #32
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}
 8004460:	08004479 	.word	0x08004479

08004464 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004464:	b480      	push	{r7}
 8004466:	b083      	sub	sp, #12
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800446c:	bf00      	nop
 800446e:	370c      	adds	r7, #12
 8004470:	46bd      	mov	sp, r7
 8004472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004476:	4770      	bx	lr

08004478 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b084      	sub	sp, #16
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004484:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2200      	movs	r2, #0
 800448a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2200      	movs	r2, #0
 8004490:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004492:	68f8      	ldr	r0, [r7, #12]
 8004494:	f7ff ffe6 	bl	8004464 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004498:	bf00      	nop
 800449a:	3710      	adds	r7, #16
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}

080044a0 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b082      	sub	sp, #8
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	330c      	adds	r3, #12
 80044b2:	7812      	ldrb	r2, [r2, #0]
 80044b4:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ba:	1c5a      	adds	r2, r3, #1
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044c4:	b29b      	uxth	r3, r3
 80044c6:	3b01      	subs	r3, #1
 80044c8:	b29a      	uxth	r2, r3
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044d2:	b29b      	uxth	r3, r3
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d102      	bne.n	80044de <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	f000 f8d3 	bl	8004684 <SPI_CloseTx_ISR>
  }
}
 80044de:	bf00      	nop
 80044e0:	3708      	adds	r7, #8
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}

080044e6 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80044e6:	b580      	push	{r7, lr}
 80044e8:	b082      	sub	sp, #8
 80044ea:	af00      	add	r7, sp, #0
 80044ec:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f2:	881a      	ldrh	r2, [r3, #0]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044fe:	1c9a      	adds	r2, r3, #2
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004508:	b29b      	uxth	r3, r3
 800450a:	3b01      	subs	r3, #1
 800450c:	b29a      	uxth	r2, r3
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004516:	b29b      	uxth	r3, r3
 8004518:	2b00      	cmp	r3, #0
 800451a:	d102      	bne.n	8004522 <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f000 f8b1 	bl	8004684 <SPI_CloseTx_ISR>
  }
}
 8004522:	bf00      	nop
 8004524:	3708      	adds	r7, #8
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}

0800452a <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800452a:	b580      	push	{r7, lr}
 800452c:	b084      	sub	sp, #16
 800452e:	af00      	add	r7, sp, #0
 8004530:	60f8      	str	r0, [r7, #12]
 8004532:	60b9      	str	r1, [r7, #8]
 8004534:	603b      	str	r3, [r7, #0]
 8004536:	4613      	mov	r3, r2
 8004538:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800453a:	e04c      	b.n	80045d6 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004542:	d048      	beq.n	80045d6 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004544:	f7fd fcba 	bl	8001ebc <HAL_GetTick>
 8004548:	4602      	mov	r2, r0
 800454a:	69bb      	ldr	r3, [r7, #24]
 800454c:	1ad3      	subs	r3, r2, r3
 800454e:	683a      	ldr	r2, [r7, #0]
 8004550:	429a      	cmp	r2, r3
 8004552:	d902      	bls.n	800455a <SPI_WaitFlagStateUntilTimeout+0x30>
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d13d      	bne.n	80045d6 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	685a      	ldr	r2, [r3, #4]
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004568:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004572:	d111      	bne.n	8004598 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800457c:	d004      	beq.n	8004588 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004586:	d107      	bne.n	8004598 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004596:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800459c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045a0:	d10f      	bne.n	80045c2 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80045b0:	601a      	str	r2, [r3, #0]
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80045c0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2201      	movs	r2, #1
 80045c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2200      	movs	r2, #0
 80045ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80045d2:	2303      	movs	r3, #3
 80045d4:	e00f      	b.n	80045f6 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	689a      	ldr	r2, [r3, #8]
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	4013      	ands	r3, r2
 80045e0:	68ba      	ldr	r2, [r7, #8]
 80045e2:	429a      	cmp	r2, r3
 80045e4:	bf0c      	ite	eq
 80045e6:	2301      	moveq	r3, #1
 80045e8:	2300      	movne	r3, #0
 80045ea:	b2db      	uxtb	r3, r3
 80045ec:	461a      	mov	r2, r3
 80045ee:	79fb      	ldrb	r3, [r7, #7]
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d1a3      	bne.n	800453c <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80045f4:	2300      	movs	r3, #0
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3710      	adds	r7, #16
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}
	...

08004600 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b088      	sub	sp, #32
 8004604:	af02      	add	r7, sp, #8
 8004606:	60f8      	str	r0, [r7, #12]
 8004608:	60b9      	str	r1, [r7, #8]
 800460a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800460c:	4b1b      	ldr	r3, [pc, #108]	; (800467c <SPI_EndRxTxTransaction+0x7c>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a1b      	ldr	r2, [pc, #108]	; (8004680 <SPI_EndRxTxTransaction+0x80>)
 8004612:	fba2 2303 	umull	r2, r3, r2, r3
 8004616:	0d5b      	lsrs	r3, r3, #21
 8004618:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800461c:	fb02 f303 	mul.w	r3, r2, r3
 8004620:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800462a:	d112      	bne.n	8004652 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	9300      	str	r3, [sp, #0]
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	2200      	movs	r2, #0
 8004634:	2180      	movs	r1, #128	; 0x80
 8004636:	68f8      	ldr	r0, [r7, #12]
 8004638:	f7ff ff77 	bl	800452a <SPI_WaitFlagStateUntilTimeout>
 800463c:	4603      	mov	r3, r0
 800463e:	2b00      	cmp	r3, #0
 8004640:	d016      	beq.n	8004670 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004646:	f043 0220 	orr.w	r2, r3, #32
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800464e:	2303      	movs	r3, #3
 8004650:	e00f      	b.n	8004672 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d00a      	beq.n	800466e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	3b01      	subs	r3, #1
 800465c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004668:	2b80      	cmp	r3, #128	; 0x80
 800466a:	d0f2      	beq.n	8004652 <SPI_EndRxTxTransaction+0x52>
 800466c:	e000      	b.n	8004670 <SPI_EndRxTxTransaction+0x70>
        break;
 800466e:	bf00      	nop
  }

  return HAL_OK;
 8004670:	2300      	movs	r3, #0
}
 8004672:	4618      	mov	r0, r3
 8004674:	3718      	adds	r7, #24
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}
 800467a:	bf00      	nop
 800467c:	2000000c 	.word	0x2000000c
 8004680:	165e9f81 	.word	0x165e9f81

08004684 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b086      	sub	sp, #24
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 800468c:	4b2c      	ldr	r3, [pc, #176]	; (8004740 <SPI_CloseTx_ISR+0xbc>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a2c      	ldr	r2, [pc, #176]	; (8004744 <SPI_CloseTx_ISR+0xc0>)
 8004692:	fba2 2303 	umull	r2, r3, r2, r3
 8004696:	0a5b      	lsrs	r3, r3, #9
 8004698:	2264      	movs	r2, #100	; 0x64
 800469a:	fb02 f303 	mul.w	r3, r2, r3
 800469e:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80046a0:	f7fd fc0c 	bl	8001ebc <HAL_GetTick>
 80046a4:	6178      	str	r0, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d106      	bne.n	80046ba <SPI_CloseTx_ISR+0x36>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046b0:	f043 0220 	orr.w	r2, r3, #32
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80046b8:	e009      	b.n	80046ce <SPI_CloseTx_ISR+0x4a>
    }
    count--;
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	3b01      	subs	r3, #1
 80046be:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	f003 0302 	and.w	r3, r3, #2
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d0eb      	beq.n	80046a6 <SPI_CloseTx_ISR+0x22>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	685a      	ldr	r2, [r3, #4]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80046dc:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80046de:	697a      	ldr	r2, [r7, #20]
 80046e0:	2164      	movs	r1, #100	; 0x64
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f7ff ff8c 	bl	8004600 <SPI_EndRxTxTransaction>
 80046e8:	4603      	mov	r3, r0
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d005      	beq.n	80046fa <SPI_CloseTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046f2:	f043 0220 	orr.w	r2, r3, #32
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d10a      	bne.n	8004718 <SPI_CloseTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004702:	2300      	movs	r3, #0
 8004704:	60fb      	str	r3, [r7, #12]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	60fb      	str	r3, [r7, #12]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	60fb      	str	r3, [r7, #12]
 8004716:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004724:	2b00      	cmp	r3, #0
 8004726:	d003      	beq.n	8004730 <SPI_CloseTx_ISR+0xac>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8004728:	6878      	ldr	r0, [r7, #4]
 800472a:	f7ff fe9b 	bl	8004464 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800472e:	e002      	b.n	8004736 <SPI_CloseTx_ISR+0xb2>
    HAL_SPI_TxCpltCallback(hspi);
 8004730:	6878      	ldr	r0, [r7, #4]
 8004732:	f7fd f853 	bl	80017dc <HAL_SPI_TxCpltCallback>
}
 8004736:	bf00      	nop
 8004738:	3718      	adds	r7, #24
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}
 800473e:	bf00      	nop
 8004740:	2000000c 	.word	0x2000000c
 8004744:	057619f1 	.word	0x057619f1

08004748 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b082      	sub	sp, #8
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d101      	bne.n	800475a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	e01d      	b.n	8004796 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004760:	b2db      	uxtb	r3, r3
 8004762:	2b00      	cmp	r3, #0
 8004764:	d106      	bne.n	8004774 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2200      	movs	r2, #0
 800476a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f7fd f9b6 	bl	8001ae0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2202      	movs	r2, #2
 8004778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681a      	ldr	r2, [r3, #0]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	3304      	adds	r3, #4
 8004784:	4619      	mov	r1, r3
 8004786:	4610      	mov	r0, r2
 8004788:	f000 fb0a 	bl	8004da0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2201      	movs	r2, #1
 8004790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004794:	2300      	movs	r3, #0
}
 8004796:	4618      	mov	r0, r3
 8004798:	3708      	adds	r7, #8
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}

0800479e <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800479e:	b480      	push	{r7}
 80047a0:	b085      	sub	sp, #20
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2202      	movs	r2, #2
 80047aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	f003 0307 	and.w	r3, r3, #7
 80047b8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2b06      	cmp	r3, #6
 80047be:	d007      	beq.n	80047d0 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	681a      	ldr	r2, [r3, #0]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f042 0201 	orr.w	r2, r2, #1
 80047ce:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2201      	movs	r2, #1
 80047d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80047d8:	2300      	movs	r3, #0
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3714      	adds	r7, #20
 80047de:	46bd      	mov	sp, r7
 80047e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e4:	4770      	bx	lr

080047e6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80047e6:	b480      	push	{r7}
 80047e8:	b085      	sub	sp, #20
 80047ea:	af00      	add	r7, sp, #0
 80047ec:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	68da      	ldr	r2, [r3, #12]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f042 0201 	orr.w	r2, r2, #1
 80047fc:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	f003 0307 	and.w	r3, r3, #7
 8004808:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2b06      	cmp	r3, #6
 800480e:	d007      	beq.n	8004820 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	681a      	ldr	r2, [r3, #0]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f042 0201 	orr.w	r2, r2, #1
 800481e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004820:	2300      	movs	r3, #0
}
 8004822:	4618      	mov	r0, r3
 8004824:	3714      	adds	r7, #20
 8004826:	46bd      	mov	sp, r7
 8004828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482c:	4770      	bx	lr

0800482e <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800482e:	b580      	push	{r7, lr}
 8004830:	b082      	sub	sp, #8
 8004832:	af00      	add	r7, sp, #0
 8004834:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d101      	bne.n	8004840 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	e01d      	b.n	800487c <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004846:	b2db      	uxtb	r3, r3
 8004848:	2b00      	cmp	r3, #0
 800484a:	d106      	bne.n	800485a <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2200      	movs	r2, #0
 8004850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	f000 f815 	bl	8004884 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2202      	movs	r2, #2
 800485e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	3304      	adds	r3, #4
 800486a:	4619      	mov	r1, r3
 800486c:	4610      	mov	r0, r2
 800486e:	f000 fa97 	bl	8004da0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2201      	movs	r2, #1
 8004876:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800487a:	2300      	movs	r3, #0
}
 800487c:	4618      	mov	r0, r3
 800487e:	3708      	adds	r7, #8
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}

08004884 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004884:	b480      	push	{r7}
 8004886:	b083      	sub	sp, #12
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800488c:	bf00      	nop
 800488e:	370c      	adds	r7, #12
 8004890:	46bd      	mov	sp, r7
 8004892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004896:	4770      	bx	lr

08004898 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b082      	sub	sp, #8
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	691b      	ldr	r3, [r3, #16]
 80048a6:	f003 0302 	and.w	r3, r3, #2
 80048aa:	2b02      	cmp	r3, #2
 80048ac:	d122      	bne.n	80048f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	68db      	ldr	r3, [r3, #12]
 80048b4:	f003 0302 	and.w	r3, r3, #2
 80048b8:	2b02      	cmp	r3, #2
 80048ba:	d11b      	bne.n	80048f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f06f 0202 	mvn.w	r2, #2
 80048c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2201      	movs	r2, #1
 80048ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	699b      	ldr	r3, [r3, #24]
 80048d2:	f003 0303 	and.w	r3, r3, #3
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d003      	beq.n	80048e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f000 fa41 	bl	8004d62 <HAL_TIM_IC_CaptureCallback>
 80048e0:	e005      	b.n	80048ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f000 fa33 	bl	8004d4e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	f000 fa44 	bl	8004d76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2200      	movs	r2, #0
 80048f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	691b      	ldr	r3, [r3, #16]
 80048fa:	f003 0304 	and.w	r3, r3, #4
 80048fe:	2b04      	cmp	r3, #4
 8004900:	d122      	bne.n	8004948 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	68db      	ldr	r3, [r3, #12]
 8004908:	f003 0304 	and.w	r3, r3, #4
 800490c:	2b04      	cmp	r3, #4
 800490e:	d11b      	bne.n	8004948 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f06f 0204 	mvn.w	r2, #4
 8004918:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2202      	movs	r2, #2
 800491e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	699b      	ldr	r3, [r3, #24]
 8004926:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800492a:	2b00      	cmp	r3, #0
 800492c:	d003      	beq.n	8004936 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	f000 fa17 	bl	8004d62 <HAL_TIM_IC_CaptureCallback>
 8004934:	e005      	b.n	8004942 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	f000 fa09 	bl	8004d4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800493c:	6878      	ldr	r0, [r7, #4]
 800493e:	f000 fa1a 	bl	8004d76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2200      	movs	r2, #0
 8004946:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	691b      	ldr	r3, [r3, #16]
 800494e:	f003 0308 	and.w	r3, r3, #8
 8004952:	2b08      	cmp	r3, #8
 8004954:	d122      	bne.n	800499c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	68db      	ldr	r3, [r3, #12]
 800495c:	f003 0308 	and.w	r3, r3, #8
 8004960:	2b08      	cmp	r3, #8
 8004962:	d11b      	bne.n	800499c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f06f 0208 	mvn.w	r2, #8
 800496c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2204      	movs	r2, #4
 8004972:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	69db      	ldr	r3, [r3, #28]
 800497a:	f003 0303 	and.w	r3, r3, #3
 800497e:	2b00      	cmp	r3, #0
 8004980:	d003      	beq.n	800498a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f000 f9ed 	bl	8004d62 <HAL_TIM_IC_CaptureCallback>
 8004988:	e005      	b.n	8004996 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f000 f9df 	bl	8004d4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004990:	6878      	ldr	r0, [r7, #4]
 8004992:	f000 f9f0 	bl	8004d76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2200      	movs	r2, #0
 800499a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	691b      	ldr	r3, [r3, #16]
 80049a2:	f003 0310 	and.w	r3, r3, #16
 80049a6:	2b10      	cmp	r3, #16
 80049a8:	d122      	bne.n	80049f0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	68db      	ldr	r3, [r3, #12]
 80049b0:	f003 0310 	and.w	r3, r3, #16
 80049b4:	2b10      	cmp	r3, #16
 80049b6:	d11b      	bne.n	80049f0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f06f 0210 	mvn.w	r2, #16
 80049c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2208      	movs	r2, #8
 80049c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	69db      	ldr	r3, [r3, #28]
 80049ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d003      	beq.n	80049de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f000 f9c3 	bl	8004d62 <HAL_TIM_IC_CaptureCallback>
 80049dc:	e005      	b.n	80049ea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f000 f9b5 	bl	8004d4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049e4:	6878      	ldr	r0, [r7, #4]
 80049e6:	f000 f9c6 	bl	8004d76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2200      	movs	r2, #0
 80049ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	691b      	ldr	r3, [r3, #16]
 80049f6:	f003 0301 	and.w	r3, r3, #1
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d10e      	bne.n	8004a1c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	68db      	ldr	r3, [r3, #12]
 8004a04:	f003 0301 	and.w	r3, r3, #1
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	d107      	bne.n	8004a1c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f06f 0201 	mvn.w	r2, #1
 8004a14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f7fc fef6 	bl	8001808 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	691b      	ldr	r3, [r3, #16]
 8004a22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a26:	2b80      	cmp	r3, #128	; 0x80
 8004a28:	d10e      	bne.n	8004a48 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	68db      	ldr	r3, [r3, #12]
 8004a30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a34:	2b80      	cmp	r3, #128	; 0x80
 8004a36:	d107      	bne.n	8004a48 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004a40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	f000 fc5c 	bl	8005300 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	691b      	ldr	r3, [r3, #16]
 8004a4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a52:	2b40      	cmp	r3, #64	; 0x40
 8004a54:	d10e      	bne.n	8004a74 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	68db      	ldr	r3, [r3, #12]
 8004a5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a60:	2b40      	cmp	r3, #64	; 0x40
 8004a62:	d107      	bne.n	8004a74 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004a6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f000 f98b 	bl	8004d8a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	691b      	ldr	r3, [r3, #16]
 8004a7a:	f003 0320 	and.w	r3, r3, #32
 8004a7e:	2b20      	cmp	r3, #32
 8004a80:	d10e      	bne.n	8004aa0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	68db      	ldr	r3, [r3, #12]
 8004a88:	f003 0320 	and.w	r3, r3, #32
 8004a8c:	2b20      	cmp	r3, #32
 8004a8e:	d107      	bne.n	8004aa0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f06f 0220 	mvn.w	r2, #32
 8004a98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f000 fc26 	bl	80052ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004aa0:	bf00      	nop
 8004aa2:	3708      	adds	r7, #8
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}

08004aa8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b084      	sub	sp, #16
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	60f8      	str	r0, [r7, #12]
 8004ab0:	60b9      	str	r1, [r7, #8]
 8004ab2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004aba:	2b01      	cmp	r3, #1
 8004abc:	d101      	bne.n	8004ac2 <HAL_TIM_IC_ConfigChannel+0x1a>
 8004abe:	2302      	movs	r3, #2
 8004ac0:	e08a      	b.n	8004bd8 <HAL_TIM_IC_ConfigChannel+0x130>
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2202      	movs	r2, #2
 8004ace:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d11b      	bne.n	8004b10 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	6818      	ldr	r0, [r3, #0]
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	6819      	ldr	r1, [r3, #0]
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	685a      	ldr	r2, [r3, #4]
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	68db      	ldr	r3, [r3, #12]
 8004ae8:	f000 f9da 	bl	8004ea0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	699a      	ldr	r2, [r3, #24]
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f022 020c 	bic.w	r2, r2, #12
 8004afa:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	6999      	ldr	r1, [r3, #24]
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	689a      	ldr	r2, [r3, #8]
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	430a      	orrs	r2, r1
 8004b0c:	619a      	str	r2, [r3, #24]
 8004b0e:	e05a      	b.n	8004bc6 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2b04      	cmp	r3, #4
 8004b14:	d11c      	bne.n	8004b50 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	6818      	ldr	r0, [r3, #0]
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	6819      	ldr	r1, [r3, #0]
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	685a      	ldr	r2, [r3, #4]
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	68db      	ldr	r3, [r3, #12]
 8004b26:	f000 fa52 	bl	8004fce <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	699a      	ldr	r2, [r3, #24]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004b38:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	6999      	ldr	r1, [r3, #24]
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	021a      	lsls	r2, r3, #8
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	430a      	orrs	r2, r1
 8004b4c:	619a      	str	r2, [r3, #24]
 8004b4e:	e03a      	b.n	8004bc6 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2b08      	cmp	r3, #8
 8004b54:	d11b      	bne.n	8004b8e <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	6818      	ldr	r0, [r3, #0]
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	6819      	ldr	r1, [r3, #0]
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	685a      	ldr	r2, [r3, #4]
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	68db      	ldr	r3, [r3, #12]
 8004b66:	f000 fa9f 	bl	80050a8 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	69da      	ldr	r2, [r3, #28]
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f022 020c 	bic.w	r2, r2, #12
 8004b78:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	69d9      	ldr	r1, [r3, #28]
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	689a      	ldr	r2, [r3, #8]
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	430a      	orrs	r2, r1
 8004b8a:	61da      	str	r2, [r3, #28]
 8004b8c:	e01b      	b.n	8004bc6 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	6818      	ldr	r0, [r3, #0]
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	6819      	ldr	r1, [r3, #0]
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	685a      	ldr	r2, [r3, #4]
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	68db      	ldr	r3, [r3, #12]
 8004b9e:	f000 fabf 	bl	8005120 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	69da      	ldr	r2, [r3, #28]
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004bb0:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	69d9      	ldr	r1, [r3, #28]
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	021a      	lsls	r2, r3, #8
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	430a      	orrs	r2, r1
 8004bc4:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	2201      	movs	r2, #1
 8004bca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004bd6:	2300      	movs	r3, #0
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	3710      	adds	r7, #16
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}

08004be0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b084      	sub	sp, #16
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
 8004be8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d101      	bne.n	8004bf8 <HAL_TIM_ConfigClockSource+0x18>
 8004bf4:	2302      	movs	r3, #2
 8004bf6:	e0a6      	b.n	8004d46 <HAL_TIM_ConfigClockSource+0x166>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2202      	movs	r2, #2
 8004c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004c16:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c1e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	68fa      	ldr	r2, [r7, #12]
 8004c26:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	2b40      	cmp	r3, #64	; 0x40
 8004c2e:	d067      	beq.n	8004d00 <HAL_TIM_ConfigClockSource+0x120>
 8004c30:	2b40      	cmp	r3, #64	; 0x40
 8004c32:	d80b      	bhi.n	8004c4c <HAL_TIM_ConfigClockSource+0x6c>
 8004c34:	2b10      	cmp	r3, #16
 8004c36:	d073      	beq.n	8004d20 <HAL_TIM_ConfigClockSource+0x140>
 8004c38:	2b10      	cmp	r3, #16
 8004c3a:	d802      	bhi.n	8004c42 <HAL_TIM_ConfigClockSource+0x62>
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d06f      	beq.n	8004d20 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004c40:	e078      	b.n	8004d34 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004c42:	2b20      	cmp	r3, #32
 8004c44:	d06c      	beq.n	8004d20 <HAL_TIM_ConfigClockSource+0x140>
 8004c46:	2b30      	cmp	r3, #48	; 0x30
 8004c48:	d06a      	beq.n	8004d20 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004c4a:	e073      	b.n	8004d34 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004c4c:	2b70      	cmp	r3, #112	; 0x70
 8004c4e:	d00d      	beq.n	8004c6c <HAL_TIM_ConfigClockSource+0x8c>
 8004c50:	2b70      	cmp	r3, #112	; 0x70
 8004c52:	d804      	bhi.n	8004c5e <HAL_TIM_ConfigClockSource+0x7e>
 8004c54:	2b50      	cmp	r3, #80	; 0x50
 8004c56:	d033      	beq.n	8004cc0 <HAL_TIM_ConfigClockSource+0xe0>
 8004c58:	2b60      	cmp	r3, #96	; 0x60
 8004c5a:	d041      	beq.n	8004ce0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004c5c:	e06a      	b.n	8004d34 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004c5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c62:	d066      	beq.n	8004d32 <HAL_TIM_ConfigClockSource+0x152>
 8004c64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c68:	d017      	beq.n	8004c9a <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004c6a:	e063      	b.n	8004d34 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6818      	ldr	r0, [r3, #0]
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	6899      	ldr	r1, [r3, #8]
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	685a      	ldr	r2, [r3, #4]
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	68db      	ldr	r3, [r3, #12]
 8004c7c:	f000 faa8 	bl	80051d0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	689b      	ldr	r3, [r3, #8]
 8004c86:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004c8e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	68fa      	ldr	r2, [r7, #12]
 8004c96:	609a      	str	r2, [r3, #8]
      break;
 8004c98:	e04c      	b.n	8004d34 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6818      	ldr	r0, [r3, #0]
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	6899      	ldr	r1, [r3, #8]
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	685a      	ldr	r2, [r3, #4]
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	68db      	ldr	r3, [r3, #12]
 8004caa:	f000 fa91 	bl	80051d0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	689a      	ldr	r2, [r3, #8]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004cbc:	609a      	str	r2, [r3, #8]
      break;
 8004cbe:	e039      	b.n	8004d34 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6818      	ldr	r0, [r3, #0]
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	6859      	ldr	r1, [r3, #4]
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	68db      	ldr	r3, [r3, #12]
 8004ccc:	461a      	mov	r2, r3
 8004cce:	f000 f94f 	bl	8004f70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	2150      	movs	r1, #80	; 0x50
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f000 fa5e 	bl	800519a <TIM_ITRx_SetConfig>
      break;
 8004cde:	e029      	b.n	8004d34 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6818      	ldr	r0, [r3, #0]
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	6859      	ldr	r1, [r3, #4]
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	68db      	ldr	r3, [r3, #12]
 8004cec:	461a      	mov	r2, r3
 8004cee:	f000 f9ab 	bl	8005048 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	2160      	movs	r1, #96	; 0x60
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	f000 fa4e 	bl	800519a <TIM_ITRx_SetConfig>
      break;
 8004cfe:	e019      	b.n	8004d34 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6818      	ldr	r0, [r3, #0]
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	6859      	ldr	r1, [r3, #4]
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	68db      	ldr	r3, [r3, #12]
 8004d0c:	461a      	mov	r2, r3
 8004d0e:	f000 f92f 	bl	8004f70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	2140      	movs	r1, #64	; 0x40
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f000 fa3e 	bl	800519a <TIM_ITRx_SetConfig>
      break;
 8004d1e:	e009      	b.n	8004d34 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4619      	mov	r1, r3
 8004d2a:	4610      	mov	r0, r2
 8004d2c:	f000 fa35 	bl	800519a <TIM_ITRx_SetConfig>
      break;
 8004d30:	e000      	b.n	8004d34 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004d32:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2201      	movs	r2, #1
 8004d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d44:	2300      	movs	r3, #0
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3710      	adds	r7, #16
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}

08004d4e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d4e:	b480      	push	{r7}
 8004d50:	b083      	sub	sp, #12
 8004d52:	af00      	add	r7, sp, #0
 8004d54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d56:	bf00      	nop
 8004d58:	370c      	adds	r7, #12
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d60:	4770      	bx	lr

08004d62 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d62:	b480      	push	{r7}
 8004d64:	b083      	sub	sp, #12
 8004d66:	af00      	add	r7, sp, #0
 8004d68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d6a:	bf00      	nop
 8004d6c:	370c      	adds	r7, #12
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d74:	4770      	bx	lr

08004d76 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d76:	b480      	push	{r7}
 8004d78:	b083      	sub	sp, #12
 8004d7a:	af00      	add	r7, sp, #0
 8004d7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d7e:	bf00      	nop
 8004d80:	370c      	adds	r7, #12
 8004d82:	46bd      	mov	sp, r7
 8004d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d88:	4770      	bx	lr

08004d8a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d8a:	b480      	push	{r7}
 8004d8c:	b083      	sub	sp, #12
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d92:	bf00      	nop
 8004d94:	370c      	adds	r7, #12
 8004d96:	46bd      	mov	sp, r7
 8004d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9c:	4770      	bx	lr
	...

08004da0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b085      	sub	sp, #20
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
 8004da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	4a34      	ldr	r2, [pc, #208]	; (8004e84 <TIM_Base_SetConfig+0xe4>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d00f      	beq.n	8004dd8 <TIM_Base_SetConfig+0x38>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dbe:	d00b      	beq.n	8004dd8 <TIM_Base_SetConfig+0x38>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	4a31      	ldr	r2, [pc, #196]	; (8004e88 <TIM_Base_SetConfig+0xe8>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d007      	beq.n	8004dd8 <TIM_Base_SetConfig+0x38>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	4a30      	ldr	r2, [pc, #192]	; (8004e8c <TIM_Base_SetConfig+0xec>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d003      	beq.n	8004dd8 <TIM_Base_SetConfig+0x38>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	4a2f      	ldr	r2, [pc, #188]	; (8004e90 <TIM_Base_SetConfig+0xf0>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d108      	bne.n	8004dea <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	68fa      	ldr	r2, [r7, #12]
 8004de6:	4313      	orrs	r3, r2
 8004de8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	4a25      	ldr	r2, [pc, #148]	; (8004e84 <TIM_Base_SetConfig+0xe4>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d01b      	beq.n	8004e2a <TIM_Base_SetConfig+0x8a>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004df8:	d017      	beq.n	8004e2a <TIM_Base_SetConfig+0x8a>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	4a22      	ldr	r2, [pc, #136]	; (8004e88 <TIM_Base_SetConfig+0xe8>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d013      	beq.n	8004e2a <TIM_Base_SetConfig+0x8a>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	4a21      	ldr	r2, [pc, #132]	; (8004e8c <TIM_Base_SetConfig+0xec>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d00f      	beq.n	8004e2a <TIM_Base_SetConfig+0x8a>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	4a20      	ldr	r2, [pc, #128]	; (8004e90 <TIM_Base_SetConfig+0xf0>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d00b      	beq.n	8004e2a <TIM_Base_SetConfig+0x8a>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	4a1f      	ldr	r2, [pc, #124]	; (8004e94 <TIM_Base_SetConfig+0xf4>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d007      	beq.n	8004e2a <TIM_Base_SetConfig+0x8a>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	4a1e      	ldr	r2, [pc, #120]	; (8004e98 <TIM_Base_SetConfig+0xf8>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d003      	beq.n	8004e2a <TIM_Base_SetConfig+0x8a>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	4a1d      	ldr	r2, [pc, #116]	; (8004e9c <TIM_Base_SetConfig+0xfc>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d108      	bne.n	8004e3c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	68db      	ldr	r3, [r3, #12]
 8004e36:	68fa      	ldr	r2, [r7, #12]
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	695b      	ldr	r3, [r3, #20]
 8004e46:	4313      	orrs	r3, r2
 8004e48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	68fa      	ldr	r2, [r7, #12]
 8004e4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	689a      	ldr	r2, [r3, #8]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	4a08      	ldr	r2, [pc, #32]	; (8004e84 <TIM_Base_SetConfig+0xe4>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d103      	bne.n	8004e70 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	691a      	ldr	r2, [r3, #16]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2201      	movs	r2, #1
 8004e74:	615a      	str	r2, [r3, #20]
}
 8004e76:	bf00      	nop
 8004e78:	3714      	adds	r7, #20
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr
 8004e82:	bf00      	nop
 8004e84:	40010000 	.word	0x40010000
 8004e88:	40000400 	.word	0x40000400
 8004e8c:	40000800 	.word	0x40000800
 8004e90:	40000c00 	.word	0x40000c00
 8004e94:	40014000 	.word	0x40014000
 8004e98:	40014400 	.word	0x40014400
 8004e9c:	40014800 	.word	0x40014800

08004ea0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b087      	sub	sp, #28
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	60f8      	str	r0, [r7, #12]
 8004ea8:	60b9      	str	r1, [r7, #8]
 8004eaa:	607a      	str	r2, [r7, #4]
 8004eac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	6a1b      	ldr	r3, [r3, #32]
 8004eb2:	f023 0201 	bic.w	r2, r3, #1
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	699b      	ldr	r3, [r3, #24]
 8004ebe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	6a1b      	ldr	r3, [r3, #32]
 8004ec4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	4a24      	ldr	r2, [pc, #144]	; (8004f5c <TIM_TI1_SetConfig+0xbc>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d013      	beq.n	8004ef6 <TIM_TI1_SetConfig+0x56>
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ed4:	d00f      	beq.n	8004ef6 <TIM_TI1_SetConfig+0x56>
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	4a21      	ldr	r2, [pc, #132]	; (8004f60 <TIM_TI1_SetConfig+0xc0>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d00b      	beq.n	8004ef6 <TIM_TI1_SetConfig+0x56>
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	4a20      	ldr	r2, [pc, #128]	; (8004f64 <TIM_TI1_SetConfig+0xc4>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d007      	beq.n	8004ef6 <TIM_TI1_SetConfig+0x56>
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	4a1f      	ldr	r2, [pc, #124]	; (8004f68 <TIM_TI1_SetConfig+0xc8>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d003      	beq.n	8004ef6 <TIM_TI1_SetConfig+0x56>
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	4a1e      	ldr	r2, [pc, #120]	; (8004f6c <TIM_TI1_SetConfig+0xcc>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d101      	bne.n	8004efa <TIM_TI1_SetConfig+0x5a>
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	e000      	b.n	8004efc <TIM_TI1_SetConfig+0x5c>
 8004efa:	2300      	movs	r3, #0
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d008      	beq.n	8004f12 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	f023 0303 	bic.w	r3, r3, #3
 8004f06:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004f08:	697a      	ldr	r2, [r7, #20]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	617b      	str	r3, [r7, #20]
 8004f10:	e003      	b.n	8004f1a <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	f043 0301 	orr.w	r3, r3, #1
 8004f18:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f20:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	011b      	lsls	r3, r3, #4
 8004f26:	b2db      	uxtb	r3, r3
 8004f28:	697a      	ldr	r2, [r7, #20]
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	f023 030a 	bic.w	r3, r3, #10
 8004f34:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	f003 030a 	and.w	r3, r3, #10
 8004f3c:	693a      	ldr	r2, [r7, #16]
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	697a      	ldr	r2, [r7, #20]
 8004f46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	693a      	ldr	r2, [r7, #16]
 8004f4c:	621a      	str	r2, [r3, #32]
}
 8004f4e:	bf00      	nop
 8004f50:	371c      	adds	r7, #28
 8004f52:	46bd      	mov	sp, r7
 8004f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f58:	4770      	bx	lr
 8004f5a:	bf00      	nop
 8004f5c:	40010000 	.word	0x40010000
 8004f60:	40000400 	.word	0x40000400
 8004f64:	40000800 	.word	0x40000800
 8004f68:	40000c00 	.word	0x40000c00
 8004f6c:	40014000 	.word	0x40014000

08004f70 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b087      	sub	sp, #28
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	60f8      	str	r0, [r7, #12]
 8004f78:	60b9      	str	r1, [r7, #8]
 8004f7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	6a1b      	ldr	r3, [r3, #32]
 8004f80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	6a1b      	ldr	r3, [r3, #32]
 8004f86:	f023 0201 	bic.w	r2, r3, #1
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	699b      	ldr	r3, [r3, #24]
 8004f92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	011b      	lsls	r3, r3, #4
 8004fa0:	693a      	ldr	r2, [r7, #16]
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	f023 030a 	bic.w	r3, r3, #10
 8004fac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004fae:	697a      	ldr	r2, [r7, #20]
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	693a      	ldr	r2, [r7, #16]
 8004fba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	697a      	ldr	r2, [r7, #20]
 8004fc0:	621a      	str	r2, [r3, #32]
}
 8004fc2:	bf00      	nop
 8004fc4:	371c      	adds	r7, #28
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fcc:	4770      	bx	lr

08004fce <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004fce:	b480      	push	{r7}
 8004fd0:	b087      	sub	sp, #28
 8004fd2:	af00      	add	r7, sp, #0
 8004fd4:	60f8      	str	r0, [r7, #12]
 8004fd6:	60b9      	str	r1, [r7, #8]
 8004fd8:	607a      	str	r2, [r7, #4]
 8004fda:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	6a1b      	ldr	r3, [r3, #32]
 8004fe0:	f023 0210 	bic.w	r2, r3, #16
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	699b      	ldr	r3, [r3, #24]
 8004fec:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	6a1b      	ldr	r3, [r3, #32]
 8004ff2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ffa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	021b      	lsls	r3, r3, #8
 8005000:	697a      	ldr	r2, [r7, #20]
 8005002:	4313      	orrs	r3, r2
 8005004:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800500c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	031b      	lsls	r3, r3, #12
 8005012:	b29b      	uxth	r3, r3
 8005014:	697a      	ldr	r2, [r7, #20]
 8005016:	4313      	orrs	r3, r2
 8005018:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005020:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	011b      	lsls	r3, r3, #4
 8005026:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800502a:	693a      	ldr	r2, [r7, #16]
 800502c:	4313      	orrs	r3, r2
 800502e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	697a      	ldr	r2, [r7, #20]
 8005034:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	693a      	ldr	r2, [r7, #16]
 800503a:	621a      	str	r2, [r3, #32]
}
 800503c:	bf00      	nop
 800503e:	371c      	adds	r7, #28
 8005040:	46bd      	mov	sp, r7
 8005042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005046:	4770      	bx	lr

08005048 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005048:	b480      	push	{r7}
 800504a:	b087      	sub	sp, #28
 800504c:	af00      	add	r7, sp, #0
 800504e:	60f8      	str	r0, [r7, #12]
 8005050:	60b9      	str	r1, [r7, #8]
 8005052:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	6a1b      	ldr	r3, [r3, #32]
 8005058:	f023 0210 	bic.w	r2, r3, #16
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	699b      	ldr	r3, [r3, #24]
 8005064:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	6a1b      	ldr	r3, [r3, #32]
 800506a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005072:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	031b      	lsls	r3, r3, #12
 8005078:	697a      	ldr	r2, [r7, #20]
 800507a:	4313      	orrs	r3, r2
 800507c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005084:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	011b      	lsls	r3, r3, #4
 800508a:	693a      	ldr	r2, [r7, #16]
 800508c:	4313      	orrs	r3, r2
 800508e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	697a      	ldr	r2, [r7, #20]
 8005094:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	693a      	ldr	r2, [r7, #16]
 800509a:	621a      	str	r2, [r3, #32]
}
 800509c:	bf00      	nop
 800509e:	371c      	adds	r7, #28
 80050a0:	46bd      	mov	sp, r7
 80050a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a6:	4770      	bx	lr

080050a8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b087      	sub	sp, #28
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	60f8      	str	r0, [r7, #12]
 80050b0:	60b9      	str	r1, [r7, #8]
 80050b2:	607a      	str	r2, [r7, #4]
 80050b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	6a1b      	ldr	r3, [r3, #32]
 80050ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	69db      	ldr	r3, [r3, #28]
 80050c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	6a1b      	ldr	r3, [r3, #32]
 80050cc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	f023 0303 	bic.w	r3, r3, #3
 80050d4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80050d6:	697a      	ldr	r2, [r7, #20]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	4313      	orrs	r3, r2
 80050dc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050e4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	011b      	lsls	r3, r3, #4
 80050ea:	b2db      	uxtb	r3, r3
 80050ec:	697a      	ldr	r2, [r7, #20]
 80050ee:	4313      	orrs	r3, r2
 80050f0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80050f8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	021b      	lsls	r3, r3, #8
 80050fe:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005102:	693a      	ldr	r2, [r7, #16]
 8005104:	4313      	orrs	r3, r2
 8005106:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	697a      	ldr	r2, [r7, #20]
 800510c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	693a      	ldr	r2, [r7, #16]
 8005112:	621a      	str	r2, [r3, #32]
}
 8005114:	bf00      	nop
 8005116:	371c      	adds	r7, #28
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr

08005120 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005120:	b480      	push	{r7}
 8005122:	b087      	sub	sp, #28
 8005124:	af00      	add	r7, sp, #0
 8005126:	60f8      	str	r0, [r7, #12]
 8005128:	60b9      	str	r1, [r7, #8]
 800512a:	607a      	str	r2, [r7, #4]
 800512c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	6a1b      	ldr	r3, [r3, #32]
 8005132:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	69db      	ldr	r3, [r3, #28]
 800513e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	6a1b      	ldr	r3, [r3, #32]
 8005144:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800514c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	021b      	lsls	r3, r3, #8
 8005152:	697a      	ldr	r2, [r7, #20]
 8005154:	4313      	orrs	r3, r2
 8005156:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800515e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	031b      	lsls	r3, r3, #12
 8005164:	b29b      	uxth	r3, r3
 8005166:	697a      	ldr	r2, [r7, #20]
 8005168:	4313      	orrs	r3, r2
 800516a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005172:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	031b      	lsls	r3, r3, #12
 8005178:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800517c:	693a      	ldr	r2, [r7, #16]
 800517e:	4313      	orrs	r3, r2
 8005180:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	697a      	ldr	r2, [r7, #20]
 8005186:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	693a      	ldr	r2, [r7, #16]
 800518c:	621a      	str	r2, [r3, #32]
}
 800518e:	bf00      	nop
 8005190:	371c      	adds	r7, #28
 8005192:	46bd      	mov	sp, r7
 8005194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005198:	4770      	bx	lr

0800519a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800519a:	b480      	push	{r7}
 800519c:	b085      	sub	sp, #20
 800519e:	af00      	add	r7, sp, #0
 80051a0:	6078      	str	r0, [r7, #4]
 80051a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80051b2:	683a      	ldr	r2, [r7, #0]
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	4313      	orrs	r3, r2
 80051b8:	f043 0307 	orr.w	r3, r3, #7
 80051bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	68fa      	ldr	r2, [r7, #12]
 80051c2:	609a      	str	r2, [r3, #8]
}
 80051c4:	bf00      	nop
 80051c6:	3714      	adds	r7, #20
 80051c8:	46bd      	mov	sp, r7
 80051ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ce:	4770      	bx	lr

080051d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b087      	sub	sp, #28
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	60f8      	str	r0, [r7, #12]
 80051d8:	60b9      	str	r1, [r7, #8]
 80051da:	607a      	str	r2, [r7, #4]
 80051dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80051ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	021a      	lsls	r2, r3, #8
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	431a      	orrs	r2, r3
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	4313      	orrs	r3, r2
 80051f8:	697a      	ldr	r2, [r7, #20]
 80051fa:	4313      	orrs	r3, r2
 80051fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	697a      	ldr	r2, [r7, #20]
 8005202:	609a      	str	r2, [r3, #8]
}
 8005204:	bf00      	nop
 8005206:	371c      	adds	r7, #28
 8005208:	46bd      	mov	sp, r7
 800520a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520e:	4770      	bx	lr

08005210 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005210:	b480      	push	{r7}
 8005212:	b085      	sub	sp, #20
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
 8005218:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005220:	2b01      	cmp	r3, #1
 8005222:	d101      	bne.n	8005228 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005224:	2302      	movs	r3, #2
 8005226:	e050      	b.n	80052ca <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2201      	movs	r2, #1
 800522c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2202      	movs	r2, #2
 8005234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	689b      	ldr	r3, [r3, #8]
 8005246:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800524e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	68fa      	ldr	r2, [r7, #12]
 8005256:	4313      	orrs	r3, r2
 8005258:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	68fa      	ldr	r2, [r7, #12]
 8005260:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a1c      	ldr	r2, [pc, #112]	; (80052d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d018      	beq.n	800529e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005274:	d013      	beq.n	800529e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a18      	ldr	r2, [pc, #96]	; (80052dc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d00e      	beq.n	800529e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a16      	ldr	r2, [pc, #88]	; (80052e0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d009      	beq.n	800529e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a15      	ldr	r2, [pc, #84]	; (80052e4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d004      	beq.n	800529e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a13      	ldr	r2, [pc, #76]	; (80052e8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d10c      	bne.n	80052b8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	68ba      	ldr	r2, [r7, #8]
 80052ac:	4313      	orrs	r3, r2
 80052ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	68ba      	ldr	r2, [r7, #8]
 80052b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2201      	movs	r2, #1
 80052bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2200      	movs	r2, #0
 80052c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80052c8:	2300      	movs	r3, #0
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	3714      	adds	r7, #20
 80052ce:	46bd      	mov	sp, r7
 80052d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d4:	4770      	bx	lr
 80052d6:	bf00      	nop
 80052d8:	40010000 	.word	0x40010000
 80052dc:	40000400 	.word	0x40000400
 80052e0:	40000800 	.word	0x40000800
 80052e4:	40000c00 	.word	0x40000c00
 80052e8:	40014000 	.word	0x40014000

080052ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b083      	sub	sp, #12
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80052f4:	bf00      	nop
 80052f6:	370c      	adds	r7, #12
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr

08005300 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005300:	b480      	push	{r7}
 8005302:	b083      	sub	sp, #12
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005308:	bf00      	nop
 800530a:	370c      	adds	r7, #12
 800530c:	46bd      	mov	sp, r7
 800530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005312:	4770      	bx	lr

08005314 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b082      	sub	sp, #8
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d101      	bne.n	8005326 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	e03f      	b.n	80053a6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800532c:	b2db      	uxtb	r3, r3
 800532e:	2b00      	cmp	r3, #0
 8005330:	d106      	bne.n	8005340 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2200      	movs	r2, #0
 8005336:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f7fc fc36 	bl	8001bac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2224      	movs	r2, #36	; 0x24
 8005344:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	68da      	ldr	r2, [r3, #12]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005356:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005358:	6878      	ldr	r0, [r7, #4]
 800535a:	f000 fb97 	bl	8005a8c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	691a      	ldr	r2, [r3, #16]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800536c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	695a      	ldr	r2, [r3, #20]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800537c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	68da      	ldr	r2, [r3, #12]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800538c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2200      	movs	r2, #0
 8005392:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2220      	movs	r2, #32
 8005398:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2220      	movs	r2, #32
 80053a0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80053a4:	2300      	movs	r3, #0
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3708      	adds	r7, #8
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}

080053ae <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053ae:	b580      	push	{r7, lr}
 80053b0:	b088      	sub	sp, #32
 80053b2:	af02      	add	r7, sp, #8
 80053b4:	60f8      	str	r0, [r7, #12]
 80053b6:	60b9      	str	r1, [r7, #8]
 80053b8:	603b      	str	r3, [r7, #0]
 80053ba:	4613      	mov	r3, r2
 80053bc:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80053be:	2300      	movs	r3, #0
 80053c0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80053c8:	b2db      	uxtb	r3, r3
 80053ca:	2b20      	cmp	r3, #32
 80053cc:	f040 8083 	bne.w	80054d6 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d002      	beq.n	80053dc <HAL_UART_Transmit+0x2e>
 80053d6:	88fb      	ldrh	r3, [r7, #6]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d101      	bne.n	80053e0 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80053dc:	2301      	movs	r3, #1
 80053de:	e07b      	b.n	80054d8 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80053e6:	2b01      	cmp	r3, #1
 80053e8:	d101      	bne.n	80053ee <HAL_UART_Transmit+0x40>
 80053ea:	2302      	movs	r3, #2
 80053ec:	e074      	b.n	80054d8 <HAL_UART_Transmit+0x12a>
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2201      	movs	r2, #1
 80053f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2200      	movs	r2, #0
 80053fa:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2221      	movs	r2, #33	; 0x21
 8005400:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005404:	f7fc fd5a 	bl	8001ebc <HAL_GetTick>
 8005408:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	88fa      	ldrh	r2, [r7, #6]
 800540e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	88fa      	ldrh	r2, [r7, #6]
 8005414:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	2200      	movs	r2, #0
 800541a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800541e:	e042      	b.n	80054a6 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005424:	b29b      	uxth	r3, r3
 8005426:	3b01      	subs	r3, #1
 8005428:	b29a      	uxth	r2, r3
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	689b      	ldr	r3, [r3, #8]
 8005432:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005436:	d122      	bne.n	800547e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	9300      	str	r3, [sp, #0]
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	2200      	movs	r2, #0
 8005440:	2180      	movs	r1, #128	; 0x80
 8005442:	68f8      	ldr	r0, [r7, #12]
 8005444:	f000 f9b6 	bl	80057b4 <UART_WaitOnFlagUntilTimeout>
 8005448:	4603      	mov	r3, r0
 800544a:	2b00      	cmp	r3, #0
 800544c:	d001      	beq.n	8005452 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800544e:	2303      	movs	r3, #3
 8005450:	e042      	b.n	80054d8 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	881b      	ldrh	r3, [r3, #0]
 800545a:	461a      	mov	r2, r3
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005464:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	691b      	ldr	r3, [r3, #16]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d103      	bne.n	8005476 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	3302      	adds	r3, #2
 8005472:	60bb      	str	r3, [r7, #8]
 8005474:	e017      	b.n	80054a6 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	3301      	adds	r3, #1
 800547a:	60bb      	str	r3, [r7, #8]
 800547c:	e013      	b.n	80054a6 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	9300      	str	r3, [sp, #0]
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	2200      	movs	r2, #0
 8005486:	2180      	movs	r1, #128	; 0x80
 8005488:	68f8      	ldr	r0, [r7, #12]
 800548a:	f000 f993 	bl	80057b4 <UART_WaitOnFlagUntilTimeout>
 800548e:	4603      	mov	r3, r0
 8005490:	2b00      	cmp	r3, #0
 8005492:	d001      	beq.n	8005498 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8005494:	2303      	movs	r3, #3
 8005496:	e01f      	b.n	80054d8 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	1c5a      	adds	r2, r3, #1
 800549c:	60ba      	str	r2, [r7, #8]
 800549e:	781a      	ldrb	r2, [r3, #0]
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80054aa:	b29b      	uxth	r3, r3
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d1b7      	bne.n	8005420 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	9300      	str	r3, [sp, #0]
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	2200      	movs	r2, #0
 80054b8:	2140      	movs	r1, #64	; 0x40
 80054ba:	68f8      	ldr	r0, [r7, #12]
 80054bc:	f000 f97a 	bl	80057b4 <UART_WaitOnFlagUntilTimeout>
 80054c0:	4603      	mov	r3, r0
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d001      	beq.n	80054ca <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80054c6:	2303      	movs	r3, #3
 80054c8:	e006      	b.n	80054d8 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2220      	movs	r2, #32
 80054ce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80054d2:	2300      	movs	r3, #0
 80054d4:	e000      	b.n	80054d8 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80054d6:	2302      	movs	r3, #2
  }
}
 80054d8:	4618      	mov	r0, r3
 80054da:	3718      	adds	r7, #24
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd80      	pop	{r7, pc}

080054e0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b085      	sub	sp, #20
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	60f8      	str	r0, [r7, #12]
 80054e8:	60b9      	str	r1, [r7, #8]
 80054ea:	4613      	mov	r3, r2
 80054ec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80054f4:	b2db      	uxtb	r3, r3
 80054f6:	2b20      	cmp	r3, #32
 80054f8:	d140      	bne.n	800557c <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d002      	beq.n	8005506 <HAL_UART_Receive_IT+0x26>
 8005500:	88fb      	ldrh	r3, [r7, #6]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d101      	bne.n	800550a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005506:	2301      	movs	r3, #1
 8005508:	e039      	b.n	800557e <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005510:	2b01      	cmp	r3, #1
 8005512:	d101      	bne.n	8005518 <HAL_UART_Receive_IT+0x38>
 8005514:	2302      	movs	r3, #2
 8005516:	e032      	b.n	800557e <HAL_UART_Receive_IT+0x9e>
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2201      	movs	r2, #1
 800551c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	68ba      	ldr	r2, [r7, #8]
 8005524:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	88fa      	ldrh	r2, [r7, #6]
 800552a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	88fa      	ldrh	r2, [r7, #6]
 8005530:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2200      	movs	r2, #0
 8005536:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2222      	movs	r2, #34	; 0x22
 800553c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2200      	movs	r2, #0
 8005544:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	68da      	ldr	r2, [r3, #12]
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005556:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	695a      	ldr	r2, [r3, #20]
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f042 0201 	orr.w	r2, r2, #1
 8005566:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	68da      	ldr	r2, [r3, #12]
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f042 0220 	orr.w	r2, r2, #32
 8005576:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005578:	2300      	movs	r3, #0
 800557a:	e000      	b.n	800557e <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800557c:	2302      	movs	r3, #2
  }
}
 800557e:	4618      	mov	r0, r3
 8005580:	3714      	adds	r7, #20
 8005582:	46bd      	mov	sp, r7
 8005584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005588:	4770      	bx	lr
	...

0800558c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b088      	sub	sp, #32
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	68db      	ldr	r3, [r3, #12]
 80055a2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	695b      	ldr	r3, [r3, #20]
 80055aa:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80055ac:	2300      	movs	r3, #0
 80055ae:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80055b0:	2300      	movs	r3, #0
 80055b2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80055b4:	69fb      	ldr	r3, [r7, #28]
 80055b6:	f003 030f 	and.w	r3, r3, #15
 80055ba:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80055bc:	693b      	ldr	r3, [r7, #16]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d10d      	bne.n	80055de <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80055c2:	69fb      	ldr	r3, [r7, #28]
 80055c4:	f003 0320 	and.w	r3, r3, #32
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d008      	beq.n	80055de <HAL_UART_IRQHandler+0x52>
 80055cc:	69bb      	ldr	r3, [r7, #24]
 80055ce:	f003 0320 	and.w	r3, r3, #32
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d003      	beq.n	80055de <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f000 f9d6 	bl	8005988 <UART_Receive_IT>
      return;
 80055dc:	e0d1      	b.n	8005782 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	f000 80b0 	beq.w	8005746 <HAL_UART_IRQHandler+0x1ba>
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	f003 0301 	and.w	r3, r3, #1
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d105      	bne.n	80055fc <HAL_UART_IRQHandler+0x70>
 80055f0:	69bb      	ldr	r3, [r7, #24]
 80055f2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	f000 80a5 	beq.w	8005746 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80055fc:	69fb      	ldr	r3, [r7, #28]
 80055fe:	f003 0301 	and.w	r3, r3, #1
 8005602:	2b00      	cmp	r3, #0
 8005604:	d00a      	beq.n	800561c <HAL_UART_IRQHandler+0x90>
 8005606:	69bb      	ldr	r3, [r7, #24]
 8005608:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800560c:	2b00      	cmp	r3, #0
 800560e:	d005      	beq.n	800561c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005614:	f043 0201 	orr.w	r2, r3, #1
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800561c:	69fb      	ldr	r3, [r7, #28]
 800561e:	f003 0304 	and.w	r3, r3, #4
 8005622:	2b00      	cmp	r3, #0
 8005624:	d00a      	beq.n	800563c <HAL_UART_IRQHandler+0xb0>
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	f003 0301 	and.w	r3, r3, #1
 800562c:	2b00      	cmp	r3, #0
 800562e:	d005      	beq.n	800563c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005634:	f043 0202 	orr.w	r2, r3, #2
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800563c:	69fb      	ldr	r3, [r7, #28]
 800563e:	f003 0302 	and.w	r3, r3, #2
 8005642:	2b00      	cmp	r3, #0
 8005644:	d00a      	beq.n	800565c <HAL_UART_IRQHandler+0xd0>
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	f003 0301 	and.w	r3, r3, #1
 800564c:	2b00      	cmp	r3, #0
 800564e:	d005      	beq.n	800565c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005654:	f043 0204 	orr.w	r2, r3, #4
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800565c:	69fb      	ldr	r3, [r7, #28]
 800565e:	f003 0308 	and.w	r3, r3, #8
 8005662:	2b00      	cmp	r3, #0
 8005664:	d00f      	beq.n	8005686 <HAL_UART_IRQHandler+0xfa>
 8005666:	69bb      	ldr	r3, [r7, #24]
 8005668:	f003 0320 	and.w	r3, r3, #32
 800566c:	2b00      	cmp	r3, #0
 800566e:	d104      	bne.n	800567a <HAL_UART_IRQHandler+0xee>
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	f003 0301 	and.w	r3, r3, #1
 8005676:	2b00      	cmp	r3, #0
 8005678:	d005      	beq.n	8005686 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800567e:	f043 0208 	orr.w	r2, r3, #8
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800568a:	2b00      	cmp	r3, #0
 800568c:	d078      	beq.n	8005780 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800568e:	69fb      	ldr	r3, [r7, #28]
 8005690:	f003 0320 	and.w	r3, r3, #32
 8005694:	2b00      	cmp	r3, #0
 8005696:	d007      	beq.n	80056a8 <HAL_UART_IRQHandler+0x11c>
 8005698:	69bb      	ldr	r3, [r7, #24]
 800569a:	f003 0320 	and.w	r3, r3, #32
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d002      	beq.n	80056a8 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f000 f970 	bl	8005988 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	695b      	ldr	r3, [r3, #20]
 80056ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056b2:	2b40      	cmp	r3, #64	; 0x40
 80056b4:	bf0c      	ite	eq
 80056b6:	2301      	moveq	r3, #1
 80056b8:	2300      	movne	r3, #0
 80056ba:	b2db      	uxtb	r3, r3
 80056bc:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056c2:	f003 0308 	and.w	r3, r3, #8
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d102      	bne.n	80056d0 <HAL_UART_IRQHandler+0x144>
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d031      	beq.n	8005734 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80056d0:	6878      	ldr	r0, [r7, #4]
 80056d2:	f000 f8b9 	bl	8005848 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	695b      	ldr	r3, [r3, #20]
 80056dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056e0:	2b40      	cmp	r3, #64	; 0x40
 80056e2:	d123      	bne.n	800572c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	695a      	ldr	r2, [r3, #20]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056f2:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d013      	beq.n	8005724 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005700:	4a21      	ldr	r2, [pc, #132]	; (8005788 <HAL_UART_IRQHandler+0x1fc>)
 8005702:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005708:	4618      	mov	r0, r3
 800570a:	f7fd fb35 	bl	8002d78 <HAL_DMA_Abort_IT>
 800570e:	4603      	mov	r3, r0
 8005710:	2b00      	cmp	r3, #0
 8005712:	d016      	beq.n	8005742 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005718:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800571a:	687a      	ldr	r2, [r7, #4]
 800571c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800571e:	4610      	mov	r0, r2
 8005720:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005722:	e00e      	b.n	8005742 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	f000 f83b 	bl	80057a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800572a:	e00a      	b.n	8005742 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800572c:	6878      	ldr	r0, [r7, #4]
 800572e:	f000 f837 	bl	80057a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005732:	e006      	b.n	8005742 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	f000 f833 	bl	80057a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2200      	movs	r2, #0
 800573e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8005740:	e01e      	b.n	8005780 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005742:	bf00      	nop
    return;
 8005744:	e01c      	b.n	8005780 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005746:	69fb      	ldr	r3, [r7, #28]
 8005748:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800574c:	2b00      	cmp	r3, #0
 800574e:	d008      	beq.n	8005762 <HAL_UART_IRQHandler+0x1d6>
 8005750:	69bb      	ldr	r3, [r7, #24]
 8005752:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005756:	2b00      	cmp	r3, #0
 8005758:	d003      	beq.n	8005762 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f000 f8a6 	bl	80058ac <UART_Transmit_IT>
    return;
 8005760:	e00f      	b.n	8005782 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005762:	69fb      	ldr	r3, [r7, #28]
 8005764:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005768:	2b00      	cmp	r3, #0
 800576a:	d00a      	beq.n	8005782 <HAL_UART_IRQHandler+0x1f6>
 800576c:	69bb      	ldr	r3, [r7, #24]
 800576e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005772:	2b00      	cmp	r3, #0
 8005774:	d005      	beq.n	8005782 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f000 f8ee 	bl	8005958 <UART_EndTransmit_IT>
    return;
 800577c:	bf00      	nop
 800577e:	e000      	b.n	8005782 <HAL_UART_IRQHandler+0x1f6>
    return;
 8005780:	bf00      	nop
  }
}
 8005782:	3720      	adds	r7, #32
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}
 8005788:	08005885 	.word	0x08005885

0800578c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800578c:	b480      	push	{r7}
 800578e:	b083      	sub	sp, #12
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005794:	bf00      	nop
 8005796:	370c      	adds	r7, #12
 8005798:	46bd      	mov	sp, r7
 800579a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579e:	4770      	bx	lr

080057a0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b083      	sub	sp, #12
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80057a8:	bf00      	nop
 80057aa:	370c      	adds	r7, #12
 80057ac:	46bd      	mov	sp, r7
 80057ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b2:	4770      	bx	lr

080057b4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b084      	sub	sp, #16
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	60f8      	str	r0, [r7, #12]
 80057bc:	60b9      	str	r1, [r7, #8]
 80057be:	603b      	str	r3, [r7, #0]
 80057c0:	4613      	mov	r3, r2
 80057c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057c4:	e02c      	b.n	8005820 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057c6:	69bb      	ldr	r3, [r7, #24]
 80057c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057cc:	d028      	beq.n	8005820 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80057ce:	69bb      	ldr	r3, [r7, #24]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d007      	beq.n	80057e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80057d4:	f7fc fb72 	bl	8001ebc <HAL_GetTick>
 80057d8:	4602      	mov	r2, r0
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	1ad3      	subs	r3, r2, r3
 80057de:	69ba      	ldr	r2, [r7, #24]
 80057e0:	429a      	cmp	r2, r3
 80057e2:	d21d      	bcs.n	8005820 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	68da      	ldr	r2, [r3, #12]
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80057f2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	695a      	ldr	r2, [r3, #20]
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f022 0201 	bic.w	r2, r2, #1
 8005802:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2220      	movs	r2, #32
 8005808:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2220      	movs	r2, #32
 8005810:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2200      	movs	r2, #0
 8005818:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800581c:	2303      	movs	r3, #3
 800581e:	e00f      	b.n	8005840 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	681a      	ldr	r2, [r3, #0]
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	4013      	ands	r3, r2
 800582a:	68ba      	ldr	r2, [r7, #8]
 800582c:	429a      	cmp	r2, r3
 800582e:	bf0c      	ite	eq
 8005830:	2301      	moveq	r3, #1
 8005832:	2300      	movne	r3, #0
 8005834:	b2db      	uxtb	r3, r3
 8005836:	461a      	mov	r2, r3
 8005838:	79fb      	ldrb	r3, [r7, #7]
 800583a:	429a      	cmp	r2, r3
 800583c:	d0c3      	beq.n	80057c6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800583e:	2300      	movs	r3, #0
}
 8005840:	4618      	mov	r0, r3
 8005842:	3710      	adds	r7, #16
 8005844:	46bd      	mov	sp, r7
 8005846:	bd80      	pop	{r7, pc}

08005848 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005848:	b480      	push	{r7}
 800584a:	b083      	sub	sp, #12
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	68da      	ldr	r2, [r3, #12]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800585e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	695a      	ldr	r2, [r3, #20]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f022 0201 	bic.w	r2, r2, #1
 800586e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2220      	movs	r2, #32
 8005874:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8005878:	bf00      	nop
 800587a:	370c      	adds	r7, #12
 800587c:	46bd      	mov	sp, r7
 800587e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005882:	4770      	bx	lr

08005884 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b084      	sub	sp, #16
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005890:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2200      	movs	r2, #0
 8005896:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	2200      	movs	r2, #0
 800589c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800589e:	68f8      	ldr	r0, [r7, #12]
 80058a0:	f7ff ff7e 	bl	80057a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80058a4:	bf00      	nop
 80058a6:	3710      	adds	r7, #16
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd80      	pop	{r7, pc}

080058ac <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b085      	sub	sp, #20
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80058ba:	b2db      	uxtb	r3, r3
 80058bc:	2b21      	cmp	r3, #33	; 0x21
 80058be:	d144      	bne.n	800594a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	689b      	ldr	r3, [r3, #8]
 80058c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058c8:	d11a      	bne.n	8005900 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6a1b      	ldr	r3, [r3, #32]
 80058ce:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	881b      	ldrh	r3, [r3, #0]
 80058d4:	461a      	mov	r2, r3
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80058de:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	691b      	ldr	r3, [r3, #16]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d105      	bne.n	80058f4 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6a1b      	ldr	r3, [r3, #32]
 80058ec:	1c9a      	adds	r2, r3, #2
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	621a      	str	r2, [r3, #32]
 80058f2:	e00e      	b.n	8005912 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6a1b      	ldr	r3, [r3, #32]
 80058f8:	1c5a      	adds	r2, r3, #1
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	621a      	str	r2, [r3, #32]
 80058fe:	e008      	b.n	8005912 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6a1b      	ldr	r3, [r3, #32]
 8005904:	1c59      	adds	r1, r3, #1
 8005906:	687a      	ldr	r2, [r7, #4]
 8005908:	6211      	str	r1, [r2, #32]
 800590a:	781a      	ldrb	r2, [r3, #0]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005916:	b29b      	uxth	r3, r3
 8005918:	3b01      	subs	r3, #1
 800591a:	b29b      	uxth	r3, r3
 800591c:	687a      	ldr	r2, [r7, #4]
 800591e:	4619      	mov	r1, r3
 8005920:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005922:	2b00      	cmp	r3, #0
 8005924:	d10f      	bne.n	8005946 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	68da      	ldr	r2, [r3, #12]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005934:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	68da      	ldr	r2, [r3, #12]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005944:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005946:	2300      	movs	r3, #0
 8005948:	e000      	b.n	800594c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800594a:	2302      	movs	r3, #2
  }
}
 800594c:	4618      	mov	r0, r3
 800594e:	3714      	adds	r7, #20
 8005950:	46bd      	mov	sp, r7
 8005952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005956:	4770      	bx	lr

08005958 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b082      	sub	sp, #8
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	68da      	ldr	r2, [r3, #12]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800596e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2220      	movs	r2, #32
 8005974:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	f7ff ff07 	bl	800578c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800597e:	2300      	movs	r3, #0
}
 8005980:	4618      	mov	r0, r3
 8005982:	3708      	adds	r7, #8
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}

08005988 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b084      	sub	sp, #16
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005996:	b2db      	uxtb	r3, r3
 8005998:	2b22      	cmp	r3, #34	; 0x22
 800599a:	d171      	bne.n	8005a80 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	689b      	ldr	r3, [r3, #8]
 80059a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059a4:	d123      	bne.n	80059ee <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059aa:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	691b      	ldr	r3, [r3, #16]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d10e      	bne.n	80059d2 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	b29b      	uxth	r3, r3
 80059bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059c0:	b29a      	uxth	r2, r3
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059ca:	1c9a      	adds	r2, r3, #2
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	629a      	str	r2, [r3, #40]	; 0x28
 80059d0:	e029      	b.n	8005a26 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	b29b      	uxth	r3, r3
 80059da:	b2db      	uxtb	r3, r3
 80059dc:	b29a      	uxth	r2, r3
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059e6:	1c5a      	adds	r2, r3, #1
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	629a      	str	r2, [r3, #40]	; 0x28
 80059ec:	e01b      	b.n	8005a26 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	691b      	ldr	r3, [r3, #16]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d10a      	bne.n	8005a0c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	6858      	ldr	r0, [r3, #4]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a00:	1c59      	adds	r1, r3, #1
 8005a02:	687a      	ldr	r2, [r7, #4]
 8005a04:	6291      	str	r1, [r2, #40]	; 0x28
 8005a06:	b2c2      	uxtb	r2, r0
 8005a08:	701a      	strb	r2, [r3, #0]
 8005a0a:	e00c      	b.n	8005a26 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	b2da      	uxtb	r2, r3
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a18:	1c58      	adds	r0, r3, #1
 8005a1a:	6879      	ldr	r1, [r7, #4]
 8005a1c:	6288      	str	r0, [r1, #40]	; 0x28
 8005a1e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005a22:	b2d2      	uxtb	r2, r2
 8005a24:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a2a:	b29b      	uxth	r3, r3
 8005a2c:	3b01      	subs	r3, #1
 8005a2e:	b29b      	uxth	r3, r3
 8005a30:	687a      	ldr	r2, [r7, #4]
 8005a32:	4619      	mov	r1, r3
 8005a34:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d120      	bne.n	8005a7c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	68da      	ldr	r2, [r3, #12]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f022 0220 	bic.w	r2, r2, #32
 8005a48:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	68da      	ldr	r2, [r3, #12]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005a58:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	695a      	ldr	r2, [r3, #20]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f022 0201 	bic.w	r2, r2, #1
 8005a68:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2220      	movs	r2, #32
 8005a6e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f7fb feea 	bl	800184c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8005a78:	2300      	movs	r3, #0
 8005a7a:	e002      	b.n	8005a82 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	e000      	b.n	8005a82 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8005a80:	2302      	movs	r3, #2
  }
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	3710      	adds	r7, #16
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}
	...

08005a8c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a90:	b085      	sub	sp, #20
 8005a92:	af00      	add	r7, sp, #0
 8005a94:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	691b      	ldr	r3, [r3, #16]
 8005a9c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	68da      	ldr	r2, [r3, #12]
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	430a      	orrs	r2, r1
 8005aaa:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	689a      	ldr	r2, [r3, #8]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	691b      	ldr	r3, [r3, #16]
 8005ab4:	431a      	orrs	r2, r3
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	695b      	ldr	r3, [r3, #20]
 8005aba:	431a      	orrs	r2, r3
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	69db      	ldr	r3, [r3, #28]
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	68db      	ldr	r3, [r3, #12]
 8005aca:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005ace:	f023 030c 	bic.w	r3, r3, #12
 8005ad2:	687a      	ldr	r2, [r7, #4]
 8005ad4:	6812      	ldr	r2, [r2, #0]
 8005ad6:	68f9      	ldr	r1, [r7, #12]
 8005ad8:	430b      	orrs	r3, r1
 8005ada:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	695b      	ldr	r3, [r3, #20]
 8005ae2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	699a      	ldr	r2, [r3, #24]
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	430a      	orrs	r2, r1
 8005af0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	69db      	ldr	r3, [r3, #28]
 8005af6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005afa:	f040 818b 	bne.w	8005e14 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4ac1      	ldr	r2, [pc, #772]	; (8005e08 <UART_SetConfig+0x37c>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d005      	beq.n	8005b14 <UART_SetConfig+0x88>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4abf      	ldr	r2, [pc, #764]	; (8005e0c <UART_SetConfig+0x380>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	f040 80bd 	bne.w	8005c8e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005b14:	f7fe f9bc 	bl	8003e90 <HAL_RCC_GetPCLK2Freq>
 8005b18:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	461d      	mov	r5, r3
 8005b1e:	f04f 0600 	mov.w	r6, #0
 8005b22:	46a8      	mov	r8, r5
 8005b24:	46b1      	mov	r9, r6
 8005b26:	eb18 0308 	adds.w	r3, r8, r8
 8005b2a:	eb49 0409 	adc.w	r4, r9, r9
 8005b2e:	4698      	mov	r8, r3
 8005b30:	46a1      	mov	r9, r4
 8005b32:	eb18 0805 	adds.w	r8, r8, r5
 8005b36:	eb49 0906 	adc.w	r9, r9, r6
 8005b3a:	f04f 0100 	mov.w	r1, #0
 8005b3e:	f04f 0200 	mov.w	r2, #0
 8005b42:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005b46:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005b4a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005b4e:	4688      	mov	r8, r1
 8005b50:	4691      	mov	r9, r2
 8005b52:	eb18 0005 	adds.w	r0, r8, r5
 8005b56:	eb49 0106 	adc.w	r1, r9, r6
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	461d      	mov	r5, r3
 8005b60:	f04f 0600 	mov.w	r6, #0
 8005b64:	196b      	adds	r3, r5, r5
 8005b66:	eb46 0406 	adc.w	r4, r6, r6
 8005b6a:	461a      	mov	r2, r3
 8005b6c:	4623      	mov	r3, r4
 8005b6e:	f7fa fd9b 	bl	80006a8 <__aeabi_uldivmod>
 8005b72:	4603      	mov	r3, r0
 8005b74:	460c      	mov	r4, r1
 8005b76:	461a      	mov	r2, r3
 8005b78:	4ba5      	ldr	r3, [pc, #660]	; (8005e10 <UART_SetConfig+0x384>)
 8005b7a:	fba3 2302 	umull	r2, r3, r3, r2
 8005b7e:	095b      	lsrs	r3, r3, #5
 8005b80:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	461d      	mov	r5, r3
 8005b88:	f04f 0600 	mov.w	r6, #0
 8005b8c:	46a9      	mov	r9, r5
 8005b8e:	46b2      	mov	sl, r6
 8005b90:	eb19 0309 	adds.w	r3, r9, r9
 8005b94:	eb4a 040a 	adc.w	r4, sl, sl
 8005b98:	4699      	mov	r9, r3
 8005b9a:	46a2      	mov	sl, r4
 8005b9c:	eb19 0905 	adds.w	r9, r9, r5
 8005ba0:	eb4a 0a06 	adc.w	sl, sl, r6
 8005ba4:	f04f 0100 	mov.w	r1, #0
 8005ba8:	f04f 0200 	mov.w	r2, #0
 8005bac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005bb0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005bb4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005bb8:	4689      	mov	r9, r1
 8005bba:	4692      	mov	sl, r2
 8005bbc:	eb19 0005 	adds.w	r0, r9, r5
 8005bc0:	eb4a 0106 	adc.w	r1, sl, r6
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	461d      	mov	r5, r3
 8005bca:	f04f 0600 	mov.w	r6, #0
 8005bce:	196b      	adds	r3, r5, r5
 8005bd0:	eb46 0406 	adc.w	r4, r6, r6
 8005bd4:	461a      	mov	r2, r3
 8005bd6:	4623      	mov	r3, r4
 8005bd8:	f7fa fd66 	bl	80006a8 <__aeabi_uldivmod>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	460c      	mov	r4, r1
 8005be0:	461a      	mov	r2, r3
 8005be2:	4b8b      	ldr	r3, [pc, #556]	; (8005e10 <UART_SetConfig+0x384>)
 8005be4:	fba3 1302 	umull	r1, r3, r3, r2
 8005be8:	095b      	lsrs	r3, r3, #5
 8005bea:	2164      	movs	r1, #100	; 0x64
 8005bec:	fb01 f303 	mul.w	r3, r1, r3
 8005bf0:	1ad3      	subs	r3, r2, r3
 8005bf2:	00db      	lsls	r3, r3, #3
 8005bf4:	3332      	adds	r3, #50	; 0x32
 8005bf6:	4a86      	ldr	r2, [pc, #536]	; (8005e10 <UART_SetConfig+0x384>)
 8005bf8:	fba2 2303 	umull	r2, r3, r2, r3
 8005bfc:	095b      	lsrs	r3, r3, #5
 8005bfe:	005b      	lsls	r3, r3, #1
 8005c00:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005c04:	4498      	add	r8, r3
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	461d      	mov	r5, r3
 8005c0a:	f04f 0600 	mov.w	r6, #0
 8005c0e:	46a9      	mov	r9, r5
 8005c10:	46b2      	mov	sl, r6
 8005c12:	eb19 0309 	adds.w	r3, r9, r9
 8005c16:	eb4a 040a 	adc.w	r4, sl, sl
 8005c1a:	4699      	mov	r9, r3
 8005c1c:	46a2      	mov	sl, r4
 8005c1e:	eb19 0905 	adds.w	r9, r9, r5
 8005c22:	eb4a 0a06 	adc.w	sl, sl, r6
 8005c26:	f04f 0100 	mov.w	r1, #0
 8005c2a:	f04f 0200 	mov.w	r2, #0
 8005c2e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005c32:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005c36:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005c3a:	4689      	mov	r9, r1
 8005c3c:	4692      	mov	sl, r2
 8005c3e:	eb19 0005 	adds.w	r0, r9, r5
 8005c42:	eb4a 0106 	adc.w	r1, sl, r6
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	461d      	mov	r5, r3
 8005c4c:	f04f 0600 	mov.w	r6, #0
 8005c50:	196b      	adds	r3, r5, r5
 8005c52:	eb46 0406 	adc.w	r4, r6, r6
 8005c56:	461a      	mov	r2, r3
 8005c58:	4623      	mov	r3, r4
 8005c5a:	f7fa fd25 	bl	80006a8 <__aeabi_uldivmod>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	460c      	mov	r4, r1
 8005c62:	461a      	mov	r2, r3
 8005c64:	4b6a      	ldr	r3, [pc, #424]	; (8005e10 <UART_SetConfig+0x384>)
 8005c66:	fba3 1302 	umull	r1, r3, r3, r2
 8005c6a:	095b      	lsrs	r3, r3, #5
 8005c6c:	2164      	movs	r1, #100	; 0x64
 8005c6e:	fb01 f303 	mul.w	r3, r1, r3
 8005c72:	1ad3      	subs	r3, r2, r3
 8005c74:	00db      	lsls	r3, r3, #3
 8005c76:	3332      	adds	r3, #50	; 0x32
 8005c78:	4a65      	ldr	r2, [pc, #404]	; (8005e10 <UART_SetConfig+0x384>)
 8005c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c7e:	095b      	lsrs	r3, r3, #5
 8005c80:	f003 0207 	and.w	r2, r3, #7
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4442      	add	r2, r8
 8005c8a:	609a      	str	r2, [r3, #8]
 8005c8c:	e26f      	b.n	800616e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005c8e:	f7fe f8eb 	bl	8003e68 <HAL_RCC_GetPCLK1Freq>
 8005c92:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	461d      	mov	r5, r3
 8005c98:	f04f 0600 	mov.w	r6, #0
 8005c9c:	46a8      	mov	r8, r5
 8005c9e:	46b1      	mov	r9, r6
 8005ca0:	eb18 0308 	adds.w	r3, r8, r8
 8005ca4:	eb49 0409 	adc.w	r4, r9, r9
 8005ca8:	4698      	mov	r8, r3
 8005caa:	46a1      	mov	r9, r4
 8005cac:	eb18 0805 	adds.w	r8, r8, r5
 8005cb0:	eb49 0906 	adc.w	r9, r9, r6
 8005cb4:	f04f 0100 	mov.w	r1, #0
 8005cb8:	f04f 0200 	mov.w	r2, #0
 8005cbc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005cc0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005cc4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005cc8:	4688      	mov	r8, r1
 8005cca:	4691      	mov	r9, r2
 8005ccc:	eb18 0005 	adds.w	r0, r8, r5
 8005cd0:	eb49 0106 	adc.w	r1, r9, r6
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	461d      	mov	r5, r3
 8005cda:	f04f 0600 	mov.w	r6, #0
 8005cde:	196b      	adds	r3, r5, r5
 8005ce0:	eb46 0406 	adc.w	r4, r6, r6
 8005ce4:	461a      	mov	r2, r3
 8005ce6:	4623      	mov	r3, r4
 8005ce8:	f7fa fcde 	bl	80006a8 <__aeabi_uldivmod>
 8005cec:	4603      	mov	r3, r0
 8005cee:	460c      	mov	r4, r1
 8005cf0:	461a      	mov	r2, r3
 8005cf2:	4b47      	ldr	r3, [pc, #284]	; (8005e10 <UART_SetConfig+0x384>)
 8005cf4:	fba3 2302 	umull	r2, r3, r3, r2
 8005cf8:	095b      	lsrs	r3, r3, #5
 8005cfa:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	461d      	mov	r5, r3
 8005d02:	f04f 0600 	mov.w	r6, #0
 8005d06:	46a9      	mov	r9, r5
 8005d08:	46b2      	mov	sl, r6
 8005d0a:	eb19 0309 	adds.w	r3, r9, r9
 8005d0e:	eb4a 040a 	adc.w	r4, sl, sl
 8005d12:	4699      	mov	r9, r3
 8005d14:	46a2      	mov	sl, r4
 8005d16:	eb19 0905 	adds.w	r9, r9, r5
 8005d1a:	eb4a 0a06 	adc.w	sl, sl, r6
 8005d1e:	f04f 0100 	mov.w	r1, #0
 8005d22:	f04f 0200 	mov.w	r2, #0
 8005d26:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005d2a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005d2e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005d32:	4689      	mov	r9, r1
 8005d34:	4692      	mov	sl, r2
 8005d36:	eb19 0005 	adds.w	r0, r9, r5
 8005d3a:	eb4a 0106 	adc.w	r1, sl, r6
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	461d      	mov	r5, r3
 8005d44:	f04f 0600 	mov.w	r6, #0
 8005d48:	196b      	adds	r3, r5, r5
 8005d4a:	eb46 0406 	adc.w	r4, r6, r6
 8005d4e:	461a      	mov	r2, r3
 8005d50:	4623      	mov	r3, r4
 8005d52:	f7fa fca9 	bl	80006a8 <__aeabi_uldivmod>
 8005d56:	4603      	mov	r3, r0
 8005d58:	460c      	mov	r4, r1
 8005d5a:	461a      	mov	r2, r3
 8005d5c:	4b2c      	ldr	r3, [pc, #176]	; (8005e10 <UART_SetConfig+0x384>)
 8005d5e:	fba3 1302 	umull	r1, r3, r3, r2
 8005d62:	095b      	lsrs	r3, r3, #5
 8005d64:	2164      	movs	r1, #100	; 0x64
 8005d66:	fb01 f303 	mul.w	r3, r1, r3
 8005d6a:	1ad3      	subs	r3, r2, r3
 8005d6c:	00db      	lsls	r3, r3, #3
 8005d6e:	3332      	adds	r3, #50	; 0x32
 8005d70:	4a27      	ldr	r2, [pc, #156]	; (8005e10 <UART_SetConfig+0x384>)
 8005d72:	fba2 2303 	umull	r2, r3, r2, r3
 8005d76:	095b      	lsrs	r3, r3, #5
 8005d78:	005b      	lsls	r3, r3, #1
 8005d7a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005d7e:	4498      	add	r8, r3
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	461d      	mov	r5, r3
 8005d84:	f04f 0600 	mov.w	r6, #0
 8005d88:	46a9      	mov	r9, r5
 8005d8a:	46b2      	mov	sl, r6
 8005d8c:	eb19 0309 	adds.w	r3, r9, r9
 8005d90:	eb4a 040a 	adc.w	r4, sl, sl
 8005d94:	4699      	mov	r9, r3
 8005d96:	46a2      	mov	sl, r4
 8005d98:	eb19 0905 	adds.w	r9, r9, r5
 8005d9c:	eb4a 0a06 	adc.w	sl, sl, r6
 8005da0:	f04f 0100 	mov.w	r1, #0
 8005da4:	f04f 0200 	mov.w	r2, #0
 8005da8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005dac:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005db0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005db4:	4689      	mov	r9, r1
 8005db6:	4692      	mov	sl, r2
 8005db8:	eb19 0005 	adds.w	r0, r9, r5
 8005dbc:	eb4a 0106 	adc.w	r1, sl, r6
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	461d      	mov	r5, r3
 8005dc6:	f04f 0600 	mov.w	r6, #0
 8005dca:	196b      	adds	r3, r5, r5
 8005dcc:	eb46 0406 	adc.w	r4, r6, r6
 8005dd0:	461a      	mov	r2, r3
 8005dd2:	4623      	mov	r3, r4
 8005dd4:	f7fa fc68 	bl	80006a8 <__aeabi_uldivmod>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	460c      	mov	r4, r1
 8005ddc:	461a      	mov	r2, r3
 8005dde:	4b0c      	ldr	r3, [pc, #48]	; (8005e10 <UART_SetConfig+0x384>)
 8005de0:	fba3 1302 	umull	r1, r3, r3, r2
 8005de4:	095b      	lsrs	r3, r3, #5
 8005de6:	2164      	movs	r1, #100	; 0x64
 8005de8:	fb01 f303 	mul.w	r3, r1, r3
 8005dec:	1ad3      	subs	r3, r2, r3
 8005dee:	00db      	lsls	r3, r3, #3
 8005df0:	3332      	adds	r3, #50	; 0x32
 8005df2:	4a07      	ldr	r2, [pc, #28]	; (8005e10 <UART_SetConfig+0x384>)
 8005df4:	fba2 2303 	umull	r2, r3, r2, r3
 8005df8:	095b      	lsrs	r3, r3, #5
 8005dfa:	f003 0207 	and.w	r2, r3, #7
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4442      	add	r2, r8
 8005e04:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8005e06:	e1b2      	b.n	800616e <UART_SetConfig+0x6e2>
 8005e08:	40011000 	.word	0x40011000
 8005e0c:	40011400 	.word	0x40011400
 8005e10:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4ad7      	ldr	r2, [pc, #860]	; (8006178 <UART_SetConfig+0x6ec>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d005      	beq.n	8005e2a <UART_SetConfig+0x39e>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4ad6      	ldr	r2, [pc, #856]	; (800617c <UART_SetConfig+0x6f0>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	f040 80d1 	bne.w	8005fcc <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005e2a:	f7fe f831 	bl	8003e90 <HAL_RCC_GetPCLK2Freq>
 8005e2e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	469a      	mov	sl, r3
 8005e34:	f04f 0b00 	mov.w	fp, #0
 8005e38:	46d0      	mov	r8, sl
 8005e3a:	46d9      	mov	r9, fp
 8005e3c:	eb18 0308 	adds.w	r3, r8, r8
 8005e40:	eb49 0409 	adc.w	r4, r9, r9
 8005e44:	4698      	mov	r8, r3
 8005e46:	46a1      	mov	r9, r4
 8005e48:	eb18 080a 	adds.w	r8, r8, sl
 8005e4c:	eb49 090b 	adc.w	r9, r9, fp
 8005e50:	f04f 0100 	mov.w	r1, #0
 8005e54:	f04f 0200 	mov.w	r2, #0
 8005e58:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005e5c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005e60:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005e64:	4688      	mov	r8, r1
 8005e66:	4691      	mov	r9, r2
 8005e68:	eb1a 0508 	adds.w	r5, sl, r8
 8005e6c:	eb4b 0609 	adc.w	r6, fp, r9
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	4619      	mov	r1, r3
 8005e76:	f04f 0200 	mov.w	r2, #0
 8005e7a:	f04f 0300 	mov.w	r3, #0
 8005e7e:	f04f 0400 	mov.w	r4, #0
 8005e82:	0094      	lsls	r4, r2, #2
 8005e84:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005e88:	008b      	lsls	r3, r1, #2
 8005e8a:	461a      	mov	r2, r3
 8005e8c:	4623      	mov	r3, r4
 8005e8e:	4628      	mov	r0, r5
 8005e90:	4631      	mov	r1, r6
 8005e92:	f7fa fc09 	bl	80006a8 <__aeabi_uldivmod>
 8005e96:	4603      	mov	r3, r0
 8005e98:	460c      	mov	r4, r1
 8005e9a:	461a      	mov	r2, r3
 8005e9c:	4bb8      	ldr	r3, [pc, #736]	; (8006180 <UART_SetConfig+0x6f4>)
 8005e9e:	fba3 2302 	umull	r2, r3, r3, r2
 8005ea2:	095b      	lsrs	r3, r3, #5
 8005ea4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	469b      	mov	fp, r3
 8005eac:	f04f 0c00 	mov.w	ip, #0
 8005eb0:	46d9      	mov	r9, fp
 8005eb2:	46e2      	mov	sl, ip
 8005eb4:	eb19 0309 	adds.w	r3, r9, r9
 8005eb8:	eb4a 040a 	adc.w	r4, sl, sl
 8005ebc:	4699      	mov	r9, r3
 8005ebe:	46a2      	mov	sl, r4
 8005ec0:	eb19 090b 	adds.w	r9, r9, fp
 8005ec4:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005ec8:	f04f 0100 	mov.w	r1, #0
 8005ecc:	f04f 0200 	mov.w	r2, #0
 8005ed0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005ed4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005ed8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005edc:	4689      	mov	r9, r1
 8005ede:	4692      	mov	sl, r2
 8005ee0:	eb1b 0509 	adds.w	r5, fp, r9
 8005ee4:	eb4c 060a 	adc.w	r6, ip, sl
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	685b      	ldr	r3, [r3, #4]
 8005eec:	4619      	mov	r1, r3
 8005eee:	f04f 0200 	mov.w	r2, #0
 8005ef2:	f04f 0300 	mov.w	r3, #0
 8005ef6:	f04f 0400 	mov.w	r4, #0
 8005efa:	0094      	lsls	r4, r2, #2
 8005efc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005f00:	008b      	lsls	r3, r1, #2
 8005f02:	461a      	mov	r2, r3
 8005f04:	4623      	mov	r3, r4
 8005f06:	4628      	mov	r0, r5
 8005f08:	4631      	mov	r1, r6
 8005f0a:	f7fa fbcd 	bl	80006a8 <__aeabi_uldivmod>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	460c      	mov	r4, r1
 8005f12:	461a      	mov	r2, r3
 8005f14:	4b9a      	ldr	r3, [pc, #616]	; (8006180 <UART_SetConfig+0x6f4>)
 8005f16:	fba3 1302 	umull	r1, r3, r3, r2
 8005f1a:	095b      	lsrs	r3, r3, #5
 8005f1c:	2164      	movs	r1, #100	; 0x64
 8005f1e:	fb01 f303 	mul.w	r3, r1, r3
 8005f22:	1ad3      	subs	r3, r2, r3
 8005f24:	011b      	lsls	r3, r3, #4
 8005f26:	3332      	adds	r3, #50	; 0x32
 8005f28:	4a95      	ldr	r2, [pc, #596]	; (8006180 <UART_SetConfig+0x6f4>)
 8005f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8005f2e:	095b      	lsrs	r3, r3, #5
 8005f30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f34:	4498      	add	r8, r3
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	469b      	mov	fp, r3
 8005f3a:	f04f 0c00 	mov.w	ip, #0
 8005f3e:	46d9      	mov	r9, fp
 8005f40:	46e2      	mov	sl, ip
 8005f42:	eb19 0309 	adds.w	r3, r9, r9
 8005f46:	eb4a 040a 	adc.w	r4, sl, sl
 8005f4a:	4699      	mov	r9, r3
 8005f4c:	46a2      	mov	sl, r4
 8005f4e:	eb19 090b 	adds.w	r9, r9, fp
 8005f52:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005f56:	f04f 0100 	mov.w	r1, #0
 8005f5a:	f04f 0200 	mov.w	r2, #0
 8005f5e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005f62:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005f66:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005f6a:	4689      	mov	r9, r1
 8005f6c:	4692      	mov	sl, r2
 8005f6e:	eb1b 0509 	adds.w	r5, fp, r9
 8005f72:	eb4c 060a 	adc.w	r6, ip, sl
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	4619      	mov	r1, r3
 8005f7c:	f04f 0200 	mov.w	r2, #0
 8005f80:	f04f 0300 	mov.w	r3, #0
 8005f84:	f04f 0400 	mov.w	r4, #0
 8005f88:	0094      	lsls	r4, r2, #2
 8005f8a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005f8e:	008b      	lsls	r3, r1, #2
 8005f90:	461a      	mov	r2, r3
 8005f92:	4623      	mov	r3, r4
 8005f94:	4628      	mov	r0, r5
 8005f96:	4631      	mov	r1, r6
 8005f98:	f7fa fb86 	bl	80006a8 <__aeabi_uldivmod>
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	460c      	mov	r4, r1
 8005fa0:	461a      	mov	r2, r3
 8005fa2:	4b77      	ldr	r3, [pc, #476]	; (8006180 <UART_SetConfig+0x6f4>)
 8005fa4:	fba3 1302 	umull	r1, r3, r3, r2
 8005fa8:	095b      	lsrs	r3, r3, #5
 8005faa:	2164      	movs	r1, #100	; 0x64
 8005fac:	fb01 f303 	mul.w	r3, r1, r3
 8005fb0:	1ad3      	subs	r3, r2, r3
 8005fb2:	011b      	lsls	r3, r3, #4
 8005fb4:	3332      	adds	r3, #50	; 0x32
 8005fb6:	4a72      	ldr	r2, [pc, #456]	; (8006180 <UART_SetConfig+0x6f4>)
 8005fb8:	fba2 2303 	umull	r2, r3, r2, r3
 8005fbc:	095b      	lsrs	r3, r3, #5
 8005fbe:	f003 020f 	and.w	r2, r3, #15
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4442      	add	r2, r8
 8005fc8:	609a      	str	r2, [r3, #8]
 8005fca:	e0d0      	b.n	800616e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005fcc:	f7fd ff4c 	bl	8003e68 <HAL_RCC_GetPCLK1Freq>
 8005fd0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	469a      	mov	sl, r3
 8005fd6:	f04f 0b00 	mov.w	fp, #0
 8005fda:	46d0      	mov	r8, sl
 8005fdc:	46d9      	mov	r9, fp
 8005fde:	eb18 0308 	adds.w	r3, r8, r8
 8005fe2:	eb49 0409 	adc.w	r4, r9, r9
 8005fe6:	4698      	mov	r8, r3
 8005fe8:	46a1      	mov	r9, r4
 8005fea:	eb18 080a 	adds.w	r8, r8, sl
 8005fee:	eb49 090b 	adc.w	r9, r9, fp
 8005ff2:	f04f 0100 	mov.w	r1, #0
 8005ff6:	f04f 0200 	mov.w	r2, #0
 8005ffa:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005ffe:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006002:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006006:	4688      	mov	r8, r1
 8006008:	4691      	mov	r9, r2
 800600a:	eb1a 0508 	adds.w	r5, sl, r8
 800600e:	eb4b 0609 	adc.w	r6, fp, r9
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	4619      	mov	r1, r3
 8006018:	f04f 0200 	mov.w	r2, #0
 800601c:	f04f 0300 	mov.w	r3, #0
 8006020:	f04f 0400 	mov.w	r4, #0
 8006024:	0094      	lsls	r4, r2, #2
 8006026:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800602a:	008b      	lsls	r3, r1, #2
 800602c:	461a      	mov	r2, r3
 800602e:	4623      	mov	r3, r4
 8006030:	4628      	mov	r0, r5
 8006032:	4631      	mov	r1, r6
 8006034:	f7fa fb38 	bl	80006a8 <__aeabi_uldivmod>
 8006038:	4603      	mov	r3, r0
 800603a:	460c      	mov	r4, r1
 800603c:	461a      	mov	r2, r3
 800603e:	4b50      	ldr	r3, [pc, #320]	; (8006180 <UART_SetConfig+0x6f4>)
 8006040:	fba3 2302 	umull	r2, r3, r3, r2
 8006044:	095b      	lsrs	r3, r3, #5
 8006046:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	469b      	mov	fp, r3
 800604e:	f04f 0c00 	mov.w	ip, #0
 8006052:	46d9      	mov	r9, fp
 8006054:	46e2      	mov	sl, ip
 8006056:	eb19 0309 	adds.w	r3, r9, r9
 800605a:	eb4a 040a 	adc.w	r4, sl, sl
 800605e:	4699      	mov	r9, r3
 8006060:	46a2      	mov	sl, r4
 8006062:	eb19 090b 	adds.w	r9, r9, fp
 8006066:	eb4a 0a0c 	adc.w	sl, sl, ip
 800606a:	f04f 0100 	mov.w	r1, #0
 800606e:	f04f 0200 	mov.w	r2, #0
 8006072:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006076:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800607a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800607e:	4689      	mov	r9, r1
 8006080:	4692      	mov	sl, r2
 8006082:	eb1b 0509 	adds.w	r5, fp, r9
 8006086:	eb4c 060a 	adc.w	r6, ip, sl
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	685b      	ldr	r3, [r3, #4]
 800608e:	4619      	mov	r1, r3
 8006090:	f04f 0200 	mov.w	r2, #0
 8006094:	f04f 0300 	mov.w	r3, #0
 8006098:	f04f 0400 	mov.w	r4, #0
 800609c:	0094      	lsls	r4, r2, #2
 800609e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80060a2:	008b      	lsls	r3, r1, #2
 80060a4:	461a      	mov	r2, r3
 80060a6:	4623      	mov	r3, r4
 80060a8:	4628      	mov	r0, r5
 80060aa:	4631      	mov	r1, r6
 80060ac:	f7fa fafc 	bl	80006a8 <__aeabi_uldivmod>
 80060b0:	4603      	mov	r3, r0
 80060b2:	460c      	mov	r4, r1
 80060b4:	461a      	mov	r2, r3
 80060b6:	4b32      	ldr	r3, [pc, #200]	; (8006180 <UART_SetConfig+0x6f4>)
 80060b8:	fba3 1302 	umull	r1, r3, r3, r2
 80060bc:	095b      	lsrs	r3, r3, #5
 80060be:	2164      	movs	r1, #100	; 0x64
 80060c0:	fb01 f303 	mul.w	r3, r1, r3
 80060c4:	1ad3      	subs	r3, r2, r3
 80060c6:	011b      	lsls	r3, r3, #4
 80060c8:	3332      	adds	r3, #50	; 0x32
 80060ca:	4a2d      	ldr	r2, [pc, #180]	; (8006180 <UART_SetConfig+0x6f4>)
 80060cc:	fba2 2303 	umull	r2, r3, r2, r3
 80060d0:	095b      	lsrs	r3, r3, #5
 80060d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80060d6:	4498      	add	r8, r3
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	469b      	mov	fp, r3
 80060dc:	f04f 0c00 	mov.w	ip, #0
 80060e0:	46d9      	mov	r9, fp
 80060e2:	46e2      	mov	sl, ip
 80060e4:	eb19 0309 	adds.w	r3, r9, r9
 80060e8:	eb4a 040a 	adc.w	r4, sl, sl
 80060ec:	4699      	mov	r9, r3
 80060ee:	46a2      	mov	sl, r4
 80060f0:	eb19 090b 	adds.w	r9, r9, fp
 80060f4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80060f8:	f04f 0100 	mov.w	r1, #0
 80060fc:	f04f 0200 	mov.w	r2, #0
 8006100:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006104:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006108:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800610c:	4689      	mov	r9, r1
 800610e:	4692      	mov	sl, r2
 8006110:	eb1b 0509 	adds.w	r5, fp, r9
 8006114:	eb4c 060a 	adc.w	r6, ip, sl
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	685b      	ldr	r3, [r3, #4]
 800611c:	4619      	mov	r1, r3
 800611e:	f04f 0200 	mov.w	r2, #0
 8006122:	f04f 0300 	mov.w	r3, #0
 8006126:	f04f 0400 	mov.w	r4, #0
 800612a:	0094      	lsls	r4, r2, #2
 800612c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006130:	008b      	lsls	r3, r1, #2
 8006132:	461a      	mov	r2, r3
 8006134:	4623      	mov	r3, r4
 8006136:	4628      	mov	r0, r5
 8006138:	4631      	mov	r1, r6
 800613a:	f7fa fab5 	bl	80006a8 <__aeabi_uldivmod>
 800613e:	4603      	mov	r3, r0
 8006140:	460c      	mov	r4, r1
 8006142:	461a      	mov	r2, r3
 8006144:	4b0e      	ldr	r3, [pc, #56]	; (8006180 <UART_SetConfig+0x6f4>)
 8006146:	fba3 1302 	umull	r1, r3, r3, r2
 800614a:	095b      	lsrs	r3, r3, #5
 800614c:	2164      	movs	r1, #100	; 0x64
 800614e:	fb01 f303 	mul.w	r3, r1, r3
 8006152:	1ad3      	subs	r3, r2, r3
 8006154:	011b      	lsls	r3, r3, #4
 8006156:	3332      	adds	r3, #50	; 0x32
 8006158:	4a09      	ldr	r2, [pc, #36]	; (8006180 <UART_SetConfig+0x6f4>)
 800615a:	fba2 2303 	umull	r2, r3, r2, r3
 800615e:	095b      	lsrs	r3, r3, #5
 8006160:	f003 020f 	and.w	r2, r3, #15
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4442      	add	r2, r8
 800616a:	609a      	str	r2, [r3, #8]
}
 800616c:	e7ff      	b.n	800616e <UART_SetConfig+0x6e2>
 800616e:	bf00      	nop
 8006170:	3714      	adds	r7, #20
 8006172:	46bd      	mov	sp, r7
 8006174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006178:	40011000 	.word	0x40011000
 800617c:	40011400 	.word	0x40011400
 8006180:	51eb851f 	.word	0x51eb851f

08006184 <__errno>:
 8006184:	4b01      	ldr	r3, [pc, #4]	; (800618c <__errno+0x8>)
 8006186:	6818      	ldr	r0, [r3, #0]
 8006188:	4770      	bx	lr
 800618a:	bf00      	nop
 800618c:	20000018 	.word	0x20000018

08006190 <__libc_init_array>:
 8006190:	b570      	push	{r4, r5, r6, lr}
 8006192:	4e0d      	ldr	r6, [pc, #52]	; (80061c8 <__libc_init_array+0x38>)
 8006194:	4c0d      	ldr	r4, [pc, #52]	; (80061cc <__libc_init_array+0x3c>)
 8006196:	1ba4      	subs	r4, r4, r6
 8006198:	10a4      	asrs	r4, r4, #2
 800619a:	2500      	movs	r5, #0
 800619c:	42a5      	cmp	r5, r4
 800619e:	d109      	bne.n	80061b4 <__libc_init_array+0x24>
 80061a0:	4e0b      	ldr	r6, [pc, #44]	; (80061d0 <__libc_init_array+0x40>)
 80061a2:	4c0c      	ldr	r4, [pc, #48]	; (80061d4 <__libc_init_array+0x44>)
 80061a4:	f000 fc26 	bl	80069f4 <_init>
 80061a8:	1ba4      	subs	r4, r4, r6
 80061aa:	10a4      	asrs	r4, r4, #2
 80061ac:	2500      	movs	r5, #0
 80061ae:	42a5      	cmp	r5, r4
 80061b0:	d105      	bne.n	80061be <__libc_init_array+0x2e>
 80061b2:	bd70      	pop	{r4, r5, r6, pc}
 80061b4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80061b8:	4798      	blx	r3
 80061ba:	3501      	adds	r5, #1
 80061bc:	e7ee      	b.n	800619c <__libc_init_array+0xc>
 80061be:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80061c2:	4798      	blx	r3
 80061c4:	3501      	adds	r5, #1
 80061c6:	e7f2      	b.n	80061ae <__libc_init_array+0x1e>
 80061c8:	08006b68 	.word	0x08006b68
 80061cc:	08006b68 	.word	0x08006b68
 80061d0:	08006b68 	.word	0x08006b68
 80061d4:	08006b6c 	.word	0x08006b6c

080061d8 <memset>:
 80061d8:	4402      	add	r2, r0
 80061da:	4603      	mov	r3, r0
 80061dc:	4293      	cmp	r3, r2
 80061de:	d100      	bne.n	80061e2 <memset+0xa>
 80061e0:	4770      	bx	lr
 80061e2:	f803 1b01 	strb.w	r1, [r3], #1
 80061e6:	e7f9      	b.n	80061dc <memset+0x4>

080061e8 <siprintf>:
 80061e8:	b40e      	push	{r1, r2, r3}
 80061ea:	b500      	push	{lr}
 80061ec:	b09c      	sub	sp, #112	; 0x70
 80061ee:	ab1d      	add	r3, sp, #116	; 0x74
 80061f0:	9002      	str	r0, [sp, #8]
 80061f2:	9006      	str	r0, [sp, #24]
 80061f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80061f8:	4809      	ldr	r0, [pc, #36]	; (8006220 <siprintf+0x38>)
 80061fa:	9107      	str	r1, [sp, #28]
 80061fc:	9104      	str	r1, [sp, #16]
 80061fe:	4909      	ldr	r1, [pc, #36]	; (8006224 <siprintf+0x3c>)
 8006200:	f853 2b04 	ldr.w	r2, [r3], #4
 8006204:	9105      	str	r1, [sp, #20]
 8006206:	6800      	ldr	r0, [r0, #0]
 8006208:	9301      	str	r3, [sp, #4]
 800620a:	a902      	add	r1, sp, #8
 800620c:	f000 f866 	bl	80062dc <_svfiprintf_r>
 8006210:	9b02      	ldr	r3, [sp, #8]
 8006212:	2200      	movs	r2, #0
 8006214:	701a      	strb	r2, [r3, #0]
 8006216:	b01c      	add	sp, #112	; 0x70
 8006218:	f85d eb04 	ldr.w	lr, [sp], #4
 800621c:	b003      	add	sp, #12
 800621e:	4770      	bx	lr
 8006220:	20000018 	.word	0x20000018
 8006224:	ffff0208 	.word	0xffff0208

08006228 <__ssputs_r>:
 8006228:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800622c:	688e      	ldr	r6, [r1, #8]
 800622e:	429e      	cmp	r6, r3
 8006230:	4682      	mov	sl, r0
 8006232:	460c      	mov	r4, r1
 8006234:	4690      	mov	r8, r2
 8006236:	4699      	mov	r9, r3
 8006238:	d837      	bhi.n	80062aa <__ssputs_r+0x82>
 800623a:	898a      	ldrh	r2, [r1, #12]
 800623c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006240:	d031      	beq.n	80062a6 <__ssputs_r+0x7e>
 8006242:	6825      	ldr	r5, [r4, #0]
 8006244:	6909      	ldr	r1, [r1, #16]
 8006246:	1a6f      	subs	r7, r5, r1
 8006248:	6965      	ldr	r5, [r4, #20]
 800624a:	2302      	movs	r3, #2
 800624c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006250:	fb95 f5f3 	sdiv	r5, r5, r3
 8006254:	f109 0301 	add.w	r3, r9, #1
 8006258:	443b      	add	r3, r7
 800625a:	429d      	cmp	r5, r3
 800625c:	bf38      	it	cc
 800625e:	461d      	movcc	r5, r3
 8006260:	0553      	lsls	r3, r2, #21
 8006262:	d530      	bpl.n	80062c6 <__ssputs_r+0x9e>
 8006264:	4629      	mov	r1, r5
 8006266:	f000 fb2b 	bl	80068c0 <_malloc_r>
 800626a:	4606      	mov	r6, r0
 800626c:	b950      	cbnz	r0, 8006284 <__ssputs_r+0x5c>
 800626e:	230c      	movs	r3, #12
 8006270:	f8ca 3000 	str.w	r3, [sl]
 8006274:	89a3      	ldrh	r3, [r4, #12]
 8006276:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800627a:	81a3      	strh	r3, [r4, #12]
 800627c:	f04f 30ff 	mov.w	r0, #4294967295
 8006280:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006284:	463a      	mov	r2, r7
 8006286:	6921      	ldr	r1, [r4, #16]
 8006288:	f000 faa8 	bl	80067dc <memcpy>
 800628c:	89a3      	ldrh	r3, [r4, #12]
 800628e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006292:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006296:	81a3      	strh	r3, [r4, #12]
 8006298:	6126      	str	r6, [r4, #16]
 800629a:	6165      	str	r5, [r4, #20]
 800629c:	443e      	add	r6, r7
 800629e:	1bed      	subs	r5, r5, r7
 80062a0:	6026      	str	r6, [r4, #0]
 80062a2:	60a5      	str	r5, [r4, #8]
 80062a4:	464e      	mov	r6, r9
 80062a6:	454e      	cmp	r6, r9
 80062a8:	d900      	bls.n	80062ac <__ssputs_r+0x84>
 80062aa:	464e      	mov	r6, r9
 80062ac:	4632      	mov	r2, r6
 80062ae:	4641      	mov	r1, r8
 80062b0:	6820      	ldr	r0, [r4, #0]
 80062b2:	f000 fa9e 	bl	80067f2 <memmove>
 80062b6:	68a3      	ldr	r3, [r4, #8]
 80062b8:	1b9b      	subs	r3, r3, r6
 80062ba:	60a3      	str	r3, [r4, #8]
 80062bc:	6823      	ldr	r3, [r4, #0]
 80062be:	441e      	add	r6, r3
 80062c0:	6026      	str	r6, [r4, #0]
 80062c2:	2000      	movs	r0, #0
 80062c4:	e7dc      	b.n	8006280 <__ssputs_r+0x58>
 80062c6:	462a      	mov	r2, r5
 80062c8:	f000 fb54 	bl	8006974 <_realloc_r>
 80062cc:	4606      	mov	r6, r0
 80062ce:	2800      	cmp	r0, #0
 80062d0:	d1e2      	bne.n	8006298 <__ssputs_r+0x70>
 80062d2:	6921      	ldr	r1, [r4, #16]
 80062d4:	4650      	mov	r0, sl
 80062d6:	f000 faa5 	bl	8006824 <_free_r>
 80062da:	e7c8      	b.n	800626e <__ssputs_r+0x46>

080062dc <_svfiprintf_r>:
 80062dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062e0:	461d      	mov	r5, r3
 80062e2:	898b      	ldrh	r3, [r1, #12]
 80062e4:	061f      	lsls	r7, r3, #24
 80062e6:	b09d      	sub	sp, #116	; 0x74
 80062e8:	4680      	mov	r8, r0
 80062ea:	460c      	mov	r4, r1
 80062ec:	4616      	mov	r6, r2
 80062ee:	d50f      	bpl.n	8006310 <_svfiprintf_r+0x34>
 80062f0:	690b      	ldr	r3, [r1, #16]
 80062f2:	b96b      	cbnz	r3, 8006310 <_svfiprintf_r+0x34>
 80062f4:	2140      	movs	r1, #64	; 0x40
 80062f6:	f000 fae3 	bl	80068c0 <_malloc_r>
 80062fa:	6020      	str	r0, [r4, #0]
 80062fc:	6120      	str	r0, [r4, #16]
 80062fe:	b928      	cbnz	r0, 800630c <_svfiprintf_r+0x30>
 8006300:	230c      	movs	r3, #12
 8006302:	f8c8 3000 	str.w	r3, [r8]
 8006306:	f04f 30ff 	mov.w	r0, #4294967295
 800630a:	e0c8      	b.n	800649e <_svfiprintf_r+0x1c2>
 800630c:	2340      	movs	r3, #64	; 0x40
 800630e:	6163      	str	r3, [r4, #20]
 8006310:	2300      	movs	r3, #0
 8006312:	9309      	str	r3, [sp, #36]	; 0x24
 8006314:	2320      	movs	r3, #32
 8006316:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800631a:	2330      	movs	r3, #48	; 0x30
 800631c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006320:	9503      	str	r5, [sp, #12]
 8006322:	f04f 0b01 	mov.w	fp, #1
 8006326:	4637      	mov	r7, r6
 8006328:	463d      	mov	r5, r7
 800632a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800632e:	b10b      	cbz	r3, 8006334 <_svfiprintf_r+0x58>
 8006330:	2b25      	cmp	r3, #37	; 0x25
 8006332:	d13e      	bne.n	80063b2 <_svfiprintf_r+0xd6>
 8006334:	ebb7 0a06 	subs.w	sl, r7, r6
 8006338:	d00b      	beq.n	8006352 <_svfiprintf_r+0x76>
 800633a:	4653      	mov	r3, sl
 800633c:	4632      	mov	r2, r6
 800633e:	4621      	mov	r1, r4
 8006340:	4640      	mov	r0, r8
 8006342:	f7ff ff71 	bl	8006228 <__ssputs_r>
 8006346:	3001      	adds	r0, #1
 8006348:	f000 80a4 	beq.w	8006494 <_svfiprintf_r+0x1b8>
 800634c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800634e:	4453      	add	r3, sl
 8006350:	9309      	str	r3, [sp, #36]	; 0x24
 8006352:	783b      	ldrb	r3, [r7, #0]
 8006354:	2b00      	cmp	r3, #0
 8006356:	f000 809d 	beq.w	8006494 <_svfiprintf_r+0x1b8>
 800635a:	2300      	movs	r3, #0
 800635c:	f04f 32ff 	mov.w	r2, #4294967295
 8006360:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006364:	9304      	str	r3, [sp, #16]
 8006366:	9307      	str	r3, [sp, #28]
 8006368:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800636c:	931a      	str	r3, [sp, #104]	; 0x68
 800636e:	462f      	mov	r7, r5
 8006370:	2205      	movs	r2, #5
 8006372:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006376:	4850      	ldr	r0, [pc, #320]	; (80064b8 <_svfiprintf_r+0x1dc>)
 8006378:	f7f9 ff3a 	bl	80001f0 <memchr>
 800637c:	9b04      	ldr	r3, [sp, #16]
 800637e:	b9d0      	cbnz	r0, 80063b6 <_svfiprintf_r+0xda>
 8006380:	06d9      	lsls	r1, r3, #27
 8006382:	bf44      	itt	mi
 8006384:	2220      	movmi	r2, #32
 8006386:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800638a:	071a      	lsls	r2, r3, #28
 800638c:	bf44      	itt	mi
 800638e:	222b      	movmi	r2, #43	; 0x2b
 8006390:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006394:	782a      	ldrb	r2, [r5, #0]
 8006396:	2a2a      	cmp	r2, #42	; 0x2a
 8006398:	d015      	beq.n	80063c6 <_svfiprintf_r+0xea>
 800639a:	9a07      	ldr	r2, [sp, #28]
 800639c:	462f      	mov	r7, r5
 800639e:	2000      	movs	r0, #0
 80063a0:	250a      	movs	r5, #10
 80063a2:	4639      	mov	r1, r7
 80063a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80063a8:	3b30      	subs	r3, #48	; 0x30
 80063aa:	2b09      	cmp	r3, #9
 80063ac:	d94d      	bls.n	800644a <_svfiprintf_r+0x16e>
 80063ae:	b1b8      	cbz	r0, 80063e0 <_svfiprintf_r+0x104>
 80063b0:	e00f      	b.n	80063d2 <_svfiprintf_r+0xf6>
 80063b2:	462f      	mov	r7, r5
 80063b4:	e7b8      	b.n	8006328 <_svfiprintf_r+0x4c>
 80063b6:	4a40      	ldr	r2, [pc, #256]	; (80064b8 <_svfiprintf_r+0x1dc>)
 80063b8:	1a80      	subs	r0, r0, r2
 80063ba:	fa0b f000 	lsl.w	r0, fp, r0
 80063be:	4318      	orrs	r0, r3
 80063c0:	9004      	str	r0, [sp, #16]
 80063c2:	463d      	mov	r5, r7
 80063c4:	e7d3      	b.n	800636e <_svfiprintf_r+0x92>
 80063c6:	9a03      	ldr	r2, [sp, #12]
 80063c8:	1d11      	adds	r1, r2, #4
 80063ca:	6812      	ldr	r2, [r2, #0]
 80063cc:	9103      	str	r1, [sp, #12]
 80063ce:	2a00      	cmp	r2, #0
 80063d0:	db01      	blt.n	80063d6 <_svfiprintf_r+0xfa>
 80063d2:	9207      	str	r2, [sp, #28]
 80063d4:	e004      	b.n	80063e0 <_svfiprintf_r+0x104>
 80063d6:	4252      	negs	r2, r2
 80063d8:	f043 0302 	orr.w	r3, r3, #2
 80063dc:	9207      	str	r2, [sp, #28]
 80063de:	9304      	str	r3, [sp, #16]
 80063e0:	783b      	ldrb	r3, [r7, #0]
 80063e2:	2b2e      	cmp	r3, #46	; 0x2e
 80063e4:	d10c      	bne.n	8006400 <_svfiprintf_r+0x124>
 80063e6:	787b      	ldrb	r3, [r7, #1]
 80063e8:	2b2a      	cmp	r3, #42	; 0x2a
 80063ea:	d133      	bne.n	8006454 <_svfiprintf_r+0x178>
 80063ec:	9b03      	ldr	r3, [sp, #12]
 80063ee:	1d1a      	adds	r2, r3, #4
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	9203      	str	r2, [sp, #12]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	bfb8      	it	lt
 80063f8:	f04f 33ff 	movlt.w	r3, #4294967295
 80063fc:	3702      	adds	r7, #2
 80063fe:	9305      	str	r3, [sp, #20]
 8006400:	4d2e      	ldr	r5, [pc, #184]	; (80064bc <_svfiprintf_r+0x1e0>)
 8006402:	7839      	ldrb	r1, [r7, #0]
 8006404:	2203      	movs	r2, #3
 8006406:	4628      	mov	r0, r5
 8006408:	f7f9 fef2 	bl	80001f0 <memchr>
 800640c:	b138      	cbz	r0, 800641e <_svfiprintf_r+0x142>
 800640e:	2340      	movs	r3, #64	; 0x40
 8006410:	1b40      	subs	r0, r0, r5
 8006412:	fa03 f000 	lsl.w	r0, r3, r0
 8006416:	9b04      	ldr	r3, [sp, #16]
 8006418:	4303      	orrs	r3, r0
 800641a:	3701      	adds	r7, #1
 800641c:	9304      	str	r3, [sp, #16]
 800641e:	7839      	ldrb	r1, [r7, #0]
 8006420:	4827      	ldr	r0, [pc, #156]	; (80064c0 <_svfiprintf_r+0x1e4>)
 8006422:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006426:	2206      	movs	r2, #6
 8006428:	1c7e      	adds	r6, r7, #1
 800642a:	f7f9 fee1 	bl	80001f0 <memchr>
 800642e:	2800      	cmp	r0, #0
 8006430:	d038      	beq.n	80064a4 <_svfiprintf_r+0x1c8>
 8006432:	4b24      	ldr	r3, [pc, #144]	; (80064c4 <_svfiprintf_r+0x1e8>)
 8006434:	bb13      	cbnz	r3, 800647c <_svfiprintf_r+0x1a0>
 8006436:	9b03      	ldr	r3, [sp, #12]
 8006438:	3307      	adds	r3, #7
 800643a:	f023 0307 	bic.w	r3, r3, #7
 800643e:	3308      	adds	r3, #8
 8006440:	9303      	str	r3, [sp, #12]
 8006442:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006444:	444b      	add	r3, r9
 8006446:	9309      	str	r3, [sp, #36]	; 0x24
 8006448:	e76d      	b.n	8006326 <_svfiprintf_r+0x4a>
 800644a:	fb05 3202 	mla	r2, r5, r2, r3
 800644e:	2001      	movs	r0, #1
 8006450:	460f      	mov	r7, r1
 8006452:	e7a6      	b.n	80063a2 <_svfiprintf_r+0xc6>
 8006454:	2300      	movs	r3, #0
 8006456:	3701      	adds	r7, #1
 8006458:	9305      	str	r3, [sp, #20]
 800645a:	4619      	mov	r1, r3
 800645c:	250a      	movs	r5, #10
 800645e:	4638      	mov	r0, r7
 8006460:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006464:	3a30      	subs	r2, #48	; 0x30
 8006466:	2a09      	cmp	r2, #9
 8006468:	d903      	bls.n	8006472 <_svfiprintf_r+0x196>
 800646a:	2b00      	cmp	r3, #0
 800646c:	d0c8      	beq.n	8006400 <_svfiprintf_r+0x124>
 800646e:	9105      	str	r1, [sp, #20]
 8006470:	e7c6      	b.n	8006400 <_svfiprintf_r+0x124>
 8006472:	fb05 2101 	mla	r1, r5, r1, r2
 8006476:	2301      	movs	r3, #1
 8006478:	4607      	mov	r7, r0
 800647a:	e7f0      	b.n	800645e <_svfiprintf_r+0x182>
 800647c:	ab03      	add	r3, sp, #12
 800647e:	9300      	str	r3, [sp, #0]
 8006480:	4622      	mov	r2, r4
 8006482:	4b11      	ldr	r3, [pc, #68]	; (80064c8 <_svfiprintf_r+0x1ec>)
 8006484:	a904      	add	r1, sp, #16
 8006486:	4640      	mov	r0, r8
 8006488:	f3af 8000 	nop.w
 800648c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006490:	4681      	mov	r9, r0
 8006492:	d1d6      	bne.n	8006442 <_svfiprintf_r+0x166>
 8006494:	89a3      	ldrh	r3, [r4, #12]
 8006496:	065b      	lsls	r3, r3, #25
 8006498:	f53f af35 	bmi.w	8006306 <_svfiprintf_r+0x2a>
 800649c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800649e:	b01d      	add	sp, #116	; 0x74
 80064a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064a4:	ab03      	add	r3, sp, #12
 80064a6:	9300      	str	r3, [sp, #0]
 80064a8:	4622      	mov	r2, r4
 80064aa:	4b07      	ldr	r3, [pc, #28]	; (80064c8 <_svfiprintf_r+0x1ec>)
 80064ac:	a904      	add	r1, sp, #16
 80064ae:	4640      	mov	r0, r8
 80064b0:	f000 f882 	bl	80065b8 <_printf_i>
 80064b4:	e7ea      	b.n	800648c <_svfiprintf_r+0x1b0>
 80064b6:	bf00      	nop
 80064b8:	08006b2c 	.word	0x08006b2c
 80064bc:	08006b32 	.word	0x08006b32
 80064c0:	08006b36 	.word	0x08006b36
 80064c4:	00000000 	.word	0x00000000
 80064c8:	08006229 	.word	0x08006229

080064cc <_printf_common>:
 80064cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064d0:	4691      	mov	r9, r2
 80064d2:	461f      	mov	r7, r3
 80064d4:	688a      	ldr	r2, [r1, #8]
 80064d6:	690b      	ldr	r3, [r1, #16]
 80064d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80064dc:	4293      	cmp	r3, r2
 80064de:	bfb8      	it	lt
 80064e0:	4613      	movlt	r3, r2
 80064e2:	f8c9 3000 	str.w	r3, [r9]
 80064e6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80064ea:	4606      	mov	r6, r0
 80064ec:	460c      	mov	r4, r1
 80064ee:	b112      	cbz	r2, 80064f6 <_printf_common+0x2a>
 80064f0:	3301      	adds	r3, #1
 80064f2:	f8c9 3000 	str.w	r3, [r9]
 80064f6:	6823      	ldr	r3, [r4, #0]
 80064f8:	0699      	lsls	r1, r3, #26
 80064fa:	bf42      	ittt	mi
 80064fc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006500:	3302      	addmi	r3, #2
 8006502:	f8c9 3000 	strmi.w	r3, [r9]
 8006506:	6825      	ldr	r5, [r4, #0]
 8006508:	f015 0506 	ands.w	r5, r5, #6
 800650c:	d107      	bne.n	800651e <_printf_common+0x52>
 800650e:	f104 0a19 	add.w	sl, r4, #25
 8006512:	68e3      	ldr	r3, [r4, #12]
 8006514:	f8d9 2000 	ldr.w	r2, [r9]
 8006518:	1a9b      	subs	r3, r3, r2
 800651a:	42ab      	cmp	r3, r5
 800651c:	dc28      	bgt.n	8006570 <_printf_common+0xa4>
 800651e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006522:	6822      	ldr	r2, [r4, #0]
 8006524:	3300      	adds	r3, #0
 8006526:	bf18      	it	ne
 8006528:	2301      	movne	r3, #1
 800652a:	0692      	lsls	r2, r2, #26
 800652c:	d42d      	bmi.n	800658a <_printf_common+0xbe>
 800652e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006532:	4639      	mov	r1, r7
 8006534:	4630      	mov	r0, r6
 8006536:	47c0      	blx	r8
 8006538:	3001      	adds	r0, #1
 800653a:	d020      	beq.n	800657e <_printf_common+0xb2>
 800653c:	6823      	ldr	r3, [r4, #0]
 800653e:	68e5      	ldr	r5, [r4, #12]
 8006540:	f8d9 2000 	ldr.w	r2, [r9]
 8006544:	f003 0306 	and.w	r3, r3, #6
 8006548:	2b04      	cmp	r3, #4
 800654a:	bf08      	it	eq
 800654c:	1aad      	subeq	r5, r5, r2
 800654e:	68a3      	ldr	r3, [r4, #8]
 8006550:	6922      	ldr	r2, [r4, #16]
 8006552:	bf0c      	ite	eq
 8006554:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006558:	2500      	movne	r5, #0
 800655a:	4293      	cmp	r3, r2
 800655c:	bfc4      	itt	gt
 800655e:	1a9b      	subgt	r3, r3, r2
 8006560:	18ed      	addgt	r5, r5, r3
 8006562:	f04f 0900 	mov.w	r9, #0
 8006566:	341a      	adds	r4, #26
 8006568:	454d      	cmp	r5, r9
 800656a:	d11a      	bne.n	80065a2 <_printf_common+0xd6>
 800656c:	2000      	movs	r0, #0
 800656e:	e008      	b.n	8006582 <_printf_common+0xb6>
 8006570:	2301      	movs	r3, #1
 8006572:	4652      	mov	r2, sl
 8006574:	4639      	mov	r1, r7
 8006576:	4630      	mov	r0, r6
 8006578:	47c0      	blx	r8
 800657a:	3001      	adds	r0, #1
 800657c:	d103      	bne.n	8006586 <_printf_common+0xba>
 800657e:	f04f 30ff 	mov.w	r0, #4294967295
 8006582:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006586:	3501      	adds	r5, #1
 8006588:	e7c3      	b.n	8006512 <_printf_common+0x46>
 800658a:	18e1      	adds	r1, r4, r3
 800658c:	1c5a      	adds	r2, r3, #1
 800658e:	2030      	movs	r0, #48	; 0x30
 8006590:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006594:	4422      	add	r2, r4
 8006596:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800659a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800659e:	3302      	adds	r3, #2
 80065a0:	e7c5      	b.n	800652e <_printf_common+0x62>
 80065a2:	2301      	movs	r3, #1
 80065a4:	4622      	mov	r2, r4
 80065a6:	4639      	mov	r1, r7
 80065a8:	4630      	mov	r0, r6
 80065aa:	47c0      	blx	r8
 80065ac:	3001      	adds	r0, #1
 80065ae:	d0e6      	beq.n	800657e <_printf_common+0xb2>
 80065b0:	f109 0901 	add.w	r9, r9, #1
 80065b4:	e7d8      	b.n	8006568 <_printf_common+0x9c>
	...

080065b8 <_printf_i>:
 80065b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80065bc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80065c0:	460c      	mov	r4, r1
 80065c2:	7e09      	ldrb	r1, [r1, #24]
 80065c4:	b085      	sub	sp, #20
 80065c6:	296e      	cmp	r1, #110	; 0x6e
 80065c8:	4617      	mov	r7, r2
 80065ca:	4606      	mov	r6, r0
 80065cc:	4698      	mov	r8, r3
 80065ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80065d0:	f000 80b3 	beq.w	800673a <_printf_i+0x182>
 80065d4:	d822      	bhi.n	800661c <_printf_i+0x64>
 80065d6:	2963      	cmp	r1, #99	; 0x63
 80065d8:	d036      	beq.n	8006648 <_printf_i+0x90>
 80065da:	d80a      	bhi.n	80065f2 <_printf_i+0x3a>
 80065dc:	2900      	cmp	r1, #0
 80065de:	f000 80b9 	beq.w	8006754 <_printf_i+0x19c>
 80065e2:	2958      	cmp	r1, #88	; 0x58
 80065e4:	f000 8083 	beq.w	80066ee <_printf_i+0x136>
 80065e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80065ec:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80065f0:	e032      	b.n	8006658 <_printf_i+0xa0>
 80065f2:	2964      	cmp	r1, #100	; 0x64
 80065f4:	d001      	beq.n	80065fa <_printf_i+0x42>
 80065f6:	2969      	cmp	r1, #105	; 0x69
 80065f8:	d1f6      	bne.n	80065e8 <_printf_i+0x30>
 80065fa:	6820      	ldr	r0, [r4, #0]
 80065fc:	6813      	ldr	r3, [r2, #0]
 80065fe:	0605      	lsls	r5, r0, #24
 8006600:	f103 0104 	add.w	r1, r3, #4
 8006604:	d52a      	bpl.n	800665c <_printf_i+0xa4>
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	6011      	str	r1, [r2, #0]
 800660a:	2b00      	cmp	r3, #0
 800660c:	da03      	bge.n	8006616 <_printf_i+0x5e>
 800660e:	222d      	movs	r2, #45	; 0x2d
 8006610:	425b      	negs	r3, r3
 8006612:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006616:	486f      	ldr	r0, [pc, #444]	; (80067d4 <_printf_i+0x21c>)
 8006618:	220a      	movs	r2, #10
 800661a:	e039      	b.n	8006690 <_printf_i+0xd8>
 800661c:	2973      	cmp	r1, #115	; 0x73
 800661e:	f000 809d 	beq.w	800675c <_printf_i+0x1a4>
 8006622:	d808      	bhi.n	8006636 <_printf_i+0x7e>
 8006624:	296f      	cmp	r1, #111	; 0x6f
 8006626:	d020      	beq.n	800666a <_printf_i+0xb2>
 8006628:	2970      	cmp	r1, #112	; 0x70
 800662a:	d1dd      	bne.n	80065e8 <_printf_i+0x30>
 800662c:	6823      	ldr	r3, [r4, #0]
 800662e:	f043 0320 	orr.w	r3, r3, #32
 8006632:	6023      	str	r3, [r4, #0]
 8006634:	e003      	b.n	800663e <_printf_i+0x86>
 8006636:	2975      	cmp	r1, #117	; 0x75
 8006638:	d017      	beq.n	800666a <_printf_i+0xb2>
 800663a:	2978      	cmp	r1, #120	; 0x78
 800663c:	d1d4      	bne.n	80065e8 <_printf_i+0x30>
 800663e:	2378      	movs	r3, #120	; 0x78
 8006640:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006644:	4864      	ldr	r0, [pc, #400]	; (80067d8 <_printf_i+0x220>)
 8006646:	e055      	b.n	80066f4 <_printf_i+0x13c>
 8006648:	6813      	ldr	r3, [r2, #0]
 800664a:	1d19      	adds	r1, r3, #4
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	6011      	str	r1, [r2, #0]
 8006650:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006654:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006658:	2301      	movs	r3, #1
 800665a:	e08c      	b.n	8006776 <_printf_i+0x1be>
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	6011      	str	r1, [r2, #0]
 8006660:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006664:	bf18      	it	ne
 8006666:	b21b      	sxthne	r3, r3
 8006668:	e7cf      	b.n	800660a <_printf_i+0x52>
 800666a:	6813      	ldr	r3, [r2, #0]
 800666c:	6825      	ldr	r5, [r4, #0]
 800666e:	1d18      	adds	r0, r3, #4
 8006670:	6010      	str	r0, [r2, #0]
 8006672:	0628      	lsls	r0, r5, #24
 8006674:	d501      	bpl.n	800667a <_printf_i+0xc2>
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	e002      	b.n	8006680 <_printf_i+0xc8>
 800667a:	0668      	lsls	r0, r5, #25
 800667c:	d5fb      	bpl.n	8006676 <_printf_i+0xbe>
 800667e:	881b      	ldrh	r3, [r3, #0]
 8006680:	4854      	ldr	r0, [pc, #336]	; (80067d4 <_printf_i+0x21c>)
 8006682:	296f      	cmp	r1, #111	; 0x6f
 8006684:	bf14      	ite	ne
 8006686:	220a      	movne	r2, #10
 8006688:	2208      	moveq	r2, #8
 800668a:	2100      	movs	r1, #0
 800668c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006690:	6865      	ldr	r5, [r4, #4]
 8006692:	60a5      	str	r5, [r4, #8]
 8006694:	2d00      	cmp	r5, #0
 8006696:	f2c0 8095 	blt.w	80067c4 <_printf_i+0x20c>
 800669a:	6821      	ldr	r1, [r4, #0]
 800669c:	f021 0104 	bic.w	r1, r1, #4
 80066a0:	6021      	str	r1, [r4, #0]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d13d      	bne.n	8006722 <_printf_i+0x16a>
 80066a6:	2d00      	cmp	r5, #0
 80066a8:	f040 808e 	bne.w	80067c8 <_printf_i+0x210>
 80066ac:	4665      	mov	r5, ip
 80066ae:	2a08      	cmp	r2, #8
 80066b0:	d10b      	bne.n	80066ca <_printf_i+0x112>
 80066b2:	6823      	ldr	r3, [r4, #0]
 80066b4:	07db      	lsls	r3, r3, #31
 80066b6:	d508      	bpl.n	80066ca <_printf_i+0x112>
 80066b8:	6923      	ldr	r3, [r4, #16]
 80066ba:	6862      	ldr	r2, [r4, #4]
 80066bc:	429a      	cmp	r2, r3
 80066be:	bfde      	ittt	le
 80066c0:	2330      	movle	r3, #48	; 0x30
 80066c2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80066c6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80066ca:	ebac 0305 	sub.w	r3, ip, r5
 80066ce:	6123      	str	r3, [r4, #16]
 80066d0:	f8cd 8000 	str.w	r8, [sp]
 80066d4:	463b      	mov	r3, r7
 80066d6:	aa03      	add	r2, sp, #12
 80066d8:	4621      	mov	r1, r4
 80066da:	4630      	mov	r0, r6
 80066dc:	f7ff fef6 	bl	80064cc <_printf_common>
 80066e0:	3001      	adds	r0, #1
 80066e2:	d14d      	bne.n	8006780 <_printf_i+0x1c8>
 80066e4:	f04f 30ff 	mov.w	r0, #4294967295
 80066e8:	b005      	add	sp, #20
 80066ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80066ee:	4839      	ldr	r0, [pc, #228]	; (80067d4 <_printf_i+0x21c>)
 80066f0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80066f4:	6813      	ldr	r3, [r2, #0]
 80066f6:	6821      	ldr	r1, [r4, #0]
 80066f8:	1d1d      	adds	r5, r3, #4
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	6015      	str	r5, [r2, #0]
 80066fe:	060a      	lsls	r2, r1, #24
 8006700:	d50b      	bpl.n	800671a <_printf_i+0x162>
 8006702:	07ca      	lsls	r2, r1, #31
 8006704:	bf44      	itt	mi
 8006706:	f041 0120 	orrmi.w	r1, r1, #32
 800670a:	6021      	strmi	r1, [r4, #0]
 800670c:	b91b      	cbnz	r3, 8006716 <_printf_i+0x15e>
 800670e:	6822      	ldr	r2, [r4, #0]
 8006710:	f022 0220 	bic.w	r2, r2, #32
 8006714:	6022      	str	r2, [r4, #0]
 8006716:	2210      	movs	r2, #16
 8006718:	e7b7      	b.n	800668a <_printf_i+0xd2>
 800671a:	064d      	lsls	r5, r1, #25
 800671c:	bf48      	it	mi
 800671e:	b29b      	uxthmi	r3, r3
 8006720:	e7ef      	b.n	8006702 <_printf_i+0x14a>
 8006722:	4665      	mov	r5, ip
 8006724:	fbb3 f1f2 	udiv	r1, r3, r2
 8006728:	fb02 3311 	mls	r3, r2, r1, r3
 800672c:	5cc3      	ldrb	r3, [r0, r3]
 800672e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006732:	460b      	mov	r3, r1
 8006734:	2900      	cmp	r1, #0
 8006736:	d1f5      	bne.n	8006724 <_printf_i+0x16c>
 8006738:	e7b9      	b.n	80066ae <_printf_i+0xf6>
 800673a:	6813      	ldr	r3, [r2, #0]
 800673c:	6825      	ldr	r5, [r4, #0]
 800673e:	6961      	ldr	r1, [r4, #20]
 8006740:	1d18      	adds	r0, r3, #4
 8006742:	6010      	str	r0, [r2, #0]
 8006744:	0628      	lsls	r0, r5, #24
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	d501      	bpl.n	800674e <_printf_i+0x196>
 800674a:	6019      	str	r1, [r3, #0]
 800674c:	e002      	b.n	8006754 <_printf_i+0x19c>
 800674e:	066a      	lsls	r2, r5, #25
 8006750:	d5fb      	bpl.n	800674a <_printf_i+0x192>
 8006752:	8019      	strh	r1, [r3, #0]
 8006754:	2300      	movs	r3, #0
 8006756:	6123      	str	r3, [r4, #16]
 8006758:	4665      	mov	r5, ip
 800675a:	e7b9      	b.n	80066d0 <_printf_i+0x118>
 800675c:	6813      	ldr	r3, [r2, #0]
 800675e:	1d19      	adds	r1, r3, #4
 8006760:	6011      	str	r1, [r2, #0]
 8006762:	681d      	ldr	r5, [r3, #0]
 8006764:	6862      	ldr	r2, [r4, #4]
 8006766:	2100      	movs	r1, #0
 8006768:	4628      	mov	r0, r5
 800676a:	f7f9 fd41 	bl	80001f0 <memchr>
 800676e:	b108      	cbz	r0, 8006774 <_printf_i+0x1bc>
 8006770:	1b40      	subs	r0, r0, r5
 8006772:	6060      	str	r0, [r4, #4]
 8006774:	6863      	ldr	r3, [r4, #4]
 8006776:	6123      	str	r3, [r4, #16]
 8006778:	2300      	movs	r3, #0
 800677a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800677e:	e7a7      	b.n	80066d0 <_printf_i+0x118>
 8006780:	6923      	ldr	r3, [r4, #16]
 8006782:	462a      	mov	r2, r5
 8006784:	4639      	mov	r1, r7
 8006786:	4630      	mov	r0, r6
 8006788:	47c0      	blx	r8
 800678a:	3001      	adds	r0, #1
 800678c:	d0aa      	beq.n	80066e4 <_printf_i+0x12c>
 800678e:	6823      	ldr	r3, [r4, #0]
 8006790:	079b      	lsls	r3, r3, #30
 8006792:	d413      	bmi.n	80067bc <_printf_i+0x204>
 8006794:	68e0      	ldr	r0, [r4, #12]
 8006796:	9b03      	ldr	r3, [sp, #12]
 8006798:	4298      	cmp	r0, r3
 800679a:	bfb8      	it	lt
 800679c:	4618      	movlt	r0, r3
 800679e:	e7a3      	b.n	80066e8 <_printf_i+0x130>
 80067a0:	2301      	movs	r3, #1
 80067a2:	464a      	mov	r2, r9
 80067a4:	4639      	mov	r1, r7
 80067a6:	4630      	mov	r0, r6
 80067a8:	47c0      	blx	r8
 80067aa:	3001      	adds	r0, #1
 80067ac:	d09a      	beq.n	80066e4 <_printf_i+0x12c>
 80067ae:	3501      	adds	r5, #1
 80067b0:	68e3      	ldr	r3, [r4, #12]
 80067b2:	9a03      	ldr	r2, [sp, #12]
 80067b4:	1a9b      	subs	r3, r3, r2
 80067b6:	42ab      	cmp	r3, r5
 80067b8:	dcf2      	bgt.n	80067a0 <_printf_i+0x1e8>
 80067ba:	e7eb      	b.n	8006794 <_printf_i+0x1dc>
 80067bc:	2500      	movs	r5, #0
 80067be:	f104 0919 	add.w	r9, r4, #25
 80067c2:	e7f5      	b.n	80067b0 <_printf_i+0x1f8>
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d1ac      	bne.n	8006722 <_printf_i+0x16a>
 80067c8:	7803      	ldrb	r3, [r0, #0]
 80067ca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80067ce:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80067d2:	e76c      	b.n	80066ae <_printf_i+0xf6>
 80067d4:	08006b3d 	.word	0x08006b3d
 80067d8:	08006b4e 	.word	0x08006b4e

080067dc <memcpy>:
 80067dc:	b510      	push	{r4, lr}
 80067de:	1e43      	subs	r3, r0, #1
 80067e0:	440a      	add	r2, r1
 80067e2:	4291      	cmp	r1, r2
 80067e4:	d100      	bne.n	80067e8 <memcpy+0xc>
 80067e6:	bd10      	pop	{r4, pc}
 80067e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80067ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 80067f0:	e7f7      	b.n	80067e2 <memcpy+0x6>

080067f2 <memmove>:
 80067f2:	4288      	cmp	r0, r1
 80067f4:	b510      	push	{r4, lr}
 80067f6:	eb01 0302 	add.w	r3, r1, r2
 80067fa:	d807      	bhi.n	800680c <memmove+0x1a>
 80067fc:	1e42      	subs	r2, r0, #1
 80067fe:	4299      	cmp	r1, r3
 8006800:	d00a      	beq.n	8006818 <memmove+0x26>
 8006802:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006806:	f802 4f01 	strb.w	r4, [r2, #1]!
 800680a:	e7f8      	b.n	80067fe <memmove+0xc>
 800680c:	4283      	cmp	r3, r0
 800680e:	d9f5      	bls.n	80067fc <memmove+0xa>
 8006810:	1881      	adds	r1, r0, r2
 8006812:	1ad2      	subs	r2, r2, r3
 8006814:	42d3      	cmn	r3, r2
 8006816:	d100      	bne.n	800681a <memmove+0x28>
 8006818:	bd10      	pop	{r4, pc}
 800681a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800681e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006822:	e7f7      	b.n	8006814 <memmove+0x22>

08006824 <_free_r>:
 8006824:	b538      	push	{r3, r4, r5, lr}
 8006826:	4605      	mov	r5, r0
 8006828:	2900      	cmp	r1, #0
 800682a:	d045      	beq.n	80068b8 <_free_r+0x94>
 800682c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006830:	1f0c      	subs	r4, r1, #4
 8006832:	2b00      	cmp	r3, #0
 8006834:	bfb8      	it	lt
 8006836:	18e4      	addlt	r4, r4, r3
 8006838:	f000 f8d2 	bl	80069e0 <__malloc_lock>
 800683c:	4a1f      	ldr	r2, [pc, #124]	; (80068bc <_free_r+0x98>)
 800683e:	6813      	ldr	r3, [r2, #0]
 8006840:	4610      	mov	r0, r2
 8006842:	b933      	cbnz	r3, 8006852 <_free_r+0x2e>
 8006844:	6063      	str	r3, [r4, #4]
 8006846:	6014      	str	r4, [r2, #0]
 8006848:	4628      	mov	r0, r5
 800684a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800684e:	f000 b8c8 	b.w	80069e2 <__malloc_unlock>
 8006852:	42a3      	cmp	r3, r4
 8006854:	d90c      	bls.n	8006870 <_free_r+0x4c>
 8006856:	6821      	ldr	r1, [r4, #0]
 8006858:	1862      	adds	r2, r4, r1
 800685a:	4293      	cmp	r3, r2
 800685c:	bf04      	itt	eq
 800685e:	681a      	ldreq	r2, [r3, #0]
 8006860:	685b      	ldreq	r3, [r3, #4]
 8006862:	6063      	str	r3, [r4, #4]
 8006864:	bf04      	itt	eq
 8006866:	1852      	addeq	r2, r2, r1
 8006868:	6022      	streq	r2, [r4, #0]
 800686a:	6004      	str	r4, [r0, #0]
 800686c:	e7ec      	b.n	8006848 <_free_r+0x24>
 800686e:	4613      	mov	r3, r2
 8006870:	685a      	ldr	r2, [r3, #4]
 8006872:	b10a      	cbz	r2, 8006878 <_free_r+0x54>
 8006874:	42a2      	cmp	r2, r4
 8006876:	d9fa      	bls.n	800686e <_free_r+0x4a>
 8006878:	6819      	ldr	r1, [r3, #0]
 800687a:	1858      	adds	r0, r3, r1
 800687c:	42a0      	cmp	r0, r4
 800687e:	d10b      	bne.n	8006898 <_free_r+0x74>
 8006880:	6820      	ldr	r0, [r4, #0]
 8006882:	4401      	add	r1, r0
 8006884:	1858      	adds	r0, r3, r1
 8006886:	4282      	cmp	r2, r0
 8006888:	6019      	str	r1, [r3, #0]
 800688a:	d1dd      	bne.n	8006848 <_free_r+0x24>
 800688c:	6810      	ldr	r0, [r2, #0]
 800688e:	6852      	ldr	r2, [r2, #4]
 8006890:	605a      	str	r2, [r3, #4]
 8006892:	4401      	add	r1, r0
 8006894:	6019      	str	r1, [r3, #0]
 8006896:	e7d7      	b.n	8006848 <_free_r+0x24>
 8006898:	d902      	bls.n	80068a0 <_free_r+0x7c>
 800689a:	230c      	movs	r3, #12
 800689c:	602b      	str	r3, [r5, #0]
 800689e:	e7d3      	b.n	8006848 <_free_r+0x24>
 80068a0:	6820      	ldr	r0, [r4, #0]
 80068a2:	1821      	adds	r1, r4, r0
 80068a4:	428a      	cmp	r2, r1
 80068a6:	bf04      	itt	eq
 80068a8:	6811      	ldreq	r1, [r2, #0]
 80068aa:	6852      	ldreq	r2, [r2, #4]
 80068ac:	6062      	str	r2, [r4, #4]
 80068ae:	bf04      	itt	eq
 80068b0:	1809      	addeq	r1, r1, r0
 80068b2:	6021      	streq	r1, [r4, #0]
 80068b4:	605c      	str	r4, [r3, #4]
 80068b6:	e7c7      	b.n	8006848 <_free_r+0x24>
 80068b8:	bd38      	pop	{r3, r4, r5, pc}
 80068ba:	bf00      	nop
 80068bc:	20000110 	.word	0x20000110

080068c0 <_malloc_r>:
 80068c0:	b570      	push	{r4, r5, r6, lr}
 80068c2:	1ccd      	adds	r5, r1, #3
 80068c4:	f025 0503 	bic.w	r5, r5, #3
 80068c8:	3508      	adds	r5, #8
 80068ca:	2d0c      	cmp	r5, #12
 80068cc:	bf38      	it	cc
 80068ce:	250c      	movcc	r5, #12
 80068d0:	2d00      	cmp	r5, #0
 80068d2:	4606      	mov	r6, r0
 80068d4:	db01      	blt.n	80068da <_malloc_r+0x1a>
 80068d6:	42a9      	cmp	r1, r5
 80068d8:	d903      	bls.n	80068e2 <_malloc_r+0x22>
 80068da:	230c      	movs	r3, #12
 80068dc:	6033      	str	r3, [r6, #0]
 80068de:	2000      	movs	r0, #0
 80068e0:	bd70      	pop	{r4, r5, r6, pc}
 80068e2:	f000 f87d 	bl	80069e0 <__malloc_lock>
 80068e6:	4a21      	ldr	r2, [pc, #132]	; (800696c <_malloc_r+0xac>)
 80068e8:	6814      	ldr	r4, [r2, #0]
 80068ea:	4621      	mov	r1, r4
 80068ec:	b991      	cbnz	r1, 8006914 <_malloc_r+0x54>
 80068ee:	4c20      	ldr	r4, [pc, #128]	; (8006970 <_malloc_r+0xb0>)
 80068f0:	6823      	ldr	r3, [r4, #0]
 80068f2:	b91b      	cbnz	r3, 80068fc <_malloc_r+0x3c>
 80068f4:	4630      	mov	r0, r6
 80068f6:	f000 f863 	bl	80069c0 <_sbrk_r>
 80068fa:	6020      	str	r0, [r4, #0]
 80068fc:	4629      	mov	r1, r5
 80068fe:	4630      	mov	r0, r6
 8006900:	f000 f85e 	bl	80069c0 <_sbrk_r>
 8006904:	1c43      	adds	r3, r0, #1
 8006906:	d124      	bne.n	8006952 <_malloc_r+0x92>
 8006908:	230c      	movs	r3, #12
 800690a:	6033      	str	r3, [r6, #0]
 800690c:	4630      	mov	r0, r6
 800690e:	f000 f868 	bl	80069e2 <__malloc_unlock>
 8006912:	e7e4      	b.n	80068de <_malloc_r+0x1e>
 8006914:	680b      	ldr	r3, [r1, #0]
 8006916:	1b5b      	subs	r3, r3, r5
 8006918:	d418      	bmi.n	800694c <_malloc_r+0x8c>
 800691a:	2b0b      	cmp	r3, #11
 800691c:	d90f      	bls.n	800693e <_malloc_r+0x7e>
 800691e:	600b      	str	r3, [r1, #0]
 8006920:	50cd      	str	r5, [r1, r3]
 8006922:	18cc      	adds	r4, r1, r3
 8006924:	4630      	mov	r0, r6
 8006926:	f000 f85c 	bl	80069e2 <__malloc_unlock>
 800692a:	f104 000b 	add.w	r0, r4, #11
 800692e:	1d23      	adds	r3, r4, #4
 8006930:	f020 0007 	bic.w	r0, r0, #7
 8006934:	1ac3      	subs	r3, r0, r3
 8006936:	d0d3      	beq.n	80068e0 <_malloc_r+0x20>
 8006938:	425a      	negs	r2, r3
 800693a:	50e2      	str	r2, [r4, r3]
 800693c:	e7d0      	b.n	80068e0 <_malloc_r+0x20>
 800693e:	428c      	cmp	r4, r1
 8006940:	684b      	ldr	r3, [r1, #4]
 8006942:	bf16      	itet	ne
 8006944:	6063      	strne	r3, [r4, #4]
 8006946:	6013      	streq	r3, [r2, #0]
 8006948:	460c      	movne	r4, r1
 800694a:	e7eb      	b.n	8006924 <_malloc_r+0x64>
 800694c:	460c      	mov	r4, r1
 800694e:	6849      	ldr	r1, [r1, #4]
 8006950:	e7cc      	b.n	80068ec <_malloc_r+0x2c>
 8006952:	1cc4      	adds	r4, r0, #3
 8006954:	f024 0403 	bic.w	r4, r4, #3
 8006958:	42a0      	cmp	r0, r4
 800695a:	d005      	beq.n	8006968 <_malloc_r+0xa8>
 800695c:	1a21      	subs	r1, r4, r0
 800695e:	4630      	mov	r0, r6
 8006960:	f000 f82e 	bl	80069c0 <_sbrk_r>
 8006964:	3001      	adds	r0, #1
 8006966:	d0cf      	beq.n	8006908 <_malloc_r+0x48>
 8006968:	6025      	str	r5, [r4, #0]
 800696a:	e7db      	b.n	8006924 <_malloc_r+0x64>
 800696c:	20000110 	.word	0x20000110
 8006970:	20000114 	.word	0x20000114

08006974 <_realloc_r>:
 8006974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006976:	4607      	mov	r7, r0
 8006978:	4614      	mov	r4, r2
 800697a:	460e      	mov	r6, r1
 800697c:	b921      	cbnz	r1, 8006988 <_realloc_r+0x14>
 800697e:	4611      	mov	r1, r2
 8006980:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006984:	f7ff bf9c 	b.w	80068c0 <_malloc_r>
 8006988:	b922      	cbnz	r2, 8006994 <_realloc_r+0x20>
 800698a:	f7ff ff4b 	bl	8006824 <_free_r>
 800698e:	4625      	mov	r5, r4
 8006990:	4628      	mov	r0, r5
 8006992:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006994:	f000 f826 	bl	80069e4 <_malloc_usable_size_r>
 8006998:	42a0      	cmp	r0, r4
 800699a:	d20f      	bcs.n	80069bc <_realloc_r+0x48>
 800699c:	4621      	mov	r1, r4
 800699e:	4638      	mov	r0, r7
 80069a0:	f7ff ff8e 	bl	80068c0 <_malloc_r>
 80069a4:	4605      	mov	r5, r0
 80069a6:	2800      	cmp	r0, #0
 80069a8:	d0f2      	beq.n	8006990 <_realloc_r+0x1c>
 80069aa:	4631      	mov	r1, r6
 80069ac:	4622      	mov	r2, r4
 80069ae:	f7ff ff15 	bl	80067dc <memcpy>
 80069b2:	4631      	mov	r1, r6
 80069b4:	4638      	mov	r0, r7
 80069b6:	f7ff ff35 	bl	8006824 <_free_r>
 80069ba:	e7e9      	b.n	8006990 <_realloc_r+0x1c>
 80069bc:	4635      	mov	r5, r6
 80069be:	e7e7      	b.n	8006990 <_realloc_r+0x1c>

080069c0 <_sbrk_r>:
 80069c0:	b538      	push	{r3, r4, r5, lr}
 80069c2:	4c06      	ldr	r4, [pc, #24]	; (80069dc <_sbrk_r+0x1c>)
 80069c4:	2300      	movs	r3, #0
 80069c6:	4605      	mov	r5, r0
 80069c8:	4608      	mov	r0, r1
 80069ca:	6023      	str	r3, [r4, #0]
 80069cc:	f7fb f99a 	bl	8001d04 <_sbrk>
 80069d0:	1c43      	adds	r3, r0, #1
 80069d2:	d102      	bne.n	80069da <_sbrk_r+0x1a>
 80069d4:	6823      	ldr	r3, [r4, #0]
 80069d6:	b103      	cbz	r3, 80069da <_sbrk_r+0x1a>
 80069d8:	602b      	str	r3, [r5, #0]
 80069da:	bd38      	pop	{r3, r4, r5, pc}
 80069dc:	200002dc 	.word	0x200002dc

080069e0 <__malloc_lock>:
 80069e0:	4770      	bx	lr

080069e2 <__malloc_unlock>:
 80069e2:	4770      	bx	lr

080069e4 <_malloc_usable_size_r>:
 80069e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80069e8:	1f18      	subs	r0, r3, #4
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	bfbc      	itt	lt
 80069ee:	580b      	ldrlt	r3, [r1, r0]
 80069f0:	18c0      	addlt	r0, r0, r3
 80069f2:	4770      	bx	lr

080069f4 <_init>:
 80069f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069f6:	bf00      	nop
 80069f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069fa:	bc08      	pop	{r3}
 80069fc:	469e      	mov	lr, r3
 80069fe:	4770      	bx	lr

08006a00 <_fini>:
 8006a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a02:	bf00      	nop
 8006a04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a06:	bc08      	pop	{r3}
 8006a08:	469e      	mov	lr, r3
 8006a0a:	4770      	bx	lr
