
lab10.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050e8  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08005280  08005280  00015280  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080052a0  080052a0  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  080052a0  080052a0  000152a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080052a8  080052a8  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080052a8  080052a8  000152a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080052ac  080052ac  000152ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  080052b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000020c  20000018  080052c8  00020018  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000224  080052c8  00020224  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f488  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002078  00000000  00000000  0002f4d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f90  00000000  00000000  00031548  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e88  00000000  00000000  000324d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000175fa  00000000  00000000  00033360  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b416  00000000  00000000  0004a95a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00094138  00000000  00000000  00055d70  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e9ea8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000429c  00000000  00000000  000e9f24  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000018 	.word	0x20000018
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08005268 	.word	0x08005268

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000001c 	.word	0x2000001c
 80001d4:	08005268 	.word	0x08005268

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_d2f>:
 8000550:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000554:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000558:	bf24      	itt	cs
 800055a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800055e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000562:	d90d      	bls.n	8000580 <__aeabi_d2f+0x30>
 8000564:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000568:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 800056c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000570:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000574:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000578:	bf08      	it	eq
 800057a:	f020 0001 	biceq.w	r0, r0, #1
 800057e:	4770      	bx	lr
 8000580:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000584:	d121      	bne.n	80005ca <__aeabi_d2f+0x7a>
 8000586:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800058a:	bfbc      	itt	lt
 800058c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000590:	4770      	bxlt	lr
 8000592:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000596:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800059a:	f1c2 0218 	rsb	r2, r2, #24
 800059e:	f1c2 0c20 	rsb	ip, r2, #32
 80005a2:	fa10 f30c 	lsls.w	r3, r0, ip
 80005a6:	fa20 f002 	lsr.w	r0, r0, r2
 80005aa:	bf18      	it	ne
 80005ac:	f040 0001 	orrne.w	r0, r0, #1
 80005b0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80005b4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80005b8:	fa03 fc0c 	lsl.w	ip, r3, ip
 80005bc:	ea40 000c 	orr.w	r0, r0, ip
 80005c0:	fa23 f302 	lsr.w	r3, r3, r2
 80005c4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80005c8:	e7cc      	b.n	8000564 <__aeabi_d2f+0x14>
 80005ca:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80005ce:	d107      	bne.n	80005e0 <__aeabi_d2f+0x90>
 80005d0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80005d4:	bf1e      	ittt	ne
 80005d6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80005da:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80005de:	4770      	bxne	lr
 80005e0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80005e4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80005e8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <__aeabi_uldivmod>:
 80005f0:	b953      	cbnz	r3, 8000608 <__aeabi_uldivmod+0x18>
 80005f2:	b94a      	cbnz	r2, 8000608 <__aeabi_uldivmod+0x18>
 80005f4:	2900      	cmp	r1, #0
 80005f6:	bf08      	it	eq
 80005f8:	2800      	cmpeq	r0, #0
 80005fa:	bf1c      	itt	ne
 80005fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000600:	f04f 30ff 	movne.w	r0, #4294967295
 8000604:	f000 b972 	b.w	80008ec <__aeabi_idiv0>
 8000608:	f1ad 0c08 	sub.w	ip, sp, #8
 800060c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000610:	f000 f806 	bl	8000620 <__udivmoddi4>
 8000614:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000618:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800061c:	b004      	add	sp, #16
 800061e:	4770      	bx	lr

08000620 <__udivmoddi4>:
 8000620:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000624:	9e08      	ldr	r6, [sp, #32]
 8000626:	4604      	mov	r4, r0
 8000628:	4688      	mov	r8, r1
 800062a:	2b00      	cmp	r3, #0
 800062c:	d14b      	bne.n	80006c6 <__udivmoddi4+0xa6>
 800062e:	428a      	cmp	r2, r1
 8000630:	4615      	mov	r5, r2
 8000632:	d967      	bls.n	8000704 <__udivmoddi4+0xe4>
 8000634:	fab2 f282 	clz	r2, r2
 8000638:	b14a      	cbz	r2, 800064e <__udivmoddi4+0x2e>
 800063a:	f1c2 0720 	rsb	r7, r2, #32
 800063e:	fa01 f302 	lsl.w	r3, r1, r2
 8000642:	fa20 f707 	lsr.w	r7, r0, r7
 8000646:	4095      	lsls	r5, r2
 8000648:	ea47 0803 	orr.w	r8, r7, r3
 800064c:	4094      	lsls	r4, r2
 800064e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000652:	0c23      	lsrs	r3, r4, #16
 8000654:	fbb8 f7fe 	udiv	r7, r8, lr
 8000658:	fa1f fc85 	uxth.w	ip, r5
 800065c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000660:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000664:	fb07 f10c 	mul.w	r1, r7, ip
 8000668:	4299      	cmp	r1, r3
 800066a:	d909      	bls.n	8000680 <__udivmoddi4+0x60>
 800066c:	18eb      	adds	r3, r5, r3
 800066e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000672:	f080 811b 	bcs.w	80008ac <__udivmoddi4+0x28c>
 8000676:	4299      	cmp	r1, r3
 8000678:	f240 8118 	bls.w	80008ac <__udivmoddi4+0x28c>
 800067c:	3f02      	subs	r7, #2
 800067e:	442b      	add	r3, r5
 8000680:	1a5b      	subs	r3, r3, r1
 8000682:	b2a4      	uxth	r4, r4
 8000684:	fbb3 f0fe 	udiv	r0, r3, lr
 8000688:	fb0e 3310 	mls	r3, lr, r0, r3
 800068c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000690:	fb00 fc0c 	mul.w	ip, r0, ip
 8000694:	45a4      	cmp	ip, r4
 8000696:	d909      	bls.n	80006ac <__udivmoddi4+0x8c>
 8000698:	192c      	adds	r4, r5, r4
 800069a:	f100 33ff 	add.w	r3, r0, #4294967295
 800069e:	f080 8107 	bcs.w	80008b0 <__udivmoddi4+0x290>
 80006a2:	45a4      	cmp	ip, r4
 80006a4:	f240 8104 	bls.w	80008b0 <__udivmoddi4+0x290>
 80006a8:	3802      	subs	r0, #2
 80006aa:	442c      	add	r4, r5
 80006ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80006b0:	eba4 040c 	sub.w	r4, r4, ip
 80006b4:	2700      	movs	r7, #0
 80006b6:	b11e      	cbz	r6, 80006c0 <__udivmoddi4+0xa0>
 80006b8:	40d4      	lsrs	r4, r2
 80006ba:	2300      	movs	r3, #0
 80006bc:	e9c6 4300 	strd	r4, r3, [r6]
 80006c0:	4639      	mov	r1, r7
 80006c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006c6:	428b      	cmp	r3, r1
 80006c8:	d909      	bls.n	80006de <__udivmoddi4+0xbe>
 80006ca:	2e00      	cmp	r6, #0
 80006cc:	f000 80eb 	beq.w	80008a6 <__udivmoddi4+0x286>
 80006d0:	2700      	movs	r7, #0
 80006d2:	e9c6 0100 	strd	r0, r1, [r6]
 80006d6:	4638      	mov	r0, r7
 80006d8:	4639      	mov	r1, r7
 80006da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006de:	fab3 f783 	clz	r7, r3
 80006e2:	2f00      	cmp	r7, #0
 80006e4:	d147      	bne.n	8000776 <__udivmoddi4+0x156>
 80006e6:	428b      	cmp	r3, r1
 80006e8:	d302      	bcc.n	80006f0 <__udivmoddi4+0xd0>
 80006ea:	4282      	cmp	r2, r0
 80006ec:	f200 80fa 	bhi.w	80008e4 <__udivmoddi4+0x2c4>
 80006f0:	1a84      	subs	r4, r0, r2
 80006f2:	eb61 0303 	sbc.w	r3, r1, r3
 80006f6:	2001      	movs	r0, #1
 80006f8:	4698      	mov	r8, r3
 80006fa:	2e00      	cmp	r6, #0
 80006fc:	d0e0      	beq.n	80006c0 <__udivmoddi4+0xa0>
 80006fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000702:	e7dd      	b.n	80006c0 <__udivmoddi4+0xa0>
 8000704:	b902      	cbnz	r2, 8000708 <__udivmoddi4+0xe8>
 8000706:	deff      	udf	#255	; 0xff
 8000708:	fab2 f282 	clz	r2, r2
 800070c:	2a00      	cmp	r2, #0
 800070e:	f040 808f 	bne.w	8000830 <__udivmoddi4+0x210>
 8000712:	1b49      	subs	r1, r1, r5
 8000714:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000718:	fa1f f885 	uxth.w	r8, r5
 800071c:	2701      	movs	r7, #1
 800071e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000722:	0c23      	lsrs	r3, r4, #16
 8000724:	fb0e 111c 	mls	r1, lr, ip, r1
 8000728:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800072c:	fb08 f10c 	mul.w	r1, r8, ip
 8000730:	4299      	cmp	r1, r3
 8000732:	d907      	bls.n	8000744 <__udivmoddi4+0x124>
 8000734:	18eb      	adds	r3, r5, r3
 8000736:	f10c 30ff 	add.w	r0, ip, #4294967295
 800073a:	d202      	bcs.n	8000742 <__udivmoddi4+0x122>
 800073c:	4299      	cmp	r1, r3
 800073e:	f200 80cd 	bhi.w	80008dc <__udivmoddi4+0x2bc>
 8000742:	4684      	mov	ip, r0
 8000744:	1a59      	subs	r1, r3, r1
 8000746:	b2a3      	uxth	r3, r4
 8000748:	fbb1 f0fe 	udiv	r0, r1, lr
 800074c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000750:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000754:	fb08 f800 	mul.w	r8, r8, r0
 8000758:	45a0      	cmp	r8, r4
 800075a:	d907      	bls.n	800076c <__udivmoddi4+0x14c>
 800075c:	192c      	adds	r4, r5, r4
 800075e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000762:	d202      	bcs.n	800076a <__udivmoddi4+0x14a>
 8000764:	45a0      	cmp	r8, r4
 8000766:	f200 80b6 	bhi.w	80008d6 <__udivmoddi4+0x2b6>
 800076a:	4618      	mov	r0, r3
 800076c:	eba4 0408 	sub.w	r4, r4, r8
 8000770:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000774:	e79f      	b.n	80006b6 <__udivmoddi4+0x96>
 8000776:	f1c7 0c20 	rsb	ip, r7, #32
 800077a:	40bb      	lsls	r3, r7
 800077c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000780:	ea4e 0e03 	orr.w	lr, lr, r3
 8000784:	fa01 f407 	lsl.w	r4, r1, r7
 8000788:	fa20 f50c 	lsr.w	r5, r0, ip
 800078c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000790:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000794:	4325      	orrs	r5, r4
 8000796:	fbb3 f9f8 	udiv	r9, r3, r8
 800079a:	0c2c      	lsrs	r4, r5, #16
 800079c:	fb08 3319 	mls	r3, r8, r9, r3
 80007a0:	fa1f fa8e 	uxth.w	sl, lr
 80007a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80007a8:	fb09 f40a 	mul.w	r4, r9, sl
 80007ac:	429c      	cmp	r4, r3
 80007ae:	fa02 f207 	lsl.w	r2, r2, r7
 80007b2:	fa00 f107 	lsl.w	r1, r0, r7
 80007b6:	d90b      	bls.n	80007d0 <__udivmoddi4+0x1b0>
 80007b8:	eb1e 0303 	adds.w	r3, lr, r3
 80007bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80007c0:	f080 8087 	bcs.w	80008d2 <__udivmoddi4+0x2b2>
 80007c4:	429c      	cmp	r4, r3
 80007c6:	f240 8084 	bls.w	80008d2 <__udivmoddi4+0x2b2>
 80007ca:	f1a9 0902 	sub.w	r9, r9, #2
 80007ce:	4473      	add	r3, lr
 80007d0:	1b1b      	subs	r3, r3, r4
 80007d2:	b2ad      	uxth	r5, r5
 80007d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80007d8:	fb08 3310 	mls	r3, r8, r0, r3
 80007dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80007e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80007e4:	45a2      	cmp	sl, r4
 80007e6:	d908      	bls.n	80007fa <__udivmoddi4+0x1da>
 80007e8:	eb1e 0404 	adds.w	r4, lr, r4
 80007ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80007f0:	d26b      	bcs.n	80008ca <__udivmoddi4+0x2aa>
 80007f2:	45a2      	cmp	sl, r4
 80007f4:	d969      	bls.n	80008ca <__udivmoddi4+0x2aa>
 80007f6:	3802      	subs	r0, #2
 80007f8:	4474      	add	r4, lr
 80007fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80007fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000802:	eba4 040a 	sub.w	r4, r4, sl
 8000806:	454c      	cmp	r4, r9
 8000808:	46c2      	mov	sl, r8
 800080a:	464b      	mov	r3, r9
 800080c:	d354      	bcc.n	80008b8 <__udivmoddi4+0x298>
 800080e:	d051      	beq.n	80008b4 <__udivmoddi4+0x294>
 8000810:	2e00      	cmp	r6, #0
 8000812:	d069      	beq.n	80008e8 <__udivmoddi4+0x2c8>
 8000814:	ebb1 050a 	subs.w	r5, r1, sl
 8000818:	eb64 0403 	sbc.w	r4, r4, r3
 800081c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000820:	40fd      	lsrs	r5, r7
 8000822:	40fc      	lsrs	r4, r7
 8000824:	ea4c 0505 	orr.w	r5, ip, r5
 8000828:	e9c6 5400 	strd	r5, r4, [r6]
 800082c:	2700      	movs	r7, #0
 800082e:	e747      	b.n	80006c0 <__udivmoddi4+0xa0>
 8000830:	f1c2 0320 	rsb	r3, r2, #32
 8000834:	fa20 f703 	lsr.w	r7, r0, r3
 8000838:	4095      	lsls	r5, r2
 800083a:	fa01 f002 	lsl.w	r0, r1, r2
 800083e:	fa21 f303 	lsr.w	r3, r1, r3
 8000842:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000846:	4338      	orrs	r0, r7
 8000848:	0c01      	lsrs	r1, r0, #16
 800084a:	fbb3 f7fe 	udiv	r7, r3, lr
 800084e:	fa1f f885 	uxth.w	r8, r5
 8000852:	fb0e 3317 	mls	r3, lr, r7, r3
 8000856:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800085a:	fb07 f308 	mul.w	r3, r7, r8
 800085e:	428b      	cmp	r3, r1
 8000860:	fa04 f402 	lsl.w	r4, r4, r2
 8000864:	d907      	bls.n	8000876 <__udivmoddi4+0x256>
 8000866:	1869      	adds	r1, r5, r1
 8000868:	f107 3cff 	add.w	ip, r7, #4294967295
 800086c:	d22f      	bcs.n	80008ce <__udivmoddi4+0x2ae>
 800086e:	428b      	cmp	r3, r1
 8000870:	d92d      	bls.n	80008ce <__udivmoddi4+0x2ae>
 8000872:	3f02      	subs	r7, #2
 8000874:	4429      	add	r1, r5
 8000876:	1acb      	subs	r3, r1, r3
 8000878:	b281      	uxth	r1, r0
 800087a:	fbb3 f0fe 	udiv	r0, r3, lr
 800087e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000882:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000886:	fb00 f308 	mul.w	r3, r0, r8
 800088a:	428b      	cmp	r3, r1
 800088c:	d907      	bls.n	800089e <__udivmoddi4+0x27e>
 800088e:	1869      	adds	r1, r5, r1
 8000890:	f100 3cff 	add.w	ip, r0, #4294967295
 8000894:	d217      	bcs.n	80008c6 <__udivmoddi4+0x2a6>
 8000896:	428b      	cmp	r3, r1
 8000898:	d915      	bls.n	80008c6 <__udivmoddi4+0x2a6>
 800089a:	3802      	subs	r0, #2
 800089c:	4429      	add	r1, r5
 800089e:	1ac9      	subs	r1, r1, r3
 80008a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80008a4:	e73b      	b.n	800071e <__udivmoddi4+0xfe>
 80008a6:	4637      	mov	r7, r6
 80008a8:	4630      	mov	r0, r6
 80008aa:	e709      	b.n	80006c0 <__udivmoddi4+0xa0>
 80008ac:	4607      	mov	r7, r0
 80008ae:	e6e7      	b.n	8000680 <__udivmoddi4+0x60>
 80008b0:	4618      	mov	r0, r3
 80008b2:	e6fb      	b.n	80006ac <__udivmoddi4+0x8c>
 80008b4:	4541      	cmp	r1, r8
 80008b6:	d2ab      	bcs.n	8000810 <__udivmoddi4+0x1f0>
 80008b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80008bc:	eb69 020e 	sbc.w	r2, r9, lr
 80008c0:	3801      	subs	r0, #1
 80008c2:	4613      	mov	r3, r2
 80008c4:	e7a4      	b.n	8000810 <__udivmoddi4+0x1f0>
 80008c6:	4660      	mov	r0, ip
 80008c8:	e7e9      	b.n	800089e <__udivmoddi4+0x27e>
 80008ca:	4618      	mov	r0, r3
 80008cc:	e795      	b.n	80007fa <__udivmoddi4+0x1da>
 80008ce:	4667      	mov	r7, ip
 80008d0:	e7d1      	b.n	8000876 <__udivmoddi4+0x256>
 80008d2:	4681      	mov	r9, r0
 80008d4:	e77c      	b.n	80007d0 <__udivmoddi4+0x1b0>
 80008d6:	3802      	subs	r0, #2
 80008d8:	442c      	add	r4, r5
 80008da:	e747      	b.n	800076c <__udivmoddi4+0x14c>
 80008dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80008e0:	442b      	add	r3, r5
 80008e2:	e72f      	b.n	8000744 <__udivmoddi4+0x124>
 80008e4:	4638      	mov	r0, r7
 80008e6:	e708      	b.n	80006fa <__udivmoddi4+0xda>
 80008e8:	4637      	mov	r7, r6
 80008ea:	e6e9      	b.n	80006c0 <__udivmoddi4+0xa0>

080008ec <__aeabi_idiv0>:
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop

080008f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008f0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80008f4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008f6:	f000 fe2f 	bl	8001558 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008fa:	f000 f8cd 	bl	8000a98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008fe:	f000 fab7 	bl	8000e70 <MX_GPIO_Init>
  MX_DMA_Init();
 8000902:	f000 fa95 	bl	8000e30 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000906:	f000 fa69 	bl	8000ddc <MX_USART2_UART_Init>
  MX_SPI3_Init();
 800090a:	f000 f99b 	bl	8000c44 <MX_SPI3_Init>
  MX_ADC1_Init();
 800090e:	f000 f947 	bl	8000ba0 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000912:	f000 f9cf 	bl	8000cb4 <MX_TIM3_Init>
  MX_TIM11_Init();
 8000916:	f000 fa19 	bl	8000d4c <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim3);
 800091a:	484f      	ldr	r0, [pc, #316]	; (8000a58 <main+0x168>)
 800091c:	f003 faf3 	bl	8003f06 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim11);
 8000920:	484e      	ldr	r0, [pc, #312]	; (8000a5c <main+0x16c>)
 8000922:	f003 fb14 	bl	8003f4e <HAL_TIM_Base_Start_IT>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &ADCin, 1);
 8000926:	2201      	movs	r2, #1
 8000928:	494d      	ldr	r1, [pc, #308]	; (8000a60 <main+0x170>)
 800092a:	484e      	ldr	r0, [pc, #312]	; (8000a64 <main+0x174>)
 800092c:	f001 f80a 	bl	8001944 <HAL_ADC_Start_DMA>

	HAL_GPIO_WritePin(LOAD_GPIO_Port, LOAD_Pin, GPIO_PIN_RESET);
 8000930:	2200      	movs	r2, #0
 8000932:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000936:	484c      	ldr	r0, [pc, #304]	; (8000a68 <main+0x178>)
 8000938:	f002 f9f6 	bl	8002d28 <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		static uint64_t timestamp = 0;
		if (micros() - timestamp > 100)
 800093c:	f000 fb96 	bl	800106c <micros>
 8000940:	460a      	mov	r2, r1
 8000942:	4601      	mov	r1, r0
 8000944:	4b49      	ldr	r3, [pc, #292]	; (8000a6c <main+0x17c>)
 8000946:	e9d3 bc00 	ldrd	fp, ip, [r3]
 800094a:	460b      	mov	r3, r1
 800094c:	4614      	mov	r4, r2
 800094e:	ebb3 030b 	subs.w	r3, r3, fp
 8000952:	eb64 040c 	sbc.w	r4, r4, ip
 8000956:	2c00      	cmp	r4, #0
 8000958:	bf08      	it	eq
 800095a:	2b65      	cmpeq	r3, #101	; 0x65
 800095c:	d3ee      	bcc.n	800093c <main+0x4c>
		{
			timestamp = micros();
 800095e:	f000 fb85 	bl	800106c <micros>
 8000962:	4603      	mov	r3, r0
 8000964:	460c      	mov	r4, r1
 8000966:	4a41      	ldr	r2, [pc, #260]	; (8000a6c <main+0x17c>)
 8000968:	e9c2 3400 	strd	r3, r4, [r2]
//		    m=(high-low)/period;
//		    if(m*x<=high)
//		    {dataOut=m*x;}
//		    else{dataOut=low;x=0;}

			period=1/fq;
 800096c:	4b40      	ldr	r3, [pc, #256]	; (8000a70 <main+0x180>)
 800096e:	ed93 7a00 	vldr	s14, [r3]
 8000972:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000976:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800097a:	4b3e      	ldr	r3, [pc, #248]	; (8000a74 <main+0x184>)
 800097c:	edc3 7a00 	vstr	s15, [r3]
			x+=0.0001;
 8000980:	4b3d      	ldr	r3, [pc, #244]	; (8000a78 <main+0x188>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4618      	mov	r0, r3
 8000986:	f7ff fd8b 	bl	80004a0 <__aeabi_f2d>
 800098a:	a331      	add	r3, pc, #196	; (adr r3, 8000a50 <main+0x160>)
 800098c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000990:	f7ff fc28 	bl	80001e4 <__adddf3>
 8000994:	4603      	mov	r3, r0
 8000996:	460c      	mov	r4, r1
 8000998:	4618      	mov	r0, r3
 800099a:	4621      	mov	r1, r4
 800099c:	f7ff fdd8 	bl	8000550 <__aeabi_d2f>
 80009a0:	4602      	mov	r2, r0
 80009a2:	4b35      	ldr	r3, [pc, #212]	; (8000a78 <main+0x188>)
 80009a4:	601a      	str	r2, [r3, #0]
			m=-1*(high-low)/period;
 80009a6:	4b35      	ldr	r3, [pc, #212]	; (8000a7c <main+0x18c>)
 80009a8:	ed93 7a00 	vldr	s14, [r3]
 80009ac:	4b34      	ldr	r3, [pc, #208]	; (8000a80 <main+0x190>)
 80009ae:	edd3 7a00 	vldr	s15, [r3]
 80009b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80009b6:	eef1 6a67 	vneg.f32	s13, s15
 80009ba:	4b2e      	ldr	r3, [pc, #184]	; (8000a74 <main+0x184>)
 80009bc:	ed93 7a00 	vldr	s14, [r3]
 80009c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80009c4:	4b2f      	ldr	r3, [pc, #188]	; (8000a84 <main+0x194>)
 80009c6:	edc3 7a00 	vstr	s15, [r3]
            if(dataOut<=low){dataOut=high;x=0;}
 80009ca:	4b2f      	ldr	r3, [pc, #188]	; (8000a88 <main+0x198>)
 80009cc:	ed93 7a00 	vldr	s14, [r3]
 80009d0:	4b2b      	ldr	r3, [pc, #172]	; (8000a80 <main+0x190>)
 80009d2:	edd3 7a00 	vldr	s15, [r3]
 80009d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80009da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009de:	d808      	bhi.n	80009f2 <main+0x102>
 80009e0:	4b26      	ldr	r3, [pc, #152]	; (8000a7c <main+0x18c>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a28      	ldr	r2, [pc, #160]	; (8000a88 <main+0x198>)
 80009e6:	6013      	str	r3, [r2, #0]
 80009e8:	4b23      	ldr	r3, [pc, #140]	; (8000a78 <main+0x188>)
 80009ea:	f04f 0200 	mov.w	r2, #0
 80009ee:	601a      	str	r2, [r3, #0]
 80009f0:	e00f      	b.n	8000a12 <main+0x122>
            else{dataOut=high+(m*x);}
 80009f2:	4b24      	ldr	r3, [pc, #144]	; (8000a84 <main+0x194>)
 80009f4:	ed93 7a00 	vldr	s14, [r3]
 80009f8:	4b1f      	ldr	r3, [pc, #124]	; (8000a78 <main+0x188>)
 80009fa:	edd3 7a00 	vldr	s15, [r3]
 80009fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000a02:	4b1e      	ldr	r3, [pc, #120]	; (8000a7c <main+0x18c>)
 8000a04:	edd3 7a00 	vldr	s15, [r3]
 8000a08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a0c:	4b1e      	ldr	r3, [pc, #120]	; (8000a88 <main+0x198>)
 8000a0e:	edc3 7a00 	vstr	s15, [r3]



			if (hspi3.State == HAL_SPI_STATE_READY&& HAL_GPIO_ReadPin(SPI_SS_GPIO_Port, SPI_SS_Pin)== GPIO_PIN_SET)
 8000a12:	4b1e      	ldr	r3, [pc, #120]	; (8000a8c <main+0x19c>)
 8000a14:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8000a18:	b2db      	uxtb	r3, r3
 8000a1a:	2b01      	cmp	r3, #1
 8000a1c:	d18e      	bne.n	800093c <main+0x4c>
 8000a1e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a22:	481b      	ldr	r0, [pc, #108]	; (8000a90 <main+0x1a0>)
 8000a24:	f002 f968 	bl	8002cf8 <HAL_GPIO_ReadPin>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b01      	cmp	r3, #1
 8000a2c:	d186      	bne.n	800093c <main+0x4c>
			{
			MCP4922SetOutput(DACConfig, dataOut);
 8000a2e:	4b19      	ldr	r3, [pc, #100]	; (8000a94 <main+0x1a4>)
 8000a30:	781a      	ldrb	r2, [r3, #0]
 8000a32:	4b15      	ldr	r3, [pc, #84]	; (8000a88 <main+0x198>)
 8000a34:	edd3 7a00 	vldr	s15, [r3]
 8000a38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a3c:	ee17 3a90 	vmov	r3, s15
 8000a40:	b29b      	uxth	r3, r3
 8000a42:	4619      	mov	r1, r3
 8000a44:	4610      	mov	r0, r2
 8000a46:	f000 fab3 	bl	8000fb0 <MCP4922SetOutput>
	{
 8000a4a:	e777      	b.n	800093c <main+0x4c>
 8000a4c:	f3af 8000 	nop.w
 8000a50:	eb1c432d 	.word	0xeb1c432d
 8000a54:	3f1a36e2 	.word	0x3f1a36e2
 8000a58:	20000060 	.word	0x20000060
 8000a5c:	20000140 	.word	0x20000140
 8000a60:	20000034 	.word	0x20000034
 8000a64:	200000f8 	.word	0x200000f8
 8000a68:	40020000 	.word	0x40020000
 8000a6c:	20000058 	.word	0x20000058
 8000a70:	20000000 	.word	0x20000000
 8000a74:	20000044 	.word	0x20000044
 8000a78:	20000050 	.word	0x20000050
 8000a7c:	20000004 	.word	0x20000004
 8000a80:	2000004c 	.word	0x2000004c
 8000a84:	20000048 	.word	0x20000048
 8000a88:	20000040 	.word	0x20000040
 8000a8c:	200000a0 	.word	0x200000a0
 8000a90:	40020400 	.word	0x40020400
 8000a94:	20000008 	.word	0x20000008

08000a98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b09a      	sub	sp, #104	; 0x68
 8000a9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a9e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000aa2:	2230      	movs	r2, #48	; 0x30
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f004 fbd6 	bl	8005258 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000aac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	601a      	str	r2, [r3, #0]
 8000ab4:	605a      	str	r2, [r3, #4]
 8000ab6:	609a      	str	r2, [r3, #8]
 8000ab8:	60da      	str	r2, [r3, #12]
 8000aba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000abc:	f107 030c 	add.w	r3, r7, #12
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	601a      	str	r2, [r3, #0]
 8000ac4:	605a      	str	r2, [r3, #4]
 8000ac6:	609a      	str	r2, [r3, #8]
 8000ac8:	60da      	str	r2, [r3, #12]
 8000aca:	611a      	str	r2, [r3, #16]
 8000acc:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ace:	2300      	movs	r3, #0
 8000ad0:	60bb      	str	r3, [r7, #8]
 8000ad2:	4b31      	ldr	r3, [pc, #196]	; (8000b98 <SystemClock_Config+0x100>)
 8000ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad6:	4a30      	ldr	r2, [pc, #192]	; (8000b98 <SystemClock_Config+0x100>)
 8000ad8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000adc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ade:	4b2e      	ldr	r3, [pc, #184]	; (8000b98 <SystemClock_Config+0x100>)
 8000ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ae6:	60bb      	str	r3, [r7, #8]
 8000ae8:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000aea:	2300      	movs	r3, #0
 8000aec:	607b      	str	r3, [r7, #4]
 8000aee:	4b2b      	ldr	r3, [pc, #172]	; (8000b9c <SystemClock_Config+0x104>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	4a2a      	ldr	r2, [pc, #168]	; (8000b9c <SystemClock_Config+0x104>)
 8000af4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000af8:	6013      	str	r3, [r2, #0]
 8000afa:	4b28      	ldr	r3, [pc, #160]	; (8000b9c <SystemClock_Config+0x104>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b02:	607b      	str	r3, [r7, #4]
 8000b04:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000b06:	2303      	movs	r3, #3
 8000b08:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b0a:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b10:	2301      	movs	r3, #1
 8000b12:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b14:	2310      	movs	r3, #16
 8000b16:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b18:	2302      	movs	r3, #2
 8000b1a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000b20:	2308      	movs	r3, #8
 8000b22:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000b24:	2364      	movs	r3, #100	; 0x64
 8000b26:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b28:	2302      	movs	r3, #2
 8000b2a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b2c:	2304      	movs	r3, #4
 8000b2e:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b30:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000b34:	4618      	mov	r0, r3
 8000b36:	f002 f911 	bl	8002d5c <HAL_RCC_OscConfig>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000b40:	f000 faae 	bl	80010a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b44:	230f      	movs	r3, #15
 8000b46:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b48:	2302      	movs	r3, #2
 8000b4a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b54:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b56:	2300      	movs	r3, #0
 8000b58:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000b5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b5e:	2103      	movs	r1, #3
 8000b60:	4618      	mov	r0, r3
 8000b62:	f002 fb6b 	bl	800323c <HAL_RCC_ClockConfig>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8000b6c:	f000 fa98 	bl	80010a0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000b70:	2302      	movs	r3, #2
 8000b72:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000b74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b78:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b7a:	f107 030c 	add.w	r3, r7, #12
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f002 fd4e 	bl	8003620 <HAL_RCCEx_PeriphCLKConfig>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8000b8a:	f000 fa89 	bl	80010a0 <Error_Handler>
  }
}
 8000b8e:	bf00      	nop
 8000b90:	3768      	adds	r7, #104	; 0x68
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	40023800 	.word	0x40023800
 8000b9c:	40007000 	.word	0x40007000

08000ba0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b084      	sub	sp, #16
 8000ba4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ba6:	463b      	mov	r3, r7
 8000ba8:	2200      	movs	r2, #0
 8000baa:	601a      	str	r2, [r3, #0]
 8000bac:	605a      	str	r2, [r3, #4]
 8000bae:	609a      	str	r2, [r3, #8]
 8000bb0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000bb2:	4b22      	ldr	r3, [pc, #136]	; (8000c3c <MX_ADC1_Init+0x9c>)
 8000bb4:	4a22      	ldr	r2, [pc, #136]	; (8000c40 <MX_ADC1_Init+0xa0>)
 8000bb6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000bb8:	4b20      	ldr	r3, [pc, #128]	; (8000c3c <MX_ADC1_Init+0x9c>)
 8000bba:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000bbe:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000bc0:	4b1e      	ldr	r3, [pc, #120]	; (8000c3c <MX_ADC1_Init+0x9c>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000bc6:	4b1d      	ldr	r3, [pc, #116]	; (8000c3c <MX_ADC1_Init+0x9c>)
 8000bc8:	2201      	movs	r2, #1
 8000bca:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000bcc:	4b1b      	ldr	r3, [pc, #108]	; (8000c3c <MX_ADC1_Init+0x9c>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000bd2:	4b1a      	ldr	r3, [pc, #104]	; (8000c3c <MX_ADC1_Init+0x9c>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000bda:	4b18      	ldr	r3, [pc, #96]	; (8000c3c <MX_ADC1_Init+0x9c>)
 8000bdc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000be0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8000be2:	4b16      	ldr	r3, [pc, #88]	; (8000c3c <MX_ADC1_Init+0x9c>)
 8000be4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000be8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000bea:	4b14      	ldr	r3, [pc, #80]	; (8000c3c <MX_ADC1_Init+0x9c>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000bf0:	4b12      	ldr	r3, [pc, #72]	; (8000c3c <MX_ADC1_Init+0x9c>)
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000bf6:	4b11      	ldr	r3, [pc, #68]	; (8000c3c <MX_ADC1_Init+0x9c>)
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bfe:	4b0f      	ldr	r3, [pc, #60]	; (8000c3c <MX_ADC1_Init+0x9c>)
 8000c00:	2201      	movs	r2, #1
 8000c02:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c04:	480d      	ldr	r0, [pc, #52]	; (8000c3c <MX_ADC1_Init+0x9c>)
 8000c06:	f000 fd19 	bl	800163c <HAL_ADC_Init>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000c10:	f000 fa46 	bl	80010a0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000c14:	2300      	movs	r3, #0
 8000c16:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c20:	463b      	mov	r3, r7
 8000c22:	4619      	mov	r1, r3
 8000c24:	4805      	ldr	r0, [pc, #20]	; (8000c3c <MX_ADC1_Init+0x9c>)
 8000c26:	f000 ff89 	bl	8001b3c <HAL_ADC_ConfigChannel>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000c30:	f000 fa36 	bl	80010a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c34:	bf00      	nop
 8000c36:	3710      	adds	r7, #16
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	200000f8 	.word	0x200000f8
 8000c40:	40012000 	.word	0x40012000

08000c44 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000c48:	4b18      	ldr	r3, [pc, #96]	; (8000cac <MX_SPI3_Init+0x68>)
 8000c4a:	4a19      	ldr	r2, [pc, #100]	; (8000cb0 <MX_SPI3_Init+0x6c>)
 8000c4c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000c4e:	4b17      	ldr	r3, [pc, #92]	; (8000cac <MX_SPI3_Init+0x68>)
 8000c50:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c54:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000c56:	4b15      	ldr	r3, [pc, #84]	; (8000cac <MX_SPI3_Init+0x68>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8000c5c:	4b13      	ldr	r3, [pc, #76]	; (8000cac <MX_SPI3_Init+0x68>)
 8000c5e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c62:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c64:	4b11      	ldr	r3, [pc, #68]	; (8000cac <MX_SPI3_Init+0x68>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c6a:	4b10      	ldr	r3, [pc, #64]	; (8000cac <MX_SPI3_Init+0x68>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000c70:	4b0e      	ldr	r3, [pc, #56]	; (8000cac <MX_SPI3_Init+0x68>)
 8000c72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c76:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000c78:	4b0c      	ldr	r3, [pc, #48]	; (8000cac <MX_SPI3_Init+0x68>)
 8000c7a:	2208      	movs	r2, #8
 8000c7c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c7e:	4b0b      	ldr	r3, [pc, #44]	; (8000cac <MX_SPI3_Init+0x68>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c84:	4b09      	ldr	r3, [pc, #36]	; (8000cac <MX_SPI3_Init+0x68>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c8a:	4b08      	ldr	r3, [pc, #32]	; (8000cac <MX_SPI3_Init+0x68>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000c90:	4b06      	ldr	r3, [pc, #24]	; (8000cac <MX_SPI3_Init+0x68>)
 8000c92:	220a      	movs	r2, #10
 8000c94:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000c96:	4805      	ldr	r0, [pc, #20]	; (8000cac <MX_SPI3_Init+0x68>)
 8000c98:	f002 fdb2 	bl	8003800 <HAL_SPI_Init>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <MX_SPI3_Init+0x62>
  {
    Error_Handler();
 8000ca2:	f000 f9fd 	bl	80010a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000ca6:	bf00      	nop
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	200000a0 	.word	0x200000a0
 8000cb0:	40003c00 	.word	0x40003c00

08000cb4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b086      	sub	sp, #24
 8000cb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cba:	f107 0308 	add.w	r3, r7, #8
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	601a      	str	r2, [r3, #0]
 8000cc2:	605a      	str	r2, [r3, #4]
 8000cc4:	609a      	str	r2, [r3, #8]
 8000cc6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cc8:	463b      	mov	r3, r7
 8000cca:	2200      	movs	r2, #0
 8000ccc:	601a      	str	r2, [r3, #0]
 8000cce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000cd0:	4b1c      	ldr	r3, [pc, #112]	; (8000d44 <MX_TIM3_Init+0x90>)
 8000cd2:	4a1d      	ldr	r2, [pc, #116]	; (8000d48 <MX_TIM3_Init+0x94>)
 8000cd4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 99;
 8000cd6:	4b1b      	ldr	r3, [pc, #108]	; (8000d44 <MX_TIM3_Init+0x90>)
 8000cd8:	2263      	movs	r2, #99	; 0x63
 8000cda:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cdc:	4b19      	ldr	r3, [pc, #100]	; (8000d44 <MX_TIM3_Init+0x90>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8000ce2:	4b18      	ldr	r3, [pc, #96]	; (8000d44 <MX_TIM3_Init+0x90>)
 8000ce4:	2264      	movs	r2, #100	; 0x64
 8000ce6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ce8:	4b16      	ldr	r3, [pc, #88]	; (8000d44 <MX_TIM3_Init+0x90>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cee:	4b15      	ldr	r3, [pc, #84]	; (8000d44 <MX_TIM3_Init+0x90>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000cf4:	4813      	ldr	r0, [pc, #76]	; (8000d44 <MX_TIM3_Init+0x90>)
 8000cf6:	f003 f8db 	bl	8003eb0 <HAL_TIM_Base_Init>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8000d00:	f000 f9ce 	bl	80010a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d08:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000d0a:	f107 0308 	add.w	r3, r7, #8
 8000d0e:	4619      	mov	r1, r3
 8000d10:	480c      	ldr	r0, [pc, #48]	; (8000d44 <MX_TIM3_Init+0x90>)
 8000d12:	f003 fb19 	bl	8004348 <HAL_TIM_ConfigClockSource>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8000d1c:	f000 f9c0 	bl	80010a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000d20:	2320      	movs	r3, #32
 8000d22:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d24:	2300      	movs	r3, #0
 8000d26:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d28:	463b      	mov	r3, r7
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	4805      	ldr	r0, [pc, #20]	; (8000d44 <MX_TIM3_Init+0x90>)
 8000d2e:	f003 fe23 	bl	8004978 <HAL_TIMEx_MasterConfigSynchronization>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8000d38:	f000 f9b2 	bl	80010a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000d3c:	bf00      	nop
 8000d3e:	3718      	adds	r7, #24
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	20000060 	.word	0x20000060
 8000d48:	40000400 	.word	0x40000400

08000d4c <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b084      	sub	sp, #16
 8000d50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 8000d52:	463b      	mov	r3, r7
 8000d54:	2200      	movs	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]
 8000d58:	605a      	str	r2, [r3, #4]
 8000d5a:	609a      	str	r2, [r3, #8]
 8000d5c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8000d5e:	4b1d      	ldr	r3, [pc, #116]	; (8000dd4 <MX_TIM11_Init+0x88>)
 8000d60:	4a1d      	ldr	r2, [pc, #116]	; (8000dd8 <MX_TIM11_Init+0x8c>)
 8000d62:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 8000d64:	4b1b      	ldr	r3, [pc, #108]	; (8000dd4 <MX_TIM11_Init+0x88>)
 8000d66:	2263      	movs	r2, #99	; 0x63
 8000d68:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d6a:	4b1a      	ldr	r3, [pc, #104]	; (8000dd4 <MX_TIM11_Init+0x88>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8000d70:	4b18      	ldr	r3, [pc, #96]	; (8000dd4 <MX_TIM11_Init+0x88>)
 8000d72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d76:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d78:	4b16      	ldr	r3, [pc, #88]	; (8000dd4 <MX_TIM11_Init+0x88>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d7e:	4b15      	ldr	r3, [pc, #84]	; (8000dd4 <MX_TIM11_Init+0x88>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8000d84:	4813      	ldr	r0, [pc, #76]	; (8000dd4 <MX_TIM11_Init+0x88>)
 8000d86:	f003 f893 	bl	8003eb0 <HAL_TIM_Base_Init>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <MX_TIM11_Init+0x48>
  {
    Error_Handler();
 8000d90:	f000 f986 	bl	80010a0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim11) != HAL_OK)
 8000d94:	480f      	ldr	r0, [pc, #60]	; (8000dd4 <MX_TIM11_Init+0x88>)
 8000d96:	f003 f8fe 	bl	8003f96 <HAL_TIM_IC_Init>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <MX_TIM11_Init+0x58>
  {
    Error_Handler();
 8000da0:	f000 f97e 	bl	80010a0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000da4:	2300      	movs	r3, #0
 8000da6:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000da8:	2301      	movs	r3, #1
 8000daa:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000dac:	2300      	movs	r3, #0
 8000dae:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000db0:	2300      	movs	r3, #0
 8000db2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim11, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000db4:	463b      	mov	r3, r7
 8000db6:	2200      	movs	r2, #0
 8000db8:	4619      	mov	r1, r3
 8000dba:	4806      	ldr	r0, [pc, #24]	; (8000dd4 <MX_TIM11_Init+0x88>)
 8000dbc:	f003 fa28 	bl	8004210 <HAL_TIM_IC_ConfigChannel>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <MX_TIM11_Init+0x7e>
  {
    Error_Handler();
 8000dc6:	f000 f96b 	bl	80010a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8000dca:	bf00      	nop
 8000dcc:	3710      	adds	r7, #16
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	20000140 	.word	0x20000140
 8000dd8:	40014800 	.word	0x40014800

08000ddc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000de0:	4b11      	ldr	r3, [pc, #68]	; (8000e28 <MX_USART2_UART_Init+0x4c>)
 8000de2:	4a12      	ldr	r2, [pc, #72]	; (8000e2c <MX_USART2_UART_Init+0x50>)
 8000de4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000de6:	4b10      	ldr	r3, [pc, #64]	; (8000e28 <MX_USART2_UART_Init+0x4c>)
 8000de8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000dec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000dee:	4b0e      	ldr	r3, [pc, #56]	; (8000e28 <MX_USART2_UART_Init+0x4c>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000df4:	4b0c      	ldr	r3, [pc, #48]	; (8000e28 <MX_USART2_UART_Init+0x4c>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000dfa:	4b0b      	ldr	r3, [pc, #44]	; (8000e28 <MX_USART2_UART_Init+0x4c>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e00:	4b09      	ldr	r3, [pc, #36]	; (8000e28 <MX_USART2_UART_Init+0x4c>)
 8000e02:	220c      	movs	r2, #12
 8000e04:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e06:	4b08      	ldr	r3, [pc, #32]	; (8000e28 <MX_USART2_UART_Init+0x4c>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e0c:	4b06      	ldr	r3, [pc, #24]	; (8000e28 <MX_USART2_UART_Init+0x4c>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e12:	4805      	ldr	r0, [pc, #20]	; (8000e28 <MX_USART2_UART_Init+0x4c>)
 8000e14:	f003 fe32 	bl	8004a7c <HAL_UART_Init>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000e1e:	f000 f93f 	bl	80010a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e22:	bf00      	nop
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	200001e0 	.word	0x200001e0
 8000e2c:	40004400 	.word	0x40004400

08000e30 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000e36:	2300      	movs	r3, #0
 8000e38:	607b      	str	r3, [r7, #4]
 8000e3a:	4b0c      	ldr	r3, [pc, #48]	; (8000e6c <MX_DMA_Init+0x3c>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3e:	4a0b      	ldr	r2, [pc, #44]	; (8000e6c <MX_DMA_Init+0x3c>)
 8000e40:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e44:	6313      	str	r3, [r2, #48]	; 0x30
 8000e46:	4b09      	ldr	r3, [pc, #36]	; (8000e6c <MX_DMA_Init+0x3c>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e4e:	607b      	str	r3, [r7, #4]
 8000e50:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000e52:	2200      	movs	r2, #0
 8000e54:	2100      	movs	r1, #0
 8000e56:	2038      	movs	r0, #56	; 0x38
 8000e58:	f001 fa05 	bl	8002266 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000e5c:	2038      	movs	r0, #56	; 0x38
 8000e5e:	f001 fa1e 	bl	800229e <HAL_NVIC_EnableIRQ>

}
 8000e62:	bf00      	nop
 8000e64:	3708      	adds	r7, #8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	40023800 	.word	0x40023800

08000e70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b08a      	sub	sp, #40	; 0x28
 8000e74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e76:	f107 0314 	add.w	r3, r7, #20
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	601a      	str	r2, [r3, #0]
 8000e7e:	605a      	str	r2, [r3, #4]
 8000e80:	609a      	str	r2, [r3, #8]
 8000e82:	60da      	str	r2, [r3, #12]
 8000e84:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e86:	2300      	movs	r3, #0
 8000e88:	613b      	str	r3, [r7, #16]
 8000e8a:	4b44      	ldr	r3, [pc, #272]	; (8000f9c <MX_GPIO_Init+0x12c>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8e:	4a43      	ldr	r2, [pc, #268]	; (8000f9c <MX_GPIO_Init+0x12c>)
 8000e90:	f043 0304 	orr.w	r3, r3, #4
 8000e94:	6313      	str	r3, [r2, #48]	; 0x30
 8000e96:	4b41      	ldr	r3, [pc, #260]	; (8000f9c <MX_GPIO_Init+0x12c>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9a:	f003 0304 	and.w	r3, r3, #4
 8000e9e:	613b      	str	r3, [r7, #16]
 8000ea0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	60fb      	str	r3, [r7, #12]
 8000ea6:	4b3d      	ldr	r3, [pc, #244]	; (8000f9c <MX_GPIO_Init+0x12c>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eaa:	4a3c      	ldr	r2, [pc, #240]	; (8000f9c <MX_GPIO_Init+0x12c>)
 8000eac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000eb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb2:	4b3a      	ldr	r3, [pc, #232]	; (8000f9c <MX_GPIO_Init+0x12c>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000eba:	60fb      	str	r3, [r7, #12]
 8000ebc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	60bb      	str	r3, [r7, #8]
 8000ec2:	4b36      	ldr	r3, [pc, #216]	; (8000f9c <MX_GPIO_Init+0x12c>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec6:	4a35      	ldr	r2, [pc, #212]	; (8000f9c <MX_GPIO_Init+0x12c>)
 8000ec8:	f043 0301 	orr.w	r3, r3, #1
 8000ecc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ece:	4b33      	ldr	r3, [pc, #204]	; (8000f9c <MX_GPIO_Init+0x12c>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed2:	f003 0301 	and.w	r3, r3, #1
 8000ed6:	60bb      	str	r3, [r7, #8]
 8000ed8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eda:	2300      	movs	r3, #0
 8000edc:	607b      	str	r3, [r7, #4]
 8000ede:	4b2f      	ldr	r3, [pc, #188]	; (8000f9c <MX_GPIO_Init+0x12c>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee2:	4a2e      	ldr	r2, [pc, #184]	; (8000f9c <MX_GPIO_Init+0x12c>)
 8000ee4:	f043 0302 	orr.w	r3, r3, #2
 8000ee8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eea:	4b2c      	ldr	r3, [pc, #176]	; (8000f9c <MX_GPIO_Init+0x12c>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eee:	f003 0302 	and.w	r3, r3, #2
 8000ef2:	607b      	str	r3, [r7, #4]
 8000ef4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	2120      	movs	r1, #32
 8000efa:	4829      	ldr	r0, [pc, #164]	; (8000fa0 <MX_GPIO_Init+0x130>)
 8000efc:	f001 ff14 	bl	8002d28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_SET);
 8000f00:	2201      	movs	r2, #1
 8000f02:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f06:	4827      	ldr	r0, [pc, #156]	; (8000fa4 <MX_GPIO_Init+0x134>)
 8000f08:	f001 ff0e 	bl	8002d28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SHDN_GPIO_Port, SHDN_Pin, GPIO_PIN_SET);
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	2180      	movs	r1, #128	; 0x80
 8000f10:	4825      	ldr	r0, [pc, #148]	; (8000fa8 <MX_GPIO_Init+0x138>)
 8000f12:	f001 ff09 	bl	8002d28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LOAD_GPIO_Port, LOAD_Pin, GPIO_PIN_SET);
 8000f16:	2201      	movs	r2, #1
 8000f18:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f1c:	4820      	ldr	r0, [pc, #128]	; (8000fa0 <MX_GPIO_Init+0x130>)
 8000f1e:	f001 ff03 	bl	8002d28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f22:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f28:	4b20      	ldr	r3, [pc, #128]	; (8000fac <MX_GPIO_Init+0x13c>)
 8000f2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f30:	f107 0314 	add.w	r3, r7, #20
 8000f34:	4619      	mov	r1, r3
 8000f36:	481c      	ldr	r0, [pc, #112]	; (8000fa8 <MX_GPIO_Init+0x138>)
 8000f38:	f001 fd5c 	bl	80029f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LOAD_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LOAD_Pin;
 8000f3c:	f44f 7308 	mov.w	r3, #544	; 0x220
 8000f40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f42:	2301      	movs	r3, #1
 8000f44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f46:	2300      	movs	r3, #0
 8000f48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f4e:	f107 0314 	add.w	r3, r7, #20
 8000f52:	4619      	mov	r1, r3
 8000f54:	4812      	ldr	r0, [pc, #72]	; (8000fa0 <MX_GPIO_Init+0x130>)
 8000f56:	f001 fd4d 	bl	80029f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_SS_Pin */
  GPIO_InitStruct.Pin = SPI_SS_Pin;
 8000f5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f60:	2301      	movs	r3, #1
 8000f62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f64:	2300      	movs	r3, #0
 8000f66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_SS_GPIO_Port, &GPIO_InitStruct);
 8000f6c:	f107 0314 	add.w	r3, r7, #20
 8000f70:	4619      	mov	r1, r3
 8000f72:	480c      	ldr	r0, [pc, #48]	; (8000fa4 <MX_GPIO_Init+0x134>)
 8000f74:	f001 fd3e 	bl	80029f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SHDN_Pin */
  GPIO_InitStruct.Pin = SHDN_Pin;
 8000f78:	2380      	movs	r3, #128	; 0x80
 8000f7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f80:	2300      	movs	r3, #0
 8000f82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f84:	2300      	movs	r3, #0
 8000f86:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SHDN_GPIO_Port, &GPIO_InitStruct);
 8000f88:	f107 0314 	add.w	r3, r7, #20
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	4806      	ldr	r0, [pc, #24]	; (8000fa8 <MX_GPIO_Init+0x138>)
 8000f90:	f001 fd30 	bl	80029f4 <HAL_GPIO_Init>

}
 8000f94:	bf00      	nop
 8000f96:	3728      	adds	r7, #40	; 0x28
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	40023800 	.word	0x40023800
 8000fa0:	40020000 	.word	0x40020000
 8000fa4:	40020400 	.word	0x40020400
 8000fa8:	40020800 	.word	0x40020800
 8000fac:	10210000 	.word	0x10210000

08000fb0 <MCP4922SetOutput>:

/* USER CODE BEGIN 4 */
void MCP4922SetOutput(uint8_t Config, uint16_t DACOutput)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	460a      	mov	r2, r1
 8000fba:	71fb      	strb	r3, [r7, #7]
 8000fbc:	4613      	mov	r3, r2
 8000fbe:	80bb      	strh	r3, [r7, #4]
	uint32_t OutputPacket = (DACOutput & 0x0fff) | ((Config & 0xf) << 12);
 8000fc0:	88bb      	ldrh	r3, [r7, #4]
 8000fc2:	f3c3 020b 	ubfx	r2, r3, #0, #12
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	031b      	lsls	r3, r3, #12
 8000fca:	b29b      	uxth	r3, r3
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_RESET);
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fd6:	4807      	ldr	r0, [pc, #28]	; (8000ff4 <MCP4922SetOutput+0x44>)
 8000fd8:	f001 fea6 	bl	8002d28 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_IT(&hspi3, &OutputPacket, 1);
 8000fdc:	f107 030c 	add.w	r3, r7, #12
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	4804      	ldr	r0, [pc, #16]	; (8000ff8 <MCP4922SetOutput+0x48>)
 8000fe6:	f002 fc6f 	bl	80038c8 <HAL_SPI_Transmit_IT>
}
 8000fea:	bf00      	nop
 8000fec:	3710      	adds	r7, #16
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	40020400 	.word	0x40020400
 8000ff8:	200000a0 	.word	0x200000a0

08000ffc <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi3)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	4a06      	ldr	r2, [pc, #24]	; (8001020 <HAL_SPI_TxCpltCallback+0x24>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d105      	bne.n	8001018 <HAL_SPI_TxCpltCallback+0x1c>
	{
		HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_SET);
 800100c:	2201      	movs	r2, #1
 800100e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001012:	4804      	ldr	r0, [pc, #16]	; (8001024 <HAL_SPI_TxCpltCallback+0x28>)
 8001014:	f001 fe88 	bl	8002d28 <HAL_GPIO_WritePin>
	}
}
 8001018:	bf00      	nop
 800101a:	3708      	adds	r7, #8
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	200000a0 	.word	0x200000a0
 8001024:	40020400 	.word	0x40020400

08001028 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001028:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 800102c:	b083      	sub	sp, #12
 800102e:	af00      	add	r7, sp, #0
 8001030:	6078      	str	r0, [r7, #4]
	if (htim == &htim11)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4a0b      	ldr	r2, [pc, #44]	; (8001064 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d10d      	bne.n	8001056 <HAL_TIM_PeriodElapsedCallback+0x2e>
	{
		_micro += 65535;
 800103a:	4b0b      	ldr	r3, [pc, #44]	; (8001068 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800103c:	e9d3 bc00 	ldrd	fp, ip, [r3]
 8001040:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001044:	f04f 0200 	mov.w	r2, #0
 8001048:	eb1b 0301 	adds.w	r3, fp, r1
 800104c:	eb4c 0402 	adc.w	r4, ip, r2
 8001050:	4a05      	ldr	r2, [pc, #20]	; (8001068 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001052:	e9c2 3400 	strd	r3, r4, [r2]
	}
}
 8001056:	bf00      	nop
 8001058:	370c      	adds	r7, #12
 800105a:	46bd      	mov	sp, r7
 800105c:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	20000140 	.word	0x20000140
 8001068:	20000038 	.word	0x20000038

0800106c <micros>:

inline uint64_t micros()
{
 800106c:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 8001070:	af00      	add	r7, sp, #0
	return htim11.Instance->CNT + _micro;
 8001072:	4b09      	ldr	r3, [pc, #36]	; (8001098 <micros+0x2c>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001078:	4619      	mov	r1, r3
 800107a:	f04f 0200 	mov.w	r2, #0
 800107e:	4b07      	ldr	r3, [pc, #28]	; (800109c <micros+0x30>)
 8001080:	e9d3 bc00 	ldrd	fp, ip, [r3]
 8001084:	eb1b 0301 	adds.w	r3, fp, r1
 8001088:	eb4c 0402 	adc.w	r4, ip, r2
}
 800108c:	4618      	mov	r0, r3
 800108e:	4621      	mov	r1, r4
 8001090:	46bd      	mov	sp, r7
 8001092:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 8001096:	4770      	bx	lr
 8001098:	20000140 	.word	0x20000140
 800109c:	20000038 	.word	0x20000038

080010a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010a4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80010a6:	e7fe      	b.n	80010a6 <Error_Handler+0x6>

080010a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ae:	2300      	movs	r3, #0
 80010b0:	607b      	str	r3, [r7, #4]
 80010b2:	4b10      	ldr	r3, [pc, #64]	; (80010f4 <HAL_MspInit+0x4c>)
 80010b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010b6:	4a0f      	ldr	r2, [pc, #60]	; (80010f4 <HAL_MspInit+0x4c>)
 80010b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010bc:	6453      	str	r3, [r2, #68]	; 0x44
 80010be:	4b0d      	ldr	r3, [pc, #52]	; (80010f4 <HAL_MspInit+0x4c>)
 80010c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010c6:	607b      	str	r3, [r7, #4]
 80010c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010ca:	2300      	movs	r3, #0
 80010cc:	603b      	str	r3, [r7, #0]
 80010ce:	4b09      	ldr	r3, [pc, #36]	; (80010f4 <HAL_MspInit+0x4c>)
 80010d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d2:	4a08      	ldr	r2, [pc, #32]	; (80010f4 <HAL_MspInit+0x4c>)
 80010d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010d8:	6413      	str	r3, [r2, #64]	; 0x40
 80010da:	4b06      	ldr	r3, [pc, #24]	; (80010f4 <HAL_MspInit+0x4c>)
 80010dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010e2:	603b      	str	r3, [r7, #0]
 80010e4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80010e6:	2007      	movs	r0, #7
 80010e8:	f001 f8b2 	bl	8002250 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010ec:	bf00      	nop
 80010ee:	3708      	adds	r7, #8
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	40023800 	.word	0x40023800

080010f8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b08a      	sub	sp, #40	; 0x28
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001100:	f107 0314 	add.w	r3, r7, #20
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	605a      	str	r2, [r3, #4]
 800110a:	609a      	str	r2, [r3, #8]
 800110c:	60da      	str	r2, [r3, #12]
 800110e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a33      	ldr	r2, [pc, #204]	; (80011e4 <HAL_ADC_MspInit+0xec>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d15f      	bne.n	80011da <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800111a:	2300      	movs	r3, #0
 800111c:	613b      	str	r3, [r7, #16]
 800111e:	4b32      	ldr	r3, [pc, #200]	; (80011e8 <HAL_ADC_MspInit+0xf0>)
 8001120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001122:	4a31      	ldr	r2, [pc, #196]	; (80011e8 <HAL_ADC_MspInit+0xf0>)
 8001124:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001128:	6453      	str	r3, [r2, #68]	; 0x44
 800112a:	4b2f      	ldr	r3, [pc, #188]	; (80011e8 <HAL_ADC_MspInit+0xf0>)
 800112c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800112e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001132:	613b      	str	r3, [r7, #16]
 8001134:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001136:	2300      	movs	r3, #0
 8001138:	60fb      	str	r3, [r7, #12]
 800113a:	4b2b      	ldr	r3, [pc, #172]	; (80011e8 <HAL_ADC_MspInit+0xf0>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113e:	4a2a      	ldr	r2, [pc, #168]	; (80011e8 <HAL_ADC_MspInit+0xf0>)
 8001140:	f043 0301 	orr.w	r3, r3, #1
 8001144:	6313      	str	r3, [r2, #48]	; 0x30
 8001146:	4b28      	ldr	r3, [pc, #160]	; (80011e8 <HAL_ADC_MspInit+0xf0>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114a:	f003 0301 	and.w	r3, r3, #1
 800114e:	60fb      	str	r3, [r7, #12]
 8001150:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001152:	2301      	movs	r3, #1
 8001154:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001156:	2303      	movs	r3, #3
 8001158:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115a:	2300      	movs	r3, #0
 800115c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800115e:	f107 0314 	add.w	r3, r7, #20
 8001162:	4619      	mov	r1, r3
 8001164:	4821      	ldr	r0, [pc, #132]	; (80011ec <HAL_ADC_MspInit+0xf4>)
 8001166:	f001 fc45 	bl	80029f4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800116a:	4b21      	ldr	r3, [pc, #132]	; (80011f0 <HAL_ADC_MspInit+0xf8>)
 800116c:	4a21      	ldr	r2, [pc, #132]	; (80011f4 <HAL_ADC_MspInit+0xfc>)
 800116e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001170:	4b1f      	ldr	r3, [pc, #124]	; (80011f0 <HAL_ADC_MspInit+0xf8>)
 8001172:	2200      	movs	r2, #0
 8001174:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001176:	4b1e      	ldr	r3, [pc, #120]	; (80011f0 <HAL_ADC_MspInit+0xf8>)
 8001178:	2200      	movs	r2, #0
 800117a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800117c:	4b1c      	ldr	r3, [pc, #112]	; (80011f0 <HAL_ADC_MspInit+0xf8>)
 800117e:	2200      	movs	r2, #0
 8001180:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001182:	4b1b      	ldr	r3, [pc, #108]	; (80011f0 <HAL_ADC_MspInit+0xf8>)
 8001184:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001188:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800118a:	4b19      	ldr	r3, [pc, #100]	; (80011f0 <HAL_ADC_MspInit+0xf8>)
 800118c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001190:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001192:	4b17      	ldr	r3, [pc, #92]	; (80011f0 <HAL_ADC_MspInit+0xf8>)
 8001194:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001198:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800119a:	4b15      	ldr	r3, [pc, #84]	; (80011f0 <HAL_ADC_MspInit+0xf8>)
 800119c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011a0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80011a2:	4b13      	ldr	r3, [pc, #76]	; (80011f0 <HAL_ADC_MspInit+0xf8>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011a8:	4b11      	ldr	r3, [pc, #68]	; (80011f0 <HAL_ADC_MspInit+0xf8>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80011ae:	4810      	ldr	r0, [pc, #64]	; (80011f0 <HAL_ADC_MspInit+0xf8>)
 80011b0:	f001 f890 	bl	80022d4 <HAL_DMA_Init>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80011ba:	f7ff ff71 	bl	80010a0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4a0b      	ldr	r2, [pc, #44]	; (80011f0 <HAL_ADC_MspInit+0xf8>)
 80011c2:	639a      	str	r2, [r3, #56]	; 0x38
 80011c4:	4a0a      	ldr	r2, [pc, #40]	; (80011f0 <HAL_ADC_MspInit+0xf8>)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80011ca:	2200      	movs	r2, #0
 80011cc:	2100      	movs	r1, #0
 80011ce:	2012      	movs	r0, #18
 80011d0:	f001 f849 	bl	8002266 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80011d4:	2012      	movs	r0, #18
 80011d6:	f001 f862 	bl	800229e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80011da:	bf00      	nop
 80011dc:	3728      	adds	r7, #40	; 0x28
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	40012000 	.word	0x40012000
 80011e8:	40023800 	.word	0x40023800
 80011ec:	40020000 	.word	0x40020000
 80011f0:	20000180 	.word	0x20000180
 80011f4:	40026410 	.word	0x40026410

080011f8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b08a      	sub	sp, #40	; 0x28
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001200:	f107 0314 	add.w	r3, r7, #20
 8001204:	2200      	movs	r2, #0
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	605a      	str	r2, [r3, #4]
 800120a:	609a      	str	r2, [r3, #8]
 800120c:	60da      	str	r2, [r3, #12]
 800120e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a2c      	ldr	r2, [pc, #176]	; (80012c8 <HAL_SPI_MspInit+0xd0>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d152      	bne.n	80012c0 <HAL_SPI_MspInit+0xc8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800121a:	2300      	movs	r3, #0
 800121c:	613b      	str	r3, [r7, #16]
 800121e:	4b2b      	ldr	r3, [pc, #172]	; (80012cc <HAL_SPI_MspInit+0xd4>)
 8001220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001222:	4a2a      	ldr	r2, [pc, #168]	; (80012cc <HAL_SPI_MspInit+0xd4>)
 8001224:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001228:	6413      	str	r3, [r2, #64]	; 0x40
 800122a:	4b28      	ldr	r3, [pc, #160]	; (80012cc <HAL_SPI_MspInit+0xd4>)
 800122c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001232:	613b      	str	r3, [r7, #16]
 8001234:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001236:	2300      	movs	r3, #0
 8001238:	60fb      	str	r3, [r7, #12]
 800123a:	4b24      	ldr	r3, [pc, #144]	; (80012cc <HAL_SPI_MspInit+0xd4>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123e:	4a23      	ldr	r2, [pc, #140]	; (80012cc <HAL_SPI_MspInit+0xd4>)
 8001240:	f043 0304 	orr.w	r3, r3, #4
 8001244:	6313      	str	r3, [r2, #48]	; 0x30
 8001246:	4b21      	ldr	r3, [pc, #132]	; (80012cc <HAL_SPI_MspInit+0xd4>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124a:	f003 0304 	and.w	r3, r3, #4
 800124e:	60fb      	str	r3, [r7, #12]
 8001250:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001252:	2300      	movs	r3, #0
 8001254:	60bb      	str	r3, [r7, #8]
 8001256:	4b1d      	ldr	r3, [pc, #116]	; (80012cc <HAL_SPI_MspInit+0xd4>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125a:	4a1c      	ldr	r2, [pc, #112]	; (80012cc <HAL_SPI_MspInit+0xd4>)
 800125c:	f043 0302 	orr.w	r3, r3, #2
 8001260:	6313      	str	r3, [r2, #48]	; 0x30
 8001262:	4b1a      	ldr	r3, [pc, #104]	; (80012cc <HAL_SPI_MspInit+0xd4>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001266:	f003 0302 	and.w	r3, r3, #2
 800126a:	60bb      	str	r3, [r7, #8]
 800126c:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC11     ------> SPI3_MISO
    PB3     ------> SPI3_SCK
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800126e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001272:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001274:	2302      	movs	r3, #2
 8001276:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001278:	2300      	movs	r3, #0
 800127a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800127c:	2303      	movs	r3, #3
 800127e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001280:	2306      	movs	r3, #6
 8001282:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001284:	f107 0314 	add.w	r3, r7, #20
 8001288:	4619      	mov	r1, r3
 800128a:	4811      	ldr	r0, [pc, #68]	; (80012d0 <HAL_SPI_MspInit+0xd8>)
 800128c:	f001 fbb2 	bl	80029f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8001290:	2328      	movs	r3, #40	; 0x28
 8001292:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001294:	2302      	movs	r3, #2
 8001296:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001298:	2300      	movs	r3, #0
 800129a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800129c:	2303      	movs	r3, #3
 800129e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80012a0:	2306      	movs	r3, #6
 80012a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012a4:	f107 0314 	add.w	r3, r7, #20
 80012a8:	4619      	mov	r1, r3
 80012aa:	480a      	ldr	r0, [pc, #40]	; (80012d4 <HAL_SPI_MspInit+0xdc>)
 80012ac:	f001 fba2 	bl	80029f4 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 80012b0:	2200      	movs	r2, #0
 80012b2:	2100      	movs	r1, #0
 80012b4:	2033      	movs	r0, #51	; 0x33
 80012b6:	f000 ffd6 	bl	8002266 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 80012ba:	2033      	movs	r0, #51	; 0x33
 80012bc:	f000 ffef 	bl	800229e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80012c0:	bf00      	nop
 80012c2:	3728      	adds	r7, #40	; 0x28
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	40003c00 	.word	0x40003c00
 80012cc:	40023800 	.word	0x40023800
 80012d0:	40020800 	.word	0x40020800
 80012d4:	40020400 	.word	0x40020400

080012d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b08a      	sub	sp, #40	; 0x28
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e0:	f107 0314 	add.w	r3, r7, #20
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	605a      	str	r2, [r3, #4]
 80012ea:	609a      	str	r2, [r3, #8]
 80012ec:	60da      	str	r2, [r3, #12]
 80012ee:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM3)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a27      	ldr	r2, [pc, #156]	; (8001394 <HAL_TIM_Base_MspInit+0xbc>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d10e      	bne.n	8001318 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80012fa:	2300      	movs	r3, #0
 80012fc:	613b      	str	r3, [r7, #16]
 80012fe:	4b26      	ldr	r3, [pc, #152]	; (8001398 <HAL_TIM_Base_MspInit+0xc0>)
 8001300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001302:	4a25      	ldr	r2, [pc, #148]	; (8001398 <HAL_TIM_Base_MspInit+0xc0>)
 8001304:	f043 0302 	orr.w	r3, r3, #2
 8001308:	6413      	str	r3, [r2, #64]	; 0x40
 800130a:	4b23      	ldr	r3, [pc, #140]	; (8001398 <HAL_TIM_Base_MspInit+0xc0>)
 800130c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130e:	f003 0302 	and.w	r3, r3, #2
 8001312:	613b      	str	r3, [r7, #16]
 8001314:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8001316:	e039      	b.n	800138c <HAL_TIM_Base_MspInit+0xb4>
  else if(htim_base->Instance==TIM11)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a1f      	ldr	r2, [pc, #124]	; (800139c <HAL_TIM_Base_MspInit+0xc4>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d134      	bne.n	800138c <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001322:	2300      	movs	r3, #0
 8001324:	60fb      	str	r3, [r7, #12]
 8001326:	4b1c      	ldr	r3, [pc, #112]	; (8001398 <HAL_TIM_Base_MspInit+0xc0>)
 8001328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800132a:	4a1b      	ldr	r2, [pc, #108]	; (8001398 <HAL_TIM_Base_MspInit+0xc0>)
 800132c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001330:	6453      	str	r3, [r2, #68]	; 0x44
 8001332:	4b19      	ldr	r3, [pc, #100]	; (8001398 <HAL_TIM_Base_MspInit+0xc0>)
 8001334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001336:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800133a:	60fb      	str	r3, [r7, #12]
 800133c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800133e:	2300      	movs	r3, #0
 8001340:	60bb      	str	r3, [r7, #8]
 8001342:	4b15      	ldr	r3, [pc, #84]	; (8001398 <HAL_TIM_Base_MspInit+0xc0>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001346:	4a14      	ldr	r2, [pc, #80]	; (8001398 <HAL_TIM_Base_MspInit+0xc0>)
 8001348:	f043 0302 	orr.w	r3, r3, #2
 800134c:	6313      	str	r3, [r2, #48]	; 0x30
 800134e:	4b12      	ldr	r3, [pc, #72]	; (8001398 <HAL_TIM_Base_MspInit+0xc0>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001352:	f003 0302 	and.w	r3, r3, #2
 8001356:	60bb      	str	r3, [r7, #8]
 8001358:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800135a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800135e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001360:	2302      	movs	r3, #2
 8001362:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001364:	2300      	movs	r3, #0
 8001366:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001368:	2300      	movs	r3, #0
 800136a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 800136c:	2303      	movs	r3, #3
 800136e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001370:	f107 0314 	add.w	r3, r7, #20
 8001374:	4619      	mov	r1, r3
 8001376:	480a      	ldr	r0, [pc, #40]	; (80013a0 <HAL_TIM_Base_MspInit+0xc8>)
 8001378:	f001 fb3c 	bl	80029f4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800137c:	2200      	movs	r2, #0
 800137e:	2100      	movs	r1, #0
 8001380:	201a      	movs	r0, #26
 8001382:	f000 ff70 	bl	8002266 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001386:	201a      	movs	r0, #26
 8001388:	f000 ff89 	bl	800229e <HAL_NVIC_EnableIRQ>
}
 800138c:	bf00      	nop
 800138e:	3728      	adds	r7, #40	; 0x28
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	40000400 	.word	0x40000400
 8001398:	40023800 	.word	0x40023800
 800139c:	40014800 	.word	0x40014800
 80013a0:	40020400 	.word	0x40020400

080013a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b08a      	sub	sp, #40	; 0x28
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ac:	f107 0314 	add.w	r3, r7, #20
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]
 80013b4:	605a      	str	r2, [r3, #4]
 80013b6:	609a      	str	r2, [r3, #8]
 80013b8:	60da      	str	r2, [r3, #12]
 80013ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a19      	ldr	r2, [pc, #100]	; (8001428 <HAL_UART_MspInit+0x84>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d12b      	bne.n	800141e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013c6:	2300      	movs	r3, #0
 80013c8:	613b      	str	r3, [r7, #16]
 80013ca:	4b18      	ldr	r3, [pc, #96]	; (800142c <HAL_UART_MspInit+0x88>)
 80013cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ce:	4a17      	ldr	r2, [pc, #92]	; (800142c <HAL_UART_MspInit+0x88>)
 80013d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013d4:	6413      	str	r3, [r2, #64]	; 0x40
 80013d6:	4b15      	ldr	r3, [pc, #84]	; (800142c <HAL_UART_MspInit+0x88>)
 80013d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013de:	613b      	str	r3, [r7, #16]
 80013e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e2:	2300      	movs	r3, #0
 80013e4:	60fb      	str	r3, [r7, #12]
 80013e6:	4b11      	ldr	r3, [pc, #68]	; (800142c <HAL_UART_MspInit+0x88>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ea:	4a10      	ldr	r2, [pc, #64]	; (800142c <HAL_UART_MspInit+0x88>)
 80013ec:	f043 0301 	orr.w	r3, r3, #1
 80013f0:	6313      	str	r3, [r2, #48]	; 0x30
 80013f2:	4b0e      	ldr	r3, [pc, #56]	; (800142c <HAL_UART_MspInit+0x88>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f6:	f003 0301 	and.w	r3, r3, #1
 80013fa:	60fb      	str	r3, [r7, #12]
 80013fc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80013fe:	230c      	movs	r3, #12
 8001400:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001402:	2302      	movs	r3, #2
 8001404:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001406:	2300      	movs	r3, #0
 8001408:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800140a:	2303      	movs	r3, #3
 800140c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800140e:	2307      	movs	r3, #7
 8001410:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001412:	f107 0314 	add.w	r3, r7, #20
 8001416:	4619      	mov	r1, r3
 8001418:	4805      	ldr	r0, [pc, #20]	; (8001430 <HAL_UART_MspInit+0x8c>)
 800141a:	f001 faeb 	bl	80029f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800141e:	bf00      	nop
 8001420:	3728      	adds	r7, #40	; 0x28
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	40004400 	.word	0x40004400
 800142c:	40023800 	.word	0x40023800
 8001430:	40020000 	.word	0x40020000

08001434 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001438:	e7fe      	b.n	8001438 <NMI_Handler+0x4>

0800143a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800143a:	b480      	push	{r7}
 800143c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800143e:	e7fe      	b.n	800143e <HardFault_Handler+0x4>

08001440 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001444:	e7fe      	b.n	8001444 <MemManage_Handler+0x4>

08001446 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001446:	b480      	push	{r7}
 8001448:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800144a:	e7fe      	b.n	800144a <BusFault_Handler+0x4>

0800144c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001450:	e7fe      	b.n	8001450 <UsageFault_Handler+0x4>

08001452 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001452:	b480      	push	{r7}
 8001454:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001456:	bf00      	nop
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr

08001460 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001464:	bf00      	nop
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr

0800146e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800146e:	b480      	push	{r7}
 8001470:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001472:	bf00      	nop
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr

0800147c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001480:	f000 f8bc 	bl	80015fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001484:	bf00      	nop
 8001486:	bd80      	pop	{r7, pc}

08001488 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800148c:	4802      	ldr	r0, [pc, #8]	; (8001498 <ADC_IRQHandler+0x10>)
 800148e:	f000 f918 	bl	80016c2 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001492:	bf00      	nop
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	200000f8 	.word	0x200000f8

0800149c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 80014a0:	4802      	ldr	r0, [pc, #8]	; (80014ac <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80014a2:	f002 fdad 	bl	8004000 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80014a6:	bf00      	nop
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	20000140 	.word	0x20000140

080014b0 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 80014b4:	4802      	ldr	r0, [pc, #8]	; (80014c0 <SPI3_IRQHandler+0x10>)
 80014b6:	f002 fa89 	bl	80039cc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 80014ba:	bf00      	nop
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	200000a0 	.word	0x200000a0

080014c4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80014c8:	4802      	ldr	r0, [pc, #8]	; (80014d4 <DMA2_Stream0_IRQHandler+0x10>)
 80014ca:	f001 f82b 	bl	8002524 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80014ce:	bf00      	nop
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	20000180 	.word	0x20000180

080014d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014dc:	4b08      	ldr	r3, [pc, #32]	; (8001500 <SystemInit+0x28>)
 80014de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014e2:	4a07      	ldr	r2, [pc, #28]	; (8001500 <SystemInit+0x28>)
 80014e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80014ec:	4b04      	ldr	r3, [pc, #16]	; (8001500 <SystemInit+0x28>)
 80014ee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80014f2:	609a      	str	r2, [r3, #8]
#endif
}
 80014f4:	bf00      	nop
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	e000ed00 	.word	0xe000ed00

08001504 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001504:	f8df d034 	ldr.w	sp, [pc, #52]	; 800153c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001508:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800150a:	e003      	b.n	8001514 <LoopCopyDataInit>

0800150c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800150c:	4b0c      	ldr	r3, [pc, #48]	; (8001540 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800150e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001510:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001512:	3104      	adds	r1, #4

08001514 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001514:	480b      	ldr	r0, [pc, #44]	; (8001544 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001516:	4b0c      	ldr	r3, [pc, #48]	; (8001548 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001518:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800151a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800151c:	d3f6      	bcc.n	800150c <CopyDataInit>
  ldr  r2, =_sbss
 800151e:	4a0b      	ldr	r2, [pc, #44]	; (800154c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001520:	e002      	b.n	8001528 <LoopFillZerobss>

08001522 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001522:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001524:	f842 3b04 	str.w	r3, [r2], #4

08001528 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001528:	4b09      	ldr	r3, [pc, #36]	; (8001550 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800152a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800152c:	d3f9      	bcc.n	8001522 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800152e:	f7ff ffd3 	bl	80014d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001532:	f003 fe6d 	bl	8005210 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001536:	f7ff f9db 	bl	80008f0 <main>
  bx  lr    
 800153a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800153c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001540:	080052b0 	.word	0x080052b0
  ldr  r0, =_sdata
 8001544:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001548:	20000018 	.word	0x20000018
  ldr  r2, =_sbss
 800154c:	20000018 	.word	0x20000018
  ldr  r3, = _ebss
 8001550:	20000224 	.word	0x20000224

08001554 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001554:	e7fe      	b.n	8001554 <DMA1_Stream0_IRQHandler>
	...

08001558 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800155c:	4b0e      	ldr	r3, [pc, #56]	; (8001598 <HAL_Init+0x40>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a0d      	ldr	r2, [pc, #52]	; (8001598 <HAL_Init+0x40>)
 8001562:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001566:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001568:	4b0b      	ldr	r3, [pc, #44]	; (8001598 <HAL_Init+0x40>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a0a      	ldr	r2, [pc, #40]	; (8001598 <HAL_Init+0x40>)
 800156e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001572:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001574:	4b08      	ldr	r3, [pc, #32]	; (8001598 <HAL_Init+0x40>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a07      	ldr	r2, [pc, #28]	; (8001598 <HAL_Init+0x40>)
 800157a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800157e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001580:	2003      	movs	r0, #3
 8001582:	f000 fe65 	bl	8002250 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001586:	2000      	movs	r0, #0
 8001588:	f000 f808 	bl	800159c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800158c:	f7ff fd8c 	bl	80010a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001590:	2300      	movs	r3, #0
}
 8001592:	4618      	mov	r0, r3
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	40023c00 	.word	0x40023c00

0800159c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015a4:	4b12      	ldr	r3, [pc, #72]	; (80015f0 <HAL_InitTick+0x54>)
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	4b12      	ldr	r3, [pc, #72]	; (80015f4 <HAL_InitTick+0x58>)
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	4619      	mov	r1, r3
 80015ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80015b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ba:	4618      	mov	r0, r3
 80015bc:	f000 fe7d 	bl	80022ba <HAL_SYSTICK_Config>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e00e      	b.n	80015e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2b0f      	cmp	r3, #15
 80015ce:	d80a      	bhi.n	80015e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015d0:	2200      	movs	r2, #0
 80015d2:	6879      	ldr	r1, [r7, #4]
 80015d4:	f04f 30ff 	mov.w	r0, #4294967295
 80015d8:	f000 fe45 	bl	8002266 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015dc:	4a06      	ldr	r2, [pc, #24]	; (80015f8 <HAL_InitTick+0x5c>)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015e2:	2300      	movs	r3, #0
 80015e4:	e000      	b.n	80015e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	3708      	adds	r7, #8
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	2000000c 	.word	0x2000000c
 80015f4:	20000014 	.word	0x20000014
 80015f8:	20000010 	.word	0x20000010

080015fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001600:	4b06      	ldr	r3, [pc, #24]	; (800161c <HAL_IncTick+0x20>)
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	461a      	mov	r2, r3
 8001606:	4b06      	ldr	r3, [pc, #24]	; (8001620 <HAL_IncTick+0x24>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4413      	add	r3, r2
 800160c:	4a04      	ldr	r2, [pc, #16]	; (8001620 <HAL_IncTick+0x24>)
 800160e:	6013      	str	r3, [r2, #0]
}
 8001610:	bf00      	nop
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	20000014 	.word	0x20000014
 8001620:	20000220 	.word	0x20000220

08001624 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  return uwTick;
 8001628:	4b03      	ldr	r3, [pc, #12]	; (8001638 <HAL_GetTick+0x14>)
 800162a:	681b      	ldr	r3, [r3, #0]
}
 800162c:	4618      	mov	r0, r3
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	20000220 	.word	0x20000220

0800163c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001644:	2300      	movs	r3, #0
 8001646:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d101      	bne.n	8001652 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e033      	b.n	80016ba <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001656:	2b00      	cmp	r3, #0
 8001658:	d109      	bne.n	800166e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	f7ff fd4c 	bl	80010f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2200      	movs	r2, #0
 8001664:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2200      	movs	r2, #0
 800166a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001672:	f003 0310 	and.w	r3, r3, #16
 8001676:	2b00      	cmp	r3, #0
 8001678:	d118      	bne.n	80016ac <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001682:	f023 0302 	bic.w	r3, r3, #2
 8001686:	f043 0202 	orr.w	r2, r3, #2
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	f000 fb86 	bl	8001da0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2200      	movs	r2, #0
 8001698:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169e:	f023 0303 	bic.w	r3, r3, #3
 80016a2:	f043 0201 	orr.w	r2, r3, #1
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	641a      	str	r2, [r3, #64]	; 0x40
 80016aa:	e001      	b.n	80016b0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
 80016ae:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2200      	movs	r2, #0
 80016b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80016b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3710      	adds	r7, #16
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}

080016c2 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80016c2:	b580      	push	{r7, lr}
 80016c4:	b084      	sub	sp, #16
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80016ca:	2300      	movs	r3, #0
 80016cc:	60fb      	str	r3, [r7, #12]
 80016ce:	2300      	movs	r3, #0
 80016d0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f003 0302 	and.w	r3, r3, #2
 80016dc:	2b02      	cmp	r3, #2
 80016de:	bf0c      	ite	eq
 80016e0:	2301      	moveq	r3, #1
 80016e2:	2300      	movne	r3, #0
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	f003 0320 	and.w	r3, r3, #32
 80016f2:	2b20      	cmp	r3, #32
 80016f4:	bf0c      	ite	eq
 80016f6:	2301      	moveq	r3, #1
 80016f8:	2300      	movne	r3, #0
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d049      	beq.n	8001798 <HAL_ADC_IRQHandler+0xd6>
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d046      	beq.n	8001798 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170e:	f003 0310 	and.w	r3, r3, #16
 8001712:	2b00      	cmp	r3, #0
 8001714:	d105      	bne.n	8001722 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800172c:	2b00      	cmp	r3, #0
 800172e:	d12b      	bne.n	8001788 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001734:	2b00      	cmp	r3, #0
 8001736:	d127      	bne.n	8001788 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800173e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001742:	2b00      	cmp	r3, #0
 8001744:	d006      	beq.n	8001754 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001750:	2b00      	cmp	r3, #0
 8001752:	d119      	bne.n	8001788 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	685a      	ldr	r2, [r3, #4]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f022 0220 	bic.w	r2, r2, #32
 8001762:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001768:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001774:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001778:	2b00      	cmp	r3, #0
 800177a:	d105      	bne.n	8001788 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001780:	f043 0201 	orr.w	r2, r3, #1
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	f000 f9af 	bl	8001aec <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f06f 0212 	mvn.w	r2, #18
 8001796:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f003 0304 	and.w	r3, r3, #4
 80017a2:	2b04      	cmp	r3, #4
 80017a4:	bf0c      	ite	eq
 80017a6:	2301      	moveq	r3, #1
 80017a8:	2300      	movne	r3, #0
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017b8:	2b80      	cmp	r3, #128	; 0x80
 80017ba:	bf0c      	ite	eq
 80017bc:	2301      	moveq	r3, #1
 80017be:	2300      	movne	r3, #0
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d057      	beq.n	800187a <HAL_ADC_IRQHandler+0x1b8>
 80017ca:	68bb      	ldr	r3, [r7, #8]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d054      	beq.n	800187a <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d4:	f003 0310 	and.w	r3, r3, #16
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d105      	bne.n	80017e8 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d139      	bne.n	800186a <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017fc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001800:	2b00      	cmp	r3, #0
 8001802:	d006      	beq.n	8001812 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800180e:	2b00      	cmp	r3, #0
 8001810:	d12b      	bne.n	800186a <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800181c:	2b00      	cmp	r3, #0
 800181e:	d124      	bne.n	800186a <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800182a:	2b00      	cmp	r3, #0
 800182c:	d11d      	bne.n	800186a <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001832:	2b00      	cmp	r3, #0
 8001834:	d119      	bne.n	800186a <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	685a      	ldr	r2, [r3, #4]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001844:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001856:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800185a:	2b00      	cmp	r3, #0
 800185c:	d105      	bne.n	800186a <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001862:	f043 0201 	orr.w	r2, r3, #1
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f000 fc16 	bl	800209c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f06f 020c 	mvn.w	r2, #12
 8001878:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 0301 	and.w	r3, r3, #1
 8001884:	2b01      	cmp	r3, #1
 8001886:	bf0c      	ite	eq
 8001888:	2301      	moveq	r3, #1
 800188a:	2300      	movne	r3, #0
 800188c:	b2db      	uxtb	r3, r3
 800188e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800189a:	2b40      	cmp	r3, #64	; 0x40
 800189c:	bf0c      	ite	eq
 800189e:	2301      	moveq	r3, #1
 80018a0:	2300      	movne	r3, #0
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d017      	beq.n	80018dc <HAL_ADC_IRQHandler+0x21a>
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d014      	beq.n	80018dc <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f003 0301 	and.w	r3, r3, #1
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d10d      	bne.n	80018dc <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80018cc:	6878      	ldr	r0, [r7, #4]
 80018ce:	f000 f921 	bl	8001b14 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f06f 0201 	mvn.w	r2, #1
 80018da:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 0320 	and.w	r3, r3, #32
 80018e6:	2b20      	cmp	r3, #32
 80018e8:	bf0c      	ite	eq
 80018ea:	2301      	moveq	r3, #1
 80018ec:	2300      	movne	r3, #0
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80018fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001900:	bf0c      	ite	eq
 8001902:	2301      	moveq	r3, #1
 8001904:	2300      	movne	r3, #0
 8001906:	b2db      	uxtb	r3, r3
 8001908:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d015      	beq.n	800193c <HAL_ADC_IRQHandler+0x27a>
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d012      	beq.n	800193c <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800191a:	f043 0202 	orr.w	r2, r3, #2
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f06f 0220 	mvn.w	r2, #32
 800192a:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800192c:	6878      	ldr	r0, [r7, #4]
 800192e:	f000 f8fb 	bl	8001b28 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f06f 0220 	mvn.w	r2, #32
 800193a:	601a      	str	r2, [r3, #0]
  }
}
 800193c:	bf00      	nop
 800193e:	3710      	adds	r7, #16
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}

08001944 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b086      	sub	sp, #24
 8001948:	af00      	add	r7, sp, #0
 800194a:	60f8      	str	r0, [r7, #12]
 800194c:	60b9      	str	r1, [r7, #8]
 800194e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001950:	2300      	movs	r3, #0
 8001952:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800195a:	2b01      	cmp	r3, #1
 800195c:	d101      	bne.n	8001962 <HAL_ADC_Start_DMA+0x1e>
 800195e:	2302      	movs	r3, #2
 8001960:	e0b1      	b.n	8001ac6 <HAL_ADC_Start_DMA+0x182>
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	2201      	movs	r2, #1
 8001966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	f003 0301 	and.w	r3, r3, #1
 8001974:	2b01      	cmp	r3, #1
 8001976:	d018      	beq.n	80019aa <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	689a      	ldr	r2, [r3, #8]
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f042 0201 	orr.w	r2, r2, #1
 8001986:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001988:	4b51      	ldr	r3, [pc, #324]	; (8001ad0 <HAL_ADC_Start_DMA+0x18c>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a51      	ldr	r2, [pc, #324]	; (8001ad4 <HAL_ADC_Start_DMA+0x190>)
 800198e:	fba2 2303 	umull	r2, r3, r2, r3
 8001992:	0c9a      	lsrs	r2, r3, #18
 8001994:	4613      	mov	r3, r2
 8001996:	005b      	lsls	r3, r3, #1
 8001998:	4413      	add	r3, r2
 800199a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800199c:	e002      	b.n	80019a4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	3b01      	subs	r3, #1
 80019a2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d1f9      	bne.n	800199e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	f003 0301 	and.w	r3, r3, #1
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	f040 8085 	bne.w	8001ac4 <HAL_ADC_Start_DMA+0x180>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019be:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80019c2:	f023 0301 	bic.w	r3, r3, #1
 80019c6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d007      	beq.n	80019ec <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80019e4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80019f8:	d106      	bne.n	8001a08 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019fe:	f023 0206 	bic.w	r2, r3, #6
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	645a      	str	r2, [r3, #68]	; 0x44
 8001a06:	e002      	b.n	8001a0e <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	2200      	movs	r2, #0
 8001a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a16:	4b30      	ldr	r3, [pc, #192]	; (8001ad8 <HAL_ADC_Start_DMA+0x194>)
 8001a18:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a1e:	4a2f      	ldr	r2, [pc, #188]	; (8001adc <HAL_ADC_Start_DMA+0x198>)
 8001a20:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a26:	4a2e      	ldr	r2, [pc, #184]	; (8001ae0 <HAL_ADC_Start_DMA+0x19c>)
 8001a28:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a2e:	4a2d      	ldr	r2, [pc, #180]	; (8001ae4 <HAL_ADC_Start_DMA+0x1a0>)
 8001a30:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001a3a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	685a      	ldr	r2, [r3, #4]
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001a4a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	689a      	ldr	r2, [r3, #8]
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a5a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	334c      	adds	r3, #76	; 0x4c
 8001a66:	4619      	mov	r1, r3
 8001a68:	68ba      	ldr	r2, [r7, #8]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	f000 fce0 	bl	8002430 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f003 031f 	and.w	r3, r3, #31
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d10f      	bne.n	8001a9c <HAL_ADC_Start_DMA+0x158>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d11c      	bne.n	8001ac4 <HAL_ADC_Start_DMA+0x180>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	689a      	ldr	r2, [r3, #8]
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001a98:	609a      	str	r2, [r3, #8]
 8001a9a:	e013      	b.n	8001ac4 <HAL_ADC_Start_DMA+0x180>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a11      	ldr	r2, [pc, #68]	; (8001ae8 <HAL_ADC_Start_DMA+0x1a4>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d10e      	bne.n	8001ac4 <HAL_ADC_Start_DMA+0x180>
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d107      	bne.n	8001ac4 <HAL_ADC_Start_DMA+0x180>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	689a      	ldr	r2, [r3, #8]
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001ac2:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001ac4:	2300      	movs	r3, #0
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3718      	adds	r7, #24
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	2000000c 	.word	0x2000000c
 8001ad4:	431bde83 	.word	0x431bde83
 8001ad8:	40012300 	.word	0x40012300
 8001adc:	08001f99 	.word	0x08001f99
 8001ae0:	08002053 	.word	0x08002053
 8001ae4:	0800206f 	.word	0x0800206f
 8001ae8:	40012000 	.word	0x40012000

08001aec <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001af4:	bf00      	nop
 8001af6:	370c      	adds	r7, #12
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr

08001b00 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001b08:	bf00      	nop
 8001b0a:	370c      	adds	r7, #12
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr

08001b14 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001b1c:	bf00      	nop
 8001b1e:	370c      	adds	r7, #12
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr

08001b28 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001b30:	bf00      	nop
 8001b32:	370c      	adds	r7, #12
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr

08001b3c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b085      	sub	sp, #20
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001b46:	2300      	movs	r3, #0
 8001b48:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d101      	bne.n	8001b58 <HAL_ADC_ConfigChannel+0x1c>
 8001b54:	2302      	movs	r3, #2
 8001b56:	e113      	b.n	8001d80 <HAL_ADC_ConfigChannel+0x244>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	2b09      	cmp	r3, #9
 8001b66:	d925      	bls.n	8001bb4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	68d9      	ldr	r1, [r3, #12]
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	b29b      	uxth	r3, r3
 8001b74:	461a      	mov	r2, r3
 8001b76:	4613      	mov	r3, r2
 8001b78:	005b      	lsls	r3, r3, #1
 8001b7a:	4413      	add	r3, r2
 8001b7c:	3b1e      	subs	r3, #30
 8001b7e:	2207      	movs	r2, #7
 8001b80:	fa02 f303 	lsl.w	r3, r2, r3
 8001b84:	43da      	mvns	r2, r3
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	400a      	ands	r2, r1
 8001b8c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	68d9      	ldr	r1, [r3, #12]
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	689a      	ldr	r2, [r3, #8]
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	b29b      	uxth	r3, r3
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	005b      	lsls	r3, r3, #1
 8001ba4:	4403      	add	r3, r0
 8001ba6:	3b1e      	subs	r3, #30
 8001ba8:	409a      	lsls	r2, r3
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	430a      	orrs	r2, r1
 8001bb0:	60da      	str	r2, [r3, #12]
 8001bb2:	e022      	b.n	8001bfa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	6919      	ldr	r1, [r3, #16]
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	b29b      	uxth	r3, r3
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	4613      	mov	r3, r2
 8001bc4:	005b      	lsls	r3, r3, #1
 8001bc6:	4413      	add	r3, r2
 8001bc8:	2207      	movs	r2, #7
 8001bca:	fa02 f303 	lsl.w	r3, r2, r3
 8001bce:	43da      	mvns	r2, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	400a      	ands	r2, r1
 8001bd6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	6919      	ldr	r1, [r3, #16]
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	689a      	ldr	r2, [r3, #8]
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	b29b      	uxth	r3, r3
 8001be8:	4618      	mov	r0, r3
 8001bea:	4603      	mov	r3, r0
 8001bec:	005b      	lsls	r3, r3, #1
 8001bee:	4403      	add	r3, r0
 8001bf0:	409a      	lsls	r2, r3
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	430a      	orrs	r2, r1
 8001bf8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	2b06      	cmp	r3, #6
 8001c00:	d824      	bhi.n	8001c4c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	685a      	ldr	r2, [r3, #4]
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	4413      	add	r3, r2
 8001c12:	3b05      	subs	r3, #5
 8001c14:	221f      	movs	r2, #31
 8001c16:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1a:	43da      	mvns	r2, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	400a      	ands	r2, r1
 8001c22:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	b29b      	uxth	r3, r3
 8001c30:	4618      	mov	r0, r3
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	685a      	ldr	r2, [r3, #4]
 8001c36:	4613      	mov	r3, r2
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	4413      	add	r3, r2
 8001c3c:	3b05      	subs	r3, #5
 8001c3e:	fa00 f203 	lsl.w	r2, r0, r3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	430a      	orrs	r2, r1
 8001c48:	635a      	str	r2, [r3, #52]	; 0x34
 8001c4a:	e04c      	b.n	8001ce6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	2b0c      	cmp	r3, #12
 8001c52:	d824      	bhi.n	8001c9e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	685a      	ldr	r2, [r3, #4]
 8001c5e:	4613      	mov	r3, r2
 8001c60:	009b      	lsls	r3, r3, #2
 8001c62:	4413      	add	r3, r2
 8001c64:	3b23      	subs	r3, #35	; 0x23
 8001c66:	221f      	movs	r2, #31
 8001c68:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6c:	43da      	mvns	r2, r3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	400a      	ands	r2, r1
 8001c74:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	b29b      	uxth	r3, r3
 8001c82:	4618      	mov	r0, r3
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	685a      	ldr	r2, [r3, #4]
 8001c88:	4613      	mov	r3, r2
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	4413      	add	r3, r2
 8001c8e:	3b23      	subs	r3, #35	; 0x23
 8001c90:	fa00 f203 	lsl.w	r2, r0, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	430a      	orrs	r2, r1
 8001c9a:	631a      	str	r2, [r3, #48]	; 0x30
 8001c9c:	e023      	b.n	8001ce6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	685a      	ldr	r2, [r3, #4]
 8001ca8:	4613      	mov	r3, r2
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	4413      	add	r3, r2
 8001cae:	3b41      	subs	r3, #65	; 0x41
 8001cb0:	221f      	movs	r2, #31
 8001cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb6:	43da      	mvns	r2, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	400a      	ands	r2, r1
 8001cbe:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	b29b      	uxth	r3, r3
 8001ccc:	4618      	mov	r0, r3
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	685a      	ldr	r2, [r3, #4]
 8001cd2:	4613      	mov	r3, r2
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	4413      	add	r3, r2
 8001cd8:	3b41      	subs	r3, #65	; 0x41
 8001cda:	fa00 f203 	lsl.w	r2, r0, r3
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	430a      	orrs	r2, r1
 8001ce4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ce6:	4b29      	ldr	r3, [pc, #164]	; (8001d8c <HAL_ADC_ConfigChannel+0x250>)
 8001ce8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a28      	ldr	r2, [pc, #160]	; (8001d90 <HAL_ADC_ConfigChannel+0x254>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d10f      	bne.n	8001d14 <HAL_ADC_ConfigChannel+0x1d8>
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2b12      	cmp	r3, #18
 8001cfa:	d10b      	bne.n	8001d14 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a1d      	ldr	r2, [pc, #116]	; (8001d90 <HAL_ADC_ConfigChannel+0x254>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d12b      	bne.n	8001d76 <HAL_ADC_ConfigChannel+0x23a>
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a1c      	ldr	r2, [pc, #112]	; (8001d94 <HAL_ADC_ConfigChannel+0x258>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d003      	beq.n	8001d30 <HAL_ADC_ConfigChannel+0x1f4>
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	2b11      	cmp	r3, #17
 8001d2e:	d122      	bne.n	8001d76 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a11      	ldr	r2, [pc, #68]	; (8001d94 <HAL_ADC_ConfigChannel+0x258>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d111      	bne.n	8001d76 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d52:	4b11      	ldr	r3, [pc, #68]	; (8001d98 <HAL_ADC_ConfigChannel+0x25c>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a11      	ldr	r2, [pc, #68]	; (8001d9c <HAL_ADC_ConfigChannel+0x260>)
 8001d58:	fba2 2303 	umull	r2, r3, r2, r3
 8001d5c:	0c9a      	lsrs	r2, r3, #18
 8001d5e:	4613      	mov	r3, r2
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	4413      	add	r3, r2
 8001d64:	005b      	lsls	r3, r3, #1
 8001d66:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001d68:	e002      	b.n	8001d70 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	3b01      	subs	r3, #1
 8001d6e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d1f9      	bne.n	8001d6a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001d7e:	2300      	movs	r3, #0
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3714      	adds	r7, #20
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr
 8001d8c:	40012300 	.word	0x40012300
 8001d90:	40012000 	.word	0x40012000
 8001d94:	10000012 	.word	0x10000012
 8001d98:	2000000c 	.word	0x2000000c
 8001d9c:	431bde83 	.word	0x431bde83

08001da0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b085      	sub	sp, #20
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001da8:	4b79      	ldr	r3, [pc, #484]	; (8001f90 <ADC_Init+0x1f0>)
 8001daa:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	685a      	ldr	r2, [r3, #4]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	431a      	orrs	r2, r3
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	685a      	ldr	r2, [r3, #4]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001dd4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	6859      	ldr	r1, [r3, #4]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	691b      	ldr	r3, [r3, #16]
 8001de0:	021a      	lsls	r2, r3, #8
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	430a      	orrs	r2, r1
 8001de8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	685a      	ldr	r2, [r3, #4]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001df8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	6859      	ldr	r1, [r3, #4]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	689a      	ldr	r2, [r3, #8]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	430a      	orrs	r2, r1
 8001e0a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	689a      	ldr	r2, [r3, #8]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e1a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	6899      	ldr	r1, [r3, #8]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	68da      	ldr	r2, [r3, #12]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e32:	4a58      	ldr	r2, [pc, #352]	; (8001f94 <ADC_Init+0x1f4>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d022      	beq.n	8001e7e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	689a      	ldr	r2, [r3, #8]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e46:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	6899      	ldr	r1, [r3, #8]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	430a      	orrs	r2, r1
 8001e58:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	689a      	ldr	r2, [r3, #8]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001e68:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	6899      	ldr	r1, [r3, #8]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	430a      	orrs	r2, r1
 8001e7a:	609a      	str	r2, [r3, #8]
 8001e7c:	e00f      	b.n	8001e9e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	689a      	ldr	r2, [r3, #8]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e8c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	689a      	ldr	r2, [r3, #8]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001e9c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	689a      	ldr	r2, [r3, #8]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f022 0202 	bic.w	r2, r2, #2
 8001eac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	6899      	ldr	r1, [r3, #8]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	7e1b      	ldrb	r3, [r3, #24]
 8001eb8:	005a      	lsls	r2, r3, #1
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	430a      	orrs	r2, r1
 8001ec0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d01b      	beq.n	8001f04 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	685a      	ldr	r2, [r3, #4]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001eda:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	685a      	ldr	r2, [r3, #4]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001eea:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	6859      	ldr	r1, [r3, #4]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef6:	3b01      	subs	r3, #1
 8001ef8:	035a      	lsls	r2, r3, #13
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	430a      	orrs	r2, r1
 8001f00:	605a      	str	r2, [r3, #4]
 8001f02:	e007      	b.n	8001f14 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	685a      	ldr	r2, [r3, #4]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f12:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001f22:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	69db      	ldr	r3, [r3, #28]
 8001f2e:	3b01      	subs	r3, #1
 8001f30:	051a      	lsls	r2, r3, #20
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	430a      	orrs	r2, r1
 8001f38:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	689a      	ldr	r2, [r3, #8]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001f48:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	6899      	ldr	r1, [r3, #8]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001f56:	025a      	lsls	r2, r3, #9
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	430a      	orrs	r2, r1
 8001f5e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	689a      	ldr	r2, [r3, #8]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f6e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	6899      	ldr	r1, [r3, #8]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	695b      	ldr	r3, [r3, #20]
 8001f7a:	029a      	lsls	r2, r3, #10
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	430a      	orrs	r2, r1
 8001f82:	609a      	str	r2, [r3, #8]
}
 8001f84:	bf00      	nop
 8001f86:	3714      	adds	r7, #20
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr
 8001f90:	40012300 	.word	0x40012300
 8001f94:	0f000001 	.word	0x0f000001

08001f98 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b084      	sub	sp, #16
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fa4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001faa:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d13c      	bne.n	800202c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d12b      	bne.n	8002024 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d127      	bne.n	8002024 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fda:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d006      	beq.n	8001ff0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d119      	bne.n	8002024 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	685a      	ldr	r2, [r3, #4]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f022 0220 	bic.w	r2, r2, #32
 8001ffe:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002004:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002010:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002014:	2b00      	cmp	r3, #0
 8002016:	d105      	bne.n	8002024 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201c:	f043 0201 	orr.w	r2, r3, #1
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002024:	68f8      	ldr	r0, [r7, #12]
 8002026:	f7ff fd61 	bl	8001aec <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800202a:	e00e      	b.n	800204a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002030:	f003 0310 	and.w	r3, r3, #16
 8002034:	2b00      	cmp	r3, #0
 8002036:	d003      	beq.n	8002040 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002038:	68f8      	ldr	r0, [r7, #12]
 800203a:	f7ff fd75 	bl	8001b28 <HAL_ADC_ErrorCallback>
}
 800203e:	e004      	b.n	800204a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002044:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	4798      	blx	r3
}
 800204a:	bf00      	nop
 800204c:	3710      	adds	r7, #16
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}

08002052 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002052:	b580      	push	{r7, lr}
 8002054:	b084      	sub	sp, #16
 8002056:	af00      	add	r7, sp, #0
 8002058:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800205e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002060:	68f8      	ldr	r0, [r7, #12]
 8002062:	f7ff fd4d 	bl	8001b00 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002066:	bf00      	nop
 8002068:	3710      	adds	r7, #16
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}

0800206e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800206e:	b580      	push	{r7, lr}
 8002070:	b084      	sub	sp, #16
 8002072:	af00      	add	r7, sp, #0
 8002074:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800207a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	2240      	movs	r2, #64	; 0x40
 8002080:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002086:	f043 0204 	orr.w	r2, r3, #4
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800208e:	68f8      	ldr	r0, [r7, #12]
 8002090:	f7ff fd4a 	bl	8001b28 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002094:	bf00      	nop
 8002096:	3710      	adds	r7, #16
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}

0800209c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80020a4:	bf00      	nop
 80020a6:	370c      	adds	r7, #12
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr

080020b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b085      	sub	sp, #20
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	f003 0307 	and.w	r3, r3, #7
 80020be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020c0:	4b0c      	ldr	r3, [pc, #48]	; (80020f4 <__NVIC_SetPriorityGrouping+0x44>)
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020c6:	68ba      	ldr	r2, [r7, #8]
 80020c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020cc:	4013      	ands	r3, r2
 80020ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020e2:	4a04      	ldr	r2, [pc, #16]	; (80020f4 <__NVIC_SetPriorityGrouping+0x44>)
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	60d3      	str	r3, [r2, #12]
}
 80020e8:	bf00      	nop
 80020ea:	3714      	adds	r7, #20
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr
 80020f4:	e000ed00 	.word	0xe000ed00

080020f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020fc:	4b04      	ldr	r3, [pc, #16]	; (8002110 <__NVIC_GetPriorityGrouping+0x18>)
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	0a1b      	lsrs	r3, r3, #8
 8002102:	f003 0307 	and.w	r3, r3, #7
}
 8002106:	4618      	mov	r0, r3
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr
 8002110:	e000ed00 	.word	0xe000ed00

08002114 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	4603      	mov	r3, r0
 800211c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800211e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002122:	2b00      	cmp	r3, #0
 8002124:	db0b      	blt.n	800213e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002126:	79fb      	ldrb	r3, [r7, #7]
 8002128:	f003 021f 	and.w	r2, r3, #31
 800212c:	4907      	ldr	r1, [pc, #28]	; (800214c <__NVIC_EnableIRQ+0x38>)
 800212e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002132:	095b      	lsrs	r3, r3, #5
 8002134:	2001      	movs	r0, #1
 8002136:	fa00 f202 	lsl.w	r2, r0, r2
 800213a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800213e:	bf00      	nop
 8002140:	370c      	adds	r7, #12
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop
 800214c:	e000e100 	.word	0xe000e100

08002150 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	4603      	mov	r3, r0
 8002158:	6039      	str	r1, [r7, #0]
 800215a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800215c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002160:	2b00      	cmp	r3, #0
 8002162:	db0a      	blt.n	800217a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	b2da      	uxtb	r2, r3
 8002168:	490c      	ldr	r1, [pc, #48]	; (800219c <__NVIC_SetPriority+0x4c>)
 800216a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800216e:	0112      	lsls	r2, r2, #4
 8002170:	b2d2      	uxtb	r2, r2
 8002172:	440b      	add	r3, r1
 8002174:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002178:	e00a      	b.n	8002190 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	b2da      	uxtb	r2, r3
 800217e:	4908      	ldr	r1, [pc, #32]	; (80021a0 <__NVIC_SetPriority+0x50>)
 8002180:	79fb      	ldrb	r3, [r7, #7]
 8002182:	f003 030f 	and.w	r3, r3, #15
 8002186:	3b04      	subs	r3, #4
 8002188:	0112      	lsls	r2, r2, #4
 800218a:	b2d2      	uxtb	r2, r2
 800218c:	440b      	add	r3, r1
 800218e:	761a      	strb	r2, [r3, #24]
}
 8002190:	bf00      	nop
 8002192:	370c      	adds	r7, #12
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr
 800219c:	e000e100 	.word	0xe000e100
 80021a0:	e000ed00 	.word	0xe000ed00

080021a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b089      	sub	sp, #36	; 0x24
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	60f8      	str	r0, [r7, #12]
 80021ac:	60b9      	str	r1, [r7, #8]
 80021ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	f003 0307 	and.w	r3, r3, #7
 80021b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	f1c3 0307 	rsb	r3, r3, #7
 80021be:	2b04      	cmp	r3, #4
 80021c0:	bf28      	it	cs
 80021c2:	2304      	movcs	r3, #4
 80021c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	3304      	adds	r3, #4
 80021ca:	2b06      	cmp	r3, #6
 80021cc:	d902      	bls.n	80021d4 <NVIC_EncodePriority+0x30>
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	3b03      	subs	r3, #3
 80021d2:	e000      	b.n	80021d6 <NVIC_EncodePriority+0x32>
 80021d4:	2300      	movs	r3, #0
 80021d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021d8:	f04f 32ff 	mov.w	r2, #4294967295
 80021dc:	69bb      	ldr	r3, [r7, #24]
 80021de:	fa02 f303 	lsl.w	r3, r2, r3
 80021e2:	43da      	mvns	r2, r3
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	401a      	ands	r2, r3
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021ec:	f04f 31ff 	mov.w	r1, #4294967295
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	fa01 f303 	lsl.w	r3, r1, r3
 80021f6:	43d9      	mvns	r1, r3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021fc:	4313      	orrs	r3, r2
         );
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3724      	adds	r7, #36	; 0x24
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr
	...

0800220c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	3b01      	subs	r3, #1
 8002218:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800221c:	d301      	bcc.n	8002222 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800221e:	2301      	movs	r3, #1
 8002220:	e00f      	b.n	8002242 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002222:	4a0a      	ldr	r2, [pc, #40]	; (800224c <SysTick_Config+0x40>)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	3b01      	subs	r3, #1
 8002228:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800222a:	210f      	movs	r1, #15
 800222c:	f04f 30ff 	mov.w	r0, #4294967295
 8002230:	f7ff ff8e 	bl	8002150 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002234:	4b05      	ldr	r3, [pc, #20]	; (800224c <SysTick_Config+0x40>)
 8002236:	2200      	movs	r2, #0
 8002238:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800223a:	4b04      	ldr	r3, [pc, #16]	; (800224c <SysTick_Config+0x40>)
 800223c:	2207      	movs	r2, #7
 800223e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002240:	2300      	movs	r3, #0
}
 8002242:	4618      	mov	r0, r3
 8002244:	3708      	adds	r7, #8
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	e000e010 	.word	0xe000e010

08002250 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002258:	6878      	ldr	r0, [r7, #4]
 800225a:	f7ff ff29 	bl	80020b0 <__NVIC_SetPriorityGrouping>
}
 800225e:	bf00      	nop
 8002260:	3708      	adds	r7, #8
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}

08002266 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002266:	b580      	push	{r7, lr}
 8002268:	b086      	sub	sp, #24
 800226a:	af00      	add	r7, sp, #0
 800226c:	4603      	mov	r3, r0
 800226e:	60b9      	str	r1, [r7, #8]
 8002270:	607a      	str	r2, [r7, #4]
 8002272:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002274:	2300      	movs	r3, #0
 8002276:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002278:	f7ff ff3e 	bl	80020f8 <__NVIC_GetPriorityGrouping>
 800227c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800227e:	687a      	ldr	r2, [r7, #4]
 8002280:	68b9      	ldr	r1, [r7, #8]
 8002282:	6978      	ldr	r0, [r7, #20]
 8002284:	f7ff ff8e 	bl	80021a4 <NVIC_EncodePriority>
 8002288:	4602      	mov	r2, r0
 800228a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800228e:	4611      	mov	r1, r2
 8002290:	4618      	mov	r0, r3
 8002292:	f7ff ff5d 	bl	8002150 <__NVIC_SetPriority>
}
 8002296:	bf00      	nop
 8002298:	3718      	adds	r7, #24
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}

0800229e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800229e:	b580      	push	{r7, lr}
 80022a0:	b082      	sub	sp, #8
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	4603      	mov	r3, r0
 80022a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ac:	4618      	mov	r0, r3
 80022ae:	f7ff ff31 	bl	8002114 <__NVIC_EnableIRQ>
}
 80022b2:	bf00      	nop
 80022b4:	3708      	adds	r7, #8
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}

080022ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022ba:	b580      	push	{r7, lr}
 80022bc:	b082      	sub	sp, #8
 80022be:	af00      	add	r7, sp, #0
 80022c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f7ff ffa2 	bl	800220c <SysTick_Config>
 80022c8:	4603      	mov	r3, r0
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3708      	adds	r7, #8
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
	...

080022d4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b086      	sub	sp, #24
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80022dc:	2300      	movs	r3, #0
 80022de:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80022e0:	f7ff f9a0 	bl	8001624 <HAL_GetTick>
 80022e4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d101      	bne.n	80022f0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e099      	b.n	8002424 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2200      	movs	r2, #0
 80022f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2202      	movs	r2, #2
 80022fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f022 0201 	bic.w	r2, r2, #1
 800230e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002310:	e00f      	b.n	8002332 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002312:	f7ff f987 	bl	8001624 <HAL_GetTick>
 8002316:	4602      	mov	r2, r0
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	2b05      	cmp	r3, #5
 800231e:	d908      	bls.n	8002332 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2220      	movs	r2, #32
 8002324:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2203      	movs	r2, #3
 800232a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	e078      	b.n	8002424 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0301 	and.w	r3, r3, #1
 800233c:	2b00      	cmp	r3, #0
 800233e:	d1e8      	bne.n	8002312 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002348:	697a      	ldr	r2, [r7, #20]
 800234a:	4b38      	ldr	r3, [pc, #224]	; (800242c <HAL_DMA_Init+0x158>)
 800234c:	4013      	ands	r3, r2
 800234e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	685a      	ldr	r2, [r3, #4]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800235e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	691b      	ldr	r3, [r3, #16]
 8002364:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800236a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	699b      	ldr	r3, [r3, #24]
 8002370:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002376:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6a1b      	ldr	r3, [r3, #32]
 800237c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800237e:	697a      	ldr	r2, [r7, #20]
 8002380:	4313      	orrs	r3, r2
 8002382:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002388:	2b04      	cmp	r3, #4
 800238a:	d107      	bne.n	800239c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002394:	4313      	orrs	r3, r2
 8002396:	697a      	ldr	r2, [r7, #20]
 8002398:	4313      	orrs	r3, r2
 800239a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	697a      	ldr	r2, [r7, #20]
 80023a2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	695b      	ldr	r3, [r3, #20]
 80023aa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	f023 0307 	bic.w	r3, r3, #7
 80023b2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b8:	697a      	ldr	r2, [r7, #20]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c2:	2b04      	cmp	r3, #4
 80023c4:	d117      	bne.n	80023f6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ca:	697a      	ldr	r2, [r7, #20]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d00e      	beq.n	80023f6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	f000 fa91 	bl	8002900 <DMA_CheckFifoParam>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d008      	beq.n	80023f6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2240      	movs	r2, #64	; 0x40
 80023e8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2201      	movs	r2, #1
 80023ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80023f2:	2301      	movs	r3, #1
 80023f4:	e016      	b.n	8002424 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	697a      	ldr	r2, [r7, #20]
 80023fc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f000 fa48 	bl	8002894 <DMA_CalcBaseAndBitshift>
 8002404:	4603      	mov	r3, r0
 8002406:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800240c:	223f      	movs	r2, #63	; 0x3f
 800240e:	409a      	lsls	r2, r3
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2200      	movs	r2, #0
 8002418:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2201      	movs	r2, #1
 800241e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002422:	2300      	movs	r3, #0
}
 8002424:	4618      	mov	r0, r3
 8002426:	3718      	adds	r7, #24
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}
 800242c:	f010803f 	.word	0xf010803f

08002430 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b086      	sub	sp, #24
 8002434:	af00      	add	r7, sp, #0
 8002436:	60f8      	str	r0, [r7, #12]
 8002438:	60b9      	str	r1, [r7, #8]
 800243a:	607a      	str	r2, [r7, #4]
 800243c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800243e:	2300      	movs	r3, #0
 8002440:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002446:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800244e:	2b01      	cmp	r3, #1
 8002450:	d101      	bne.n	8002456 <HAL_DMA_Start_IT+0x26>
 8002452:	2302      	movs	r3, #2
 8002454:	e040      	b.n	80024d8 <HAL_DMA_Start_IT+0xa8>
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2201      	movs	r2, #1
 800245a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002464:	b2db      	uxtb	r3, r3
 8002466:	2b01      	cmp	r3, #1
 8002468:	d12f      	bne.n	80024ca <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2202      	movs	r2, #2
 800246e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2200      	movs	r2, #0
 8002476:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	68b9      	ldr	r1, [r7, #8]
 800247e:	68f8      	ldr	r0, [r7, #12]
 8002480:	f000 f9da 	bl	8002838 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002488:	223f      	movs	r2, #63	; 0x3f
 800248a:	409a      	lsls	r2, r3
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f042 0216 	orr.w	r2, r2, #22
 800249e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d007      	beq.n	80024b8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f042 0208 	orr.w	r2, r2, #8
 80024b6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f042 0201 	orr.w	r2, r2, #1
 80024c6:	601a      	str	r2, [r3, #0]
 80024c8:	e005      	b.n	80024d6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2200      	movs	r2, #0
 80024ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80024d2:	2302      	movs	r3, #2
 80024d4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80024d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3718      	adds	r7, #24
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}

080024e0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	2b02      	cmp	r3, #2
 80024f2:	d004      	beq.n	80024fe <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2280      	movs	r2, #128	; 0x80
 80024f8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e00c      	b.n	8002518 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2205      	movs	r2, #5
 8002502:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f022 0201 	bic.w	r2, r2, #1
 8002514:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002516:	2300      	movs	r3, #0
}
 8002518:	4618      	mov	r0, r3
 800251a:	370c      	adds	r7, #12
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr

08002524 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b086      	sub	sp, #24
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800252c:	2300      	movs	r3, #0
 800252e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002530:	4b92      	ldr	r3, [pc, #584]	; (800277c <HAL_DMA_IRQHandler+0x258>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a92      	ldr	r2, [pc, #584]	; (8002780 <HAL_DMA_IRQHandler+0x25c>)
 8002536:	fba2 2303 	umull	r2, r3, r2, r3
 800253a:	0a9b      	lsrs	r3, r3, #10
 800253c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002542:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800254e:	2208      	movs	r2, #8
 8002550:	409a      	lsls	r2, r3
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	4013      	ands	r3, r2
 8002556:	2b00      	cmp	r3, #0
 8002558:	d01a      	beq.n	8002590 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 0304 	and.w	r3, r3, #4
 8002564:	2b00      	cmp	r3, #0
 8002566:	d013      	beq.n	8002590 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f022 0204 	bic.w	r2, r2, #4
 8002576:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800257c:	2208      	movs	r2, #8
 800257e:	409a      	lsls	r2, r3
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002588:	f043 0201 	orr.w	r2, r3, #1
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002594:	2201      	movs	r2, #1
 8002596:	409a      	lsls	r2, r3
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	4013      	ands	r3, r2
 800259c:	2b00      	cmp	r3, #0
 800259e:	d012      	beq.n	80025c6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	695b      	ldr	r3, [r3, #20]
 80025a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d00b      	beq.n	80025c6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025b2:	2201      	movs	r2, #1
 80025b4:	409a      	lsls	r2, r3
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025be:	f043 0202 	orr.w	r2, r3, #2
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025ca:	2204      	movs	r2, #4
 80025cc:	409a      	lsls	r2, r3
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	4013      	ands	r3, r2
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d012      	beq.n	80025fc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0302 	and.w	r3, r3, #2
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d00b      	beq.n	80025fc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025e8:	2204      	movs	r2, #4
 80025ea:	409a      	lsls	r2, r3
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025f4:	f043 0204 	orr.w	r2, r3, #4
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002600:	2210      	movs	r2, #16
 8002602:	409a      	lsls	r2, r3
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	4013      	ands	r3, r2
 8002608:	2b00      	cmp	r3, #0
 800260a:	d043      	beq.n	8002694 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0308 	and.w	r3, r3, #8
 8002616:	2b00      	cmp	r3, #0
 8002618:	d03c      	beq.n	8002694 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800261e:	2210      	movs	r2, #16
 8002620:	409a      	lsls	r2, r3
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002630:	2b00      	cmp	r3, #0
 8002632:	d018      	beq.n	8002666 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d108      	bne.n	8002654 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002646:	2b00      	cmp	r3, #0
 8002648:	d024      	beq.n	8002694 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	4798      	blx	r3
 8002652:	e01f      	b.n	8002694 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002658:	2b00      	cmp	r3, #0
 800265a:	d01b      	beq.n	8002694 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002660:	6878      	ldr	r0, [r7, #4]
 8002662:	4798      	blx	r3
 8002664:	e016      	b.n	8002694 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002670:	2b00      	cmp	r3, #0
 8002672:	d107      	bne.n	8002684 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f022 0208 	bic.w	r2, r2, #8
 8002682:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002688:	2b00      	cmp	r3, #0
 800268a:	d003      	beq.n	8002694 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002690:	6878      	ldr	r0, [r7, #4]
 8002692:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002698:	2220      	movs	r2, #32
 800269a:	409a      	lsls	r2, r3
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	4013      	ands	r3, r2
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	f000 808e 	beq.w	80027c2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 0310 	and.w	r3, r3, #16
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	f000 8086 	beq.w	80027c2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026ba:	2220      	movs	r2, #32
 80026bc:	409a      	lsls	r2, r3
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	2b05      	cmp	r3, #5
 80026cc:	d136      	bne.n	800273c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f022 0216 	bic.w	r2, r2, #22
 80026dc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	695a      	ldr	r2, [r3, #20]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026ec:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d103      	bne.n	80026fe <HAL_DMA_IRQHandler+0x1da>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d007      	beq.n	800270e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f022 0208 	bic.w	r2, r2, #8
 800270c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002712:	223f      	movs	r2, #63	; 0x3f
 8002714:	409a      	lsls	r2, r3
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2201      	movs	r2, #1
 8002726:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800272e:	2b00      	cmp	r3, #0
 8002730:	d07d      	beq.n	800282e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	4798      	blx	r3
        }
        return;
 800273a:	e078      	b.n	800282e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d01c      	beq.n	8002784 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002754:	2b00      	cmp	r3, #0
 8002756:	d108      	bne.n	800276a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800275c:	2b00      	cmp	r3, #0
 800275e:	d030      	beq.n	80027c2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	4798      	blx	r3
 8002768:	e02b      	b.n	80027c2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800276e:	2b00      	cmp	r3, #0
 8002770:	d027      	beq.n	80027c2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	4798      	blx	r3
 800277a:	e022      	b.n	80027c2 <HAL_DMA_IRQHandler+0x29e>
 800277c:	2000000c 	.word	0x2000000c
 8002780:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800278e:	2b00      	cmp	r3, #0
 8002790:	d10f      	bne.n	80027b2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f022 0210 	bic.w	r2, r2, #16
 80027a0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2200      	movs	r2, #0
 80027a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2201      	movs	r2, #1
 80027ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d003      	beq.n	80027c2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d032      	beq.n	8002830 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027ce:	f003 0301 	and.w	r3, r3, #1
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d022      	beq.n	800281c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2205      	movs	r2, #5
 80027da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f022 0201 	bic.w	r2, r2, #1
 80027ec:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	3301      	adds	r3, #1
 80027f2:	60bb      	str	r3, [r7, #8]
 80027f4:	697a      	ldr	r2, [r7, #20]
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d307      	bcc.n	800280a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0301 	and.w	r3, r3, #1
 8002804:	2b00      	cmp	r3, #0
 8002806:	d1f2      	bne.n	80027ee <HAL_DMA_IRQHandler+0x2ca>
 8002808:	e000      	b.n	800280c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800280a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2200      	movs	r2, #0
 8002810:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2201      	movs	r2, #1
 8002818:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002820:	2b00      	cmp	r3, #0
 8002822:	d005      	beq.n	8002830 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	4798      	blx	r3
 800282c:	e000      	b.n	8002830 <HAL_DMA_IRQHandler+0x30c>
        return;
 800282e:	bf00      	nop
    }
  }
}
 8002830:	3718      	adds	r7, #24
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop

08002838 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002838:	b480      	push	{r7}
 800283a:	b085      	sub	sp, #20
 800283c:	af00      	add	r7, sp, #0
 800283e:	60f8      	str	r0, [r7, #12]
 8002840:	60b9      	str	r1, [r7, #8]
 8002842:	607a      	str	r2, [r7, #4]
 8002844:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002854:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	683a      	ldr	r2, [r7, #0]
 800285c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	2b40      	cmp	r3, #64	; 0x40
 8002864:	d108      	bne.n	8002878 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	68ba      	ldr	r2, [r7, #8]
 8002874:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002876:	e007      	b.n	8002888 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	68ba      	ldr	r2, [r7, #8]
 800287e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	687a      	ldr	r2, [r7, #4]
 8002886:	60da      	str	r2, [r3, #12]
}
 8002888:	bf00      	nop
 800288a:	3714      	adds	r7, #20
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr

08002894 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002894:	b480      	push	{r7}
 8002896:	b085      	sub	sp, #20
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	3b10      	subs	r3, #16
 80028a4:	4a14      	ldr	r2, [pc, #80]	; (80028f8 <DMA_CalcBaseAndBitshift+0x64>)
 80028a6:	fba2 2303 	umull	r2, r3, r2, r3
 80028aa:	091b      	lsrs	r3, r3, #4
 80028ac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80028ae:	4a13      	ldr	r2, [pc, #76]	; (80028fc <DMA_CalcBaseAndBitshift+0x68>)
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	4413      	add	r3, r2
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	461a      	mov	r2, r3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2b03      	cmp	r3, #3
 80028c0:	d909      	bls.n	80028d6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80028ca:	f023 0303 	bic.w	r3, r3, #3
 80028ce:	1d1a      	adds	r2, r3, #4
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	659a      	str	r2, [r3, #88]	; 0x58
 80028d4:	e007      	b.n	80028e6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80028de:	f023 0303 	bic.w	r3, r3, #3
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3714      	adds	r7, #20
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr
 80028f6:	bf00      	nop
 80028f8:	aaaaaaab 	.word	0xaaaaaaab
 80028fc:	08005298 	.word	0x08005298

08002900 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002900:	b480      	push	{r7}
 8002902:	b085      	sub	sp, #20
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002908:	2300      	movs	r3, #0
 800290a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002910:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	699b      	ldr	r3, [r3, #24]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d11f      	bne.n	800295a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	2b03      	cmp	r3, #3
 800291e:	d855      	bhi.n	80029cc <DMA_CheckFifoParam+0xcc>
 8002920:	a201      	add	r2, pc, #4	; (adr r2, 8002928 <DMA_CheckFifoParam+0x28>)
 8002922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002926:	bf00      	nop
 8002928:	08002939 	.word	0x08002939
 800292c:	0800294b 	.word	0x0800294b
 8002930:	08002939 	.word	0x08002939
 8002934:	080029cd 	.word	0x080029cd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800293c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002940:	2b00      	cmp	r3, #0
 8002942:	d045      	beq.n	80029d0 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002948:	e042      	b.n	80029d0 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800294e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002952:	d13f      	bne.n	80029d4 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002958:	e03c      	b.n	80029d4 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	699b      	ldr	r3, [r3, #24]
 800295e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002962:	d121      	bne.n	80029a8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	2b03      	cmp	r3, #3
 8002968:	d836      	bhi.n	80029d8 <DMA_CheckFifoParam+0xd8>
 800296a:	a201      	add	r2, pc, #4	; (adr r2, 8002970 <DMA_CheckFifoParam+0x70>)
 800296c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002970:	08002981 	.word	0x08002981
 8002974:	08002987 	.word	0x08002987
 8002978:	08002981 	.word	0x08002981
 800297c:	08002999 	.word	0x08002999
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	73fb      	strb	r3, [r7, #15]
      break;
 8002984:	e02f      	b.n	80029e6 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800298a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d024      	beq.n	80029dc <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002996:	e021      	b.n	80029dc <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800299c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80029a0:	d11e      	bne.n	80029e0 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80029a6:	e01b      	b.n	80029e0 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d902      	bls.n	80029b4 <DMA_CheckFifoParam+0xb4>
 80029ae:	2b03      	cmp	r3, #3
 80029b0:	d003      	beq.n	80029ba <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80029b2:	e018      	b.n	80029e6 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	73fb      	strb	r3, [r7, #15]
      break;
 80029b8:	e015      	b.n	80029e6 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d00e      	beq.n	80029e4 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	73fb      	strb	r3, [r7, #15]
      break;
 80029ca:	e00b      	b.n	80029e4 <DMA_CheckFifoParam+0xe4>
      break;
 80029cc:	bf00      	nop
 80029ce:	e00a      	b.n	80029e6 <DMA_CheckFifoParam+0xe6>
      break;
 80029d0:	bf00      	nop
 80029d2:	e008      	b.n	80029e6 <DMA_CheckFifoParam+0xe6>
      break;
 80029d4:	bf00      	nop
 80029d6:	e006      	b.n	80029e6 <DMA_CheckFifoParam+0xe6>
      break;
 80029d8:	bf00      	nop
 80029da:	e004      	b.n	80029e6 <DMA_CheckFifoParam+0xe6>
      break;
 80029dc:	bf00      	nop
 80029de:	e002      	b.n	80029e6 <DMA_CheckFifoParam+0xe6>
      break;   
 80029e0:	bf00      	nop
 80029e2:	e000      	b.n	80029e6 <DMA_CheckFifoParam+0xe6>
      break;
 80029e4:	bf00      	nop
    }
  } 
  
  return status; 
 80029e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	3714      	adds	r7, #20
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr

080029f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b089      	sub	sp, #36	; 0x24
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80029fe:	2300      	movs	r3, #0
 8002a00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a02:	2300      	movs	r3, #0
 8002a04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a06:	2300      	movs	r3, #0
 8002a08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	61fb      	str	r3, [r7, #28]
 8002a0e:	e159      	b.n	8002cc4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a10:	2201      	movs	r2, #1
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	fa02 f303 	lsl.w	r3, r2, r3
 8002a18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	697a      	ldr	r2, [r7, #20]
 8002a20:	4013      	ands	r3, r2
 8002a22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a24:	693a      	ldr	r2, [r7, #16]
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	f040 8148 	bne.w	8002cbe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d00b      	beq.n	8002a4e <HAL_GPIO_Init+0x5a>
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d007      	beq.n	8002a4e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002a42:	2b11      	cmp	r3, #17
 8002a44:	d003      	beq.n	8002a4e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	2b12      	cmp	r3, #18
 8002a4c:	d130      	bne.n	8002ab0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	005b      	lsls	r3, r3, #1
 8002a58:	2203      	movs	r2, #3
 8002a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5e:	43db      	mvns	r3, r3
 8002a60:	69ba      	ldr	r2, [r7, #24]
 8002a62:	4013      	ands	r3, r2
 8002a64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	68da      	ldr	r2, [r3, #12]
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	005b      	lsls	r3, r3, #1
 8002a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a72:	69ba      	ldr	r2, [r7, #24]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	69ba      	ldr	r2, [r7, #24]
 8002a7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a84:	2201      	movs	r2, #1
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8c:	43db      	mvns	r3, r3
 8002a8e:	69ba      	ldr	r2, [r7, #24]
 8002a90:	4013      	ands	r3, r2
 8002a92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	091b      	lsrs	r3, r3, #4
 8002a9a:	f003 0201 	and.w	r2, r3, #1
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa4:	69ba      	ldr	r2, [r7, #24]
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	69ba      	ldr	r2, [r7, #24]
 8002aae:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ab6:	69fb      	ldr	r3, [r7, #28]
 8002ab8:	005b      	lsls	r3, r3, #1
 8002aba:	2203      	movs	r2, #3
 8002abc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac0:	43db      	mvns	r3, r3
 8002ac2:	69ba      	ldr	r2, [r7, #24]
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	689a      	ldr	r2, [r3, #8]
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	005b      	lsls	r3, r3, #1
 8002ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad4:	69ba      	ldr	r2, [r7, #24]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	69ba      	ldr	r2, [r7, #24]
 8002ade:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	2b02      	cmp	r3, #2
 8002ae6:	d003      	beq.n	8002af0 <HAL_GPIO_Init+0xfc>
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	2b12      	cmp	r3, #18
 8002aee:	d123      	bne.n	8002b38 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	08da      	lsrs	r2, r3, #3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	3208      	adds	r2, #8
 8002af8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002afc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	f003 0307 	and.w	r3, r3, #7
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	220f      	movs	r2, #15
 8002b08:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0c:	43db      	mvns	r3, r3
 8002b0e:	69ba      	ldr	r2, [r7, #24]
 8002b10:	4013      	ands	r3, r2
 8002b12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	691a      	ldr	r2, [r3, #16]
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	f003 0307 	and.w	r3, r3, #7
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	fa02 f303 	lsl.w	r3, r2, r3
 8002b24:	69ba      	ldr	r2, [r7, #24]
 8002b26:	4313      	orrs	r3, r2
 8002b28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	08da      	lsrs	r2, r3, #3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	3208      	adds	r2, #8
 8002b32:	69b9      	ldr	r1, [r7, #24]
 8002b34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	005b      	lsls	r3, r3, #1
 8002b42:	2203      	movs	r2, #3
 8002b44:	fa02 f303 	lsl.w	r3, r2, r3
 8002b48:	43db      	mvns	r3, r3
 8002b4a:	69ba      	ldr	r2, [r7, #24]
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f003 0203 	and.w	r2, r3, #3
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	005b      	lsls	r3, r3, #1
 8002b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b60:	69ba      	ldr	r2, [r7, #24]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	69ba      	ldr	r2, [r7, #24]
 8002b6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	f000 80a2 	beq.w	8002cbe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	60fb      	str	r3, [r7, #12]
 8002b7e:	4b56      	ldr	r3, [pc, #344]	; (8002cd8 <HAL_GPIO_Init+0x2e4>)
 8002b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b82:	4a55      	ldr	r2, [pc, #340]	; (8002cd8 <HAL_GPIO_Init+0x2e4>)
 8002b84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b88:	6453      	str	r3, [r2, #68]	; 0x44
 8002b8a:	4b53      	ldr	r3, [pc, #332]	; (8002cd8 <HAL_GPIO_Init+0x2e4>)
 8002b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b92:	60fb      	str	r3, [r7, #12]
 8002b94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b96:	4a51      	ldr	r2, [pc, #324]	; (8002cdc <HAL_GPIO_Init+0x2e8>)
 8002b98:	69fb      	ldr	r3, [r7, #28]
 8002b9a:	089b      	lsrs	r3, r3, #2
 8002b9c:	3302      	adds	r3, #2
 8002b9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ba2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	f003 0303 	and.w	r3, r3, #3
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	220f      	movs	r2, #15
 8002bae:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb2:	43db      	mvns	r3, r3
 8002bb4:	69ba      	ldr	r2, [r7, #24]
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4a48      	ldr	r2, [pc, #288]	; (8002ce0 <HAL_GPIO_Init+0x2ec>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d019      	beq.n	8002bf6 <HAL_GPIO_Init+0x202>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	4a47      	ldr	r2, [pc, #284]	; (8002ce4 <HAL_GPIO_Init+0x2f0>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d013      	beq.n	8002bf2 <HAL_GPIO_Init+0x1fe>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4a46      	ldr	r2, [pc, #280]	; (8002ce8 <HAL_GPIO_Init+0x2f4>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d00d      	beq.n	8002bee <HAL_GPIO_Init+0x1fa>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4a45      	ldr	r2, [pc, #276]	; (8002cec <HAL_GPIO_Init+0x2f8>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d007      	beq.n	8002bea <HAL_GPIO_Init+0x1f6>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4a44      	ldr	r2, [pc, #272]	; (8002cf0 <HAL_GPIO_Init+0x2fc>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d101      	bne.n	8002be6 <HAL_GPIO_Init+0x1f2>
 8002be2:	2304      	movs	r3, #4
 8002be4:	e008      	b.n	8002bf8 <HAL_GPIO_Init+0x204>
 8002be6:	2307      	movs	r3, #7
 8002be8:	e006      	b.n	8002bf8 <HAL_GPIO_Init+0x204>
 8002bea:	2303      	movs	r3, #3
 8002bec:	e004      	b.n	8002bf8 <HAL_GPIO_Init+0x204>
 8002bee:	2302      	movs	r3, #2
 8002bf0:	e002      	b.n	8002bf8 <HAL_GPIO_Init+0x204>
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e000      	b.n	8002bf8 <HAL_GPIO_Init+0x204>
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	69fa      	ldr	r2, [r7, #28]
 8002bfa:	f002 0203 	and.w	r2, r2, #3
 8002bfe:	0092      	lsls	r2, r2, #2
 8002c00:	4093      	lsls	r3, r2
 8002c02:	69ba      	ldr	r2, [r7, #24]
 8002c04:	4313      	orrs	r3, r2
 8002c06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c08:	4934      	ldr	r1, [pc, #208]	; (8002cdc <HAL_GPIO_Init+0x2e8>)
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	089b      	lsrs	r3, r3, #2
 8002c0e:	3302      	adds	r3, #2
 8002c10:	69ba      	ldr	r2, [r7, #24]
 8002c12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c16:	4b37      	ldr	r3, [pc, #220]	; (8002cf4 <HAL_GPIO_Init+0x300>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	43db      	mvns	r3, r3
 8002c20:	69ba      	ldr	r2, [r7, #24]
 8002c22:	4013      	ands	r3, r2
 8002c24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d003      	beq.n	8002c3a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002c32:	69ba      	ldr	r2, [r7, #24]
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	4313      	orrs	r3, r2
 8002c38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c3a:	4a2e      	ldr	r2, [pc, #184]	; (8002cf4 <HAL_GPIO_Init+0x300>)
 8002c3c:	69bb      	ldr	r3, [r7, #24]
 8002c3e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002c40:	4b2c      	ldr	r3, [pc, #176]	; (8002cf4 <HAL_GPIO_Init+0x300>)
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	43db      	mvns	r3, r3
 8002c4a:	69ba      	ldr	r2, [r7, #24]
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d003      	beq.n	8002c64 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002c5c:	69ba      	ldr	r2, [r7, #24]
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	4313      	orrs	r3, r2
 8002c62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c64:	4a23      	ldr	r2, [pc, #140]	; (8002cf4 <HAL_GPIO_Init+0x300>)
 8002c66:	69bb      	ldr	r3, [r7, #24]
 8002c68:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c6a:	4b22      	ldr	r3, [pc, #136]	; (8002cf4 <HAL_GPIO_Init+0x300>)
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	43db      	mvns	r3, r3
 8002c74:	69ba      	ldr	r2, [r7, #24]
 8002c76:	4013      	ands	r3, r2
 8002c78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d003      	beq.n	8002c8e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002c86:	69ba      	ldr	r2, [r7, #24]
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c8e:	4a19      	ldr	r2, [pc, #100]	; (8002cf4 <HAL_GPIO_Init+0x300>)
 8002c90:	69bb      	ldr	r3, [r7, #24]
 8002c92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c94:	4b17      	ldr	r3, [pc, #92]	; (8002cf4 <HAL_GPIO_Init+0x300>)
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	43db      	mvns	r3, r3
 8002c9e:	69ba      	ldr	r2, [r7, #24]
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d003      	beq.n	8002cb8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002cb0:	69ba      	ldr	r2, [r7, #24]
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002cb8:	4a0e      	ldr	r2, [pc, #56]	; (8002cf4 <HAL_GPIO_Init+0x300>)
 8002cba:	69bb      	ldr	r3, [r7, #24]
 8002cbc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cbe:	69fb      	ldr	r3, [r7, #28]
 8002cc0:	3301      	adds	r3, #1
 8002cc2:	61fb      	str	r3, [r7, #28]
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	2b0f      	cmp	r3, #15
 8002cc8:	f67f aea2 	bls.w	8002a10 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ccc:	bf00      	nop
 8002cce:	3724      	adds	r7, #36	; 0x24
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr
 8002cd8:	40023800 	.word	0x40023800
 8002cdc:	40013800 	.word	0x40013800
 8002ce0:	40020000 	.word	0x40020000
 8002ce4:	40020400 	.word	0x40020400
 8002ce8:	40020800 	.word	0x40020800
 8002cec:	40020c00 	.word	0x40020c00
 8002cf0:	40021000 	.word	0x40021000
 8002cf4:	40013c00 	.word	0x40013c00

08002cf8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b085      	sub	sp, #20
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	460b      	mov	r3, r1
 8002d02:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	691a      	ldr	r2, [r3, #16]
 8002d08:	887b      	ldrh	r3, [r7, #2]
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d002      	beq.n	8002d16 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002d10:	2301      	movs	r3, #1
 8002d12:	73fb      	strb	r3, [r7, #15]
 8002d14:	e001      	b.n	8002d1a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d16:	2300      	movs	r3, #0
 8002d18:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002d1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3714      	adds	r7, #20
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr

08002d28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	460b      	mov	r3, r1
 8002d32:	807b      	strh	r3, [r7, #2]
 8002d34:	4613      	mov	r3, r2
 8002d36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d38:	787b      	ldrb	r3, [r7, #1]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d003      	beq.n	8002d46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d3e:	887a      	ldrh	r2, [r7, #2]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d44:	e003      	b.n	8002d4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d46:	887b      	ldrh	r3, [r7, #2]
 8002d48:	041a      	lsls	r2, r3, #16
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	619a      	str	r2, [r3, #24]
}
 8002d4e:	bf00      	nop
 8002d50:	370c      	adds	r7, #12
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr
	...

08002d5c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b086      	sub	sp, #24
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d101      	bne.n	8002d6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e25b      	b.n	8003226 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 0301 	and.w	r3, r3, #1
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d075      	beq.n	8002e66 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d7a:	4ba3      	ldr	r3, [pc, #652]	; (8003008 <HAL_RCC_OscConfig+0x2ac>)
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	f003 030c 	and.w	r3, r3, #12
 8002d82:	2b04      	cmp	r3, #4
 8002d84:	d00c      	beq.n	8002da0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d86:	4ba0      	ldr	r3, [pc, #640]	; (8003008 <HAL_RCC_OscConfig+0x2ac>)
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d8e:	2b08      	cmp	r3, #8
 8002d90:	d112      	bne.n	8002db8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d92:	4b9d      	ldr	r3, [pc, #628]	; (8003008 <HAL_RCC_OscConfig+0x2ac>)
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d9e:	d10b      	bne.n	8002db8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002da0:	4b99      	ldr	r3, [pc, #612]	; (8003008 <HAL_RCC_OscConfig+0x2ac>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d05b      	beq.n	8002e64 <HAL_RCC_OscConfig+0x108>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d157      	bne.n	8002e64 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e236      	b.n	8003226 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dc0:	d106      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x74>
 8002dc2:	4b91      	ldr	r3, [pc, #580]	; (8003008 <HAL_RCC_OscConfig+0x2ac>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a90      	ldr	r2, [pc, #576]	; (8003008 <HAL_RCC_OscConfig+0x2ac>)
 8002dc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dcc:	6013      	str	r3, [r2, #0]
 8002dce:	e01d      	b.n	8002e0c <HAL_RCC_OscConfig+0xb0>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002dd8:	d10c      	bne.n	8002df4 <HAL_RCC_OscConfig+0x98>
 8002dda:	4b8b      	ldr	r3, [pc, #556]	; (8003008 <HAL_RCC_OscConfig+0x2ac>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a8a      	ldr	r2, [pc, #552]	; (8003008 <HAL_RCC_OscConfig+0x2ac>)
 8002de0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002de4:	6013      	str	r3, [r2, #0]
 8002de6:	4b88      	ldr	r3, [pc, #544]	; (8003008 <HAL_RCC_OscConfig+0x2ac>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a87      	ldr	r2, [pc, #540]	; (8003008 <HAL_RCC_OscConfig+0x2ac>)
 8002dec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002df0:	6013      	str	r3, [r2, #0]
 8002df2:	e00b      	b.n	8002e0c <HAL_RCC_OscConfig+0xb0>
 8002df4:	4b84      	ldr	r3, [pc, #528]	; (8003008 <HAL_RCC_OscConfig+0x2ac>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a83      	ldr	r2, [pc, #524]	; (8003008 <HAL_RCC_OscConfig+0x2ac>)
 8002dfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dfe:	6013      	str	r3, [r2, #0]
 8002e00:	4b81      	ldr	r3, [pc, #516]	; (8003008 <HAL_RCC_OscConfig+0x2ac>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a80      	ldr	r2, [pc, #512]	; (8003008 <HAL_RCC_OscConfig+0x2ac>)
 8002e06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d013      	beq.n	8002e3c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e14:	f7fe fc06 	bl	8001624 <HAL_GetTick>
 8002e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e1a:	e008      	b.n	8002e2e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e1c:	f7fe fc02 	bl	8001624 <HAL_GetTick>
 8002e20:	4602      	mov	r2, r0
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	2b64      	cmp	r3, #100	; 0x64
 8002e28:	d901      	bls.n	8002e2e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	e1fb      	b.n	8003226 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e2e:	4b76      	ldr	r3, [pc, #472]	; (8003008 <HAL_RCC_OscConfig+0x2ac>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d0f0      	beq.n	8002e1c <HAL_RCC_OscConfig+0xc0>
 8002e3a:	e014      	b.n	8002e66 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e3c:	f7fe fbf2 	bl	8001624 <HAL_GetTick>
 8002e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e42:	e008      	b.n	8002e56 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e44:	f7fe fbee 	bl	8001624 <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	2b64      	cmp	r3, #100	; 0x64
 8002e50:	d901      	bls.n	8002e56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e1e7      	b.n	8003226 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e56:	4b6c      	ldr	r3, [pc, #432]	; (8003008 <HAL_RCC_OscConfig+0x2ac>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d1f0      	bne.n	8002e44 <HAL_RCC_OscConfig+0xe8>
 8002e62:	e000      	b.n	8002e66 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0302 	and.w	r3, r3, #2
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d063      	beq.n	8002f3a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e72:	4b65      	ldr	r3, [pc, #404]	; (8003008 <HAL_RCC_OscConfig+0x2ac>)
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	f003 030c 	and.w	r3, r3, #12
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d00b      	beq.n	8002e96 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e7e:	4b62      	ldr	r3, [pc, #392]	; (8003008 <HAL_RCC_OscConfig+0x2ac>)
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e86:	2b08      	cmp	r3, #8
 8002e88:	d11c      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e8a:	4b5f      	ldr	r3, [pc, #380]	; (8003008 <HAL_RCC_OscConfig+0x2ac>)
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d116      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e96:	4b5c      	ldr	r3, [pc, #368]	; (8003008 <HAL_RCC_OscConfig+0x2ac>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0302 	and.w	r3, r3, #2
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d005      	beq.n	8002eae <HAL_RCC_OscConfig+0x152>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	68db      	ldr	r3, [r3, #12]
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d001      	beq.n	8002eae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e1bb      	b.n	8003226 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eae:	4b56      	ldr	r3, [pc, #344]	; (8003008 <HAL_RCC_OscConfig+0x2ac>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	691b      	ldr	r3, [r3, #16]
 8002eba:	00db      	lsls	r3, r3, #3
 8002ebc:	4952      	ldr	r1, [pc, #328]	; (8003008 <HAL_RCC_OscConfig+0x2ac>)
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ec2:	e03a      	b.n	8002f3a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d020      	beq.n	8002f0e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ecc:	4b4f      	ldr	r3, [pc, #316]	; (800300c <HAL_RCC_OscConfig+0x2b0>)
 8002ece:	2201      	movs	r2, #1
 8002ed0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ed2:	f7fe fba7 	bl	8001624 <HAL_GetTick>
 8002ed6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ed8:	e008      	b.n	8002eec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002eda:	f7fe fba3 	bl	8001624 <HAL_GetTick>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	2b02      	cmp	r3, #2
 8002ee6:	d901      	bls.n	8002eec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	e19c      	b.n	8003226 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eec:	4b46      	ldr	r3, [pc, #280]	; (8003008 <HAL_RCC_OscConfig+0x2ac>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0302 	and.w	r3, r3, #2
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d0f0      	beq.n	8002eda <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ef8:	4b43      	ldr	r3, [pc, #268]	; (8003008 <HAL_RCC_OscConfig+0x2ac>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	691b      	ldr	r3, [r3, #16]
 8002f04:	00db      	lsls	r3, r3, #3
 8002f06:	4940      	ldr	r1, [pc, #256]	; (8003008 <HAL_RCC_OscConfig+0x2ac>)
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	600b      	str	r3, [r1, #0]
 8002f0c:	e015      	b.n	8002f3a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f0e:	4b3f      	ldr	r3, [pc, #252]	; (800300c <HAL_RCC_OscConfig+0x2b0>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f14:	f7fe fb86 	bl	8001624 <HAL_GetTick>
 8002f18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f1a:	e008      	b.n	8002f2e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f1c:	f7fe fb82 	bl	8001624 <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d901      	bls.n	8002f2e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e17b      	b.n	8003226 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f2e:	4b36      	ldr	r3, [pc, #216]	; (8003008 <HAL_RCC_OscConfig+0x2ac>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0302 	and.w	r3, r3, #2
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d1f0      	bne.n	8002f1c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0308 	and.w	r3, r3, #8
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d030      	beq.n	8002fa8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	695b      	ldr	r3, [r3, #20]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d016      	beq.n	8002f7c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f4e:	4b30      	ldr	r3, [pc, #192]	; (8003010 <HAL_RCC_OscConfig+0x2b4>)
 8002f50:	2201      	movs	r2, #1
 8002f52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f54:	f7fe fb66 	bl	8001624 <HAL_GetTick>
 8002f58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f5a:	e008      	b.n	8002f6e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f5c:	f7fe fb62 	bl	8001624 <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	d901      	bls.n	8002f6e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	e15b      	b.n	8003226 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f6e:	4b26      	ldr	r3, [pc, #152]	; (8003008 <HAL_RCC_OscConfig+0x2ac>)
 8002f70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f72:	f003 0302 	and.w	r3, r3, #2
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d0f0      	beq.n	8002f5c <HAL_RCC_OscConfig+0x200>
 8002f7a:	e015      	b.n	8002fa8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f7c:	4b24      	ldr	r3, [pc, #144]	; (8003010 <HAL_RCC_OscConfig+0x2b4>)
 8002f7e:	2200      	movs	r2, #0
 8002f80:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f82:	f7fe fb4f 	bl	8001624 <HAL_GetTick>
 8002f86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f88:	e008      	b.n	8002f9c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f8a:	f7fe fb4b 	bl	8001624 <HAL_GetTick>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	2b02      	cmp	r3, #2
 8002f96:	d901      	bls.n	8002f9c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002f98:	2303      	movs	r3, #3
 8002f9a:	e144      	b.n	8003226 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f9c:	4b1a      	ldr	r3, [pc, #104]	; (8003008 <HAL_RCC_OscConfig+0x2ac>)
 8002f9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fa0:	f003 0302 	and.w	r3, r3, #2
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d1f0      	bne.n	8002f8a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 0304 	and.w	r3, r3, #4
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	f000 80a0 	beq.w	80030f6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fba:	4b13      	ldr	r3, [pc, #76]	; (8003008 <HAL_RCC_OscConfig+0x2ac>)
 8002fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d10f      	bne.n	8002fe6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	60bb      	str	r3, [r7, #8]
 8002fca:	4b0f      	ldr	r3, [pc, #60]	; (8003008 <HAL_RCC_OscConfig+0x2ac>)
 8002fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fce:	4a0e      	ldr	r2, [pc, #56]	; (8003008 <HAL_RCC_OscConfig+0x2ac>)
 8002fd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fd4:	6413      	str	r3, [r2, #64]	; 0x40
 8002fd6:	4b0c      	ldr	r3, [pc, #48]	; (8003008 <HAL_RCC_OscConfig+0x2ac>)
 8002fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fde:	60bb      	str	r3, [r7, #8]
 8002fe0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fe6:	4b0b      	ldr	r3, [pc, #44]	; (8003014 <HAL_RCC_OscConfig+0x2b8>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d121      	bne.n	8003036 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ff2:	4b08      	ldr	r3, [pc, #32]	; (8003014 <HAL_RCC_OscConfig+0x2b8>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a07      	ldr	r2, [pc, #28]	; (8003014 <HAL_RCC_OscConfig+0x2b8>)
 8002ff8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ffc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ffe:	f7fe fb11 	bl	8001624 <HAL_GetTick>
 8003002:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003004:	e011      	b.n	800302a <HAL_RCC_OscConfig+0x2ce>
 8003006:	bf00      	nop
 8003008:	40023800 	.word	0x40023800
 800300c:	42470000 	.word	0x42470000
 8003010:	42470e80 	.word	0x42470e80
 8003014:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003018:	f7fe fb04 	bl	8001624 <HAL_GetTick>
 800301c:	4602      	mov	r2, r0
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	2b02      	cmp	r3, #2
 8003024:	d901      	bls.n	800302a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003026:	2303      	movs	r3, #3
 8003028:	e0fd      	b.n	8003226 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800302a:	4b81      	ldr	r3, [pc, #516]	; (8003230 <HAL_RCC_OscConfig+0x4d4>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003032:	2b00      	cmp	r3, #0
 8003034:	d0f0      	beq.n	8003018 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	2b01      	cmp	r3, #1
 800303c:	d106      	bne.n	800304c <HAL_RCC_OscConfig+0x2f0>
 800303e:	4b7d      	ldr	r3, [pc, #500]	; (8003234 <HAL_RCC_OscConfig+0x4d8>)
 8003040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003042:	4a7c      	ldr	r2, [pc, #496]	; (8003234 <HAL_RCC_OscConfig+0x4d8>)
 8003044:	f043 0301 	orr.w	r3, r3, #1
 8003048:	6713      	str	r3, [r2, #112]	; 0x70
 800304a:	e01c      	b.n	8003086 <HAL_RCC_OscConfig+0x32a>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	2b05      	cmp	r3, #5
 8003052:	d10c      	bne.n	800306e <HAL_RCC_OscConfig+0x312>
 8003054:	4b77      	ldr	r3, [pc, #476]	; (8003234 <HAL_RCC_OscConfig+0x4d8>)
 8003056:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003058:	4a76      	ldr	r2, [pc, #472]	; (8003234 <HAL_RCC_OscConfig+0x4d8>)
 800305a:	f043 0304 	orr.w	r3, r3, #4
 800305e:	6713      	str	r3, [r2, #112]	; 0x70
 8003060:	4b74      	ldr	r3, [pc, #464]	; (8003234 <HAL_RCC_OscConfig+0x4d8>)
 8003062:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003064:	4a73      	ldr	r2, [pc, #460]	; (8003234 <HAL_RCC_OscConfig+0x4d8>)
 8003066:	f043 0301 	orr.w	r3, r3, #1
 800306a:	6713      	str	r3, [r2, #112]	; 0x70
 800306c:	e00b      	b.n	8003086 <HAL_RCC_OscConfig+0x32a>
 800306e:	4b71      	ldr	r3, [pc, #452]	; (8003234 <HAL_RCC_OscConfig+0x4d8>)
 8003070:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003072:	4a70      	ldr	r2, [pc, #448]	; (8003234 <HAL_RCC_OscConfig+0x4d8>)
 8003074:	f023 0301 	bic.w	r3, r3, #1
 8003078:	6713      	str	r3, [r2, #112]	; 0x70
 800307a:	4b6e      	ldr	r3, [pc, #440]	; (8003234 <HAL_RCC_OscConfig+0x4d8>)
 800307c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800307e:	4a6d      	ldr	r2, [pc, #436]	; (8003234 <HAL_RCC_OscConfig+0x4d8>)
 8003080:	f023 0304 	bic.w	r3, r3, #4
 8003084:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d015      	beq.n	80030ba <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800308e:	f7fe fac9 	bl	8001624 <HAL_GetTick>
 8003092:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003094:	e00a      	b.n	80030ac <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003096:	f7fe fac5 	bl	8001624 <HAL_GetTick>
 800309a:	4602      	mov	r2, r0
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d901      	bls.n	80030ac <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80030a8:	2303      	movs	r3, #3
 80030aa:	e0bc      	b.n	8003226 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030ac:	4b61      	ldr	r3, [pc, #388]	; (8003234 <HAL_RCC_OscConfig+0x4d8>)
 80030ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030b0:	f003 0302 	and.w	r3, r3, #2
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d0ee      	beq.n	8003096 <HAL_RCC_OscConfig+0x33a>
 80030b8:	e014      	b.n	80030e4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030ba:	f7fe fab3 	bl	8001624 <HAL_GetTick>
 80030be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030c0:	e00a      	b.n	80030d8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030c2:	f7fe faaf 	bl	8001624 <HAL_GetTick>
 80030c6:	4602      	mov	r2, r0
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	1ad3      	subs	r3, r2, r3
 80030cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d901      	bls.n	80030d8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80030d4:	2303      	movs	r3, #3
 80030d6:	e0a6      	b.n	8003226 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030d8:	4b56      	ldr	r3, [pc, #344]	; (8003234 <HAL_RCC_OscConfig+0x4d8>)
 80030da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030dc:	f003 0302 	and.w	r3, r3, #2
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d1ee      	bne.n	80030c2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030e4:	7dfb      	ldrb	r3, [r7, #23]
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d105      	bne.n	80030f6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030ea:	4b52      	ldr	r3, [pc, #328]	; (8003234 <HAL_RCC_OscConfig+0x4d8>)
 80030ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ee:	4a51      	ldr	r2, [pc, #324]	; (8003234 <HAL_RCC_OscConfig+0x4d8>)
 80030f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030f4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	699b      	ldr	r3, [r3, #24]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	f000 8092 	beq.w	8003224 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003100:	4b4c      	ldr	r3, [pc, #304]	; (8003234 <HAL_RCC_OscConfig+0x4d8>)
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	f003 030c 	and.w	r3, r3, #12
 8003108:	2b08      	cmp	r3, #8
 800310a:	d05c      	beq.n	80031c6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	699b      	ldr	r3, [r3, #24]
 8003110:	2b02      	cmp	r3, #2
 8003112:	d141      	bne.n	8003198 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003114:	4b48      	ldr	r3, [pc, #288]	; (8003238 <HAL_RCC_OscConfig+0x4dc>)
 8003116:	2200      	movs	r2, #0
 8003118:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800311a:	f7fe fa83 	bl	8001624 <HAL_GetTick>
 800311e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003120:	e008      	b.n	8003134 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003122:	f7fe fa7f 	bl	8001624 <HAL_GetTick>
 8003126:	4602      	mov	r2, r0
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	2b02      	cmp	r3, #2
 800312e:	d901      	bls.n	8003134 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003130:	2303      	movs	r3, #3
 8003132:	e078      	b.n	8003226 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003134:	4b3f      	ldr	r3, [pc, #252]	; (8003234 <HAL_RCC_OscConfig+0x4d8>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800313c:	2b00      	cmp	r3, #0
 800313e:	d1f0      	bne.n	8003122 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	69da      	ldr	r2, [r3, #28]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6a1b      	ldr	r3, [r3, #32]
 8003148:	431a      	orrs	r2, r3
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314e:	019b      	lsls	r3, r3, #6
 8003150:	431a      	orrs	r2, r3
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003156:	085b      	lsrs	r3, r3, #1
 8003158:	3b01      	subs	r3, #1
 800315a:	041b      	lsls	r3, r3, #16
 800315c:	431a      	orrs	r2, r3
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003162:	061b      	lsls	r3, r3, #24
 8003164:	4933      	ldr	r1, [pc, #204]	; (8003234 <HAL_RCC_OscConfig+0x4d8>)
 8003166:	4313      	orrs	r3, r2
 8003168:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800316a:	4b33      	ldr	r3, [pc, #204]	; (8003238 <HAL_RCC_OscConfig+0x4dc>)
 800316c:	2201      	movs	r2, #1
 800316e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003170:	f7fe fa58 	bl	8001624 <HAL_GetTick>
 8003174:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003176:	e008      	b.n	800318a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003178:	f7fe fa54 	bl	8001624 <HAL_GetTick>
 800317c:	4602      	mov	r2, r0
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	2b02      	cmp	r3, #2
 8003184:	d901      	bls.n	800318a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003186:	2303      	movs	r3, #3
 8003188:	e04d      	b.n	8003226 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800318a:	4b2a      	ldr	r3, [pc, #168]	; (8003234 <HAL_RCC_OscConfig+0x4d8>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003192:	2b00      	cmp	r3, #0
 8003194:	d0f0      	beq.n	8003178 <HAL_RCC_OscConfig+0x41c>
 8003196:	e045      	b.n	8003224 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003198:	4b27      	ldr	r3, [pc, #156]	; (8003238 <HAL_RCC_OscConfig+0x4dc>)
 800319a:	2200      	movs	r2, #0
 800319c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800319e:	f7fe fa41 	bl	8001624 <HAL_GetTick>
 80031a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031a4:	e008      	b.n	80031b8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031a6:	f7fe fa3d 	bl	8001624 <HAL_GetTick>
 80031aa:	4602      	mov	r2, r0
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	1ad3      	subs	r3, r2, r3
 80031b0:	2b02      	cmp	r3, #2
 80031b2:	d901      	bls.n	80031b8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80031b4:	2303      	movs	r3, #3
 80031b6:	e036      	b.n	8003226 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031b8:	4b1e      	ldr	r3, [pc, #120]	; (8003234 <HAL_RCC_OscConfig+0x4d8>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d1f0      	bne.n	80031a6 <HAL_RCC_OscConfig+0x44a>
 80031c4:	e02e      	b.n	8003224 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	699b      	ldr	r3, [r3, #24]
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d101      	bne.n	80031d2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e029      	b.n	8003226 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80031d2:	4b18      	ldr	r3, [pc, #96]	; (8003234 <HAL_RCC_OscConfig+0x4d8>)
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	69db      	ldr	r3, [r3, #28]
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d11c      	bne.n	8003220 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d115      	bne.n	8003220 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80031f4:	68fa      	ldr	r2, [r7, #12]
 80031f6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80031fa:	4013      	ands	r3, r2
 80031fc:	687a      	ldr	r2, [r7, #4]
 80031fe:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003200:	4293      	cmp	r3, r2
 8003202:	d10d      	bne.n	8003220 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800320e:	429a      	cmp	r2, r3
 8003210:	d106      	bne.n	8003220 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800321c:	429a      	cmp	r2, r3
 800321e:	d001      	beq.n	8003224 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e000      	b.n	8003226 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003224:	2300      	movs	r3, #0
}
 8003226:	4618      	mov	r0, r3
 8003228:	3718      	adds	r7, #24
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
 800322e:	bf00      	nop
 8003230:	40007000 	.word	0x40007000
 8003234:	40023800 	.word	0x40023800
 8003238:	42470060 	.word	0x42470060

0800323c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
 8003244:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d101      	bne.n	8003250 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	e0cc      	b.n	80033ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003250:	4b68      	ldr	r3, [pc, #416]	; (80033f4 <HAL_RCC_ClockConfig+0x1b8>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 030f 	and.w	r3, r3, #15
 8003258:	683a      	ldr	r2, [r7, #0]
 800325a:	429a      	cmp	r2, r3
 800325c:	d90c      	bls.n	8003278 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800325e:	4b65      	ldr	r3, [pc, #404]	; (80033f4 <HAL_RCC_ClockConfig+0x1b8>)
 8003260:	683a      	ldr	r2, [r7, #0]
 8003262:	b2d2      	uxtb	r2, r2
 8003264:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003266:	4b63      	ldr	r3, [pc, #396]	; (80033f4 <HAL_RCC_ClockConfig+0x1b8>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 030f 	and.w	r3, r3, #15
 800326e:	683a      	ldr	r2, [r7, #0]
 8003270:	429a      	cmp	r2, r3
 8003272:	d001      	beq.n	8003278 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	e0b8      	b.n	80033ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 0302 	and.w	r3, r3, #2
 8003280:	2b00      	cmp	r3, #0
 8003282:	d020      	beq.n	80032c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 0304 	and.w	r3, r3, #4
 800328c:	2b00      	cmp	r3, #0
 800328e:	d005      	beq.n	800329c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003290:	4b59      	ldr	r3, [pc, #356]	; (80033f8 <HAL_RCC_ClockConfig+0x1bc>)
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	4a58      	ldr	r2, [pc, #352]	; (80033f8 <HAL_RCC_ClockConfig+0x1bc>)
 8003296:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800329a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 0308 	and.w	r3, r3, #8
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d005      	beq.n	80032b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032a8:	4b53      	ldr	r3, [pc, #332]	; (80033f8 <HAL_RCC_ClockConfig+0x1bc>)
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	4a52      	ldr	r2, [pc, #328]	; (80033f8 <HAL_RCC_ClockConfig+0x1bc>)
 80032ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80032b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032b4:	4b50      	ldr	r3, [pc, #320]	; (80033f8 <HAL_RCC_ClockConfig+0x1bc>)
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	494d      	ldr	r1, [pc, #308]	; (80033f8 <HAL_RCC_ClockConfig+0x1bc>)
 80032c2:	4313      	orrs	r3, r2
 80032c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0301 	and.w	r3, r3, #1
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d044      	beq.n	800335c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d107      	bne.n	80032ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032da:	4b47      	ldr	r3, [pc, #284]	; (80033f8 <HAL_RCC_ClockConfig+0x1bc>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d119      	bne.n	800331a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e07f      	b.n	80033ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	2b02      	cmp	r3, #2
 80032f0:	d003      	beq.n	80032fa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032f6:	2b03      	cmp	r3, #3
 80032f8:	d107      	bne.n	800330a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032fa:	4b3f      	ldr	r3, [pc, #252]	; (80033f8 <HAL_RCC_ClockConfig+0x1bc>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d109      	bne.n	800331a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e06f      	b.n	80033ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800330a:	4b3b      	ldr	r3, [pc, #236]	; (80033f8 <HAL_RCC_ClockConfig+0x1bc>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 0302 	and.w	r3, r3, #2
 8003312:	2b00      	cmp	r3, #0
 8003314:	d101      	bne.n	800331a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e067      	b.n	80033ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800331a:	4b37      	ldr	r3, [pc, #220]	; (80033f8 <HAL_RCC_ClockConfig+0x1bc>)
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	f023 0203 	bic.w	r2, r3, #3
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	4934      	ldr	r1, [pc, #208]	; (80033f8 <HAL_RCC_ClockConfig+0x1bc>)
 8003328:	4313      	orrs	r3, r2
 800332a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800332c:	f7fe f97a 	bl	8001624 <HAL_GetTick>
 8003330:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003332:	e00a      	b.n	800334a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003334:	f7fe f976 	bl	8001624 <HAL_GetTick>
 8003338:	4602      	mov	r2, r0
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003342:	4293      	cmp	r3, r2
 8003344:	d901      	bls.n	800334a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003346:	2303      	movs	r3, #3
 8003348:	e04f      	b.n	80033ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800334a:	4b2b      	ldr	r3, [pc, #172]	; (80033f8 <HAL_RCC_ClockConfig+0x1bc>)
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	f003 020c 	and.w	r2, r3, #12
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	429a      	cmp	r2, r3
 800335a:	d1eb      	bne.n	8003334 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800335c:	4b25      	ldr	r3, [pc, #148]	; (80033f4 <HAL_RCC_ClockConfig+0x1b8>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 030f 	and.w	r3, r3, #15
 8003364:	683a      	ldr	r2, [r7, #0]
 8003366:	429a      	cmp	r2, r3
 8003368:	d20c      	bcs.n	8003384 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800336a:	4b22      	ldr	r3, [pc, #136]	; (80033f4 <HAL_RCC_ClockConfig+0x1b8>)
 800336c:	683a      	ldr	r2, [r7, #0]
 800336e:	b2d2      	uxtb	r2, r2
 8003370:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003372:	4b20      	ldr	r3, [pc, #128]	; (80033f4 <HAL_RCC_ClockConfig+0x1b8>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 030f 	and.w	r3, r3, #15
 800337a:	683a      	ldr	r2, [r7, #0]
 800337c:	429a      	cmp	r2, r3
 800337e:	d001      	beq.n	8003384 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	e032      	b.n	80033ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 0304 	and.w	r3, r3, #4
 800338c:	2b00      	cmp	r3, #0
 800338e:	d008      	beq.n	80033a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003390:	4b19      	ldr	r3, [pc, #100]	; (80033f8 <HAL_RCC_ClockConfig+0x1bc>)
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	4916      	ldr	r1, [pc, #88]	; (80033f8 <HAL_RCC_ClockConfig+0x1bc>)
 800339e:	4313      	orrs	r3, r2
 80033a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 0308 	and.w	r3, r3, #8
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d009      	beq.n	80033c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033ae:	4b12      	ldr	r3, [pc, #72]	; (80033f8 <HAL_RCC_ClockConfig+0x1bc>)
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	691b      	ldr	r3, [r3, #16]
 80033ba:	00db      	lsls	r3, r3, #3
 80033bc:	490e      	ldr	r1, [pc, #56]	; (80033f8 <HAL_RCC_ClockConfig+0x1bc>)
 80033be:	4313      	orrs	r3, r2
 80033c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80033c2:	f000 f821 	bl	8003408 <HAL_RCC_GetSysClockFreq>
 80033c6:	4601      	mov	r1, r0
 80033c8:	4b0b      	ldr	r3, [pc, #44]	; (80033f8 <HAL_RCC_ClockConfig+0x1bc>)
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	091b      	lsrs	r3, r3, #4
 80033ce:	f003 030f 	and.w	r3, r3, #15
 80033d2:	4a0a      	ldr	r2, [pc, #40]	; (80033fc <HAL_RCC_ClockConfig+0x1c0>)
 80033d4:	5cd3      	ldrb	r3, [r2, r3]
 80033d6:	fa21 f303 	lsr.w	r3, r1, r3
 80033da:	4a09      	ldr	r2, [pc, #36]	; (8003400 <HAL_RCC_ClockConfig+0x1c4>)
 80033dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80033de:	4b09      	ldr	r3, [pc, #36]	; (8003404 <HAL_RCC_ClockConfig+0x1c8>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4618      	mov	r0, r3
 80033e4:	f7fe f8da 	bl	800159c <HAL_InitTick>

  return HAL_OK;
 80033e8:	2300      	movs	r3, #0
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3710      	adds	r7, #16
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	40023c00 	.word	0x40023c00
 80033f8:	40023800 	.word	0x40023800
 80033fc:	08005280 	.word	0x08005280
 8003400:	2000000c 	.word	0x2000000c
 8003404:	20000010 	.word	0x20000010

08003408 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003408:	b5f0      	push	{r4, r5, r6, r7, lr}
 800340a:	b085      	sub	sp, #20
 800340c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800340e:	2300      	movs	r3, #0
 8003410:	607b      	str	r3, [r7, #4]
 8003412:	2300      	movs	r3, #0
 8003414:	60fb      	str	r3, [r7, #12]
 8003416:	2300      	movs	r3, #0
 8003418:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800341a:	2300      	movs	r3, #0
 800341c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800341e:	4b63      	ldr	r3, [pc, #396]	; (80035ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	f003 030c 	and.w	r3, r3, #12
 8003426:	2b04      	cmp	r3, #4
 8003428:	d007      	beq.n	800343a <HAL_RCC_GetSysClockFreq+0x32>
 800342a:	2b08      	cmp	r3, #8
 800342c:	d008      	beq.n	8003440 <HAL_RCC_GetSysClockFreq+0x38>
 800342e:	2b00      	cmp	r3, #0
 8003430:	f040 80b4 	bne.w	800359c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003434:	4b5e      	ldr	r3, [pc, #376]	; (80035b0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003436:	60bb      	str	r3, [r7, #8]
       break;
 8003438:	e0b3      	b.n	80035a2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800343a:	4b5e      	ldr	r3, [pc, #376]	; (80035b4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800343c:	60bb      	str	r3, [r7, #8]
      break;
 800343e:	e0b0      	b.n	80035a2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003440:	4b5a      	ldr	r3, [pc, #360]	; (80035ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003448:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800344a:	4b58      	ldr	r3, [pc, #352]	; (80035ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d04a      	beq.n	80034ec <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003456:	4b55      	ldr	r3, [pc, #340]	; (80035ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	099b      	lsrs	r3, r3, #6
 800345c:	f04f 0400 	mov.w	r4, #0
 8003460:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003464:	f04f 0200 	mov.w	r2, #0
 8003468:	ea03 0501 	and.w	r5, r3, r1
 800346c:	ea04 0602 	and.w	r6, r4, r2
 8003470:	4629      	mov	r1, r5
 8003472:	4632      	mov	r2, r6
 8003474:	f04f 0300 	mov.w	r3, #0
 8003478:	f04f 0400 	mov.w	r4, #0
 800347c:	0154      	lsls	r4, r2, #5
 800347e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003482:	014b      	lsls	r3, r1, #5
 8003484:	4619      	mov	r1, r3
 8003486:	4622      	mov	r2, r4
 8003488:	1b49      	subs	r1, r1, r5
 800348a:	eb62 0206 	sbc.w	r2, r2, r6
 800348e:	f04f 0300 	mov.w	r3, #0
 8003492:	f04f 0400 	mov.w	r4, #0
 8003496:	0194      	lsls	r4, r2, #6
 8003498:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800349c:	018b      	lsls	r3, r1, #6
 800349e:	1a5b      	subs	r3, r3, r1
 80034a0:	eb64 0402 	sbc.w	r4, r4, r2
 80034a4:	f04f 0100 	mov.w	r1, #0
 80034a8:	f04f 0200 	mov.w	r2, #0
 80034ac:	00e2      	lsls	r2, r4, #3
 80034ae:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80034b2:	00d9      	lsls	r1, r3, #3
 80034b4:	460b      	mov	r3, r1
 80034b6:	4614      	mov	r4, r2
 80034b8:	195b      	adds	r3, r3, r5
 80034ba:	eb44 0406 	adc.w	r4, r4, r6
 80034be:	f04f 0100 	mov.w	r1, #0
 80034c2:	f04f 0200 	mov.w	r2, #0
 80034c6:	0262      	lsls	r2, r4, #9
 80034c8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80034cc:	0259      	lsls	r1, r3, #9
 80034ce:	460b      	mov	r3, r1
 80034d0:	4614      	mov	r4, r2
 80034d2:	4618      	mov	r0, r3
 80034d4:	4621      	mov	r1, r4
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	f04f 0400 	mov.w	r4, #0
 80034dc:	461a      	mov	r2, r3
 80034de:	4623      	mov	r3, r4
 80034e0:	f7fd f886 	bl	80005f0 <__aeabi_uldivmod>
 80034e4:	4603      	mov	r3, r0
 80034e6:	460c      	mov	r4, r1
 80034e8:	60fb      	str	r3, [r7, #12]
 80034ea:	e049      	b.n	8003580 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034ec:	4b2f      	ldr	r3, [pc, #188]	; (80035ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	099b      	lsrs	r3, r3, #6
 80034f2:	f04f 0400 	mov.w	r4, #0
 80034f6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80034fa:	f04f 0200 	mov.w	r2, #0
 80034fe:	ea03 0501 	and.w	r5, r3, r1
 8003502:	ea04 0602 	and.w	r6, r4, r2
 8003506:	4629      	mov	r1, r5
 8003508:	4632      	mov	r2, r6
 800350a:	f04f 0300 	mov.w	r3, #0
 800350e:	f04f 0400 	mov.w	r4, #0
 8003512:	0154      	lsls	r4, r2, #5
 8003514:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003518:	014b      	lsls	r3, r1, #5
 800351a:	4619      	mov	r1, r3
 800351c:	4622      	mov	r2, r4
 800351e:	1b49      	subs	r1, r1, r5
 8003520:	eb62 0206 	sbc.w	r2, r2, r6
 8003524:	f04f 0300 	mov.w	r3, #0
 8003528:	f04f 0400 	mov.w	r4, #0
 800352c:	0194      	lsls	r4, r2, #6
 800352e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003532:	018b      	lsls	r3, r1, #6
 8003534:	1a5b      	subs	r3, r3, r1
 8003536:	eb64 0402 	sbc.w	r4, r4, r2
 800353a:	f04f 0100 	mov.w	r1, #0
 800353e:	f04f 0200 	mov.w	r2, #0
 8003542:	00e2      	lsls	r2, r4, #3
 8003544:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003548:	00d9      	lsls	r1, r3, #3
 800354a:	460b      	mov	r3, r1
 800354c:	4614      	mov	r4, r2
 800354e:	195b      	adds	r3, r3, r5
 8003550:	eb44 0406 	adc.w	r4, r4, r6
 8003554:	f04f 0100 	mov.w	r1, #0
 8003558:	f04f 0200 	mov.w	r2, #0
 800355c:	02a2      	lsls	r2, r4, #10
 800355e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003562:	0299      	lsls	r1, r3, #10
 8003564:	460b      	mov	r3, r1
 8003566:	4614      	mov	r4, r2
 8003568:	4618      	mov	r0, r3
 800356a:	4621      	mov	r1, r4
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	f04f 0400 	mov.w	r4, #0
 8003572:	461a      	mov	r2, r3
 8003574:	4623      	mov	r3, r4
 8003576:	f7fd f83b 	bl	80005f0 <__aeabi_uldivmod>
 800357a:	4603      	mov	r3, r0
 800357c:	460c      	mov	r4, r1
 800357e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003580:	4b0a      	ldr	r3, [pc, #40]	; (80035ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	0c1b      	lsrs	r3, r3, #16
 8003586:	f003 0303 	and.w	r3, r3, #3
 800358a:	3301      	adds	r3, #1
 800358c:	005b      	lsls	r3, r3, #1
 800358e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003590:	68fa      	ldr	r2, [r7, #12]
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	fbb2 f3f3 	udiv	r3, r2, r3
 8003598:	60bb      	str	r3, [r7, #8]
      break;
 800359a:	e002      	b.n	80035a2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800359c:	4b04      	ldr	r3, [pc, #16]	; (80035b0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800359e:	60bb      	str	r3, [r7, #8]
      break;
 80035a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035a2:	68bb      	ldr	r3, [r7, #8]
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	3714      	adds	r7, #20
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80035ac:	40023800 	.word	0x40023800
 80035b0:	00f42400 	.word	0x00f42400
 80035b4:	007a1200 	.word	0x007a1200

080035b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035b8:	b480      	push	{r7}
 80035ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035bc:	4b03      	ldr	r3, [pc, #12]	; (80035cc <HAL_RCC_GetHCLKFreq+0x14>)
 80035be:	681b      	ldr	r3, [r3, #0]
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr
 80035ca:	bf00      	nop
 80035cc:	2000000c 	.word	0x2000000c

080035d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80035d4:	f7ff fff0 	bl	80035b8 <HAL_RCC_GetHCLKFreq>
 80035d8:	4601      	mov	r1, r0
 80035da:	4b05      	ldr	r3, [pc, #20]	; (80035f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	0a9b      	lsrs	r3, r3, #10
 80035e0:	f003 0307 	and.w	r3, r3, #7
 80035e4:	4a03      	ldr	r2, [pc, #12]	; (80035f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035e6:	5cd3      	ldrb	r3, [r2, r3]
 80035e8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	40023800 	.word	0x40023800
 80035f4:	08005290 	.word	0x08005290

080035f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80035fc:	f7ff ffdc 	bl	80035b8 <HAL_RCC_GetHCLKFreq>
 8003600:	4601      	mov	r1, r0
 8003602:	4b05      	ldr	r3, [pc, #20]	; (8003618 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	0b5b      	lsrs	r3, r3, #13
 8003608:	f003 0307 	and.w	r3, r3, #7
 800360c:	4a03      	ldr	r2, [pc, #12]	; (800361c <HAL_RCC_GetPCLK2Freq+0x24>)
 800360e:	5cd3      	ldrb	r3, [r2, r3]
 8003610:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003614:	4618      	mov	r0, r3
 8003616:	bd80      	pop	{r7, pc}
 8003618:	40023800 	.word	0x40023800
 800361c:	08005290 	.word	0x08005290

08003620 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b086      	sub	sp, #24
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003628:	2300      	movs	r3, #0
 800362a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800362c:	2300      	movs	r3, #0
 800362e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0301 	and.w	r3, r3, #1
 8003638:	2b00      	cmp	r3, #0
 800363a:	d105      	bne.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003644:	2b00      	cmp	r3, #0
 8003646:	d038      	beq.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003648:	4b68      	ldr	r3, [pc, #416]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800364a:	2200      	movs	r2, #0
 800364c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800364e:	f7fd ffe9 	bl	8001624 <HAL_GetTick>
 8003652:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003654:	e008      	b.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003656:	f7fd ffe5 	bl	8001624 <HAL_GetTick>
 800365a:	4602      	mov	r2, r0
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	1ad3      	subs	r3, r2, r3
 8003660:	2b02      	cmp	r3, #2
 8003662:	d901      	bls.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003664:	2303      	movs	r3, #3
 8003666:	e0bd      	b.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003668:	4b61      	ldr	r3, [pc, #388]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003670:	2b00      	cmp	r3, #0
 8003672:	d1f0      	bne.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	685a      	ldr	r2, [r3, #4]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	019b      	lsls	r3, r3, #6
 800367e:	431a      	orrs	r2, r3
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	68db      	ldr	r3, [r3, #12]
 8003684:	071b      	lsls	r3, r3, #28
 8003686:	495a      	ldr	r1, [pc, #360]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003688:	4313      	orrs	r3, r2
 800368a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800368e:	4b57      	ldr	r3, [pc, #348]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003690:	2201      	movs	r2, #1
 8003692:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003694:	f7fd ffc6 	bl	8001624 <HAL_GetTick>
 8003698:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800369a:	e008      	b.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800369c:	f7fd ffc2 	bl	8001624 <HAL_GetTick>
 80036a0:	4602      	mov	r2, r0
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	2b02      	cmp	r3, #2
 80036a8:	d901      	bls.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80036aa:	2303      	movs	r3, #3
 80036ac:	e09a      	b.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80036ae:	4b50      	ldr	r3, [pc, #320]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d0f0      	beq.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 0302 	and.w	r3, r3, #2
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	f000 8083 	beq.w	80037ce <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80036c8:	2300      	movs	r3, #0
 80036ca:	60fb      	str	r3, [r7, #12]
 80036cc:	4b48      	ldr	r3, [pc, #288]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d0:	4a47      	ldr	r2, [pc, #284]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036d6:	6413      	str	r3, [r2, #64]	; 0x40
 80036d8:	4b45      	ldr	r3, [pc, #276]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036e0:	60fb      	str	r3, [r7, #12]
 80036e2:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80036e4:	4b43      	ldr	r3, [pc, #268]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a42      	ldr	r2, [pc, #264]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80036ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036ee:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80036f0:	f7fd ff98 	bl	8001624 <HAL_GetTick>
 80036f4:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80036f6:	e008      	b.n	800370a <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80036f8:	f7fd ff94 	bl	8001624 <HAL_GetTick>
 80036fc:	4602      	mov	r2, r0
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	1ad3      	subs	r3, r2, r3
 8003702:	2b02      	cmp	r3, #2
 8003704:	d901      	bls.n	800370a <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8003706:	2303      	movs	r3, #3
 8003708:	e06c      	b.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800370a:	4b3a      	ldr	r3, [pc, #232]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003712:	2b00      	cmp	r3, #0
 8003714:	d0f0      	beq.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003716:	4b36      	ldr	r3, [pc, #216]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800371a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800371e:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d02f      	beq.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	691b      	ldr	r3, [r3, #16]
 800372a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800372e:	693a      	ldr	r2, [r7, #16]
 8003730:	429a      	cmp	r2, r3
 8003732:	d028      	beq.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003734:	4b2e      	ldr	r3, [pc, #184]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003736:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003738:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800373c:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800373e:	4b2e      	ldr	r3, [pc, #184]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003740:	2201      	movs	r2, #1
 8003742:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003744:	4b2c      	ldr	r3, [pc, #176]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003746:	2200      	movs	r2, #0
 8003748:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800374a:	4a29      	ldr	r2, [pc, #164]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003750:	4b27      	ldr	r3, [pc, #156]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003752:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003754:	f003 0301 	and.w	r3, r3, #1
 8003758:	2b01      	cmp	r3, #1
 800375a:	d114      	bne.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800375c:	f7fd ff62 	bl	8001624 <HAL_GetTick>
 8003760:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003762:	e00a      	b.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003764:	f7fd ff5e 	bl	8001624 <HAL_GetTick>
 8003768:	4602      	mov	r2, r0
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003772:	4293      	cmp	r3, r2
 8003774:	d901      	bls.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8003776:	2303      	movs	r3, #3
 8003778:	e034      	b.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800377a:	4b1d      	ldr	r3, [pc, #116]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800377c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800377e:	f003 0302 	and.w	r3, r3, #2
 8003782:	2b00      	cmp	r3, #0
 8003784:	d0ee      	beq.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	691b      	ldr	r3, [r3, #16]
 800378a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800378e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003792:	d10d      	bne.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8003794:	4b16      	ldr	r3, [pc, #88]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	691b      	ldr	r3, [r3, #16]
 80037a0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80037a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037a8:	4911      	ldr	r1, [pc, #68]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037aa:	4313      	orrs	r3, r2
 80037ac:	608b      	str	r3, [r1, #8]
 80037ae:	e005      	b.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x19c>
 80037b0:	4b0f      	ldr	r3, [pc, #60]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	4a0e      	ldr	r2, [pc, #56]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037b6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80037ba:	6093      	str	r3, [r2, #8]
 80037bc:	4b0c      	ldr	r3, [pc, #48]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037be:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	691b      	ldr	r3, [r3, #16]
 80037c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037c8:	4909      	ldr	r1, [pc, #36]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037ca:	4313      	orrs	r3, r2
 80037cc:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 0308 	and.w	r3, r3, #8
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d003      	beq.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	7d1a      	ldrb	r2, [r3, #20]
 80037de:	4b07      	ldr	r3, [pc, #28]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80037e0:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80037e2:	2300      	movs	r3, #0
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	3718      	adds	r7, #24
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}
 80037ec:	42470068 	.word	0x42470068
 80037f0:	40023800 	.word	0x40023800
 80037f4:	40007000 	.word	0x40007000
 80037f8:	42470e40 	.word	0x42470e40
 80037fc:	424711e0 	.word	0x424711e0

08003800 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b082      	sub	sp, #8
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d101      	bne.n	8003812 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e056      	b.n	80038c0 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2200      	movs	r2, #0
 8003816:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800381e:	b2db      	uxtb	r3, r3
 8003820:	2b00      	cmp	r3, #0
 8003822:	d106      	bne.n	8003832 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2200      	movs	r2, #0
 8003828:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	f7fd fce3 	bl	80011f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2202      	movs	r2, #2
 8003836:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003848:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	685a      	ldr	r2, [r3, #4]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	431a      	orrs	r2, r3
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	431a      	orrs	r2, r3
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	691b      	ldr	r3, [r3, #16]
 800385e:	431a      	orrs	r2, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	695b      	ldr	r3, [r3, #20]
 8003864:	431a      	orrs	r2, r3
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	699b      	ldr	r3, [r3, #24]
 800386a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800386e:	431a      	orrs	r2, r3
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	69db      	ldr	r3, [r3, #28]
 8003874:	431a      	orrs	r2, r3
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6a1b      	ldr	r3, [r3, #32]
 800387a:	ea42 0103 	orr.w	r1, r2, r3
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	430a      	orrs	r2, r1
 8003888:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	699b      	ldr	r3, [r3, #24]
 800388e:	0c1b      	lsrs	r3, r3, #16
 8003890:	f003 0104 	and.w	r1, r3, #4
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	430a      	orrs	r2, r1
 800389e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	69da      	ldr	r2, [r3, #28]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038ae:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2200      	movs	r2, #0
 80038b4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2201      	movs	r2, #1
 80038ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80038be:	2300      	movs	r3, #0
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3708      	adds	r7, #8
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}

080038c8 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b087      	sub	sp, #28
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	60f8      	str	r0, [r7, #12]
 80038d0:	60b9      	str	r1, [r7, #8]
 80038d2:	4613      	mov	r3, r2
 80038d4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80038d6:	2300      	movs	r3, #0
 80038d8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d101      	bne.n	80038e8 <HAL_SPI_Transmit_IT+0x20>
 80038e4:	2302      	movs	r3, #2
 80038e6:	e067      	b.n	80039b8 <HAL_SPI_Transmit_IT+0xf0>
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2201      	movs	r2, #1
 80038ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if ((pData == NULL) || (Size == 0U))
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d002      	beq.n	80038fc <HAL_SPI_Transmit_IT+0x34>
 80038f6:	88fb      	ldrh	r3, [r7, #6]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d102      	bne.n	8003902 <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003900:	e055      	b.n	80039ae <HAL_SPI_Transmit_IT+0xe6>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003908:	b2db      	uxtb	r3, r3
 800390a:	2b01      	cmp	r3, #1
 800390c:	d002      	beq.n	8003914 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 800390e:	2302      	movs	r3, #2
 8003910:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003912:	e04c      	b.n	80039ae <HAL_SPI_Transmit_IT+0xe6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2203      	movs	r2, #3
 8003918:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2200      	movs	r2, #0
 8003920:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	68ba      	ldr	r2, [r7, #8]
 8003926:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	88fa      	ldrh	r2, [r7, #6]
 800392c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	88fa      	ldrh	r2, [r7, #6]
 8003932:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2200      	movs	r2, #0
 8003938:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2200      	movs	r2, #0
 800393e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2200      	movs	r2, #0
 8003944:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2200      	movs	r2, #0
 800394a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d003      	beq.n	800395c <HAL_SPI_Transmit_IT+0x94>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	4a1b      	ldr	r2, [pc, #108]	; (80039c4 <HAL_SPI_Transmit_IT+0xfc>)
 8003958:	645a      	str	r2, [r3, #68]	; 0x44
 800395a:	e002      	b.n	8003962 <HAL_SPI_Transmit_IT+0x9a>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	4a1a      	ldr	r2, [pc, #104]	; (80039c8 <HAL_SPI_Transmit_IT+0x100>)
 8003960:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800396a:	d107      	bne.n	800397c <HAL_SPI_Transmit_IT+0xb4>
  {
    SPI_1LINE_TX(hspi);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800397a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	685a      	ldr	r2, [r3, #4]
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 800398a:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003996:	2b40      	cmp	r3, #64	; 0x40
 8003998:	d008      	beq.n	80039ac <HAL_SPI_Transmit_IT+0xe4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039a8:	601a      	str	r2, [r3, #0]
 80039aa:	e000      	b.n	80039ae <HAL_SPI_Transmit_IT+0xe6>
  }

error :
 80039ac:	bf00      	nop
  __HAL_UNLOCK(hspi);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2200      	movs	r2, #0
 80039b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80039b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	371c      	adds	r7, #28
 80039bc:	46bd      	mov	sp, r7
 80039be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c2:	4770      	bx	lr
 80039c4:	08003c4f 	.word	0x08003c4f
 80039c8:	08003c09 	.word	0x08003c09

080039cc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b088      	sub	sp, #32
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80039e4:	69bb      	ldr	r3, [r7, #24]
 80039e6:	099b      	lsrs	r3, r3, #6
 80039e8:	f003 0301 	and.w	r3, r3, #1
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d10f      	bne.n	8003a10 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80039f0:	69bb      	ldr	r3, [r7, #24]
 80039f2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d00a      	beq.n	8003a10 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	099b      	lsrs	r3, r3, #6
 80039fe:	f003 0301 	and.w	r3, r3, #1
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d004      	beq.n	8003a10 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	4798      	blx	r3
    return;
 8003a0e:	e0d8      	b.n	8003bc2 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003a10:	69bb      	ldr	r3, [r7, #24]
 8003a12:	085b      	lsrs	r3, r3, #1
 8003a14:	f003 0301 	and.w	r3, r3, #1
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d00a      	beq.n	8003a32 <HAL_SPI_IRQHandler+0x66>
 8003a1c:	69fb      	ldr	r3, [r7, #28]
 8003a1e:	09db      	lsrs	r3, r3, #7
 8003a20:	f003 0301 	and.w	r3, r3, #1
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d004      	beq.n	8003a32 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	4798      	blx	r3
    return;
 8003a30:	e0c7      	b.n	8003bc2 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003a32:	69bb      	ldr	r3, [r7, #24]
 8003a34:	095b      	lsrs	r3, r3, #5
 8003a36:	f003 0301 	and.w	r3, r3, #1
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d10c      	bne.n	8003a58 <HAL_SPI_IRQHandler+0x8c>
 8003a3e:	69bb      	ldr	r3, [r7, #24]
 8003a40:	099b      	lsrs	r3, r3, #6
 8003a42:	f003 0301 	and.w	r3, r3, #1
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d106      	bne.n	8003a58 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003a4a:	69bb      	ldr	r3, [r7, #24]
 8003a4c:	0a1b      	lsrs	r3, r3, #8
 8003a4e:	f003 0301 	and.w	r3, r3, #1
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	f000 80b5 	beq.w	8003bc2 <HAL_SPI_IRQHandler+0x1f6>
 8003a58:	69fb      	ldr	r3, [r7, #28]
 8003a5a:	095b      	lsrs	r3, r3, #5
 8003a5c:	f003 0301 	and.w	r3, r3, #1
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	f000 80ae 	beq.w	8003bc2 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003a66:	69bb      	ldr	r3, [r7, #24]
 8003a68:	099b      	lsrs	r3, r3, #6
 8003a6a:	f003 0301 	and.w	r3, r3, #1
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d023      	beq.n	8003aba <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	2b03      	cmp	r3, #3
 8003a7c:	d011      	beq.n	8003aa2 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a82:	f043 0204 	orr.w	r2, r3, #4
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	617b      	str	r3, [r7, #20]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	68db      	ldr	r3, [r3, #12]
 8003a94:	617b      	str	r3, [r7, #20]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	617b      	str	r3, [r7, #20]
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	e00b      	b.n	8003aba <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	613b      	str	r3, [r7, #16]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	613b      	str	r3, [r7, #16]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	613b      	str	r3, [r7, #16]
 8003ab6:	693b      	ldr	r3, [r7, #16]
        return;
 8003ab8:	e083      	b.n	8003bc2 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003aba:	69bb      	ldr	r3, [r7, #24]
 8003abc:	095b      	lsrs	r3, r3, #5
 8003abe:	f003 0301 	and.w	r3, r3, #1
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d014      	beq.n	8003af0 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aca:	f043 0201 	orr.w	r2, r3, #1
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	60fb      	str	r3, [r7, #12]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	60fb      	str	r3, [r7, #12]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003aec:	601a      	str	r2, [r3, #0]
 8003aee:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003af0:	69bb      	ldr	r3, [r7, #24]
 8003af2:	0a1b      	lsrs	r3, r3, #8
 8003af4:	f003 0301 	and.w	r3, r3, #1
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d00c      	beq.n	8003b16 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b00:	f043 0208 	orr.w	r2, r3, #8
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003b08:	2300      	movs	r3, #0
 8003b0a:	60bb      	str	r3, [r7, #8]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	60bb      	str	r3, [r7, #8]
 8003b14:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d050      	beq.n	8003bc0 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	685a      	ldr	r2, [r3, #4]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003b2c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2201      	movs	r2, #1
 8003b32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003b36:	69fb      	ldr	r3, [r7, #28]
 8003b38:	f003 0302 	and.w	r3, r3, #2
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d104      	bne.n	8003b4a <HAL_SPI_IRQHandler+0x17e>
 8003b40:	69fb      	ldr	r3, [r7, #28]
 8003b42:	f003 0301 	and.w	r3, r3, #1
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d034      	beq.n	8003bb4 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	685a      	ldr	r2, [r3, #4]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f022 0203 	bic.w	r2, r2, #3
 8003b58:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d011      	beq.n	8003b86 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b66:	4a18      	ldr	r2, [pc, #96]	; (8003bc8 <HAL_SPI_IRQHandler+0x1fc>)
 8003b68:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f7fe fcb6 	bl	80024e0 <HAL_DMA_Abort_IT>
 8003b74:	4603      	mov	r3, r0
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d005      	beq.n	8003b86 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b7e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d016      	beq.n	8003bbc <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b92:	4a0d      	ldr	r2, [pc, #52]	; (8003bc8 <HAL_SPI_IRQHandler+0x1fc>)
 8003b94:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f7fe fca0 	bl	80024e0 <HAL_DMA_Abort_IT>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d00a      	beq.n	8003bbc <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003baa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8003bb2:	e003      	b.n	8003bbc <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	f000 f809 	bl	8003bcc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003bba:	e000      	b.n	8003bbe <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8003bbc:	bf00      	nop
    return;
 8003bbe:	bf00      	nop
 8003bc0:	bf00      	nop
  }
}
 8003bc2:	3720      	adds	r7, #32
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}
 8003bc8:	08003be1 	.word	0x08003be1

08003bcc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b083      	sub	sp, #12
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003bd4:	bf00      	nop
 8003bd6:	370c      	adds	r7, #12
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr

08003be0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b084      	sub	sp, #16
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bec:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003bfa:	68f8      	ldr	r0, [r7, #12]
 8003bfc:	f7ff ffe6 	bl	8003bcc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003c00:	bf00      	nop
 8003c02:	3710      	adds	r7, #16
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}

08003c08 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b082      	sub	sp, #8
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	330c      	adds	r3, #12
 8003c1a:	7812      	ldrb	r2, [r2, #0]
 8003c1c:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c22:	1c5a      	adds	r2, r3, #1
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c2c:	b29b      	uxth	r3, r3
 8003c2e:	3b01      	subs	r3, #1
 8003c30:	b29a      	uxth	r2, r3
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c3a:	b29b      	uxth	r3, r3
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d102      	bne.n	8003c46 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	f000 f8d3 	bl	8003dec <SPI_CloseTx_ISR>
  }
}
 8003c46:	bf00      	nop
 8003c48:	3708      	adds	r7, #8
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}

08003c4e <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003c4e:	b580      	push	{r7, lr}
 8003c50:	b082      	sub	sp, #8
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c5a:	881a      	ldrh	r2, [r3, #0]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c66:	1c9a      	adds	r2, r3, #2
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c70:	b29b      	uxth	r3, r3
 8003c72:	3b01      	subs	r3, #1
 8003c74:	b29a      	uxth	r2, r3
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d102      	bne.n	8003c8a <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8003c84:	6878      	ldr	r0, [r7, #4]
 8003c86:	f000 f8b1 	bl	8003dec <SPI_CloseTx_ISR>
  }
}
 8003c8a:	bf00      	nop
 8003c8c:	3708      	adds	r7, #8
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}

08003c92 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003c92:	b580      	push	{r7, lr}
 8003c94:	b084      	sub	sp, #16
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	60f8      	str	r0, [r7, #12]
 8003c9a:	60b9      	str	r1, [r7, #8]
 8003c9c:	603b      	str	r3, [r7, #0]
 8003c9e:	4613      	mov	r3, r2
 8003ca0:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ca2:	e04c      	b.n	8003d3e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003caa:	d048      	beq.n	8003d3e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003cac:	f7fd fcba 	bl	8001624 <HAL_GetTick>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	69bb      	ldr	r3, [r7, #24]
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	683a      	ldr	r2, [r7, #0]
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d902      	bls.n	8003cc2 <SPI_WaitFlagStateUntilTimeout+0x30>
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d13d      	bne.n	8003d3e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	685a      	ldr	r2, [r3, #4]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003cd0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003cda:	d111      	bne.n	8003d00 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ce4:	d004      	beq.n	8003cf0 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cee:	d107      	bne.n	8003d00 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cfe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d08:	d10f      	bne.n	8003d2a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d18:	601a      	str	r2, [r3, #0]
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d28:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2200      	movs	r2, #0
 8003d36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003d3a:	2303      	movs	r3, #3
 8003d3c:	e00f      	b.n	8003d5e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	689a      	ldr	r2, [r3, #8]
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	4013      	ands	r3, r2
 8003d48:	68ba      	ldr	r2, [r7, #8]
 8003d4a:	429a      	cmp	r2, r3
 8003d4c:	bf0c      	ite	eq
 8003d4e:	2301      	moveq	r3, #1
 8003d50:	2300      	movne	r3, #0
 8003d52:	b2db      	uxtb	r3, r3
 8003d54:	461a      	mov	r2, r3
 8003d56:	79fb      	ldrb	r3, [r7, #7]
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d1a3      	bne.n	8003ca4 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8003d5c:	2300      	movs	r3, #0
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3710      	adds	r7, #16
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
	...

08003d68 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b088      	sub	sp, #32
 8003d6c:	af02      	add	r7, sp, #8
 8003d6e:	60f8      	str	r0, [r7, #12]
 8003d70:	60b9      	str	r1, [r7, #8]
 8003d72:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003d74:	4b1b      	ldr	r3, [pc, #108]	; (8003de4 <SPI_EndRxTxTransaction+0x7c>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a1b      	ldr	r2, [pc, #108]	; (8003de8 <SPI_EndRxTxTransaction+0x80>)
 8003d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d7e:	0d5b      	lsrs	r3, r3, #21
 8003d80:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003d84:	fb02 f303 	mul.w	r3, r2, r3
 8003d88:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d92:	d112      	bne.n	8003dba <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	9300      	str	r3, [sp, #0]
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	2180      	movs	r1, #128	; 0x80
 8003d9e:	68f8      	ldr	r0, [r7, #12]
 8003da0:	f7ff ff77 	bl	8003c92 <SPI_WaitFlagStateUntilTimeout>
 8003da4:	4603      	mov	r3, r0
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d016      	beq.n	8003dd8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dae:	f043 0220 	orr.w	r2, r3, #32
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003db6:	2303      	movs	r3, #3
 8003db8:	e00f      	b.n	8003dda <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d00a      	beq.n	8003dd6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	3b01      	subs	r3, #1
 8003dc4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dd0:	2b80      	cmp	r3, #128	; 0x80
 8003dd2:	d0f2      	beq.n	8003dba <SPI_EndRxTxTransaction+0x52>
 8003dd4:	e000      	b.n	8003dd8 <SPI_EndRxTxTransaction+0x70>
        break;
 8003dd6:	bf00      	nop
  }

  return HAL_OK;
 8003dd8:	2300      	movs	r3, #0
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3718      	adds	r7, #24
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	2000000c 	.word	0x2000000c
 8003de8:	165e9f81 	.word	0x165e9f81

08003dec <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b086      	sub	sp, #24
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8003df4:	4b2c      	ldr	r3, [pc, #176]	; (8003ea8 <SPI_CloseTx_ISR+0xbc>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a2c      	ldr	r2, [pc, #176]	; (8003eac <SPI_CloseTx_ISR+0xc0>)
 8003dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8003dfe:	0a5b      	lsrs	r3, r3, #9
 8003e00:	2264      	movs	r2, #100	; 0x64
 8003e02:	fb02 f303 	mul.w	r3, r2, r3
 8003e06:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e08:	f7fd fc0c 	bl	8001624 <HAL_GetTick>
 8003e0c:	6178      	str	r0, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d106      	bne.n	8003e22 <SPI_CloseTx_ISR+0x36>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e18:	f043 0220 	orr.w	r2, r3, #32
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003e20:	e009      	b.n	8003e36 <SPI_CloseTx_ISR+0x4a>
    }
    count--;
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	3b01      	subs	r3, #1
 8003e26:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	f003 0302 	and.w	r3, r3, #2
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d0eb      	beq.n	8003e0e <SPI_CloseTx_ISR+0x22>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	685a      	ldr	r2, [r3, #4]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003e44:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003e46:	697a      	ldr	r2, [r7, #20]
 8003e48:	2164      	movs	r1, #100	; 0x64
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f7ff ff8c 	bl	8003d68 <SPI_EndRxTxTransaction>
 8003e50:	4603      	mov	r3, r0
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d005      	beq.n	8003e62 <SPI_CloseTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e5a:	f043 0220 	orr.w	r2, r3, #32
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d10a      	bne.n	8003e80 <SPI_CloseTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	60fb      	str	r3, [r7, #12]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	60fb      	str	r3, [r7, #12]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	60fb      	str	r3, [r7, #12]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2201      	movs	r2, #1
 8003e84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d003      	beq.n	8003e98 <SPI_CloseTx_ISR+0xac>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	f7ff fe9b 	bl	8003bcc <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8003e96:	e002      	b.n	8003e9e <SPI_CloseTx_ISR+0xb2>
    HAL_SPI_TxCpltCallback(hspi);
 8003e98:	6878      	ldr	r0, [r7, #4]
 8003e9a:	f7fd f8af 	bl	8000ffc <HAL_SPI_TxCpltCallback>
}
 8003e9e:	bf00      	nop
 8003ea0:	3718      	adds	r7, #24
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	bf00      	nop
 8003ea8:	2000000c 	.word	0x2000000c
 8003eac:	057619f1 	.word	0x057619f1

08003eb0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b082      	sub	sp, #8
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d101      	bne.n	8003ec2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e01d      	b.n	8003efe <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d106      	bne.n	8003edc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f7fd f9fe 	bl	80012d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2202      	movs	r2, #2
 8003ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	3304      	adds	r3, #4
 8003eec:	4619      	mov	r1, r3
 8003eee:	4610      	mov	r0, r2
 8003ef0:	f000 fb0a 	bl	8004508 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003efc:	2300      	movs	r3, #0
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3708      	adds	r7, #8
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}

08003f06 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003f06:	b480      	push	{r7}
 8003f08:	b085      	sub	sp, #20
 8003f0a:	af00      	add	r7, sp, #0
 8003f0c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2202      	movs	r2, #2
 8003f12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	f003 0307 	and.w	r3, r3, #7
 8003f20:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2b06      	cmp	r3, #6
 8003f26:	d007      	beq.n	8003f38 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f042 0201 	orr.w	r2, r2, #1
 8003f36:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003f40:	2300      	movs	r3, #0
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3714      	adds	r7, #20
 8003f46:	46bd      	mov	sp, r7
 8003f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4c:	4770      	bx	lr

08003f4e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f4e:	b480      	push	{r7}
 8003f50:	b085      	sub	sp, #20
 8003f52:	af00      	add	r7, sp, #0
 8003f54:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	68da      	ldr	r2, [r3, #12]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f042 0201 	orr.w	r2, r2, #1
 8003f64:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	f003 0307 	and.w	r3, r3, #7
 8003f70:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2b06      	cmp	r3, #6
 8003f76:	d007      	beq.n	8003f88 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f042 0201 	orr.w	r2, r2, #1
 8003f86:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f88:	2300      	movs	r3, #0
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3714      	adds	r7, #20
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f94:	4770      	bx	lr

08003f96 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003f96:	b580      	push	{r7, lr}
 8003f98:	b082      	sub	sp, #8
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d101      	bne.n	8003fa8 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e01d      	b.n	8003fe4 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d106      	bne.n	8003fc2 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003fbc:	6878      	ldr	r0, [r7, #4]
 8003fbe:	f000 f815 	bl	8003fec <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2202      	movs	r2, #2
 8003fc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	3304      	adds	r3, #4
 8003fd2:	4619      	mov	r1, r3
 8003fd4:	4610      	mov	r0, r2
 8003fd6:	f000 fa97 	bl	8004508 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2201      	movs	r2, #1
 8003fde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003fe2:	2300      	movs	r3, #0
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3708      	adds	r7, #8
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}

08003fec <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b083      	sub	sp, #12
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003ff4:	bf00      	nop
 8003ff6:	370c      	adds	r7, #12
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr

08004000 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b082      	sub	sp, #8
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	691b      	ldr	r3, [r3, #16]
 800400e:	f003 0302 	and.w	r3, r3, #2
 8004012:	2b02      	cmp	r3, #2
 8004014:	d122      	bne.n	800405c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	f003 0302 	and.w	r3, r3, #2
 8004020:	2b02      	cmp	r3, #2
 8004022:	d11b      	bne.n	800405c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f06f 0202 	mvn.w	r2, #2
 800402c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2201      	movs	r2, #1
 8004032:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	699b      	ldr	r3, [r3, #24]
 800403a:	f003 0303 	and.w	r3, r3, #3
 800403e:	2b00      	cmp	r3, #0
 8004040:	d003      	beq.n	800404a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f000 fa41 	bl	80044ca <HAL_TIM_IC_CaptureCallback>
 8004048:	e005      	b.n	8004056 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f000 fa33 	bl	80044b6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	f000 fa44 	bl	80044de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2200      	movs	r2, #0
 800405a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	691b      	ldr	r3, [r3, #16]
 8004062:	f003 0304 	and.w	r3, r3, #4
 8004066:	2b04      	cmp	r3, #4
 8004068:	d122      	bne.n	80040b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	f003 0304 	and.w	r3, r3, #4
 8004074:	2b04      	cmp	r3, #4
 8004076:	d11b      	bne.n	80040b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f06f 0204 	mvn.w	r2, #4
 8004080:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2202      	movs	r2, #2
 8004086:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	699b      	ldr	r3, [r3, #24]
 800408e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004092:	2b00      	cmp	r3, #0
 8004094:	d003      	beq.n	800409e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f000 fa17 	bl	80044ca <HAL_TIM_IC_CaptureCallback>
 800409c:	e005      	b.n	80040aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f000 fa09 	bl	80044b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	f000 fa1a 	bl	80044de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2200      	movs	r2, #0
 80040ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	691b      	ldr	r3, [r3, #16]
 80040b6:	f003 0308 	and.w	r3, r3, #8
 80040ba:	2b08      	cmp	r3, #8
 80040bc:	d122      	bne.n	8004104 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	68db      	ldr	r3, [r3, #12]
 80040c4:	f003 0308 	and.w	r3, r3, #8
 80040c8:	2b08      	cmp	r3, #8
 80040ca:	d11b      	bne.n	8004104 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f06f 0208 	mvn.w	r2, #8
 80040d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2204      	movs	r2, #4
 80040da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	69db      	ldr	r3, [r3, #28]
 80040e2:	f003 0303 	and.w	r3, r3, #3
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d003      	beq.n	80040f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f000 f9ed 	bl	80044ca <HAL_TIM_IC_CaptureCallback>
 80040f0:	e005      	b.n	80040fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f000 f9df 	bl	80044b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040f8:	6878      	ldr	r0, [r7, #4]
 80040fa:	f000 f9f0 	bl	80044de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2200      	movs	r2, #0
 8004102:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	691b      	ldr	r3, [r3, #16]
 800410a:	f003 0310 	and.w	r3, r3, #16
 800410e:	2b10      	cmp	r3, #16
 8004110:	d122      	bne.n	8004158 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	f003 0310 	and.w	r3, r3, #16
 800411c:	2b10      	cmp	r3, #16
 800411e:	d11b      	bne.n	8004158 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f06f 0210 	mvn.w	r2, #16
 8004128:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2208      	movs	r2, #8
 800412e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	69db      	ldr	r3, [r3, #28]
 8004136:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800413a:	2b00      	cmp	r3, #0
 800413c:	d003      	beq.n	8004146 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f000 f9c3 	bl	80044ca <HAL_TIM_IC_CaptureCallback>
 8004144:	e005      	b.n	8004152 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f000 f9b5 	bl	80044b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	f000 f9c6 	bl	80044de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2200      	movs	r2, #0
 8004156:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	691b      	ldr	r3, [r3, #16]
 800415e:	f003 0301 	and.w	r3, r3, #1
 8004162:	2b01      	cmp	r3, #1
 8004164:	d10e      	bne.n	8004184 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	f003 0301 	and.w	r3, r3, #1
 8004170:	2b01      	cmp	r3, #1
 8004172:	d107      	bne.n	8004184 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f06f 0201 	mvn.w	r2, #1
 800417c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f7fc ff52 	bl	8001028 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	691b      	ldr	r3, [r3, #16]
 800418a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800418e:	2b80      	cmp	r3, #128	; 0x80
 8004190:	d10e      	bne.n	80041b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800419c:	2b80      	cmp	r3, #128	; 0x80
 800419e:	d107      	bne.n	80041b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80041a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f000 fc5c 	bl	8004a68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	691b      	ldr	r3, [r3, #16]
 80041b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041ba:	2b40      	cmp	r3, #64	; 0x40
 80041bc:	d10e      	bne.n	80041dc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041c8:	2b40      	cmp	r3, #64	; 0x40
 80041ca:	d107      	bne.n	80041dc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80041d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f000 f98b 	bl	80044f2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	691b      	ldr	r3, [r3, #16]
 80041e2:	f003 0320 	and.w	r3, r3, #32
 80041e6:	2b20      	cmp	r3, #32
 80041e8:	d10e      	bne.n	8004208 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	68db      	ldr	r3, [r3, #12]
 80041f0:	f003 0320 	and.w	r3, r3, #32
 80041f4:	2b20      	cmp	r3, #32
 80041f6:	d107      	bne.n	8004208 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f06f 0220 	mvn.w	r2, #32
 8004200:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f000 fc26 	bl	8004a54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004208:	bf00      	nop
 800420a:	3708      	adds	r7, #8
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}

08004210 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b084      	sub	sp, #16
 8004214:	af00      	add	r7, sp, #0
 8004216:	60f8      	str	r0, [r7, #12]
 8004218:	60b9      	str	r1, [r7, #8]
 800421a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004222:	2b01      	cmp	r3, #1
 8004224:	d101      	bne.n	800422a <HAL_TIM_IC_ConfigChannel+0x1a>
 8004226:	2302      	movs	r3, #2
 8004228:	e08a      	b.n	8004340 <HAL_TIM_IC_ConfigChannel+0x130>
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2201      	movs	r2, #1
 800422e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2202      	movs	r2, #2
 8004236:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d11b      	bne.n	8004278 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	6818      	ldr	r0, [r3, #0]
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	6819      	ldr	r1, [r3, #0]
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	685a      	ldr	r2, [r3, #4]
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	68db      	ldr	r3, [r3, #12]
 8004250:	f000 f9da 	bl	8004608 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	699a      	ldr	r2, [r3, #24]
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f022 020c 	bic.w	r2, r2, #12
 8004262:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	6999      	ldr	r1, [r3, #24]
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	689a      	ldr	r2, [r3, #8]
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	430a      	orrs	r2, r1
 8004274:	619a      	str	r2, [r3, #24]
 8004276:	e05a      	b.n	800432e <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2b04      	cmp	r3, #4
 800427c:	d11c      	bne.n	80042b8 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	6818      	ldr	r0, [r3, #0]
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	6819      	ldr	r1, [r3, #0]
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	685a      	ldr	r2, [r3, #4]
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	68db      	ldr	r3, [r3, #12]
 800428e:	f000 fa52 	bl	8004736 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	699a      	ldr	r2, [r3, #24]
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80042a0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	6999      	ldr	r1, [r3, #24]
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	021a      	lsls	r2, r3, #8
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	430a      	orrs	r2, r1
 80042b4:	619a      	str	r2, [r3, #24]
 80042b6:	e03a      	b.n	800432e <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2b08      	cmp	r3, #8
 80042bc:	d11b      	bne.n	80042f6 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	6818      	ldr	r0, [r3, #0]
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	6819      	ldr	r1, [r3, #0]
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	685a      	ldr	r2, [r3, #4]
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	68db      	ldr	r3, [r3, #12]
 80042ce:	f000 fa9f 	bl	8004810 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	69da      	ldr	r2, [r3, #28]
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f022 020c 	bic.w	r2, r2, #12
 80042e0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	69d9      	ldr	r1, [r3, #28]
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	689a      	ldr	r2, [r3, #8]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	430a      	orrs	r2, r1
 80042f2:	61da      	str	r2, [r3, #28]
 80042f4:	e01b      	b.n	800432e <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	6818      	ldr	r0, [r3, #0]
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	6819      	ldr	r1, [r3, #0]
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	685a      	ldr	r2, [r3, #4]
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	68db      	ldr	r3, [r3, #12]
 8004306:	f000 fabf 	bl	8004888 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	69da      	ldr	r2, [r3, #28]
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004318:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	69d9      	ldr	r1, [r3, #28]
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	021a      	lsls	r2, r3, #8
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	430a      	orrs	r2, r1
 800432c:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2201      	movs	r2, #1
 8004332:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2200      	movs	r2, #0
 800433a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800433e:	2300      	movs	r3, #0
}
 8004340:	4618      	mov	r0, r3
 8004342:	3710      	adds	r7, #16
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}

08004348 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b084      	sub	sp, #16
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
 8004350:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004358:	2b01      	cmp	r3, #1
 800435a:	d101      	bne.n	8004360 <HAL_TIM_ConfigClockSource+0x18>
 800435c:	2302      	movs	r3, #2
 800435e:	e0a6      	b.n	80044ae <HAL_TIM_ConfigClockSource+0x166>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2201      	movs	r2, #1
 8004364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2202      	movs	r2, #2
 800436c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800437e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004386:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	68fa      	ldr	r2, [r7, #12]
 800438e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	2b40      	cmp	r3, #64	; 0x40
 8004396:	d067      	beq.n	8004468 <HAL_TIM_ConfigClockSource+0x120>
 8004398:	2b40      	cmp	r3, #64	; 0x40
 800439a:	d80b      	bhi.n	80043b4 <HAL_TIM_ConfigClockSource+0x6c>
 800439c:	2b10      	cmp	r3, #16
 800439e:	d073      	beq.n	8004488 <HAL_TIM_ConfigClockSource+0x140>
 80043a0:	2b10      	cmp	r3, #16
 80043a2:	d802      	bhi.n	80043aa <HAL_TIM_ConfigClockSource+0x62>
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d06f      	beq.n	8004488 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80043a8:	e078      	b.n	800449c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80043aa:	2b20      	cmp	r3, #32
 80043ac:	d06c      	beq.n	8004488 <HAL_TIM_ConfigClockSource+0x140>
 80043ae:	2b30      	cmp	r3, #48	; 0x30
 80043b0:	d06a      	beq.n	8004488 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80043b2:	e073      	b.n	800449c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80043b4:	2b70      	cmp	r3, #112	; 0x70
 80043b6:	d00d      	beq.n	80043d4 <HAL_TIM_ConfigClockSource+0x8c>
 80043b8:	2b70      	cmp	r3, #112	; 0x70
 80043ba:	d804      	bhi.n	80043c6 <HAL_TIM_ConfigClockSource+0x7e>
 80043bc:	2b50      	cmp	r3, #80	; 0x50
 80043be:	d033      	beq.n	8004428 <HAL_TIM_ConfigClockSource+0xe0>
 80043c0:	2b60      	cmp	r3, #96	; 0x60
 80043c2:	d041      	beq.n	8004448 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80043c4:	e06a      	b.n	800449c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80043c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043ca:	d066      	beq.n	800449a <HAL_TIM_ConfigClockSource+0x152>
 80043cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043d0:	d017      	beq.n	8004402 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80043d2:	e063      	b.n	800449c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6818      	ldr	r0, [r3, #0]
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	6899      	ldr	r1, [r3, #8]
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	685a      	ldr	r2, [r3, #4]
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	f000 faa8 	bl	8004938 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80043f6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	68fa      	ldr	r2, [r7, #12]
 80043fe:	609a      	str	r2, [r3, #8]
      break;
 8004400:	e04c      	b.n	800449c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6818      	ldr	r0, [r3, #0]
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	6899      	ldr	r1, [r3, #8]
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	685a      	ldr	r2, [r3, #4]
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	68db      	ldr	r3, [r3, #12]
 8004412:	f000 fa91 	bl	8004938 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	689a      	ldr	r2, [r3, #8]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004424:	609a      	str	r2, [r3, #8]
      break;
 8004426:	e039      	b.n	800449c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6818      	ldr	r0, [r3, #0]
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	6859      	ldr	r1, [r3, #4]
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	68db      	ldr	r3, [r3, #12]
 8004434:	461a      	mov	r2, r3
 8004436:	f000 f94f 	bl	80046d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	2150      	movs	r1, #80	; 0x50
 8004440:	4618      	mov	r0, r3
 8004442:	f000 fa5e 	bl	8004902 <TIM_ITRx_SetConfig>
      break;
 8004446:	e029      	b.n	800449c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6818      	ldr	r0, [r3, #0]
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	6859      	ldr	r1, [r3, #4]
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	461a      	mov	r2, r3
 8004456:	f000 f9ab 	bl	80047b0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	2160      	movs	r1, #96	; 0x60
 8004460:	4618      	mov	r0, r3
 8004462:	f000 fa4e 	bl	8004902 <TIM_ITRx_SetConfig>
      break;
 8004466:	e019      	b.n	800449c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6818      	ldr	r0, [r3, #0]
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	6859      	ldr	r1, [r3, #4]
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	68db      	ldr	r3, [r3, #12]
 8004474:	461a      	mov	r2, r3
 8004476:	f000 f92f 	bl	80046d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	2140      	movs	r1, #64	; 0x40
 8004480:	4618      	mov	r0, r3
 8004482:	f000 fa3e 	bl	8004902 <TIM_ITRx_SetConfig>
      break;
 8004486:	e009      	b.n	800449c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4619      	mov	r1, r3
 8004492:	4610      	mov	r0, r2
 8004494:	f000 fa35 	bl	8004902 <TIM_ITRx_SetConfig>
      break;
 8004498:	e000      	b.n	800449c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800449a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2201      	movs	r2, #1
 80044a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2200      	movs	r2, #0
 80044a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80044ac:	2300      	movs	r3, #0
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	3710      	adds	r7, #16
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}

080044b6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044b6:	b480      	push	{r7}
 80044b8:	b083      	sub	sp, #12
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80044be:	bf00      	nop
 80044c0:	370c      	adds	r7, #12
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr

080044ca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80044ca:	b480      	push	{r7}
 80044cc:	b083      	sub	sp, #12
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80044d2:	bf00      	nop
 80044d4:	370c      	adds	r7, #12
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr

080044de <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80044de:	b480      	push	{r7}
 80044e0:	b083      	sub	sp, #12
 80044e2:	af00      	add	r7, sp, #0
 80044e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80044e6:	bf00      	nop
 80044e8:	370c      	adds	r7, #12
 80044ea:	46bd      	mov	sp, r7
 80044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f0:	4770      	bx	lr

080044f2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80044f2:	b480      	push	{r7}
 80044f4:	b083      	sub	sp, #12
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80044fa:	bf00      	nop
 80044fc:	370c      	adds	r7, #12
 80044fe:	46bd      	mov	sp, r7
 8004500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004504:	4770      	bx	lr
	...

08004508 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004508:	b480      	push	{r7}
 800450a:	b085      	sub	sp, #20
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
 8004510:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	4a34      	ldr	r2, [pc, #208]	; (80045ec <TIM_Base_SetConfig+0xe4>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d00f      	beq.n	8004540 <TIM_Base_SetConfig+0x38>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004526:	d00b      	beq.n	8004540 <TIM_Base_SetConfig+0x38>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	4a31      	ldr	r2, [pc, #196]	; (80045f0 <TIM_Base_SetConfig+0xe8>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d007      	beq.n	8004540 <TIM_Base_SetConfig+0x38>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	4a30      	ldr	r2, [pc, #192]	; (80045f4 <TIM_Base_SetConfig+0xec>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d003      	beq.n	8004540 <TIM_Base_SetConfig+0x38>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	4a2f      	ldr	r2, [pc, #188]	; (80045f8 <TIM_Base_SetConfig+0xf0>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d108      	bne.n	8004552 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004546:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	68fa      	ldr	r2, [r7, #12]
 800454e:	4313      	orrs	r3, r2
 8004550:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	4a25      	ldr	r2, [pc, #148]	; (80045ec <TIM_Base_SetConfig+0xe4>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d01b      	beq.n	8004592 <TIM_Base_SetConfig+0x8a>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004560:	d017      	beq.n	8004592 <TIM_Base_SetConfig+0x8a>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	4a22      	ldr	r2, [pc, #136]	; (80045f0 <TIM_Base_SetConfig+0xe8>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d013      	beq.n	8004592 <TIM_Base_SetConfig+0x8a>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	4a21      	ldr	r2, [pc, #132]	; (80045f4 <TIM_Base_SetConfig+0xec>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d00f      	beq.n	8004592 <TIM_Base_SetConfig+0x8a>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	4a20      	ldr	r2, [pc, #128]	; (80045f8 <TIM_Base_SetConfig+0xf0>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d00b      	beq.n	8004592 <TIM_Base_SetConfig+0x8a>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	4a1f      	ldr	r2, [pc, #124]	; (80045fc <TIM_Base_SetConfig+0xf4>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d007      	beq.n	8004592 <TIM_Base_SetConfig+0x8a>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	4a1e      	ldr	r2, [pc, #120]	; (8004600 <TIM_Base_SetConfig+0xf8>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d003      	beq.n	8004592 <TIM_Base_SetConfig+0x8a>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	4a1d      	ldr	r2, [pc, #116]	; (8004604 <TIM_Base_SetConfig+0xfc>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d108      	bne.n	80045a4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004598:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	68db      	ldr	r3, [r3, #12]
 800459e:	68fa      	ldr	r2, [r7, #12]
 80045a0:	4313      	orrs	r3, r2
 80045a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	695b      	ldr	r3, [r3, #20]
 80045ae:	4313      	orrs	r3, r2
 80045b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	68fa      	ldr	r2, [r7, #12]
 80045b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	689a      	ldr	r2, [r3, #8]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	4a08      	ldr	r2, [pc, #32]	; (80045ec <TIM_Base_SetConfig+0xe4>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d103      	bne.n	80045d8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	691a      	ldr	r2, [r3, #16]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2201      	movs	r2, #1
 80045dc:	615a      	str	r2, [r3, #20]
}
 80045de:	bf00      	nop
 80045e0:	3714      	adds	r7, #20
 80045e2:	46bd      	mov	sp, r7
 80045e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e8:	4770      	bx	lr
 80045ea:	bf00      	nop
 80045ec:	40010000 	.word	0x40010000
 80045f0:	40000400 	.word	0x40000400
 80045f4:	40000800 	.word	0x40000800
 80045f8:	40000c00 	.word	0x40000c00
 80045fc:	40014000 	.word	0x40014000
 8004600:	40014400 	.word	0x40014400
 8004604:	40014800 	.word	0x40014800

08004608 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004608:	b480      	push	{r7}
 800460a:	b087      	sub	sp, #28
 800460c:	af00      	add	r7, sp, #0
 800460e:	60f8      	str	r0, [r7, #12]
 8004610:	60b9      	str	r1, [r7, #8]
 8004612:	607a      	str	r2, [r7, #4]
 8004614:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	6a1b      	ldr	r3, [r3, #32]
 800461a:	f023 0201 	bic.w	r2, r3, #1
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	699b      	ldr	r3, [r3, #24]
 8004626:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	6a1b      	ldr	r3, [r3, #32]
 800462c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	4a24      	ldr	r2, [pc, #144]	; (80046c4 <TIM_TI1_SetConfig+0xbc>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d013      	beq.n	800465e <TIM_TI1_SetConfig+0x56>
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800463c:	d00f      	beq.n	800465e <TIM_TI1_SetConfig+0x56>
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	4a21      	ldr	r2, [pc, #132]	; (80046c8 <TIM_TI1_SetConfig+0xc0>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d00b      	beq.n	800465e <TIM_TI1_SetConfig+0x56>
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	4a20      	ldr	r2, [pc, #128]	; (80046cc <TIM_TI1_SetConfig+0xc4>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d007      	beq.n	800465e <TIM_TI1_SetConfig+0x56>
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	4a1f      	ldr	r2, [pc, #124]	; (80046d0 <TIM_TI1_SetConfig+0xc8>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d003      	beq.n	800465e <TIM_TI1_SetConfig+0x56>
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	4a1e      	ldr	r2, [pc, #120]	; (80046d4 <TIM_TI1_SetConfig+0xcc>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d101      	bne.n	8004662 <TIM_TI1_SetConfig+0x5a>
 800465e:	2301      	movs	r3, #1
 8004660:	e000      	b.n	8004664 <TIM_TI1_SetConfig+0x5c>
 8004662:	2300      	movs	r3, #0
 8004664:	2b00      	cmp	r3, #0
 8004666:	d008      	beq.n	800467a <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	f023 0303 	bic.w	r3, r3, #3
 800466e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004670:	697a      	ldr	r2, [r7, #20]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	4313      	orrs	r3, r2
 8004676:	617b      	str	r3, [r7, #20]
 8004678:	e003      	b.n	8004682 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	f043 0301 	orr.w	r3, r3, #1
 8004680:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004688:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	011b      	lsls	r3, r3, #4
 800468e:	b2db      	uxtb	r3, r3
 8004690:	697a      	ldr	r2, [r7, #20]
 8004692:	4313      	orrs	r3, r2
 8004694:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	f023 030a 	bic.w	r3, r3, #10
 800469c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	f003 030a 	and.w	r3, r3, #10
 80046a4:	693a      	ldr	r2, [r7, #16]
 80046a6:	4313      	orrs	r3, r2
 80046a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	697a      	ldr	r2, [r7, #20]
 80046ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	693a      	ldr	r2, [r7, #16]
 80046b4:	621a      	str	r2, [r3, #32]
}
 80046b6:	bf00      	nop
 80046b8:	371c      	adds	r7, #28
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr
 80046c2:	bf00      	nop
 80046c4:	40010000 	.word	0x40010000
 80046c8:	40000400 	.word	0x40000400
 80046cc:	40000800 	.word	0x40000800
 80046d0:	40000c00 	.word	0x40000c00
 80046d4:	40014000 	.word	0x40014000

080046d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046d8:	b480      	push	{r7}
 80046da:	b087      	sub	sp, #28
 80046dc:	af00      	add	r7, sp, #0
 80046de:	60f8      	str	r0, [r7, #12]
 80046e0:	60b9      	str	r1, [r7, #8]
 80046e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	6a1b      	ldr	r3, [r3, #32]
 80046e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	6a1b      	ldr	r3, [r3, #32]
 80046ee:	f023 0201 	bic.w	r2, r3, #1
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	699b      	ldr	r3, [r3, #24]
 80046fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004702:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	011b      	lsls	r3, r3, #4
 8004708:	693a      	ldr	r2, [r7, #16]
 800470a:	4313      	orrs	r3, r2
 800470c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	f023 030a 	bic.w	r3, r3, #10
 8004714:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004716:	697a      	ldr	r2, [r7, #20]
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	4313      	orrs	r3, r2
 800471c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	693a      	ldr	r2, [r7, #16]
 8004722:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	697a      	ldr	r2, [r7, #20]
 8004728:	621a      	str	r2, [r3, #32]
}
 800472a:	bf00      	nop
 800472c:	371c      	adds	r7, #28
 800472e:	46bd      	mov	sp, r7
 8004730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004734:	4770      	bx	lr

08004736 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004736:	b480      	push	{r7}
 8004738:	b087      	sub	sp, #28
 800473a:	af00      	add	r7, sp, #0
 800473c:	60f8      	str	r0, [r7, #12]
 800473e:	60b9      	str	r1, [r7, #8]
 8004740:	607a      	str	r2, [r7, #4]
 8004742:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	6a1b      	ldr	r3, [r3, #32]
 8004748:	f023 0210 	bic.w	r2, r3, #16
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	699b      	ldr	r3, [r3, #24]
 8004754:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	6a1b      	ldr	r3, [r3, #32]
 800475a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004762:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	021b      	lsls	r3, r3, #8
 8004768:	697a      	ldr	r2, [r7, #20]
 800476a:	4313      	orrs	r3, r2
 800476c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004774:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	031b      	lsls	r3, r3, #12
 800477a:	b29b      	uxth	r3, r3
 800477c:	697a      	ldr	r2, [r7, #20]
 800477e:	4313      	orrs	r3, r2
 8004780:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004788:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	011b      	lsls	r3, r3, #4
 800478e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004792:	693a      	ldr	r2, [r7, #16]
 8004794:	4313      	orrs	r3, r2
 8004796:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	697a      	ldr	r2, [r7, #20]
 800479c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	693a      	ldr	r2, [r7, #16]
 80047a2:	621a      	str	r2, [r3, #32]
}
 80047a4:	bf00      	nop
 80047a6:	371c      	adds	r7, #28
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr

080047b0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b087      	sub	sp, #28
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	60f8      	str	r0, [r7, #12]
 80047b8:	60b9      	str	r1, [r7, #8]
 80047ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	6a1b      	ldr	r3, [r3, #32]
 80047c0:	f023 0210 	bic.w	r2, r3, #16
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	699b      	ldr	r3, [r3, #24]
 80047cc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	6a1b      	ldr	r3, [r3, #32]
 80047d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80047da:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	031b      	lsls	r3, r3, #12
 80047e0:	697a      	ldr	r2, [r7, #20]
 80047e2:	4313      	orrs	r3, r2
 80047e4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80047ec:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	011b      	lsls	r3, r3, #4
 80047f2:	693a      	ldr	r2, [r7, #16]
 80047f4:	4313      	orrs	r3, r2
 80047f6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	697a      	ldr	r2, [r7, #20]
 80047fc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	693a      	ldr	r2, [r7, #16]
 8004802:	621a      	str	r2, [r3, #32]
}
 8004804:	bf00      	nop
 8004806:	371c      	adds	r7, #28
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr

08004810 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004810:	b480      	push	{r7}
 8004812:	b087      	sub	sp, #28
 8004814:	af00      	add	r7, sp, #0
 8004816:	60f8      	str	r0, [r7, #12]
 8004818:	60b9      	str	r1, [r7, #8]
 800481a:	607a      	str	r2, [r7, #4]
 800481c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	6a1b      	ldr	r3, [r3, #32]
 8004822:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	69db      	ldr	r3, [r3, #28]
 800482e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	6a1b      	ldr	r3, [r3, #32]
 8004834:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	f023 0303 	bic.w	r3, r3, #3
 800483c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800483e:	697a      	ldr	r2, [r7, #20]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	4313      	orrs	r3, r2
 8004844:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800484c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	011b      	lsls	r3, r3, #4
 8004852:	b2db      	uxtb	r3, r3
 8004854:	697a      	ldr	r2, [r7, #20]
 8004856:	4313      	orrs	r3, r2
 8004858:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004860:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	021b      	lsls	r3, r3, #8
 8004866:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800486a:	693a      	ldr	r2, [r7, #16]
 800486c:	4313      	orrs	r3, r2
 800486e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	697a      	ldr	r2, [r7, #20]
 8004874:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	693a      	ldr	r2, [r7, #16]
 800487a:	621a      	str	r2, [r3, #32]
}
 800487c:	bf00      	nop
 800487e:	371c      	adds	r7, #28
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr

08004888 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004888:	b480      	push	{r7}
 800488a:	b087      	sub	sp, #28
 800488c:	af00      	add	r7, sp, #0
 800488e:	60f8      	str	r0, [r7, #12]
 8004890:	60b9      	str	r1, [r7, #8]
 8004892:	607a      	str	r2, [r7, #4]
 8004894:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	6a1b      	ldr	r3, [r3, #32]
 800489a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	69db      	ldr	r3, [r3, #28]
 80048a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	6a1b      	ldr	r3, [r3, #32]
 80048ac:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048b4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	021b      	lsls	r3, r3, #8
 80048ba:	697a      	ldr	r2, [r7, #20]
 80048bc:	4313      	orrs	r3, r2
 80048be:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80048c6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	031b      	lsls	r3, r3, #12
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	697a      	ldr	r2, [r7, #20]
 80048d0:	4313      	orrs	r3, r2
 80048d2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80048da:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	031b      	lsls	r3, r3, #12
 80048e0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80048e4:	693a      	ldr	r2, [r7, #16]
 80048e6:	4313      	orrs	r3, r2
 80048e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	697a      	ldr	r2, [r7, #20]
 80048ee:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	693a      	ldr	r2, [r7, #16]
 80048f4:	621a      	str	r2, [r3, #32]
}
 80048f6:	bf00      	nop
 80048f8:	371c      	adds	r7, #28
 80048fa:	46bd      	mov	sp, r7
 80048fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004900:	4770      	bx	lr

08004902 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004902:	b480      	push	{r7}
 8004904:	b085      	sub	sp, #20
 8004906:	af00      	add	r7, sp, #0
 8004908:	6078      	str	r0, [r7, #4]
 800490a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004918:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800491a:	683a      	ldr	r2, [r7, #0]
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	4313      	orrs	r3, r2
 8004920:	f043 0307 	orr.w	r3, r3, #7
 8004924:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	68fa      	ldr	r2, [r7, #12]
 800492a:	609a      	str	r2, [r3, #8]
}
 800492c:	bf00      	nop
 800492e:	3714      	adds	r7, #20
 8004930:	46bd      	mov	sp, r7
 8004932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004936:	4770      	bx	lr

08004938 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004938:	b480      	push	{r7}
 800493a:	b087      	sub	sp, #28
 800493c:	af00      	add	r7, sp, #0
 800493e:	60f8      	str	r0, [r7, #12]
 8004940:	60b9      	str	r1, [r7, #8]
 8004942:	607a      	str	r2, [r7, #4]
 8004944:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004952:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	021a      	lsls	r2, r3, #8
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	431a      	orrs	r2, r3
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	4313      	orrs	r3, r2
 8004960:	697a      	ldr	r2, [r7, #20]
 8004962:	4313      	orrs	r3, r2
 8004964:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	697a      	ldr	r2, [r7, #20]
 800496a:	609a      	str	r2, [r3, #8]
}
 800496c:	bf00      	nop
 800496e:	371c      	adds	r7, #28
 8004970:	46bd      	mov	sp, r7
 8004972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004976:	4770      	bx	lr

08004978 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004978:	b480      	push	{r7}
 800497a:	b085      	sub	sp, #20
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
 8004980:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004988:	2b01      	cmp	r3, #1
 800498a:	d101      	bne.n	8004990 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800498c:	2302      	movs	r3, #2
 800498e:	e050      	b.n	8004a32 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2201      	movs	r2, #1
 8004994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2202      	movs	r2, #2
 800499c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	68fa      	ldr	r2, [r7, #12]
 80049be:	4313      	orrs	r3, r2
 80049c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	68fa      	ldr	r2, [r7, #12]
 80049c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a1c      	ldr	r2, [pc, #112]	; (8004a40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d018      	beq.n	8004a06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049dc:	d013      	beq.n	8004a06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a18      	ldr	r2, [pc, #96]	; (8004a44 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d00e      	beq.n	8004a06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a16      	ldr	r2, [pc, #88]	; (8004a48 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d009      	beq.n	8004a06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a15      	ldr	r2, [pc, #84]	; (8004a4c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d004      	beq.n	8004a06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a13      	ldr	r2, [pc, #76]	; (8004a50 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d10c      	bne.n	8004a20 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a0c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	68ba      	ldr	r2, [r7, #8]
 8004a14:	4313      	orrs	r3, r2
 8004a16:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	68ba      	ldr	r2, [r7, #8]
 8004a1e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2201      	movs	r2, #1
 8004a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a30:	2300      	movs	r3, #0
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3714      	adds	r7, #20
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr
 8004a3e:	bf00      	nop
 8004a40:	40010000 	.word	0x40010000
 8004a44:	40000400 	.word	0x40000400
 8004a48:	40000800 	.word	0x40000800
 8004a4c:	40000c00 	.word	0x40000c00
 8004a50:	40014000 	.word	0x40014000

08004a54 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b083      	sub	sp, #12
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a5c:	bf00      	nop
 8004a5e:	370c      	adds	r7, #12
 8004a60:	46bd      	mov	sp, r7
 8004a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a66:	4770      	bx	lr

08004a68 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b083      	sub	sp, #12
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a70:	bf00      	nop
 8004a72:	370c      	adds	r7, #12
 8004a74:	46bd      	mov	sp, r7
 8004a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7a:	4770      	bx	lr

08004a7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b082      	sub	sp, #8
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d101      	bne.n	8004a8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e03f      	b.n	8004b0e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d106      	bne.n	8004aa8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f7fc fc7e 	bl	80013a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2224      	movs	r2, #36	; 0x24
 8004aac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	68da      	ldr	r2, [r3, #12]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004abe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004ac0:	6878      	ldr	r0, [r7, #4]
 8004ac2:	f000 f829 	bl	8004b18 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	691a      	ldr	r2, [r3, #16]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ad4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	695a      	ldr	r2, [r3, #20]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ae4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	68da      	ldr	r2, [r3, #12]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004af4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2200      	movs	r2, #0
 8004afa:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2220      	movs	r2, #32
 8004b00:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2220      	movs	r2, #32
 8004b08:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004b0c:	2300      	movs	r3, #0
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	3708      	adds	r7, #8
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}
	...

08004b18 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b1c:	b085      	sub	sp, #20
 8004b1e:	af00      	add	r7, sp, #0
 8004b20:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	691b      	ldr	r3, [r3, #16]
 8004b28:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	68da      	ldr	r2, [r3, #12]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	430a      	orrs	r2, r1
 8004b36:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	689a      	ldr	r2, [r3, #8]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	691b      	ldr	r3, [r3, #16]
 8004b40:	431a      	orrs	r2, r3
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	695b      	ldr	r3, [r3, #20]
 8004b46:	431a      	orrs	r2, r3
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	69db      	ldr	r3, [r3, #28]
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	68db      	ldr	r3, [r3, #12]
 8004b56:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004b5a:	f023 030c 	bic.w	r3, r3, #12
 8004b5e:	687a      	ldr	r2, [r7, #4]
 8004b60:	6812      	ldr	r2, [r2, #0]
 8004b62:	68f9      	ldr	r1, [r7, #12]
 8004b64:	430b      	orrs	r3, r1
 8004b66:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	695b      	ldr	r3, [r3, #20]
 8004b6e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	699a      	ldr	r2, [r3, #24]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	430a      	orrs	r2, r1
 8004b7c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	69db      	ldr	r3, [r3, #28]
 8004b82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b86:	f040 818b 	bne.w	8004ea0 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4ac1      	ldr	r2, [pc, #772]	; (8004e94 <UART_SetConfig+0x37c>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d005      	beq.n	8004ba0 <UART_SetConfig+0x88>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4abf      	ldr	r2, [pc, #764]	; (8004e98 <UART_SetConfig+0x380>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	f040 80bd 	bne.w	8004d1a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004ba0:	f7fe fd2a 	bl	80035f8 <HAL_RCC_GetPCLK2Freq>
 8004ba4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	461d      	mov	r5, r3
 8004baa:	f04f 0600 	mov.w	r6, #0
 8004bae:	46a8      	mov	r8, r5
 8004bb0:	46b1      	mov	r9, r6
 8004bb2:	eb18 0308 	adds.w	r3, r8, r8
 8004bb6:	eb49 0409 	adc.w	r4, r9, r9
 8004bba:	4698      	mov	r8, r3
 8004bbc:	46a1      	mov	r9, r4
 8004bbe:	eb18 0805 	adds.w	r8, r8, r5
 8004bc2:	eb49 0906 	adc.w	r9, r9, r6
 8004bc6:	f04f 0100 	mov.w	r1, #0
 8004bca:	f04f 0200 	mov.w	r2, #0
 8004bce:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004bd2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004bd6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004bda:	4688      	mov	r8, r1
 8004bdc:	4691      	mov	r9, r2
 8004bde:	eb18 0005 	adds.w	r0, r8, r5
 8004be2:	eb49 0106 	adc.w	r1, r9, r6
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	461d      	mov	r5, r3
 8004bec:	f04f 0600 	mov.w	r6, #0
 8004bf0:	196b      	adds	r3, r5, r5
 8004bf2:	eb46 0406 	adc.w	r4, r6, r6
 8004bf6:	461a      	mov	r2, r3
 8004bf8:	4623      	mov	r3, r4
 8004bfa:	f7fb fcf9 	bl	80005f0 <__aeabi_uldivmod>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	460c      	mov	r4, r1
 8004c02:	461a      	mov	r2, r3
 8004c04:	4ba5      	ldr	r3, [pc, #660]	; (8004e9c <UART_SetConfig+0x384>)
 8004c06:	fba3 2302 	umull	r2, r3, r3, r2
 8004c0a:	095b      	lsrs	r3, r3, #5
 8004c0c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	461d      	mov	r5, r3
 8004c14:	f04f 0600 	mov.w	r6, #0
 8004c18:	46a9      	mov	r9, r5
 8004c1a:	46b2      	mov	sl, r6
 8004c1c:	eb19 0309 	adds.w	r3, r9, r9
 8004c20:	eb4a 040a 	adc.w	r4, sl, sl
 8004c24:	4699      	mov	r9, r3
 8004c26:	46a2      	mov	sl, r4
 8004c28:	eb19 0905 	adds.w	r9, r9, r5
 8004c2c:	eb4a 0a06 	adc.w	sl, sl, r6
 8004c30:	f04f 0100 	mov.w	r1, #0
 8004c34:	f04f 0200 	mov.w	r2, #0
 8004c38:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c3c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004c40:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004c44:	4689      	mov	r9, r1
 8004c46:	4692      	mov	sl, r2
 8004c48:	eb19 0005 	adds.w	r0, r9, r5
 8004c4c:	eb4a 0106 	adc.w	r1, sl, r6
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	461d      	mov	r5, r3
 8004c56:	f04f 0600 	mov.w	r6, #0
 8004c5a:	196b      	adds	r3, r5, r5
 8004c5c:	eb46 0406 	adc.w	r4, r6, r6
 8004c60:	461a      	mov	r2, r3
 8004c62:	4623      	mov	r3, r4
 8004c64:	f7fb fcc4 	bl	80005f0 <__aeabi_uldivmod>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	460c      	mov	r4, r1
 8004c6c:	461a      	mov	r2, r3
 8004c6e:	4b8b      	ldr	r3, [pc, #556]	; (8004e9c <UART_SetConfig+0x384>)
 8004c70:	fba3 1302 	umull	r1, r3, r3, r2
 8004c74:	095b      	lsrs	r3, r3, #5
 8004c76:	2164      	movs	r1, #100	; 0x64
 8004c78:	fb01 f303 	mul.w	r3, r1, r3
 8004c7c:	1ad3      	subs	r3, r2, r3
 8004c7e:	00db      	lsls	r3, r3, #3
 8004c80:	3332      	adds	r3, #50	; 0x32
 8004c82:	4a86      	ldr	r2, [pc, #536]	; (8004e9c <UART_SetConfig+0x384>)
 8004c84:	fba2 2303 	umull	r2, r3, r2, r3
 8004c88:	095b      	lsrs	r3, r3, #5
 8004c8a:	005b      	lsls	r3, r3, #1
 8004c8c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004c90:	4498      	add	r8, r3
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	461d      	mov	r5, r3
 8004c96:	f04f 0600 	mov.w	r6, #0
 8004c9a:	46a9      	mov	r9, r5
 8004c9c:	46b2      	mov	sl, r6
 8004c9e:	eb19 0309 	adds.w	r3, r9, r9
 8004ca2:	eb4a 040a 	adc.w	r4, sl, sl
 8004ca6:	4699      	mov	r9, r3
 8004ca8:	46a2      	mov	sl, r4
 8004caa:	eb19 0905 	adds.w	r9, r9, r5
 8004cae:	eb4a 0a06 	adc.w	sl, sl, r6
 8004cb2:	f04f 0100 	mov.w	r1, #0
 8004cb6:	f04f 0200 	mov.w	r2, #0
 8004cba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004cbe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004cc2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004cc6:	4689      	mov	r9, r1
 8004cc8:	4692      	mov	sl, r2
 8004cca:	eb19 0005 	adds.w	r0, r9, r5
 8004cce:	eb4a 0106 	adc.w	r1, sl, r6
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	461d      	mov	r5, r3
 8004cd8:	f04f 0600 	mov.w	r6, #0
 8004cdc:	196b      	adds	r3, r5, r5
 8004cde:	eb46 0406 	adc.w	r4, r6, r6
 8004ce2:	461a      	mov	r2, r3
 8004ce4:	4623      	mov	r3, r4
 8004ce6:	f7fb fc83 	bl	80005f0 <__aeabi_uldivmod>
 8004cea:	4603      	mov	r3, r0
 8004cec:	460c      	mov	r4, r1
 8004cee:	461a      	mov	r2, r3
 8004cf0:	4b6a      	ldr	r3, [pc, #424]	; (8004e9c <UART_SetConfig+0x384>)
 8004cf2:	fba3 1302 	umull	r1, r3, r3, r2
 8004cf6:	095b      	lsrs	r3, r3, #5
 8004cf8:	2164      	movs	r1, #100	; 0x64
 8004cfa:	fb01 f303 	mul.w	r3, r1, r3
 8004cfe:	1ad3      	subs	r3, r2, r3
 8004d00:	00db      	lsls	r3, r3, #3
 8004d02:	3332      	adds	r3, #50	; 0x32
 8004d04:	4a65      	ldr	r2, [pc, #404]	; (8004e9c <UART_SetConfig+0x384>)
 8004d06:	fba2 2303 	umull	r2, r3, r2, r3
 8004d0a:	095b      	lsrs	r3, r3, #5
 8004d0c:	f003 0207 	and.w	r2, r3, #7
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4442      	add	r2, r8
 8004d16:	609a      	str	r2, [r3, #8]
 8004d18:	e26f      	b.n	80051fa <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004d1a:	f7fe fc59 	bl	80035d0 <HAL_RCC_GetPCLK1Freq>
 8004d1e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	461d      	mov	r5, r3
 8004d24:	f04f 0600 	mov.w	r6, #0
 8004d28:	46a8      	mov	r8, r5
 8004d2a:	46b1      	mov	r9, r6
 8004d2c:	eb18 0308 	adds.w	r3, r8, r8
 8004d30:	eb49 0409 	adc.w	r4, r9, r9
 8004d34:	4698      	mov	r8, r3
 8004d36:	46a1      	mov	r9, r4
 8004d38:	eb18 0805 	adds.w	r8, r8, r5
 8004d3c:	eb49 0906 	adc.w	r9, r9, r6
 8004d40:	f04f 0100 	mov.w	r1, #0
 8004d44:	f04f 0200 	mov.w	r2, #0
 8004d48:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004d4c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004d50:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004d54:	4688      	mov	r8, r1
 8004d56:	4691      	mov	r9, r2
 8004d58:	eb18 0005 	adds.w	r0, r8, r5
 8004d5c:	eb49 0106 	adc.w	r1, r9, r6
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	461d      	mov	r5, r3
 8004d66:	f04f 0600 	mov.w	r6, #0
 8004d6a:	196b      	adds	r3, r5, r5
 8004d6c:	eb46 0406 	adc.w	r4, r6, r6
 8004d70:	461a      	mov	r2, r3
 8004d72:	4623      	mov	r3, r4
 8004d74:	f7fb fc3c 	bl	80005f0 <__aeabi_uldivmod>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	460c      	mov	r4, r1
 8004d7c:	461a      	mov	r2, r3
 8004d7e:	4b47      	ldr	r3, [pc, #284]	; (8004e9c <UART_SetConfig+0x384>)
 8004d80:	fba3 2302 	umull	r2, r3, r3, r2
 8004d84:	095b      	lsrs	r3, r3, #5
 8004d86:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	461d      	mov	r5, r3
 8004d8e:	f04f 0600 	mov.w	r6, #0
 8004d92:	46a9      	mov	r9, r5
 8004d94:	46b2      	mov	sl, r6
 8004d96:	eb19 0309 	adds.w	r3, r9, r9
 8004d9a:	eb4a 040a 	adc.w	r4, sl, sl
 8004d9e:	4699      	mov	r9, r3
 8004da0:	46a2      	mov	sl, r4
 8004da2:	eb19 0905 	adds.w	r9, r9, r5
 8004da6:	eb4a 0a06 	adc.w	sl, sl, r6
 8004daa:	f04f 0100 	mov.w	r1, #0
 8004dae:	f04f 0200 	mov.w	r2, #0
 8004db2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004db6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004dba:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004dbe:	4689      	mov	r9, r1
 8004dc0:	4692      	mov	sl, r2
 8004dc2:	eb19 0005 	adds.w	r0, r9, r5
 8004dc6:	eb4a 0106 	adc.w	r1, sl, r6
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	461d      	mov	r5, r3
 8004dd0:	f04f 0600 	mov.w	r6, #0
 8004dd4:	196b      	adds	r3, r5, r5
 8004dd6:	eb46 0406 	adc.w	r4, r6, r6
 8004dda:	461a      	mov	r2, r3
 8004ddc:	4623      	mov	r3, r4
 8004dde:	f7fb fc07 	bl	80005f0 <__aeabi_uldivmod>
 8004de2:	4603      	mov	r3, r0
 8004de4:	460c      	mov	r4, r1
 8004de6:	461a      	mov	r2, r3
 8004de8:	4b2c      	ldr	r3, [pc, #176]	; (8004e9c <UART_SetConfig+0x384>)
 8004dea:	fba3 1302 	umull	r1, r3, r3, r2
 8004dee:	095b      	lsrs	r3, r3, #5
 8004df0:	2164      	movs	r1, #100	; 0x64
 8004df2:	fb01 f303 	mul.w	r3, r1, r3
 8004df6:	1ad3      	subs	r3, r2, r3
 8004df8:	00db      	lsls	r3, r3, #3
 8004dfa:	3332      	adds	r3, #50	; 0x32
 8004dfc:	4a27      	ldr	r2, [pc, #156]	; (8004e9c <UART_SetConfig+0x384>)
 8004dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8004e02:	095b      	lsrs	r3, r3, #5
 8004e04:	005b      	lsls	r3, r3, #1
 8004e06:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004e0a:	4498      	add	r8, r3
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	461d      	mov	r5, r3
 8004e10:	f04f 0600 	mov.w	r6, #0
 8004e14:	46a9      	mov	r9, r5
 8004e16:	46b2      	mov	sl, r6
 8004e18:	eb19 0309 	adds.w	r3, r9, r9
 8004e1c:	eb4a 040a 	adc.w	r4, sl, sl
 8004e20:	4699      	mov	r9, r3
 8004e22:	46a2      	mov	sl, r4
 8004e24:	eb19 0905 	adds.w	r9, r9, r5
 8004e28:	eb4a 0a06 	adc.w	sl, sl, r6
 8004e2c:	f04f 0100 	mov.w	r1, #0
 8004e30:	f04f 0200 	mov.w	r2, #0
 8004e34:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e38:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004e3c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004e40:	4689      	mov	r9, r1
 8004e42:	4692      	mov	sl, r2
 8004e44:	eb19 0005 	adds.w	r0, r9, r5
 8004e48:	eb4a 0106 	adc.w	r1, sl, r6
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	461d      	mov	r5, r3
 8004e52:	f04f 0600 	mov.w	r6, #0
 8004e56:	196b      	adds	r3, r5, r5
 8004e58:	eb46 0406 	adc.w	r4, r6, r6
 8004e5c:	461a      	mov	r2, r3
 8004e5e:	4623      	mov	r3, r4
 8004e60:	f7fb fbc6 	bl	80005f0 <__aeabi_uldivmod>
 8004e64:	4603      	mov	r3, r0
 8004e66:	460c      	mov	r4, r1
 8004e68:	461a      	mov	r2, r3
 8004e6a:	4b0c      	ldr	r3, [pc, #48]	; (8004e9c <UART_SetConfig+0x384>)
 8004e6c:	fba3 1302 	umull	r1, r3, r3, r2
 8004e70:	095b      	lsrs	r3, r3, #5
 8004e72:	2164      	movs	r1, #100	; 0x64
 8004e74:	fb01 f303 	mul.w	r3, r1, r3
 8004e78:	1ad3      	subs	r3, r2, r3
 8004e7a:	00db      	lsls	r3, r3, #3
 8004e7c:	3332      	adds	r3, #50	; 0x32
 8004e7e:	4a07      	ldr	r2, [pc, #28]	; (8004e9c <UART_SetConfig+0x384>)
 8004e80:	fba2 2303 	umull	r2, r3, r2, r3
 8004e84:	095b      	lsrs	r3, r3, #5
 8004e86:	f003 0207 	and.w	r2, r3, #7
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4442      	add	r2, r8
 8004e90:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004e92:	e1b2      	b.n	80051fa <UART_SetConfig+0x6e2>
 8004e94:	40011000 	.word	0x40011000
 8004e98:	40011400 	.word	0x40011400
 8004e9c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4ad7      	ldr	r2, [pc, #860]	; (8005204 <UART_SetConfig+0x6ec>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d005      	beq.n	8004eb6 <UART_SetConfig+0x39e>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4ad6      	ldr	r2, [pc, #856]	; (8005208 <UART_SetConfig+0x6f0>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	f040 80d1 	bne.w	8005058 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004eb6:	f7fe fb9f 	bl	80035f8 <HAL_RCC_GetPCLK2Freq>
 8004eba:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	469a      	mov	sl, r3
 8004ec0:	f04f 0b00 	mov.w	fp, #0
 8004ec4:	46d0      	mov	r8, sl
 8004ec6:	46d9      	mov	r9, fp
 8004ec8:	eb18 0308 	adds.w	r3, r8, r8
 8004ecc:	eb49 0409 	adc.w	r4, r9, r9
 8004ed0:	4698      	mov	r8, r3
 8004ed2:	46a1      	mov	r9, r4
 8004ed4:	eb18 080a 	adds.w	r8, r8, sl
 8004ed8:	eb49 090b 	adc.w	r9, r9, fp
 8004edc:	f04f 0100 	mov.w	r1, #0
 8004ee0:	f04f 0200 	mov.w	r2, #0
 8004ee4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004ee8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004eec:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004ef0:	4688      	mov	r8, r1
 8004ef2:	4691      	mov	r9, r2
 8004ef4:	eb1a 0508 	adds.w	r5, sl, r8
 8004ef8:	eb4b 0609 	adc.w	r6, fp, r9
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	4619      	mov	r1, r3
 8004f02:	f04f 0200 	mov.w	r2, #0
 8004f06:	f04f 0300 	mov.w	r3, #0
 8004f0a:	f04f 0400 	mov.w	r4, #0
 8004f0e:	0094      	lsls	r4, r2, #2
 8004f10:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004f14:	008b      	lsls	r3, r1, #2
 8004f16:	461a      	mov	r2, r3
 8004f18:	4623      	mov	r3, r4
 8004f1a:	4628      	mov	r0, r5
 8004f1c:	4631      	mov	r1, r6
 8004f1e:	f7fb fb67 	bl	80005f0 <__aeabi_uldivmod>
 8004f22:	4603      	mov	r3, r0
 8004f24:	460c      	mov	r4, r1
 8004f26:	461a      	mov	r2, r3
 8004f28:	4bb8      	ldr	r3, [pc, #736]	; (800520c <UART_SetConfig+0x6f4>)
 8004f2a:	fba3 2302 	umull	r2, r3, r3, r2
 8004f2e:	095b      	lsrs	r3, r3, #5
 8004f30:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	469b      	mov	fp, r3
 8004f38:	f04f 0c00 	mov.w	ip, #0
 8004f3c:	46d9      	mov	r9, fp
 8004f3e:	46e2      	mov	sl, ip
 8004f40:	eb19 0309 	adds.w	r3, r9, r9
 8004f44:	eb4a 040a 	adc.w	r4, sl, sl
 8004f48:	4699      	mov	r9, r3
 8004f4a:	46a2      	mov	sl, r4
 8004f4c:	eb19 090b 	adds.w	r9, r9, fp
 8004f50:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004f54:	f04f 0100 	mov.w	r1, #0
 8004f58:	f04f 0200 	mov.w	r2, #0
 8004f5c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004f60:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004f64:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004f68:	4689      	mov	r9, r1
 8004f6a:	4692      	mov	sl, r2
 8004f6c:	eb1b 0509 	adds.w	r5, fp, r9
 8004f70:	eb4c 060a 	adc.w	r6, ip, sl
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	4619      	mov	r1, r3
 8004f7a:	f04f 0200 	mov.w	r2, #0
 8004f7e:	f04f 0300 	mov.w	r3, #0
 8004f82:	f04f 0400 	mov.w	r4, #0
 8004f86:	0094      	lsls	r4, r2, #2
 8004f88:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004f8c:	008b      	lsls	r3, r1, #2
 8004f8e:	461a      	mov	r2, r3
 8004f90:	4623      	mov	r3, r4
 8004f92:	4628      	mov	r0, r5
 8004f94:	4631      	mov	r1, r6
 8004f96:	f7fb fb2b 	bl	80005f0 <__aeabi_uldivmod>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	460c      	mov	r4, r1
 8004f9e:	461a      	mov	r2, r3
 8004fa0:	4b9a      	ldr	r3, [pc, #616]	; (800520c <UART_SetConfig+0x6f4>)
 8004fa2:	fba3 1302 	umull	r1, r3, r3, r2
 8004fa6:	095b      	lsrs	r3, r3, #5
 8004fa8:	2164      	movs	r1, #100	; 0x64
 8004faa:	fb01 f303 	mul.w	r3, r1, r3
 8004fae:	1ad3      	subs	r3, r2, r3
 8004fb0:	011b      	lsls	r3, r3, #4
 8004fb2:	3332      	adds	r3, #50	; 0x32
 8004fb4:	4a95      	ldr	r2, [pc, #596]	; (800520c <UART_SetConfig+0x6f4>)
 8004fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8004fba:	095b      	lsrs	r3, r3, #5
 8004fbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004fc0:	4498      	add	r8, r3
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	469b      	mov	fp, r3
 8004fc6:	f04f 0c00 	mov.w	ip, #0
 8004fca:	46d9      	mov	r9, fp
 8004fcc:	46e2      	mov	sl, ip
 8004fce:	eb19 0309 	adds.w	r3, r9, r9
 8004fd2:	eb4a 040a 	adc.w	r4, sl, sl
 8004fd6:	4699      	mov	r9, r3
 8004fd8:	46a2      	mov	sl, r4
 8004fda:	eb19 090b 	adds.w	r9, r9, fp
 8004fde:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004fe2:	f04f 0100 	mov.w	r1, #0
 8004fe6:	f04f 0200 	mov.w	r2, #0
 8004fea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004fee:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004ff2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004ff6:	4689      	mov	r9, r1
 8004ff8:	4692      	mov	sl, r2
 8004ffa:	eb1b 0509 	adds.w	r5, fp, r9
 8004ffe:	eb4c 060a 	adc.w	r6, ip, sl
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	4619      	mov	r1, r3
 8005008:	f04f 0200 	mov.w	r2, #0
 800500c:	f04f 0300 	mov.w	r3, #0
 8005010:	f04f 0400 	mov.w	r4, #0
 8005014:	0094      	lsls	r4, r2, #2
 8005016:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800501a:	008b      	lsls	r3, r1, #2
 800501c:	461a      	mov	r2, r3
 800501e:	4623      	mov	r3, r4
 8005020:	4628      	mov	r0, r5
 8005022:	4631      	mov	r1, r6
 8005024:	f7fb fae4 	bl	80005f0 <__aeabi_uldivmod>
 8005028:	4603      	mov	r3, r0
 800502a:	460c      	mov	r4, r1
 800502c:	461a      	mov	r2, r3
 800502e:	4b77      	ldr	r3, [pc, #476]	; (800520c <UART_SetConfig+0x6f4>)
 8005030:	fba3 1302 	umull	r1, r3, r3, r2
 8005034:	095b      	lsrs	r3, r3, #5
 8005036:	2164      	movs	r1, #100	; 0x64
 8005038:	fb01 f303 	mul.w	r3, r1, r3
 800503c:	1ad3      	subs	r3, r2, r3
 800503e:	011b      	lsls	r3, r3, #4
 8005040:	3332      	adds	r3, #50	; 0x32
 8005042:	4a72      	ldr	r2, [pc, #456]	; (800520c <UART_SetConfig+0x6f4>)
 8005044:	fba2 2303 	umull	r2, r3, r2, r3
 8005048:	095b      	lsrs	r3, r3, #5
 800504a:	f003 020f 	and.w	r2, r3, #15
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4442      	add	r2, r8
 8005054:	609a      	str	r2, [r3, #8]
 8005056:	e0d0      	b.n	80051fa <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005058:	f7fe faba 	bl	80035d0 <HAL_RCC_GetPCLK1Freq>
 800505c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	469a      	mov	sl, r3
 8005062:	f04f 0b00 	mov.w	fp, #0
 8005066:	46d0      	mov	r8, sl
 8005068:	46d9      	mov	r9, fp
 800506a:	eb18 0308 	adds.w	r3, r8, r8
 800506e:	eb49 0409 	adc.w	r4, r9, r9
 8005072:	4698      	mov	r8, r3
 8005074:	46a1      	mov	r9, r4
 8005076:	eb18 080a 	adds.w	r8, r8, sl
 800507a:	eb49 090b 	adc.w	r9, r9, fp
 800507e:	f04f 0100 	mov.w	r1, #0
 8005082:	f04f 0200 	mov.w	r2, #0
 8005086:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800508a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800508e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005092:	4688      	mov	r8, r1
 8005094:	4691      	mov	r9, r2
 8005096:	eb1a 0508 	adds.w	r5, sl, r8
 800509a:	eb4b 0609 	adc.w	r6, fp, r9
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	4619      	mov	r1, r3
 80050a4:	f04f 0200 	mov.w	r2, #0
 80050a8:	f04f 0300 	mov.w	r3, #0
 80050ac:	f04f 0400 	mov.w	r4, #0
 80050b0:	0094      	lsls	r4, r2, #2
 80050b2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80050b6:	008b      	lsls	r3, r1, #2
 80050b8:	461a      	mov	r2, r3
 80050ba:	4623      	mov	r3, r4
 80050bc:	4628      	mov	r0, r5
 80050be:	4631      	mov	r1, r6
 80050c0:	f7fb fa96 	bl	80005f0 <__aeabi_uldivmod>
 80050c4:	4603      	mov	r3, r0
 80050c6:	460c      	mov	r4, r1
 80050c8:	461a      	mov	r2, r3
 80050ca:	4b50      	ldr	r3, [pc, #320]	; (800520c <UART_SetConfig+0x6f4>)
 80050cc:	fba3 2302 	umull	r2, r3, r3, r2
 80050d0:	095b      	lsrs	r3, r3, #5
 80050d2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	469b      	mov	fp, r3
 80050da:	f04f 0c00 	mov.w	ip, #0
 80050de:	46d9      	mov	r9, fp
 80050e0:	46e2      	mov	sl, ip
 80050e2:	eb19 0309 	adds.w	r3, r9, r9
 80050e6:	eb4a 040a 	adc.w	r4, sl, sl
 80050ea:	4699      	mov	r9, r3
 80050ec:	46a2      	mov	sl, r4
 80050ee:	eb19 090b 	adds.w	r9, r9, fp
 80050f2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80050f6:	f04f 0100 	mov.w	r1, #0
 80050fa:	f04f 0200 	mov.w	r2, #0
 80050fe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005102:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005106:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800510a:	4689      	mov	r9, r1
 800510c:	4692      	mov	sl, r2
 800510e:	eb1b 0509 	adds.w	r5, fp, r9
 8005112:	eb4c 060a 	adc.w	r6, ip, sl
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	4619      	mov	r1, r3
 800511c:	f04f 0200 	mov.w	r2, #0
 8005120:	f04f 0300 	mov.w	r3, #0
 8005124:	f04f 0400 	mov.w	r4, #0
 8005128:	0094      	lsls	r4, r2, #2
 800512a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800512e:	008b      	lsls	r3, r1, #2
 8005130:	461a      	mov	r2, r3
 8005132:	4623      	mov	r3, r4
 8005134:	4628      	mov	r0, r5
 8005136:	4631      	mov	r1, r6
 8005138:	f7fb fa5a 	bl	80005f0 <__aeabi_uldivmod>
 800513c:	4603      	mov	r3, r0
 800513e:	460c      	mov	r4, r1
 8005140:	461a      	mov	r2, r3
 8005142:	4b32      	ldr	r3, [pc, #200]	; (800520c <UART_SetConfig+0x6f4>)
 8005144:	fba3 1302 	umull	r1, r3, r3, r2
 8005148:	095b      	lsrs	r3, r3, #5
 800514a:	2164      	movs	r1, #100	; 0x64
 800514c:	fb01 f303 	mul.w	r3, r1, r3
 8005150:	1ad3      	subs	r3, r2, r3
 8005152:	011b      	lsls	r3, r3, #4
 8005154:	3332      	adds	r3, #50	; 0x32
 8005156:	4a2d      	ldr	r2, [pc, #180]	; (800520c <UART_SetConfig+0x6f4>)
 8005158:	fba2 2303 	umull	r2, r3, r2, r3
 800515c:	095b      	lsrs	r3, r3, #5
 800515e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005162:	4498      	add	r8, r3
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	469b      	mov	fp, r3
 8005168:	f04f 0c00 	mov.w	ip, #0
 800516c:	46d9      	mov	r9, fp
 800516e:	46e2      	mov	sl, ip
 8005170:	eb19 0309 	adds.w	r3, r9, r9
 8005174:	eb4a 040a 	adc.w	r4, sl, sl
 8005178:	4699      	mov	r9, r3
 800517a:	46a2      	mov	sl, r4
 800517c:	eb19 090b 	adds.w	r9, r9, fp
 8005180:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005184:	f04f 0100 	mov.w	r1, #0
 8005188:	f04f 0200 	mov.w	r2, #0
 800518c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005190:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005194:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005198:	4689      	mov	r9, r1
 800519a:	4692      	mov	sl, r2
 800519c:	eb1b 0509 	adds.w	r5, fp, r9
 80051a0:	eb4c 060a 	adc.w	r6, ip, sl
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	4619      	mov	r1, r3
 80051aa:	f04f 0200 	mov.w	r2, #0
 80051ae:	f04f 0300 	mov.w	r3, #0
 80051b2:	f04f 0400 	mov.w	r4, #0
 80051b6:	0094      	lsls	r4, r2, #2
 80051b8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80051bc:	008b      	lsls	r3, r1, #2
 80051be:	461a      	mov	r2, r3
 80051c0:	4623      	mov	r3, r4
 80051c2:	4628      	mov	r0, r5
 80051c4:	4631      	mov	r1, r6
 80051c6:	f7fb fa13 	bl	80005f0 <__aeabi_uldivmod>
 80051ca:	4603      	mov	r3, r0
 80051cc:	460c      	mov	r4, r1
 80051ce:	461a      	mov	r2, r3
 80051d0:	4b0e      	ldr	r3, [pc, #56]	; (800520c <UART_SetConfig+0x6f4>)
 80051d2:	fba3 1302 	umull	r1, r3, r3, r2
 80051d6:	095b      	lsrs	r3, r3, #5
 80051d8:	2164      	movs	r1, #100	; 0x64
 80051da:	fb01 f303 	mul.w	r3, r1, r3
 80051de:	1ad3      	subs	r3, r2, r3
 80051e0:	011b      	lsls	r3, r3, #4
 80051e2:	3332      	adds	r3, #50	; 0x32
 80051e4:	4a09      	ldr	r2, [pc, #36]	; (800520c <UART_SetConfig+0x6f4>)
 80051e6:	fba2 2303 	umull	r2, r3, r2, r3
 80051ea:	095b      	lsrs	r3, r3, #5
 80051ec:	f003 020f 	and.w	r2, r3, #15
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4442      	add	r2, r8
 80051f6:	609a      	str	r2, [r3, #8]
}
 80051f8:	e7ff      	b.n	80051fa <UART_SetConfig+0x6e2>
 80051fa:	bf00      	nop
 80051fc:	3714      	adds	r7, #20
 80051fe:	46bd      	mov	sp, r7
 8005200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005204:	40011000 	.word	0x40011000
 8005208:	40011400 	.word	0x40011400
 800520c:	51eb851f 	.word	0x51eb851f

08005210 <__libc_init_array>:
 8005210:	b570      	push	{r4, r5, r6, lr}
 8005212:	4e0d      	ldr	r6, [pc, #52]	; (8005248 <__libc_init_array+0x38>)
 8005214:	4c0d      	ldr	r4, [pc, #52]	; (800524c <__libc_init_array+0x3c>)
 8005216:	1ba4      	subs	r4, r4, r6
 8005218:	10a4      	asrs	r4, r4, #2
 800521a:	2500      	movs	r5, #0
 800521c:	42a5      	cmp	r5, r4
 800521e:	d109      	bne.n	8005234 <__libc_init_array+0x24>
 8005220:	4e0b      	ldr	r6, [pc, #44]	; (8005250 <__libc_init_array+0x40>)
 8005222:	4c0c      	ldr	r4, [pc, #48]	; (8005254 <__libc_init_array+0x44>)
 8005224:	f000 f820 	bl	8005268 <_init>
 8005228:	1ba4      	subs	r4, r4, r6
 800522a:	10a4      	asrs	r4, r4, #2
 800522c:	2500      	movs	r5, #0
 800522e:	42a5      	cmp	r5, r4
 8005230:	d105      	bne.n	800523e <__libc_init_array+0x2e>
 8005232:	bd70      	pop	{r4, r5, r6, pc}
 8005234:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005238:	4798      	blx	r3
 800523a:	3501      	adds	r5, #1
 800523c:	e7ee      	b.n	800521c <__libc_init_array+0xc>
 800523e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005242:	4798      	blx	r3
 8005244:	3501      	adds	r5, #1
 8005246:	e7f2      	b.n	800522e <__libc_init_array+0x1e>
 8005248:	080052a8 	.word	0x080052a8
 800524c:	080052a8 	.word	0x080052a8
 8005250:	080052a8 	.word	0x080052a8
 8005254:	080052ac 	.word	0x080052ac

08005258 <memset>:
 8005258:	4402      	add	r2, r0
 800525a:	4603      	mov	r3, r0
 800525c:	4293      	cmp	r3, r2
 800525e:	d100      	bne.n	8005262 <memset+0xa>
 8005260:	4770      	bx	lr
 8005262:	f803 1b01 	strb.w	r1, [r3], #1
 8005266:	e7f9      	b.n	800525c <memset+0x4>

08005268 <_init>:
 8005268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800526a:	bf00      	nop
 800526c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800526e:	bc08      	pop	{r3}
 8005270:	469e      	mov	lr, r3
 8005272:	4770      	bx	lr

08005274 <_fini>:
 8005274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005276:	bf00      	nop
 8005278:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800527a:	bc08      	pop	{r3}
 800527c:	469e      	mov	lr, r3
 800527e:	4770      	bx	lr
