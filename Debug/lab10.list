
lab10.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bf54  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006b8  0800c0f8  0800c0f8  0001c0f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c7b0  0800c7b0  00020200  2**0
                  CONTENTS
  4 .ARM          00000008  0800c7b0  0800c7b0  0001c7b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c7b8  0800c7b8  00020200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c7b8  0800c7b8  0001c7b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c7bc  0800c7bc  0001c7bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  0800c7c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000288  20000200  0800c9c0  00020200  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000488  0800c9c0  00020488  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010201  00000000  00000000  00020230  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002234  00000000  00000000  00030431  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000fc8  00000000  00000000  00032668  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000eb0  00000000  00000000  00033630  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017923  00000000  00000000  000344e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ba99  00000000  00000000  0004be03  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00094722  00000000  00000000  0005789c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ebfbe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005218  00000000  00000000  000ec03c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000200 	.word	0x20000200
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c0dc 	.word	0x0800c0dc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000204 	.word	0x20000204
 80001dc:	0800c0dc 	.word	0x0800c0dc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_frsub>:
 8000c98:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c9c:	e002      	b.n	8000ca4 <__addsf3>
 8000c9e:	bf00      	nop

08000ca0 <__aeabi_fsub>:
 8000ca0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ca4 <__addsf3>:
 8000ca4:	0042      	lsls	r2, r0, #1
 8000ca6:	bf1f      	itttt	ne
 8000ca8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000cac:	ea92 0f03 	teqne	r2, r3
 8000cb0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000cb4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cb8:	d06a      	beq.n	8000d90 <__addsf3+0xec>
 8000cba:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cbe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cc2:	bfc1      	itttt	gt
 8000cc4:	18d2      	addgt	r2, r2, r3
 8000cc6:	4041      	eorgt	r1, r0
 8000cc8:	4048      	eorgt	r0, r1
 8000cca:	4041      	eorgt	r1, r0
 8000ccc:	bfb8      	it	lt
 8000cce:	425b      	neglt	r3, r3
 8000cd0:	2b19      	cmp	r3, #25
 8000cd2:	bf88      	it	hi
 8000cd4:	4770      	bxhi	lr
 8000cd6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000cda:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cde:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ce2:	bf18      	it	ne
 8000ce4:	4240      	negne	r0, r0
 8000ce6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000cea:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000cee:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000cf2:	bf18      	it	ne
 8000cf4:	4249      	negne	r1, r1
 8000cf6:	ea92 0f03 	teq	r2, r3
 8000cfa:	d03f      	beq.n	8000d7c <__addsf3+0xd8>
 8000cfc:	f1a2 0201 	sub.w	r2, r2, #1
 8000d00:	fa41 fc03 	asr.w	ip, r1, r3
 8000d04:	eb10 000c 	adds.w	r0, r0, ip
 8000d08:	f1c3 0320 	rsb	r3, r3, #32
 8000d0c:	fa01 f103 	lsl.w	r1, r1, r3
 8000d10:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__addsf3+0x78>
 8000d16:	4249      	negs	r1, r1
 8000d18:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d1c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000d20:	d313      	bcc.n	8000d4a <__addsf3+0xa6>
 8000d22:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d26:	d306      	bcc.n	8000d36 <__addsf3+0x92>
 8000d28:	0840      	lsrs	r0, r0, #1
 8000d2a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d2e:	f102 0201 	add.w	r2, r2, #1
 8000d32:	2afe      	cmp	r2, #254	; 0xfe
 8000d34:	d251      	bcs.n	8000dda <__addsf3+0x136>
 8000d36:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000d3a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d3e:	bf08      	it	eq
 8000d40:	f020 0001 	biceq.w	r0, r0, #1
 8000d44:	ea40 0003 	orr.w	r0, r0, r3
 8000d48:	4770      	bx	lr
 8000d4a:	0049      	lsls	r1, r1, #1
 8000d4c:	eb40 0000 	adc.w	r0, r0, r0
 8000d50:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000d54:	f1a2 0201 	sub.w	r2, r2, #1
 8000d58:	d1ed      	bne.n	8000d36 <__addsf3+0x92>
 8000d5a:	fab0 fc80 	clz	ip, r0
 8000d5e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d62:	ebb2 020c 	subs.w	r2, r2, ip
 8000d66:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d6a:	bfaa      	itet	ge
 8000d6c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d70:	4252      	neglt	r2, r2
 8000d72:	4318      	orrge	r0, r3
 8000d74:	bfbc      	itt	lt
 8000d76:	40d0      	lsrlt	r0, r2
 8000d78:	4318      	orrlt	r0, r3
 8000d7a:	4770      	bx	lr
 8000d7c:	f092 0f00 	teq	r2, #0
 8000d80:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d84:	bf06      	itte	eq
 8000d86:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d8a:	3201      	addeq	r2, #1
 8000d8c:	3b01      	subne	r3, #1
 8000d8e:	e7b5      	b.n	8000cfc <__addsf3+0x58>
 8000d90:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d98:	bf18      	it	ne
 8000d9a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d9e:	d021      	beq.n	8000de4 <__addsf3+0x140>
 8000da0:	ea92 0f03 	teq	r2, r3
 8000da4:	d004      	beq.n	8000db0 <__addsf3+0x10c>
 8000da6:	f092 0f00 	teq	r2, #0
 8000daa:	bf08      	it	eq
 8000dac:	4608      	moveq	r0, r1
 8000dae:	4770      	bx	lr
 8000db0:	ea90 0f01 	teq	r0, r1
 8000db4:	bf1c      	itt	ne
 8000db6:	2000      	movne	r0, #0
 8000db8:	4770      	bxne	lr
 8000dba:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000dbe:	d104      	bne.n	8000dca <__addsf3+0x126>
 8000dc0:	0040      	lsls	r0, r0, #1
 8000dc2:	bf28      	it	cs
 8000dc4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000dc8:	4770      	bx	lr
 8000dca:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000dce:	bf3c      	itt	cc
 8000dd0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000dd4:	4770      	bxcc	lr
 8000dd6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000dda:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000dde:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000de2:	4770      	bx	lr
 8000de4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000de8:	bf16      	itet	ne
 8000dea:	4608      	movne	r0, r1
 8000dec:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000df0:	4601      	movne	r1, r0
 8000df2:	0242      	lsls	r2, r0, #9
 8000df4:	bf06      	itte	eq
 8000df6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000dfa:	ea90 0f01 	teqeq	r0, r1
 8000dfe:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000e02:	4770      	bx	lr

08000e04 <__aeabi_ui2f>:
 8000e04:	f04f 0300 	mov.w	r3, #0
 8000e08:	e004      	b.n	8000e14 <__aeabi_i2f+0x8>
 8000e0a:	bf00      	nop

08000e0c <__aeabi_i2f>:
 8000e0c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000e10:	bf48      	it	mi
 8000e12:	4240      	negmi	r0, r0
 8000e14:	ea5f 0c00 	movs.w	ip, r0
 8000e18:	bf08      	it	eq
 8000e1a:	4770      	bxeq	lr
 8000e1c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000e20:	4601      	mov	r1, r0
 8000e22:	f04f 0000 	mov.w	r0, #0
 8000e26:	e01c      	b.n	8000e62 <__aeabi_l2f+0x2a>

08000e28 <__aeabi_ul2f>:
 8000e28:	ea50 0201 	orrs.w	r2, r0, r1
 8000e2c:	bf08      	it	eq
 8000e2e:	4770      	bxeq	lr
 8000e30:	f04f 0300 	mov.w	r3, #0
 8000e34:	e00a      	b.n	8000e4c <__aeabi_l2f+0x14>
 8000e36:	bf00      	nop

08000e38 <__aeabi_l2f>:
 8000e38:	ea50 0201 	orrs.w	r2, r0, r1
 8000e3c:	bf08      	it	eq
 8000e3e:	4770      	bxeq	lr
 8000e40:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e44:	d502      	bpl.n	8000e4c <__aeabi_l2f+0x14>
 8000e46:	4240      	negs	r0, r0
 8000e48:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e4c:	ea5f 0c01 	movs.w	ip, r1
 8000e50:	bf02      	ittt	eq
 8000e52:	4684      	moveq	ip, r0
 8000e54:	4601      	moveq	r1, r0
 8000e56:	2000      	moveq	r0, #0
 8000e58:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e5c:	bf08      	it	eq
 8000e5e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e62:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e66:	fabc f28c 	clz	r2, ip
 8000e6a:	3a08      	subs	r2, #8
 8000e6c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e70:	db10      	blt.n	8000e94 <__aeabi_l2f+0x5c>
 8000e72:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e76:	4463      	add	r3, ip
 8000e78:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e7c:	f1c2 0220 	rsb	r2, r2, #32
 8000e80:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e84:	fa20 f202 	lsr.w	r2, r0, r2
 8000e88:	eb43 0002 	adc.w	r0, r3, r2
 8000e8c:	bf08      	it	eq
 8000e8e:	f020 0001 	biceq.w	r0, r0, #1
 8000e92:	4770      	bx	lr
 8000e94:	f102 0220 	add.w	r2, r2, #32
 8000e98:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e9c:	f1c2 0220 	rsb	r2, r2, #32
 8000ea0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ea4:	fa21 f202 	lsr.w	r2, r1, r2
 8000ea8:	eb43 0002 	adc.w	r0, r3, r2
 8000eac:	bf08      	it	eq
 8000eae:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000eb2:	4770      	bx	lr

08000eb4 <__aeabi_uldivmod>:
 8000eb4:	b953      	cbnz	r3, 8000ecc <__aeabi_uldivmod+0x18>
 8000eb6:	b94a      	cbnz	r2, 8000ecc <__aeabi_uldivmod+0x18>
 8000eb8:	2900      	cmp	r1, #0
 8000eba:	bf08      	it	eq
 8000ebc:	2800      	cmpeq	r0, #0
 8000ebe:	bf1c      	itt	ne
 8000ec0:	f04f 31ff 	movne.w	r1, #4294967295
 8000ec4:	f04f 30ff 	movne.w	r0, #4294967295
 8000ec8:	f000 b972 	b.w	80011b0 <__aeabi_idiv0>
 8000ecc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ed0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ed4:	f000 f806 	bl	8000ee4 <__udivmoddi4>
 8000ed8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000edc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ee0:	b004      	add	sp, #16
 8000ee2:	4770      	bx	lr

08000ee4 <__udivmoddi4>:
 8000ee4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ee8:	9e08      	ldr	r6, [sp, #32]
 8000eea:	4604      	mov	r4, r0
 8000eec:	4688      	mov	r8, r1
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d14b      	bne.n	8000f8a <__udivmoddi4+0xa6>
 8000ef2:	428a      	cmp	r2, r1
 8000ef4:	4615      	mov	r5, r2
 8000ef6:	d967      	bls.n	8000fc8 <__udivmoddi4+0xe4>
 8000ef8:	fab2 f282 	clz	r2, r2
 8000efc:	b14a      	cbz	r2, 8000f12 <__udivmoddi4+0x2e>
 8000efe:	f1c2 0720 	rsb	r7, r2, #32
 8000f02:	fa01 f302 	lsl.w	r3, r1, r2
 8000f06:	fa20 f707 	lsr.w	r7, r0, r7
 8000f0a:	4095      	lsls	r5, r2
 8000f0c:	ea47 0803 	orr.w	r8, r7, r3
 8000f10:	4094      	lsls	r4, r2
 8000f12:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f16:	0c23      	lsrs	r3, r4, #16
 8000f18:	fbb8 f7fe 	udiv	r7, r8, lr
 8000f1c:	fa1f fc85 	uxth.w	ip, r5
 8000f20:	fb0e 8817 	mls	r8, lr, r7, r8
 8000f24:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f28:	fb07 f10c 	mul.w	r1, r7, ip
 8000f2c:	4299      	cmp	r1, r3
 8000f2e:	d909      	bls.n	8000f44 <__udivmoddi4+0x60>
 8000f30:	18eb      	adds	r3, r5, r3
 8000f32:	f107 30ff 	add.w	r0, r7, #4294967295
 8000f36:	f080 811b 	bcs.w	8001170 <__udivmoddi4+0x28c>
 8000f3a:	4299      	cmp	r1, r3
 8000f3c:	f240 8118 	bls.w	8001170 <__udivmoddi4+0x28c>
 8000f40:	3f02      	subs	r7, #2
 8000f42:	442b      	add	r3, r5
 8000f44:	1a5b      	subs	r3, r3, r1
 8000f46:	b2a4      	uxth	r4, r4
 8000f48:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f4c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f54:	fb00 fc0c 	mul.w	ip, r0, ip
 8000f58:	45a4      	cmp	ip, r4
 8000f5a:	d909      	bls.n	8000f70 <__udivmoddi4+0x8c>
 8000f5c:	192c      	adds	r4, r5, r4
 8000f5e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000f62:	f080 8107 	bcs.w	8001174 <__udivmoddi4+0x290>
 8000f66:	45a4      	cmp	ip, r4
 8000f68:	f240 8104 	bls.w	8001174 <__udivmoddi4+0x290>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	442c      	add	r4, r5
 8000f70:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000f74:	eba4 040c 	sub.w	r4, r4, ip
 8000f78:	2700      	movs	r7, #0
 8000f7a:	b11e      	cbz	r6, 8000f84 <__udivmoddi4+0xa0>
 8000f7c:	40d4      	lsrs	r4, r2
 8000f7e:	2300      	movs	r3, #0
 8000f80:	e9c6 4300 	strd	r4, r3, [r6]
 8000f84:	4639      	mov	r1, r7
 8000f86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f8a:	428b      	cmp	r3, r1
 8000f8c:	d909      	bls.n	8000fa2 <__udivmoddi4+0xbe>
 8000f8e:	2e00      	cmp	r6, #0
 8000f90:	f000 80eb 	beq.w	800116a <__udivmoddi4+0x286>
 8000f94:	2700      	movs	r7, #0
 8000f96:	e9c6 0100 	strd	r0, r1, [r6]
 8000f9a:	4638      	mov	r0, r7
 8000f9c:	4639      	mov	r1, r7
 8000f9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa2:	fab3 f783 	clz	r7, r3
 8000fa6:	2f00      	cmp	r7, #0
 8000fa8:	d147      	bne.n	800103a <__udivmoddi4+0x156>
 8000faa:	428b      	cmp	r3, r1
 8000fac:	d302      	bcc.n	8000fb4 <__udivmoddi4+0xd0>
 8000fae:	4282      	cmp	r2, r0
 8000fb0:	f200 80fa 	bhi.w	80011a8 <__udivmoddi4+0x2c4>
 8000fb4:	1a84      	subs	r4, r0, r2
 8000fb6:	eb61 0303 	sbc.w	r3, r1, r3
 8000fba:	2001      	movs	r0, #1
 8000fbc:	4698      	mov	r8, r3
 8000fbe:	2e00      	cmp	r6, #0
 8000fc0:	d0e0      	beq.n	8000f84 <__udivmoddi4+0xa0>
 8000fc2:	e9c6 4800 	strd	r4, r8, [r6]
 8000fc6:	e7dd      	b.n	8000f84 <__udivmoddi4+0xa0>
 8000fc8:	b902      	cbnz	r2, 8000fcc <__udivmoddi4+0xe8>
 8000fca:	deff      	udf	#255	; 0xff
 8000fcc:	fab2 f282 	clz	r2, r2
 8000fd0:	2a00      	cmp	r2, #0
 8000fd2:	f040 808f 	bne.w	80010f4 <__udivmoddi4+0x210>
 8000fd6:	1b49      	subs	r1, r1, r5
 8000fd8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000fdc:	fa1f f885 	uxth.w	r8, r5
 8000fe0:	2701      	movs	r7, #1
 8000fe2:	fbb1 fcfe 	udiv	ip, r1, lr
 8000fe6:	0c23      	lsrs	r3, r4, #16
 8000fe8:	fb0e 111c 	mls	r1, lr, ip, r1
 8000fec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ff0:	fb08 f10c 	mul.w	r1, r8, ip
 8000ff4:	4299      	cmp	r1, r3
 8000ff6:	d907      	bls.n	8001008 <__udivmoddi4+0x124>
 8000ff8:	18eb      	adds	r3, r5, r3
 8000ffa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000ffe:	d202      	bcs.n	8001006 <__udivmoddi4+0x122>
 8001000:	4299      	cmp	r1, r3
 8001002:	f200 80cd 	bhi.w	80011a0 <__udivmoddi4+0x2bc>
 8001006:	4684      	mov	ip, r0
 8001008:	1a59      	subs	r1, r3, r1
 800100a:	b2a3      	uxth	r3, r4
 800100c:	fbb1 f0fe 	udiv	r0, r1, lr
 8001010:	fb0e 1410 	mls	r4, lr, r0, r1
 8001014:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8001018:	fb08 f800 	mul.w	r8, r8, r0
 800101c:	45a0      	cmp	r8, r4
 800101e:	d907      	bls.n	8001030 <__udivmoddi4+0x14c>
 8001020:	192c      	adds	r4, r5, r4
 8001022:	f100 33ff 	add.w	r3, r0, #4294967295
 8001026:	d202      	bcs.n	800102e <__udivmoddi4+0x14a>
 8001028:	45a0      	cmp	r8, r4
 800102a:	f200 80b6 	bhi.w	800119a <__udivmoddi4+0x2b6>
 800102e:	4618      	mov	r0, r3
 8001030:	eba4 0408 	sub.w	r4, r4, r8
 8001034:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8001038:	e79f      	b.n	8000f7a <__udivmoddi4+0x96>
 800103a:	f1c7 0c20 	rsb	ip, r7, #32
 800103e:	40bb      	lsls	r3, r7
 8001040:	fa22 fe0c 	lsr.w	lr, r2, ip
 8001044:	ea4e 0e03 	orr.w	lr, lr, r3
 8001048:	fa01 f407 	lsl.w	r4, r1, r7
 800104c:	fa20 f50c 	lsr.w	r5, r0, ip
 8001050:	fa21 f30c 	lsr.w	r3, r1, ip
 8001054:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8001058:	4325      	orrs	r5, r4
 800105a:	fbb3 f9f8 	udiv	r9, r3, r8
 800105e:	0c2c      	lsrs	r4, r5, #16
 8001060:	fb08 3319 	mls	r3, r8, r9, r3
 8001064:	fa1f fa8e 	uxth.w	sl, lr
 8001068:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 800106c:	fb09 f40a 	mul.w	r4, r9, sl
 8001070:	429c      	cmp	r4, r3
 8001072:	fa02 f207 	lsl.w	r2, r2, r7
 8001076:	fa00 f107 	lsl.w	r1, r0, r7
 800107a:	d90b      	bls.n	8001094 <__udivmoddi4+0x1b0>
 800107c:	eb1e 0303 	adds.w	r3, lr, r3
 8001080:	f109 30ff 	add.w	r0, r9, #4294967295
 8001084:	f080 8087 	bcs.w	8001196 <__udivmoddi4+0x2b2>
 8001088:	429c      	cmp	r4, r3
 800108a:	f240 8084 	bls.w	8001196 <__udivmoddi4+0x2b2>
 800108e:	f1a9 0902 	sub.w	r9, r9, #2
 8001092:	4473      	add	r3, lr
 8001094:	1b1b      	subs	r3, r3, r4
 8001096:	b2ad      	uxth	r5, r5
 8001098:	fbb3 f0f8 	udiv	r0, r3, r8
 800109c:	fb08 3310 	mls	r3, r8, r0, r3
 80010a0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80010a4:	fb00 fa0a 	mul.w	sl, r0, sl
 80010a8:	45a2      	cmp	sl, r4
 80010aa:	d908      	bls.n	80010be <__udivmoddi4+0x1da>
 80010ac:	eb1e 0404 	adds.w	r4, lr, r4
 80010b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80010b4:	d26b      	bcs.n	800118e <__udivmoddi4+0x2aa>
 80010b6:	45a2      	cmp	sl, r4
 80010b8:	d969      	bls.n	800118e <__udivmoddi4+0x2aa>
 80010ba:	3802      	subs	r0, #2
 80010bc:	4474      	add	r4, lr
 80010be:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80010c2:	fba0 8902 	umull	r8, r9, r0, r2
 80010c6:	eba4 040a 	sub.w	r4, r4, sl
 80010ca:	454c      	cmp	r4, r9
 80010cc:	46c2      	mov	sl, r8
 80010ce:	464b      	mov	r3, r9
 80010d0:	d354      	bcc.n	800117c <__udivmoddi4+0x298>
 80010d2:	d051      	beq.n	8001178 <__udivmoddi4+0x294>
 80010d4:	2e00      	cmp	r6, #0
 80010d6:	d069      	beq.n	80011ac <__udivmoddi4+0x2c8>
 80010d8:	ebb1 050a 	subs.w	r5, r1, sl
 80010dc:	eb64 0403 	sbc.w	r4, r4, r3
 80010e0:	fa04 fc0c 	lsl.w	ip, r4, ip
 80010e4:	40fd      	lsrs	r5, r7
 80010e6:	40fc      	lsrs	r4, r7
 80010e8:	ea4c 0505 	orr.w	r5, ip, r5
 80010ec:	e9c6 5400 	strd	r5, r4, [r6]
 80010f0:	2700      	movs	r7, #0
 80010f2:	e747      	b.n	8000f84 <__udivmoddi4+0xa0>
 80010f4:	f1c2 0320 	rsb	r3, r2, #32
 80010f8:	fa20 f703 	lsr.w	r7, r0, r3
 80010fc:	4095      	lsls	r5, r2
 80010fe:	fa01 f002 	lsl.w	r0, r1, r2
 8001102:	fa21 f303 	lsr.w	r3, r1, r3
 8001106:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800110a:	4338      	orrs	r0, r7
 800110c:	0c01      	lsrs	r1, r0, #16
 800110e:	fbb3 f7fe 	udiv	r7, r3, lr
 8001112:	fa1f f885 	uxth.w	r8, r5
 8001116:	fb0e 3317 	mls	r3, lr, r7, r3
 800111a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800111e:	fb07 f308 	mul.w	r3, r7, r8
 8001122:	428b      	cmp	r3, r1
 8001124:	fa04 f402 	lsl.w	r4, r4, r2
 8001128:	d907      	bls.n	800113a <__udivmoddi4+0x256>
 800112a:	1869      	adds	r1, r5, r1
 800112c:	f107 3cff 	add.w	ip, r7, #4294967295
 8001130:	d22f      	bcs.n	8001192 <__udivmoddi4+0x2ae>
 8001132:	428b      	cmp	r3, r1
 8001134:	d92d      	bls.n	8001192 <__udivmoddi4+0x2ae>
 8001136:	3f02      	subs	r7, #2
 8001138:	4429      	add	r1, r5
 800113a:	1acb      	subs	r3, r1, r3
 800113c:	b281      	uxth	r1, r0
 800113e:	fbb3 f0fe 	udiv	r0, r3, lr
 8001142:	fb0e 3310 	mls	r3, lr, r0, r3
 8001146:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800114a:	fb00 f308 	mul.w	r3, r0, r8
 800114e:	428b      	cmp	r3, r1
 8001150:	d907      	bls.n	8001162 <__udivmoddi4+0x27e>
 8001152:	1869      	adds	r1, r5, r1
 8001154:	f100 3cff 	add.w	ip, r0, #4294967295
 8001158:	d217      	bcs.n	800118a <__udivmoddi4+0x2a6>
 800115a:	428b      	cmp	r3, r1
 800115c:	d915      	bls.n	800118a <__udivmoddi4+0x2a6>
 800115e:	3802      	subs	r0, #2
 8001160:	4429      	add	r1, r5
 8001162:	1ac9      	subs	r1, r1, r3
 8001164:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8001168:	e73b      	b.n	8000fe2 <__udivmoddi4+0xfe>
 800116a:	4637      	mov	r7, r6
 800116c:	4630      	mov	r0, r6
 800116e:	e709      	b.n	8000f84 <__udivmoddi4+0xa0>
 8001170:	4607      	mov	r7, r0
 8001172:	e6e7      	b.n	8000f44 <__udivmoddi4+0x60>
 8001174:	4618      	mov	r0, r3
 8001176:	e6fb      	b.n	8000f70 <__udivmoddi4+0x8c>
 8001178:	4541      	cmp	r1, r8
 800117a:	d2ab      	bcs.n	80010d4 <__udivmoddi4+0x1f0>
 800117c:	ebb8 0a02 	subs.w	sl, r8, r2
 8001180:	eb69 020e 	sbc.w	r2, r9, lr
 8001184:	3801      	subs	r0, #1
 8001186:	4613      	mov	r3, r2
 8001188:	e7a4      	b.n	80010d4 <__udivmoddi4+0x1f0>
 800118a:	4660      	mov	r0, ip
 800118c:	e7e9      	b.n	8001162 <__udivmoddi4+0x27e>
 800118e:	4618      	mov	r0, r3
 8001190:	e795      	b.n	80010be <__udivmoddi4+0x1da>
 8001192:	4667      	mov	r7, ip
 8001194:	e7d1      	b.n	800113a <__udivmoddi4+0x256>
 8001196:	4681      	mov	r9, r0
 8001198:	e77c      	b.n	8001094 <__udivmoddi4+0x1b0>
 800119a:	3802      	subs	r0, #2
 800119c:	442c      	add	r4, r5
 800119e:	e747      	b.n	8001030 <__udivmoddi4+0x14c>
 80011a0:	f1ac 0c02 	sub.w	ip, ip, #2
 80011a4:	442b      	add	r3, r5
 80011a6:	e72f      	b.n	8001008 <__udivmoddi4+0x124>
 80011a8:	4638      	mov	r0, r7
 80011aa:	e708      	b.n	8000fbe <__udivmoddi4+0xda>
 80011ac:	4637      	mov	r7, r6
 80011ae:	e6e9      	b.n	8000f84 <__udivmoddi4+0xa0>

080011b0 <__aeabi_idiv0>:
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	0000      	movs	r0, r0
	...

080011b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011b8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80011bc:	b082      	sub	sp, #8
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011c0:	f002 f844 	bl	800324c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011c4:	f001 fa54 	bl	8002670 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011c8:	f001 fc3e 	bl	8002a48 <MX_GPIO_Init>
  MX_DMA_Init();
 80011cc:	f001 fc1c 	bl	8002a08 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80011d0:	f001 fbf0 	bl	80029b4 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 80011d4:	f001 fb22 	bl	800281c <MX_SPI3_Init>
  MX_ADC1_Init();
 80011d8:	f001 face 	bl	8002778 <MX_ADC1_Init>
  MX_TIM3_Init();
 80011dc:	f001 fb56 	bl	800288c <MX_TIM3_Init>
  MX_TIM11_Init();
 80011e0:	f001 fba0 	bl	8002924 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim3);
 80011e4:	48a5      	ldr	r0, [pc, #660]	; (800147c <main+0x2c4>)
 80011e6:	f004 fd08 	bl	8005bfa <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim11);
 80011ea:	48a5      	ldr	r0, [pc, #660]	; (8001480 <main+0x2c8>)
 80011ec:	f004 fd29 	bl	8005c42 <HAL_TIM_Base_Start_IT>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &ADCin, 1);
 80011f0:	2201      	movs	r2, #1
 80011f2:	49a4      	ldr	r1, [pc, #656]	; (8001484 <main+0x2cc>)
 80011f4:	48a4      	ldr	r0, [pc, #656]	; (8001488 <main+0x2d0>)
 80011f6:	f002 fa1f 	bl	8003638 <HAL_ADC_Start_DMA>

	HAL_GPIO_WritePin(LOAD_GPIO_Port, LOAD_Pin, GPIO_PIN_RESET);
 80011fa:	2200      	movs	r2, #0
 80011fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001200:	48a2      	ldr	r0, [pc, #648]	; (800148c <main+0x2d4>)
 8001202:	f003 fc0b 	bl	8004a1c <HAL_GPIO_WritePin>
//			x+=0.0001;
//			m=-1*(high-low)/period;
//            if(dataOut<=low){dataOut=high;x=0;}
//            else{dataOut=high+(m*x);}
//		    }
			HAL_UART_Receive_IT(&huart2,  (uint8_t*)RxDataBuffer, 32);
 8001206:	2220      	movs	r2, #32
 8001208:	49a1      	ldr	r1, [pc, #644]	; (8001490 <main+0x2d8>)
 800120a:	48a2      	ldr	r0, [pc, #648]	; (8001494 <main+0x2dc>)
 800120c:	f005 fb96 	bl	800693c <HAL_UART_Receive_IT>
			int16_t inputchar = UARTRecieveIT();
 8001210:	f001 fce0 	bl	8002bd4 <UARTRecieveIT>
 8001214:	4603      	mov	r3, r0
 8001216:	80fb      	strh	r3, [r7, #6]

			switch(state)
 8001218:	4b9f      	ldr	r3, [pc, #636]	; (8001498 <main+0x2e0>)
 800121a:	881b      	ldrh	r3, [r3, #0]
 800121c:	2b0b      	cmp	r3, #11
 800121e:	f200 86b6 	bhi.w	8001f8e <main+0xdd6>
 8001222:	a201      	add	r2, pc, #4	; (adr r2, 8001228 <main+0x70>)
 8001224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001228:	08001259 	.word	0x08001259
 800122c:	08001263 	.word	0x08001263
 8001230:	080012c1 	.word	0x080012c1
 8001234:	08001f8f 	.word	0x08001f8f
 8001238:	08001f8f 	.word	0x08001f8f
 800123c:	08001b47 	.word	0x08001b47
 8001240:	08001c4d 	.word	0x08001c4d
 8001244:	08001375 	.word	0x08001375
 8001248:	080014c5 	.word	0x080014c5
 800124c:	080017a9 	.word	0x080017a9
 8001250:	08001891 	.word	0x08001891
 8001254:	08001345 	.word	0x08001345
			{case start :
			  state = menu;
 8001258:	4b8f      	ldr	r3, [pc, #572]	; (8001498 <main+0x2e0>)
 800125a:	2201      	movs	r2, #1
 800125c:	801a      	strh	r2, [r3, #0]
			break;
 800125e:	f000 be96 	b.w	8001f8e <main+0xdd6>
			case menu:
			  sprintf(TxDataBuffer,"\r\n WAVE select \r\n 0=sawtooth ");
 8001262:	4a8e      	ldr	r2, [pc, #568]	; (800149c <main+0x2e4>)
 8001264:	4b8e      	ldr	r3, [pc, #568]	; (80014a0 <main+0x2e8>)
 8001266:	4614      	mov	r4, r2
 8001268:	461d      	mov	r5, r3
 800126a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800126c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800126e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001272:	c407      	stmia	r4!, {r0, r1, r2}
 8001274:	8023      	strh	r3, [r4, #0]
			  HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001276:	4889      	ldr	r0, [pc, #548]	; (800149c <main+0x2e4>)
 8001278:	f7fe ffb2 	bl	80001e0 <strlen>
 800127c:	4603      	mov	r3, r0
 800127e:	b29a      	uxth	r2, r3
 8001280:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001284:	4985      	ldr	r1, [pc, #532]	; (800149c <main+0x2e4>)
 8001286:	4883      	ldr	r0, [pc, #524]	; (8001494 <main+0x2dc>)
 8001288:	f005 fabf 	bl	800680a <HAL_UART_Transmit>
			  sprintf(TxDataBuffer,"\r\n 1=sine wave \r\n 2=square wave\r\n");
 800128c:	4a83      	ldr	r2, [pc, #524]	; (800149c <main+0x2e4>)
 800128e:	4b85      	ldr	r3, [pc, #532]	; (80014a4 <main+0x2ec>)
 8001290:	4614      	mov	r4, r2
 8001292:	461d      	mov	r5, r3
 8001294:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001296:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001298:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800129a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800129c:	682b      	ldr	r3, [r5, #0]
 800129e:	8023      	strh	r3, [r4, #0]
			  HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 80012a0:	487e      	ldr	r0, [pc, #504]	; (800149c <main+0x2e4>)
 80012a2:	f7fe ff9d 	bl	80001e0 <strlen>
 80012a6:	4603      	mov	r3, r0
 80012a8:	b29a      	uxth	r2, r3
 80012aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012ae:	497b      	ldr	r1, [pc, #492]	; (800149c <main+0x2e4>)
 80012b0:	4878      	ldr	r0, [pc, #480]	; (8001494 <main+0x2dc>)
 80012b2:	f005 faaa 	bl	800680a <HAL_UART_Transmit>
			  state = waitmenu;
 80012b6:	4b78      	ldr	r3, [pc, #480]	; (8001498 <main+0x2e0>)
 80012b8:	2202      	movs	r2, #2
 80012ba:	801a      	strh	r2, [r3, #0]
			 break;
 80012bc:	f000 be67 	b.w	8001f8e <main+0xdd6>
			case waitmenu:
				if(inputchar!=-1)
 80012c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012c8:	f000 865a 	beq.w	8001f80 <main+0xdc8>
				{if(inputchar=='0')
 80012cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012d0:	2b30      	cmp	r3, #48	; 0x30
 80012d2:	d104      	bne.n	80012de <main+0x126>
				{state = saw_menu;}
 80012d4:	4b70      	ldr	r3, [pc, #448]	; (8001498 <main+0x2e0>)
 80012d6:	2207      	movs	r2, #7
 80012d8:	801a      	strh	r2, [r3, #0]
				else if(inputchar=='2')
				 {state = square_menu;}
				else if (inputchar!='0'|inputchar!='1'|inputchar!='2' )
				{state =X1;}
				}
			break;
 80012da:	f000 be51 	b.w	8001f80 <main+0xdc8>
				else if(inputchar=='1')
 80012de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012e2:	2b31      	cmp	r3, #49	; 0x31
 80012e4:	d104      	bne.n	80012f0 <main+0x138>
				 {state = sin_menu;}
 80012e6:	4b6c      	ldr	r3, [pc, #432]	; (8001498 <main+0x2e0>)
 80012e8:	2209      	movs	r2, #9
 80012ea:	801a      	strh	r2, [r3, #0]
			break;
 80012ec:	f000 be48 	b.w	8001f80 <main+0xdc8>
				else if(inputchar=='2')
 80012f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012f4:	2b32      	cmp	r3, #50	; 0x32
 80012f6:	d104      	bne.n	8001302 <main+0x14a>
				 {state = square_menu;}
 80012f8:	4b67      	ldr	r3, [pc, #412]	; (8001498 <main+0x2e0>)
 80012fa:	2205      	movs	r2, #5
 80012fc:	801a      	strh	r2, [r3, #0]
			break;
 80012fe:	f000 be3f 	b.w	8001f80 <main+0xdc8>
				else if (inputchar!='0'|inputchar!='1'|inputchar!='2' )
 8001302:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001306:	2b30      	cmp	r3, #48	; 0x30
 8001308:	bf14      	ite	ne
 800130a:	2301      	movne	r3, #1
 800130c:	2300      	moveq	r3, #0
 800130e:	b2da      	uxtb	r2, r3
 8001310:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001314:	2b31      	cmp	r3, #49	; 0x31
 8001316:	bf14      	ite	ne
 8001318:	2301      	movne	r3, #1
 800131a:	2300      	moveq	r3, #0
 800131c:	b2db      	uxtb	r3, r3
 800131e:	4313      	orrs	r3, r2
 8001320:	b2db      	uxtb	r3, r3
 8001322:	461a      	mov	r2, r3
 8001324:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001328:	2b32      	cmp	r3, #50	; 0x32
 800132a:	bf14      	ite	ne
 800132c:	2301      	movne	r3, #1
 800132e:	2300      	moveq	r3, #0
 8001330:	b2db      	uxtb	r3, r3
 8001332:	4313      	orrs	r3, r2
 8001334:	2b00      	cmp	r3, #0
 8001336:	f000 8623 	beq.w	8001f80 <main+0xdc8>
				{state =X1;}
 800133a:	4b57      	ldr	r3, [pc, #348]	; (8001498 <main+0x2e0>)
 800133c:	220b      	movs	r2, #11
 800133e:	801a      	strh	r2, [r3, #0]
			break;
 8001340:	f000 be1e 	b.w	8001f80 <main+0xdc8>
			case X1:
				sprintf(TxDataBuffer,"\r\n error\r\n");
 8001344:	4b55      	ldr	r3, [pc, #340]	; (800149c <main+0x2e4>)
 8001346:	4a58      	ldr	r2, [pc, #352]	; (80014a8 <main+0x2f0>)
 8001348:	ca07      	ldmia	r2, {r0, r1, r2}
 800134a:	c303      	stmia	r3!, {r0, r1}
 800134c:	801a      	strh	r2, [r3, #0]
 800134e:	3302      	adds	r3, #2
 8001350:	0c12      	lsrs	r2, r2, #16
 8001352:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001354:	4851      	ldr	r0, [pc, #324]	; (800149c <main+0x2e4>)
 8001356:	f7fe ff43 	bl	80001e0 <strlen>
 800135a:	4603      	mov	r3, r0
 800135c:	b29a      	uxth	r2, r3
 800135e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001362:	494e      	ldr	r1, [pc, #312]	; (800149c <main+0x2e4>)
 8001364:	484b      	ldr	r0, [pc, #300]	; (8001494 <main+0x2dc>)
 8001366:	f005 fa50 	bl	800680a <HAL_UART_Transmit>
				state=waitmenu;
 800136a:	4b4b      	ldr	r3, [pc, #300]	; (8001498 <main+0x2e0>)
 800136c:	2202      	movs	r2, #2
 800136e:	801a      	strh	r2, [r3, #0]
			break;
 8001370:	f000 be0d 	b.w	8001f8e <main+0xdd6>
			case saw_menu:
				sprintf(TxDataBuffer,"\r\n SAWTOOTH \r\n ");HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001374:	4a49      	ldr	r2, [pc, #292]	; (800149c <main+0x2e4>)
 8001376:	4b4d      	ldr	r3, [pc, #308]	; (80014ac <main+0x2f4>)
 8001378:	4614      	mov	r4, r2
 800137a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800137c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001380:	4846      	ldr	r0, [pc, #280]	; (800149c <main+0x2e4>)
 8001382:	f7fe ff2d 	bl	80001e0 <strlen>
 8001386:	4603      	mov	r3, r0
 8001388:	b29a      	uxth	r2, r3
 800138a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800138e:	4943      	ldr	r1, [pc, #268]	; (800149c <main+0x2e4>)
 8001390:	4840      	ldr	r0, [pc, #256]	; (8001494 <main+0x2dc>)
 8001392:	f005 fa3a 	bl	800680a <HAL_UART_Transmit>
				sprintf(TxDataBuffer,"\r\n a=+0.1hz\r\n s=-0.1hz");HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001396:	4a41      	ldr	r2, [pc, #260]	; (800149c <main+0x2e4>)
 8001398:	4b45      	ldr	r3, [pc, #276]	; (80014b0 <main+0x2f8>)
 800139a:	4614      	mov	r4, r2
 800139c:	461d      	mov	r5, r3
 800139e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013a2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80013a6:	6020      	str	r0, [r4, #0]
 80013a8:	3404      	adds	r4, #4
 80013aa:	8021      	strh	r1, [r4, #0]
 80013ac:	3402      	adds	r4, #2
 80013ae:	0c0b      	lsrs	r3, r1, #16
 80013b0:	7023      	strb	r3, [r4, #0]
 80013b2:	483a      	ldr	r0, [pc, #232]	; (800149c <main+0x2e4>)
 80013b4:	f7fe ff14 	bl	80001e0 <strlen>
 80013b8:	4603      	mov	r3, r0
 80013ba:	b29a      	uxth	r2, r3
 80013bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013c0:	4936      	ldr	r1, [pc, #216]	; (800149c <main+0x2e4>)
 80013c2:	4834      	ldr	r0, [pc, #208]	; (8001494 <main+0x2dc>)
 80013c4:	f005 fa21 	bl	800680a <HAL_UART_Transmit>
				sprintf(TxDataBuffer,"\r\n d=+0.1V high \r\n f=-0.1V high \r\n");HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 80013c8:	4a34      	ldr	r2, [pc, #208]	; (800149c <main+0x2e4>)
 80013ca:	4b3a      	ldr	r3, [pc, #232]	; (80014b4 <main+0x2fc>)
 80013cc:	4614      	mov	r4, r2
 80013ce:	461d      	mov	r5, r3
 80013d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013d8:	682b      	ldr	r3, [r5, #0]
 80013da:	461a      	mov	r2, r3
 80013dc:	8022      	strh	r2, [r4, #0]
 80013de:	3402      	adds	r4, #2
 80013e0:	0c1b      	lsrs	r3, r3, #16
 80013e2:	7023      	strb	r3, [r4, #0]
 80013e4:	482d      	ldr	r0, [pc, #180]	; (800149c <main+0x2e4>)
 80013e6:	f7fe fefb 	bl	80001e0 <strlen>
 80013ea:	4603      	mov	r3, r0
 80013ec:	b29a      	uxth	r2, r3
 80013ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013f2:	492a      	ldr	r1, [pc, #168]	; (800149c <main+0x2e4>)
 80013f4:	4827      	ldr	r0, [pc, #156]	; (8001494 <main+0x2dc>)
 80013f6:	f005 fa08 	bl	800680a <HAL_UART_Transmit>
				sprintf(TxDataBuffer,"\r\n q=+0.1V low \r\n w=-0.1V low \r\n");HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 80013fa:	4a28      	ldr	r2, [pc, #160]	; (800149c <main+0x2e4>)
 80013fc:	4b2e      	ldr	r3, [pc, #184]	; (80014b8 <main+0x300>)
 80013fe:	4614      	mov	r4, r2
 8001400:	461d      	mov	r5, r3
 8001402:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001404:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001406:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001408:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800140a:	682b      	ldr	r3, [r5, #0]
 800140c:	7023      	strb	r3, [r4, #0]
 800140e:	4823      	ldr	r0, [pc, #140]	; (800149c <main+0x2e4>)
 8001410:	f7fe fee6 	bl	80001e0 <strlen>
 8001414:	4603      	mov	r3, r0
 8001416:	b29a      	uxth	r2, r3
 8001418:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800141c:	491f      	ldr	r1, [pc, #124]	; (800149c <main+0x2e4>)
 800141e:	481d      	ldr	r0, [pc, #116]	; (8001494 <main+0x2dc>)
 8001420:	f005 f9f3 	bl	800680a <HAL_UART_Transmit>
				sprintf(TxDataBuffer,"\r\n e=slope up \r\n r=slope down \r\n");HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001424:	4a1d      	ldr	r2, [pc, #116]	; (800149c <main+0x2e4>)
 8001426:	4b25      	ldr	r3, [pc, #148]	; (80014bc <main+0x304>)
 8001428:	4614      	mov	r4, r2
 800142a:	461d      	mov	r5, r3
 800142c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800142e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001430:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001432:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001434:	682b      	ldr	r3, [r5, #0]
 8001436:	7023      	strb	r3, [r4, #0]
 8001438:	4818      	ldr	r0, [pc, #96]	; (800149c <main+0x2e4>)
 800143a:	f7fe fed1 	bl	80001e0 <strlen>
 800143e:	4603      	mov	r3, r0
 8001440:	b29a      	uxth	r2, r3
 8001442:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001446:	4915      	ldr	r1, [pc, #84]	; (800149c <main+0x2e4>)
 8001448:	4812      	ldr	r0, [pc, #72]	; (8001494 <main+0x2dc>)
 800144a:	f005 f9de 	bl	800680a <HAL_UART_Transmit>
				sprintf(TxDataBuffer,"\r\n x=back \r\n");HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 800144e:	4a13      	ldr	r2, [pc, #76]	; (800149c <main+0x2e4>)
 8001450:	4b1b      	ldr	r3, [pc, #108]	; (80014c0 <main+0x308>)
 8001452:	4614      	mov	r4, r2
 8001454:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001456:	c407      	stmia	r4!, {r0, r1, r2}
 8001458:	7023      	strb	r3, [r4, #0]
 800145a:	4810      	ldr	r0, [pc, #64]	; (800149c <main+0x2e4>)
 800145c:	f7fe fec0 	bl	80001e0 <strlen>
 8001460:	4603      	mov	r3, r0
 8001462:	b29a      	uxth	r2, r3
 8001464:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001468:	490c      	ldr	r1, [pc, #48]	; (800149c <main+0x2e4>)
 800146a:	480a      	ldr	r0, [pc, #40]	; (8001494 <main+0x2dc>)
 800146c:	f005 f9cd 	bl	800680a <HAL_UART_Transmit>
				state=waitsaw;
 8001470:	4b09      	ldr	r3, [pc, #36]	; (8001498 <main+0x2e0>)
 8001472:	2208      	movs	r2, #8
 8001474:	801a      	strh	r2, [r3, #0]
			break;
 8001476:	f000 bd8a 	b.w	8001f8e <main+0xdd6>
 800147a:	bf00      	nop
 800147c:	200002c0 	.word	0x200002c0
 8001480:	200003a0 	.word	0x200003a0
 8001484:	2000021c 	.word	0x2000021c
 8001488:	20000358 	.word	0x20000358
 800148c:	40020000 	.word	0x40020000
 8001490:	20000280 	.word	0x20000280
 8001494:	20000440 	.word	0x20000440
 8001498:	200002a0 	.word	0x200002a0
 800149c:	20000260 	.word	0x20000260
 80014a0:	0800c0f8 	.word	0x0800c0f8
 80014a4:	0800c118 	.word	0x0800c118
 80014a8:	0800c13c 	.word	0x0800c13c
 80014ac:	0800c148 	.word	0x0800c148
 80014b0:	0800c158 	.word	0x0800c158
 80014b4:	0800c170 	.word	0x0800c170
 80014b8:	0800c194 	.word	0x0800c194
 80014bc:	0800c1b8 	.word	0x0800c1b8
 80014c0:	0800c1dc 	.word	0x0800c1dc
			case waitsaw:
				if(inputchar!=-1)
 80014c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014cc:	f000 855a 	beq.w	8001f84 <main+0xdcc>
				{if(inputchar=='a')
 80014d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014d4:	2b61      	cmp	r3, #97	; 0x61
 80014d6:	d12c      	bne.n	8001532 <main+0x37a>
				 {fq_saw+=0.1;sprintf(TxDataBuffer,"\r\n frequency = [%f]\r\n",fq_saw);HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);}
 80014d8:	4ba7      	ldr	r3, [pc, #668]	; (8001778 <main+0x5c0>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4618      	mov	r0, r3
 80014de:	f7ff f83b 	bl	8000558 <__aeabi_f2d>
 80014e2:	a3a3      	add	r3, pc, #652	; (adr r3, 8001770 <main+0x5b8>)
 80014e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e8:	f7fe fed8 	bl	800029c <__adddf3>
 80014ec:	4603      	mov	r3, r0
 80014ee:	460c      	mov	r4, r1
 80014f0:	4618      	mov	r0, r3
 80014f2:	4621      	mov	r1, r4
 80014f4:	f7ff fb80 	bl	8000bf8 <__aeabi_d2f>
 80014f8:	4602      	mov	r2, r0
 80014fa:	4b9f      	ldr	r3, [pc, #636]	; (8001778 <main+0x5c0>)
 80014fc:	601a      	str	r2, [r3, #0]
 80014fe:	4b9e      	ldr	r3, [pc, #632]	; (8001778 <main+0x5c0>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4618      	mov	r0, r3
 8001504:	f7ff f828 	bl	8000558 <__aeabi_f2d>
 8001508:	4603      	mov	r3, r0
 800150a:	460c      	mov	r4, r1
 800150c:	461a      	mov	r2, r3
 800150e:	4623      	mov	r3, r4
 8001510:	499a      	ldr	r1, [pc, #616]	; (800177c <main+0x5c4>)
 8001512:	489b      	ldr	r0, [pc, #620]	; (8001780 <main+0x5c8>)
 8001514:	f006 feda 	bl	80082cc <siprintf>
 8001518:	4899      	ldr	r0, [pc, #612]	; (8001780 <main+0x5c8>)
 800151a:	f7fe fe61 	bl	80001e0 <strlen>
 800151e:	4603      	mov	r3, r0
 8001520:	b29a      	uxth	r2, r3
 8001522:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001526:	4996      	ldr	r1, [pc, #600]	; (8001780 <main+0x5c8>)
 8001528:	4896      	ldr	r0, [pc, #600]	; (8001784 <main+0x5cc>)
 800152a:	f005 f96e 	bl	800680a <HAL_UART_Transmit>
				else if(inputchar=='r')
				{statesin=0;statesq=0;statesaw=slopedown;}
				else if(inputchar=='x')
				{state=menu;}
				}
			break;
 800152e:	f000 bd29 	b.w	8001f84 <main+0xdcc>
				else if(inputchar=='s')
 8001532:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001536:	2b73      	cmp	r3, #115	; 0x73
 8001538:	d12c      	bne.n	8001594 <main+0x3dc>
				 {fq_saw-=0.1;sprintf(TxDataBuffer,"\r\n frequency = [%f]\r\n",fq_saw);HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);}
 800153a:	4b8f      	ldr	r3, [pc, #572]	; (8001778 <main+0x5c0>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4618      	mov	r0, r3
 8001540:	f7ff f80a 	bl	8000558 <__aeabi_f2d>
 8001544:	a38a      	add	r3, pc, #552	; (adr r3, 8001770 <main+0x5b8>)
 8001546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800154a:	f7fe fea5 	bl	8000298 <__aeabi_dsub>
 800154e:	4603      	mov	r3, r0
 8001550:	460c      	mov	r4, r1
 8001552:	4618      	mov	r0, r3
 8001554:	4621      	mov	r1, r4
 8001556:	f7ff fb4f 	bl	8000bf8 <__aeabi_d2f>
 800155a:	4602      	mov	r2, r0
 800155c:	4b86      	ldr	r3, [pc, #536]	; (8001778 <main+0x5c0>)
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	4b85      	ldr	r3, [pc, #532]	; (8001778 <main+0x5c0>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4618      	mov	r0, r3
 8001566:	f7fe fff7 	bl	8000558 <__aeabi_f2d>
 800156a:	4603      	mov	r3, r0
 800156c:	460c      	mov	r4, r1
 800156e:	461a      	mov	r2, r3
 8001570:	4623      	mov	r3, r4
 8001572:	4982      	ldr	r1, [pc, #520]	; (800177c <main+0x5c4>)
 8001574:	4882      	ldr	r0, [pc, #520]	; (8001780 <main+0x5c8>)
 8001576:	f006 fea9 	bl	80082cc <siprintf>
 800157a:	4881      	ldr	r0, [pc, #516]	; (8001780 <main+0x5c8>)
 800157c:	f7fe fe30 	bl	80001e0 <strlen>
 8001580:	4603      	mov	r3, r0
 8001582:	b29a      	uxth	r2, r3
 8001584:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001588:	497d      	ldr	r1, [pc, #500]	; (8001780 <main+0x5c8>)
 800158a:	487e      	ldr	r0, [pc, #504]	; (8001784 <main+0x5cc>)
 800158c:	f005 f93d 	bl	800680a <HAL_UART_Transmit>
			break;
 8001590:	f000 bcf8 	b.w	8001f84 <main+0xdcc>
				else if(inputchar=='d')
 8001594:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001598:	2b64      	cmp	r3, #100	; 0x64
 800159a:	d12c      	bne.n	80015f6 <main+0x43e>
				 {high_saw+=0.1;sprintf(TxDataBuffer,"\r\n Vhigh = [%f]\r\n",high_saw);HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);}
 800159c:	4b7a      	ldr	r3, [pc, #488]	; (8001788 <main+0x5d0>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7fe ffd9 	bl	8000558 <__aeabi_f2d>
 80015a6:	a372      	add	r3, pc, #456	; (adr r3, 8001770 <main+0x5b8>)
 80015a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ac:	f7fe fe76 	bl	800029c <__adddf3>
 80015b0:	4603      	mov	r3, r0
 80015b2:	460c      	mov	r4, r1
 80015b4:	4618      	mov	r0, r3
 80015b6:	4621      	mov	r1, r4
 80015b8:	f7ff fb1e 	bl	8000bf8 <__aeabi_d2f>
 80015bc:	4602      	mov	r2, r0
 80015be:	4b72      	ldr	r3, [pc, #456]	; (8001788 <main+0x5d0>)
 80015c0:	601a      	str	r2, [r3, #0]
 80015c2:	4b71      	ldr	r3, [pc, #452]	; (8001788 <main+0x5d0>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4618      	mov	r0, r3
 80015c8:	f7fe ffc6 	bl	8000558 <__aeabi_f2d>
 80015cc:	4603      	mov	r3, r0
 80015ce:	460c      	mov	r4, r1
 80015d0:	461a      	mov	r2, r3
 80015d2:	4623      	mov	r3, r4
 80015d4:	496d      	ldr	r1, [pc, #436]	; (800178c <main+0x5d4>)
 80015d6:	486a      	ldr	r0, [pc, #424]	; (8001780 <main+0x5c8>)
 80015d8:	f006 fe78 	bl	80082cc <siprintf>
 80015dc:	4868      	ldr	r0, [pc, #416]	; (8001780 <main+0x5c8>)
 80015de:	f7fe fdff 	bl	80001e0 <strlen>
 80015e2:	4603      	mov	r3, r0
 80015e4:	b29a      	uxth	r2, r3
 80015e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015ea:	4965      	ldr	r1, [pc, #404]	; (8001780 <main+0x5c8>)
 80015ec:	4865      	ldr	r0, [pc, #404]	; (8001784 <main+0x5cc>)
 80015ee:	f005 f90c 	bl	800680a <HAL_UART_Transmit>
			break;
 80015f2:	f000 bcc7 	b.w	8001f84 <main+0xdcc>
				else if (inputchar=='f')
 80015f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015fa:	2b66      	cmp	r3, #102	; 0x66
 80015fc:	d12c      	bne.n	8001658 <main+0x4a0>
				{high_saw-=0.1;sprintf(TxDataBuffer,"\r\n Vhigh = [%f]\r\n",high_saw);HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);}
 80015fe:	4b62      	ldr	r3, [pc, #392]	; (8001788 <main+0x5d0>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4618      	mov	r0, r3
 8001604:	f7fe ffa8 	bl	8000558 <__aeabi_f2d>
 8001608:	a359      	add	r3, pc, #356	; (adr r3, 8001770 <main+0x5b8>)
 800160a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800160e:	f7fe fe43 	bl	8000298 <__aeabi_dsub>
 8001612:	4603      	mov	r3, r0
 8001614:	460c      	mov	r4, r1
 8001616:	4618      	mov	r0, r3
 8001618:	4621      	mov	r1, r4
 800161a:	f7ff faed 	bl	8000bf8 <__aeabi_d2f>
 800161e:	4602      	mov	r2, r0
 8001620:	4b59      	ldr	r3, [pc, #356]	; (8001788 <main+0x5d0>)
 8001622:	601a      	str	r2, [r3, #0]
 8001624:	4b58      	ldr	r3, [pc, #352]	; (8001788 <main+0x5d0>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4618      	mov	r0, r3
 800162a:	f7fe ff95 	bl	8000558 <__aeabi_f2d>
 800162e:	4603      	mov	r3, r0
 8001630:	460c      	mov	r4, r1
 8001632:	461a      	mov	r2, r3
 8001634:	4623      	mov	r3, r4
 8001636:	4955      	ldr	r1, [pc, #340]	; (800178c <main+0x5d4>)
 8001638:	4851      	ldr	r0, [pc, #324]	; (8001780 <main+0x5c8>)
 800163a:	f006 fe47 	bl	80082cc <siprintf>
 800163e:	4850      	ldr	r0, [pc, #320]	; (8001780 <main+0x5c8>)
 8001640:	f7fe fdce 	bl	80001e0 <strlen>
 8001644:	4603      	mov	r3, r0
 8001646:	b29a      	uxth	r2, r3
 8001648:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800164c:	494c      	ldr	r1, [pc, #304]	; (8001780 <main+0x5c8>)
 800164e:	484d      	ldr	r0, [pc, #308]	; (8001784 <main+0x5cc>)
 8001650:	f005 f8db 	bl	800680a <HAL_UART_Transmit>
			break;
 8001654:	f000 bc96 	b.w	8001f84 <main+0xdcc>
				else if(inputchar=='q')
 8001658:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800165c:	2b71      	cmp	r3, #113	; 0x71
 800165e:	d12c      	bne.n	80016ba <main+0x502>
			    {low_saw+=0.1;sprintf(TxDataBuffer,"\r\n Vlow = [%f]\r\n",low_saw);HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);}
 8001660:	4b4b      	ldr	r3, [pc, #300]	; (8001790 <main+0x5d8>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4618      	mov	r0, r3
 8001666:	f7fe ff77 	bl	8000558 <__aeabi_f2d>
 800166a:	a341      	add	r3, pc, #260	; (adr r3, 8001770 <main+0x5b8>)
 800166c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001670:	f7fe fe14 	bl	800029c <__adddf3>
 8001674:	4603      	mov	r3, r0
 8001676:	460c      	mov	r4, r1
 8001678:	4618      	mov	r0, r3
 800167a:	4621      	mov	r1, r4
 800167c:	f7ff fabc 	bl	8000bf8 <__aeabi_d2f>
 8001680:	4602      	mov	r2, r0
 8001682:	4b43      	ldr	r3, [pc, #268]	; (8001790 <main+0x5d8>)
 8001684:	601a      	str	r2, [r3, #0]
 8001686:	4b42      	ldr	r3, [pc, #264]	; (8001790 <main+0x5d8>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4618      	mov	r0, r3
 800168c:	f7fe ff64 	bl	8000558 <__aeabi_f2d>
 8001690:	4603      	mov	r3, r0
 8001692:	460c      	mov	r4, r1
 8001694:	461a      	mov	r2, r3
 8001696:	4623      	mov	r3, r4
 8001698:	493e      	ldr	r1, [pc, #248]	; (8001794 <main+0x5dc>)
 800169a:	4839      	ldr	r0, [pc, #228]	; (8001780 <main+0x5c8>)
 800169c:	f006 fe16 	bl	80082cc <siprintf>
 80016a0:	4837      	ldr	r0, [pc, #220]	; (8001780 <main+0x5c8>)
 80016a2:	f7fe fd9d 	bl	80001e0 <strlen>
 80016a6:	4603      	mov	r3, r0
 80016a8:	b29a      	uxth	r2, r3
 80016aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016ae:	4934      	ldr	r1, [pc, #208]	; (8001780 <main+0x5c8>)
 80016b0:	4834      	ldr	r0, [pc, #208]	; (8001784 <main+0x5cc>)
 80016b2:	f005 f8aa 	bl	800680a <HAL_UART_Transmit>
			break;
 80016b6:	f000 bc65 	b.w	8001f84 <main+0xdcc>
				else if(inputchar=='w')
 80016ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016be:	2b77      	cmp	r3, #119	; 0x77
 80016c0:	d12c      	bne.n	800171c <main+0x564>
				{low_saw-=0.1;sprintf(TxDataBuffer,"\r\n Vlow = [%f]\r\n",low_saw);HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);}
 80016c2:	4b33      	ldr	r3, [pc, #204]	; (8001790 <main+0x5d8>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4618      	mov	r0, r3
 80016c8:	f7fe ff46 	bl	8000558 <__aeabi_f2d>
 80016cc:	a328      	add	r3, pc, #160	; (adr r3, 8001770 <main+0x5b8>)
 80016ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016d2:	f7fe fde1 	bl	8000298 <__aeabi_dsub>
 80016d6:	4603      	mov	r3, r0
 80016d8:	460c      	mov	r4, r1
 80016da:	4618      	mov	r0, r3
 80016dc:	4621      	mov	r1, r4
 80016de:	f7ff fa8b 	bl	8000bf8 <__aeabi_d2f>
 80016e2:	4602      	mov	r2, r0
 80016e4:	4b2a      	ldr	r3, [pc, #168]	; (8001790 <main+0x5d8>)
 80016e6:	601a      	str	r2, [r3, #0]
 80016e8:	4b29      	ldr	r3, [pc, #164]	; (8001790 <main+0x5d8>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7fe ff33 	bl	8000558 <__aeabi_f2d>
 80016f2:	4603      	mov	r3, r0
 80016f4:	460c      	mov	r4, r1
 80016f6:	461a      	mov	r2, r3
 80016f8:	4623      	mov	r3, r4
 80016fa:	4926      	ldr	r1, [pc, #152]	; (8001794 <main+0x5dc>)
 80016fc:	4820      	ldr	r0, [pc, #128]	; (8001780 <main+0x5c8>)
 80016fe:	f006 fde5 	bl	80082cc <siprintf>
 8001702:	481f      	ldr	r0, [pc, #124]	; (8001780 <main+0x5c8>)
 8001704:	f7fe fd6c 	bl	80001e0 <strlen>
 8001708:	4603      	mov	r3, r0
 800170a:	b29a      	uxth	r2, r3
 800170c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001710:	491b      	ldr	r1, [pc, #108]	; (8001780 <main+0x5c8>)
 8001712:	481c      	ldr	r0, [pc, #112]	; (8001784 <main+0x5cc>)
 8001714:	f005 f879 	bl	800680a <HAL_UART_Transmit>
			break;
 8001718:	f000 bc34 	b.w	8001f84 <main+0xdcc>
				else if(inputchar=='e')
 800171c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001720:	2b65      	cmp	r3, #101	; 0x65
 8001722:	d10a      	bne.n	800173a <main+0x582>
				{   statesin=0;statesq=0;statesaw=slopeup;}
 8001724:	4b1c      	ldr	r3, [pc, #112]	; (8001798 <main+0x5e0>)
 8001726:	2200      	movs	r2, #0
 8001728:	801a      	strh	r2, [r3, #0]
 800172a:	4b1c      	ldr	r3, [pc, #112]	; (800179c <main+0x5e4>)
 800172c:	2200      	movs	r2, #0
 800172e:	801a      	strh	r2, [r3, #0]
 8001730:	4b1b      	ldr	r3, [pc, #108]	; (80017a0 <main+0x5e8>)
 8001732:	220c      	movs	r2, #12
 8001734:	801a      	strh	r2, [r3, #0]
			break;
 8001736:	f000 bc25 	b.w	8001f84 <main+0xdcc>
				else if(inputchar=='r')
 800173a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800173e:	2b72      	cmp	r3, #114	; 0x72
 8001740:	d10a      	bne.n	8001758 <main+0x5a0>
				{statesin=0;statesq=0;statesaw=slopedown;}
 8001742:	4b15      	ldr	r3, [pc, #84]	; (8001798 <main+0x5e0>)
 8001744:	2200      	movs	r2, #0
 8001746:	801a      	strh	r2, [r3, #0]
 8001748:	4b14      	ldr	r3, [pc, #80]	; (800179c <main+0x5e4>)
 800174a:	2200      	movs	r2, #0
 800174c:	801a      	strh	r2, [r3, #0]
 800174e:	4b14      	ldr	r3, [pc, #80]	; (80017a0 <main+0x5e8>)
 8001750:	220d      	movs	r2, #13
 8001752:	801a      	strh	r2, [r3, #0]
			break;
 8001754:	f000 bc16 	b.w	8001f84 <main+0xdcc>
				else if(inputchar=='x')
 8001758:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800175c:	2b78      	cmp	r3, #120	; 0x78
 800175e:	f040 8411 	bne.w	8001f84 <main+0xdcc>
				{state=menu;}
 8001762:	4b10      	ldr	r3, [pc, #64]	; (80017a4 <main+0x5ec>)
 8001764:	2201      	movs	r2, #1
 8001766:	801a      	strh	r2, [r3, #0]
			break;
 8001768:	f000 bc0c 	b.w	8001f84 <main+0xdcc>
 800176c:	f3af 8000 	nop.w
 8001770:	9999999a 	.word	0x9999999a
 8001774:	3fb99999 	.word	0x3fb99999
 8001778:	20000008 	.word	0x20000008
 800177c:	0800c1ec 	.word	0x0800c1ec
 8001780:	20000260 	.word	0x20000260
 8001784:	20000440 	.word	0x20000440
 8001788:	20000000 	.word	0x20000000
 800178c:	0800c204 	.word	0x0800c204
 8001790:	20000238 	.word	0x20000238
 8001794:	0800c218 	.word	0x0800c218
 8001798:	200002a4 	.word	0x200002a4
 800179c:	200002a6 	.word	0x200002a6
 80017a0:	200002a2 	.word	0x200002a2
 80017a4:	200002a0 	.word	0x200002a0
			case sin_menu:
				sprintf(TxDataBuffer,"\r\n SINE WAVE \r\n ");
 80017a8:	4a9f      	ldr	r2, [pc, #636]	; (8001a28 <main+0x870>)
 80017aa:	4ba0      	ldr	r3, [pc, #640]	; (8001a2c <main+0x874>)
 80017ac:	4614      	mov	r4, r2
 80017ae:	461d      	mov	r5, r3
 80017b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017b4:	682b      	ldr	r3, [r5, #0]
 80017b6:	7023      	strb	r3, [r4, #0]
				HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 80017b8:	489b      	ldr	r0, [pc, #620]	; (8001a28 <main+0x870>)
 80017ba:	f7fe fd11 	bl	80001e0 <strlen>
 80017be:	4603      	mov	r3, r0
 80017c0:	b29a      	uxth	r2, r3
 80017c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017c6:	4998      	ldr	r1, [pc, #608]	; (8001a28 <main+0x870>)
 80017c8:	4899      	ldr	r0, [pc, #612]	; (8001a30 <main+0x878>)
 80017ca:	f005 f81e 	bl	800680a <HAL_UART_Transmit>
				sprintf(TxDataBuffer,"\r\n a=+0.1hz\r\n s=-0.1hz");HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 80017ce:	4a96      	ldr	r2, [pc, #600]	; (8001a28 <main+0x870>)
 80017d0:	4b98      	ldr	r3, [pc, #608]	; (8001a34 <main+0x87c>)
 80017d2:	4614      	mov	r4, r2
 80017d4:	461d      	mov	r5, r3
 80017d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017da:	e895 0003 	ldmia.w	r5, {r0, r1}
 80017de:	6020      	str	r0, [r4, #0]
 80017e0:	3404      	adds	r4, #4
 80017e2:	8021      	strh	r1, [r4, #0]
 80017e4:	3402      	adds	r4, #2
 80017e6:	0c0b      	lsrs	r3, r1, #16
 80017e8:	7023      	strb	r3, [r4, #0]
 80017ea:	488f      	ldr	r0, [pc, #572]	; (8001a28 <main+0x870>)
 80017ec:	f7fe fcf8 	bl	80001e0 <strlen>
 80017f0:	4603      	mov	r3, r0
 80017f2:	b29a      	uxth	r2, r3
 80017f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017f8:	498b      	ldr	r1, [pc, #556]	; (8001a28 <main+0x870>)
 80017fa:	488d      	ldr	r0, [pc, #564]	; (8001a30 <main+0x878>)
 80017fc:	f005 f805 	bl	800680a <HAL_UART_Transmit>
				sprintf(TxDataBuffer,"\r\n d=+0.1V high \r\n f=-0.1V high \r\n");HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001800:	4a89      	ldr	r2, [pc, #548]	; (8001a28 <main+0x870>)
 8001802:	4b8d      	ldr	r3, [pc, #564]	; (8001a38 <main+0x880>)
 8001804:	4614      	mov	r4, r2
 8001806:	461d      	mov	r5, r3
 8001808:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800180a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800180c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800180e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001810:	682b      	ldr	r3, [r5, #0]
 8001812:	461a      	mov	r2, r3
 8001814:	8022      	strh	r2, [r4, #0]
 8001816:	3402      	adds	r4, #2
 8001818:	0c1b      	lsrs	r3, r3, #16
 800181a:	7023      	strb	r3, [r4, #0]
 800181c:	4882      	ldr	r0, [pc, #520]	; (8001a28 <main+0x870>)
 800181e:	f7fe fcdf 	bl	80001e0 <strlen>
 8001822:	4603      	mov	r3, r0
 8001824:	b29a      	uxth	r2, r3
 8001826:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800182a:	497f      	ldr	r1, [pc, #508]	; (8001a28 <main+0x870>)
 800182c:	4880      	ldr	r0, [pc, #512]	; (8001a30 <main+0x878>)
 800182e:	f004 ffec 	bl	800680a <HAL_UART_Transmit>
				sprintf(TxDataBuffer,"\r\n q=+0.1V low \r\n w=-0.1V low \r\n");HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001832:	4a7d      	ldr	r2, [pc, #500]	; (8001a28 <main+0x870>)
 8001834:	4b81      	ldr	r3, [pc, #516]	; (8001a3c <main+0x884>)
 8001836:	4614      	mov	r4, r2
 8001838:	461d      	mov	r5, r3
 800183a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800183c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800183e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001840:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001842:	682b      	ldr	r3, [r5, #0]
 8001844:	7023      	strb	r3, [r4, #0]
 8001846:	4878      	ldr	r0, [pc, #480]	; (8001a28 <main+0x870>)
 8001848:	f7fe fcca 	bl	80001e0 <strlen>
 800184c:	4603      	mov	r3, r0
 800184e:	b29a      	uxth	r2, r3
 8001850:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001854:	4974      	ldr	r1, [pc, #464]	; (8001a28 <main+0x870>)
 8001856:	4876      	ldr	r0, [pc, #472]	; (8001a30 <main+0x878>)
 8001858:	f004 ffd7 	bl	800680a <HAL_UART_Transmit>
				sprintf(TxDataBuffer,"\r\n x=back \r\n e=run \r\n");HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 800185c:	4a72      	ldr	r2, [pc, #456]	; (8001a28 <main+0x870>)
 800185e:	4b78      	ldr	r3, [pc, #480]	; (8001a40 <main+0x888>)
 8001860:	4614      	mov	r4, r2
 8001862:	461d      	mov	r5, r3
 8001864:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001866:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001868:	e895 0003 	ldmia.w	r5, {r0, r1}
 800186c:	6020      	str	r0, [r4, #0]
 800186e:	3404      	adds	r4, #4
 8001870:	8021      	strh	r1, [r4, #0]
 8001872:	486d      	ldr	r0, [pc, #436]	; (8001a28 <main+0x870>)
 8001874:	f7fe fcb4 	bl	80001e0 <strlen>
 8001878:	4603      	mov	r3, r0
 800187a:	b29a      	uxth	r2, r3
 800187c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001880:	4969      	ldr	r1, [pc, #420]	; (8001a28 <main+0x870>)
 8001882:	486b      	ldr	r0, [pc, #428]	; (8001a30 <main+0x878>)
 8001884:	f004 ffc1 	bl	800680a <HAL_UART_Transmit>
				state=waitsin;
 8001888:	4b6e      	ldr	r3, [pc, #440]	; (8001a44 <main+0x88c>)
 800188a:	220a      	movs	r2, #10
 800188c:	801a      	strh	r2, [r3, #0]

			break;
 800188e:	e37e      	b.n	8001f8e <main+0xdd6>
			case waitsin:
				if(inputchar!=-1)
 8001890:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001898:	f000 8376 	beq.w	8001f88 <main+0xdd0>
				{if(inputchar=='a')
 800189c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018a0:	2b61      	cmp	r3, #97	; 0x61
 80018a2:	d12b      	bne.n	80018fc <main+0x744>
				 {fq_sin+=0.1;sprintf(TxDataBuffer,"\r\n frequency = [%f]\r\n",fq_sin);HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);}
 80018a4:	4b68      	ldr	r3, [pc, #416]	; (8001a48 <main+0x890>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7fe fe55 	bl	8000558 <__aeabi_f2d>
 80018ae:	a35c      	add	r3, pc, #368	; (adr r3, 8001a20 <main+0x868>)
 80018b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018b4:	f7fe fcf2 	bl	800029c <__adddf3>
 80018b8:	4603      	mov	r3, r0
 80018ba:	460c      	mov	r4, r1
 80018bc:	4618      	mov	r0, r3
 80018be:	4621      	mov	r1, r4
 80018c0:	f7ff f99a 	bl	8000bf8 <__aeabi_d2f>
 80018c4:	4602      	mov	r2, r0
 80018c6:	4b60      	ldr	r3, [pc, #384]	; (8001a48 <main+0x890>)
 80018c8:	601a      	str	r2, [r3, #0]
 80018ca:	4b5f      	ldr	r3, [pc, #380]	; (8001a48 <main+0x890>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7fe fe42 	bl	8000558 <__aeabi_f2d>
 80018d4:	4603      	mov	r3, r0
 80018d6:	460c      	mov	r4, r1
 80018d8:	461a      	mov	r2, r3
 80018da:	4623      	mov	r3, r4
 80018dc:	495b      	ldr	r1, [pc, #364]	; (8001a4c <main+0x894>)
 80018de:	4852      	ldr	r0, [pc, #328]	; (8001a28 <main+0x870>)
 80018e0:	f006 fcf4 	bl	80082cc <siprintf>
 80018e4:	4850      	ldr	r0, [pc, #320]	; (8001a28 <main+0x870>)
 80018e6:	f7fe fc7b 	bl	80001e0 <strlen>
 80018ea:	4603      	mov	r3, r0
 80018ec:	b29a      	uxth	r2, r3
 80018ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018f2:	494d      	ldr	r1, [pc, #308]	; (8001a28 <main+0x870>)
 80018f4:	484e      	ldr	r0, [pc, #312]	; (8001a30 <main+0x878>)
 80018f6:	f004 ff88 	bl	800680a <HAL_UART_Transmit>
				else if(inputchar=='x')
				{state=menu;}
				}


			break;
 80018fa:	e345      	b.n	8001f88 <main+0xdd0>
				else if(inputchar=='s')
 80018fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001900:	2b73      	cmp	r3, #115	; 0x73
 8001902:	d12b      	bne.n	800195c <main+0x7a4>
				 {fq_sin-=0.1;sprintf(TxDataBuffer,"\r\n frequency = [%f]\r\n",fq_sin);HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);}
 8001904:	4b50      	ldr	r3, [pc, #320]	; (8001a48 <main+0x890>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4618      	mov	r0, r3
 800190a:	f7fe fe25 	bl	8000558 <__aeabi_f2d>
 800190e:	a344      	add	r3, pc, #272	; (adr r3, 8001a20 <main+0x868>)
 8001910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001914:	f7fe fcc0 	bl	8000298 <__aeabi_dsub>
 8001918:	4603      	mov	r3, r0
 800191a:	460c      	mov	r4, r1
 800191c:	4618      	mov	r0, r3
 800191e:	4621      	mov	r1, r4
 8001920:	f7ff f96a 	bl	8000bf8 <__aeabi_d2f>
 8001924:	4602      	mov	r2, r0
 8001926:	4b48      	ldr	r3, [pc, #288]	; (8001a48 <main+0x890>)
 8001928:	601a      	str	r2, [r3, #0]
 800192a:	4b47      	ldr	r3, [pc, #284]	; (8001a48 <main+0x890>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4618      	mov	r0, r3
 8001930:	f7fe fe12 	bl	8000558 <__aeabi_f2d>
 8001934:	4603      	mov	r3, r0
 8001936:	460c      	mov	r4, r1
 8001938:	461a      	mov	r2, r3
 800193a:	4623      	mov	r3, r4
 800193c:	4943      	ldr	r1, [pc, #268]	; (8001a4c <main+0x894>)
 800193e:	483a      	ldr	r0, [pc, #232]	; (8001a28 <main+0x870>)
 8001940:	f006 fcc4 	bl	80082cc <siprintf>
 8001944:	4838      	ldr	r0, [pc, #224]	; (8001a28 <main+0x870>)
 8001946:	f7fe fc4b 	bl	80001e0 <strlen>
 800194a:	4603      	mov	r3, r0
 800194c:	b29a      	uxth	r2, r3
 800194e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001952:	4935      	ldr	r1, [pc, #212]	; (8001a28 <main+0x870>)
 8001954:	4836      	ldr	r0, [pc, #216]	; (8001a30 <main+0x878>)
 8001956:	f004 ff58 	bl	800680a <HAL_UART_Transmit>
			break;
 800195a:	e315      	b.n	8001f88 <main+0xdd0>
				else if(inputchar=='d')
 800195c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001960:	2b64      	cmp	r3, #100	; 0x64
 8001962:	d12b      	bne.n	80019bc <main+0x804>
				 {high_sin+=0.1;sprintf(TxDataBuffer,"\r\n Vhigh = [%f]\r\n",high_sin);HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);}
 8001964:	4b3a      	ldr	r3, [pc, #232]	; (8001a50 <main+0x898>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4618      	mov	r0, r3
 800196a:	f7fe fdf5 	bl	8000558 <__aeabi_f2d>
 800196e:	a32c      	add	r3, pc, #176	; (adr r3, 8001a20 <main+0x868>)
 8001970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001974:	f7fe fc92 	bl	800029c <__adddf3>
 8001978:	4603      	mov	r3, r0
 800197a:	460c      	mov	r4, r1
 800197c:	4618      	mov	r0, r3
 800197e:	4621      	mov	r1, r4
 8001980:	f7ff f93a 	bl	8000bf8 <__aeabi_d2f>
 8001984:	4602      	mov	r2, r0
 8001986:	4b32      	ldr	r3, [pc, #200]	; (8001a50 <main+0x898>)
 8001988:	601a      	str	r2, [r3, #0]
 800198a:	4b31      	ldr	r3, [pc, #196]	; (8001a50 <main+0x898>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4618      	mov	r0, r3
 8001990:	f7fe fde2 	bl	8000558 <__aeabi_f2d>
 8001994:	4603      	mov	r3, r0
 8001996:	460c      	mov	r4, r1
 8001998:	461a      	mov	r2, r3
 800199a:	4623      	mov	r3, r4
 800199c:	492d      	ldr	r1, [pc, #180]	; (8001a54 <main+0x89c>)
 800199e:	4822      	ldr	r0, [pc, #136]	; (8001a28 <main+0x870>)
 80019a0:	f006 fc94 	bl	80082cc <siprintf>
 80019a4:	4820      	ldr	r0, [pc, #128]	; (8001a28 <main+0x870>)
 80019a6:	f7fe fc1b 	bl	80001e0 <strlen>
 80019aa:	4603      	mov	r3, r0
 80019ac:	b29a      	uxth	r2, r3
 80019ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019b2:	491d      	ldr	r1, [pc, #116]	; (8001a28 <main+0x870>)
 80019b4:	481e      	ldr	r0, [pc, #120]	; (8001a30 <main+0x878>)
 80019b6:	f004 ff28 	bl	800680a <HAL_UART_Transmit>
			break;
 80019ba:	e2e5      	b.n	8001f88 <main+0xdd0>
				else if (inputchar=='f')
 80019bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019c0:	2b66      	cmp	r3, #102	; 0x66
 80019c2:	d149      	bne.n	8001a58 <main+0x8a0>
				{high_sin-=0.1;sprintf(TxDataBuffer,"\r\n Vhigh = [%f]\r\n",high_sin);HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);}
 80019c4:	4b22      	ldr	r3, [pc, #136]	; (8001a50 <main+0x898>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4618      	mov	r0, r3
 80019ca:	f7fe fdc5 	bl	8000558 <__aeabi_f2d>
 80019ce:	a314      	add	r3, pc, #80	; (adr r3, 8001a20 <main+0x868>)
 80019d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019d4:	f7fe fc60 	bl	8000298 <__aeabi_dsub>
 80019d8:	4603      	mov	r3, r0
 80019da:	460c      	mov	r4, r1
 80019dc:	4618      	mov	r0, r3
 80019de:	4621      	mov	r1, r4
 80019e0:	f7ff f90a 	bl	8000bf8 <__aeabi_d2f>
 80019e4:	4602      	mov	r2, r0
 80019e6:	4b1a      	ldr	r3, [pc, #104]	; (8001a50 <main+0x898>)
 80019e8:	601a      	str	r2, [r3, #0]
 80019ea:	4b19      	ldr	r3, [pc, #100]	; (8001a50 <main+0x898>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7fe fdb2 	bl	8000558 <__aeabi_f2d>
 80019f4:	4603      	mov	r3, r0
 80019f6:	460c      	mov	r4, r1
 80019f8:	461a      	mov	r2, r3
 80019fa:	4623      	mov	r3, r4
 80019fc:	4915      	ldr	r1, [pc, #84]	; (8001a54 <main+0x89c>)
 80019fe:	480a      	ldr	r0, [pc, #40]	; (8001a28 <main+0x870>)
 8001a00:	f006 fc64 	bl	80082cc <siprintf>
 8001a04:	4808      	ldr	r0, [pc, #32]	; (8001a28 <main+0x870>)
 8001a06:	f7fe fbeb 	bl	80001e0 <strlen>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	b29a      	uxth	r2, r3
 8001a0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a12:	4905      	ldr	r1, [pc, #20]	; (8001a28 <main+0x870>)
 8001a14:	4806      	ldr	r0, [pc, #24]	; (8001a30 <main+0x878>)
 8001a16:	f004 fef8 	bl	800680a <HAL_UART_Transmit>
			break;
 8001a1a:	e2b5      	b.n	8001f88 <main+0xdd0>
 8001a1c:	f3af 8000 	nop.w
 8001a20:	9999999a 	.word	0x9999999a
 8001a24:	3fb99999 	.word	0x3fb99999
 8001a28:	20000260 	.word	0x20000260
 8001a2c:	0800c22c 	.word	0x0800c22c
 8001a30:	20000440 	.word	0x20000440
 8001a34:	0800c158 	.word	0x0800c158
 8001a38:	0800c170 	.word	0x0800c170
 8001a3c:	0800c194 	.word	0x0800c194
 8001a40:	0800c240 	.word	0x0800c240
 8001a44:	200002a0 	.word	0x200002a0
 8001a48:	20000014 	.word	0x20000014
 8001a4c:	0800c1ec 	.word	0x0800c1ec
 8001a50:	20000010 	.word	0x20000010
 8001a54:	0800c204 	.word	0x0800c204
				else if(inputchar=='q')
 8001a58:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a5c:	2b71      	cmp	r3, #113	; 0x71
 8001a5e:	d12b      	bne.n	8001ab8 <main+0x900>
				{low_sin+=0.1;sprintf(TxDataBuffer,"\r\n Vlow = [%f]\r\n",low_sin);HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);}
 8001a60:	4baf      	ldr	r3, [pc, #700]	; (8001d20 <main+0xb68>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4618      	mov	r0, r3
 8001a66:	f7fe fd77 	bl	8000558 <__aeabi_f2d>
 8001a6a:	a3ab      	add	r3, pc, #684	; (adr r3, 8001d18 <main+0xb60>)
 8001a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a70:	f7fe fc14 	bl	800029c <__adddf3>
 8001a74:	4603      	mov	r3, r0
 8001a76:	460c      	mov	r4, r1
 8001a78:	4618      	mov	r0, r3
 8001a7a:	4621      	mov	r1, r4
 8001a7c:	f7ff f8bc 	bl	8000bf8 <__aeabi_d2f>
 8001a80:	4602      	mov	r2, r0
 8001a82:	4ba7      	ldr	r3, [pc, #668]	; (8001d20 <main+0xb68>)
 8001a84:	601a      	str	r2, [r3, #0]
 8001a86:	4ba6      	ldr	r3, [pc, #664]	; (8001d20 <main+0xb68>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7fe fd64 	bl	8000558 <__aeabi_f2d>
 8001a90:	4603      	mov	r3, r0
 8001a92:	460c      	mov	r4, r1
 8001a94:	461a      	mov	r2, r3
 8001a96:	4623      	mov	r3, r4
 8001a98:	49a2      	ldr	r1, [pc, #648]	; (8001d24 <main+0xb6c>)
 8001a9a:	48a3      	ldr	r0, [pc, #652]	; (8001d28 <main+0xb70>)
 8001a9c:	f006 fc16 	bl	80082cc <siprintf>
 8001aa0:	48a1      	ldr	r0, [pc, #644]	; (8001d28 <main+0xb70>)
 8001aa2:	f7fe fb9d 	bl	80001e0 <strlen>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	b29a      	uxth	r2, r3
 8001aaa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001aae:	499e      	ldr	r1, [pc, #632]	; (8001d28 <main+0xb70>)
 8001ab0:	489e      	ldr	r0, [pc, #632]	; (8001d2c <main+0xb74>)
 8001ab2:	f004 feaa 	bl	800680a <HAL_UART_Transmit>
			break;
 8001ab6:	e267      	b.n	8001f88 <main+0xdd0>
				else if(inputchar=='w')
 8001ab8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001abc:	2b77      	cmp	r3, #119	; 0x77
 8001abe:	d12b      	bne.n	8001b18 <main+0x960>
				{low_sin-=0.1;sprintf(TxDataBuffer,"\r\n Vlow = [%f]\r\n",low_sin);HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);}
 8001ac0:	4b97      	ldr	r3, [pc, #604]	; (8001d20 <main+0xb68>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7fe fd47 	bl	8000558 <__aeabi_f2d>
 8001aca:	a393      	add	r3, pc, #588	; (adr r3, 8001d18 <main+0xb60>)
 8001acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ad0:	f7fe fbe2 	bl	8000298 <__aeabi_dsub>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	460c      	mov	r4, r1
 8001ad8:	4618      	mov	r0, r3
 8001ada:	4621      	mov	r1, r4
 8001adc:	f7ff f88c 	bl	8000bf8 <__aeabi_d2f>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	4b8f      	ldr	r3, [pc, #572]	; (8001d20 <main+0xb68>)
 8001ae4:	601a      	str	r2, [r3, #0]
 8001ae6:	4b8e      	ldr	r3, [pc, #568]	; (8001d20 <main+0xb68>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4618      	mov	r0, r3
 8001aec:	f7fe fd34 	bl	8000558 <__aeabi_f2d>
 8001af0:	4603      	mov	r3, r0
 8001af2:	460c      	mov	r4, r1
 8001af4:	461a      	mov	r2, r3
 8001af6:	4623      	mov	r3, r4
 8001af8:	498a      	ldr	r1, [pc, #552]	; (8001d24 <main+0xb6c>)
 8001afa:	488b      	ldr	r0, [pc, #556]	; (8001d28 <main+0xb70>)
 8001afc:	f006 fbe6 	bl	80082cc <siprintf>
 8001b00:	4889      	ldr	r0, [pc, #548]	; (8001d28 <main+0xb70>)
 8001b02:	f7fe fb6d 	bl	80001e0 <strlen>
 8001b06:	4603      	mov	r3, r0
 8001b08:	b29a      	uxth	r2, r3
 8001b0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b0e:	4986      	ldr	r1, [pc, #536]	; (8001d28 <main+0xb70>)
 8001b10:	4886      	ldr	r0, [pc, #536]	; (8001d2c <main+0xb74>)
 8001b12:	f004 fe7a 	bl	800680a <HAL_UART_Transmit>
			break;
 8001b16:	e237      	b.n	8001f88 <main+0xdd0>
				else if(inputchar=='e')
 8001b18:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b1c:	2b65      	cmp	r3, #101	; 0x65
 8001b1e:	d109      	bne.n	8001b34 <main+0x97c>
				{statesq=0;statesaw=0;
 8001b20:	4b83      	ldr	r3, [pc, #524]	; (8001d30 <main+0xb78>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	801a      	strh	r2, [r3, #0]
 8001b26:	4b83      	ldr	r3, [pc, #524]	; (8001d34 <main+0xb7c>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	801a      	strh	r2, [r3, #0]
					statesin=sine;}
 8001b2c:	4b82      	ldr	r3, [pc, #520]	; (8001d38 <main+0xb80>)
 8001b2e:	220e      	movs	r2, #14
 8001b30:	801a      	strh	r2, [r3, #0]
			break;
 8001b32:	e229      	b.n	8001f88 <main+0xdd0>
				else if(inputchar=='x')
 8001b34:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b38:	2b78      	cmp	r3, #120	; 0x78
 8001b3a:	f040 8225 	bne.w	8001f88 <main+0xdd0>
				{state=menu;}
 8001b3e:	4b7f      	ldr	r3, [pc, #508]	; (8001d3c <main+0xb84>)
 8001b40:	2201      	movs	r2, #1
 8001b42:	801a      	strh	r2, [r3, #0]
			break;
 8001b44:	e220      	b.n	8001f88 <main+0xdd0>
			case square_menu:
				sprintf(TxDataBuffer,"\r\n SQUARE WAVE \r\n ");
 8001b46:	4a78      	ldr	r2, [pc, #480]	; (8001d28 <main+0xb70>)
 8001b48:	4b7d      	ldr	r3, [pc, #500]	; (8001d40 <main+0xb88>)
 8001b4a:	4614      	mov	r4, r2
 8001b4c:	461d      	mov	r5, r3
 8001b4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b52:	682b      	ldr	r3, [r5, #0]
 8001b54:	461a      	mov	r2, r3
 8001b56:	8022      	strh	r2, [r4, #0]
 8001b58:	3402      	adds	r4, #2
 8001b5a:	0c1b      	lsrs	r3, r3, #16
 8001b5c:	7023      	strb	r3, [r4, #0]
				HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001b5e:	4872      	ldr	r0, [pc, #456]	; (8001d28 <main+0xb70>)
 8001b60:	f7fe fb3e 	bl	80001e0 <strlen>
 8001b64:	4603      	mov	r3, r0
 8001b66:	b29a      	uxth	r2, r3
 8001b68:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b6c:	496e      	ldr	r1, [pc, #440]	; (8001d28 <main+0xb70>)
 8001b6e:	486f      	ldr	r0, [pc, #444]	; (8001d2c <main+0xb74>)
 8001b70:	f004 fe4b 	bl	800680a <HAL_UART_Transmit>
				sprintf(TxDataBuffer,"\r\n a=+0.1hz\r\n s=-0.1hz");HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001b74:	4a6c      	ldr	r2, [pc, #432]	; (8001d28 <main+0xb70>)
 8001b76:	4b73      	ldr	r3, [pc, #460]	; (8001d44 <main+0xb8c>)
 8001b78:	4614      	mov	r4, r2
 8001b7a:	461d      	mov	r5, r3
 8001b7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b80:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001b84:	6020      	str	r0, [r4, #0]
 8001b86:	3404      	adds	r4, #4
 8001b88:	8021      	strh	r1, [r4, #0]
 8001b8a:	3402      	adds	r4, #2
 8001b8c:	0c0b      	lsrs	r3, r1, #16
 8001b8e:	7023      	strb	r3, [r4, #0]
 8001b90:	4865      	ldr	r0, [pc, #404]	; (8001d28 <main+0xb70>)
 8001b92:	f7fe fb25 	bl	80001e0 <strlen>
 8001b96:	4603      	mov	r3, r0
 8001b98:	b29a      	uxth	r2, r3
 8001b9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b9e:	4962      	ldr	r1, [pc, #392]	; (8001d28 <main+0xb70>)
 8001ba0:	4862      	ldr	r0, [pc, #392]	; (8001d2c <main+0xb74>)
 8001ba2:	f004 fe32 	bl	800680a <HAL_UART_Transmit>
				sprintf(TxDataBuffer,"\r\n d=+0.1V high \r\n f=-0.1Vhigh \r\n");HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001ba6:	4a60      	ldr	r2, [pc, #384]	; (8001d28 <main+0xb70>)
 8001ba8:	4b67      	ldr	r3, [pc, #412]	; (8001d48 <main+0xb90>)
 8001baa:	4614      	mov	r4, r2
 8001bac:	461d      	mov	r5, r3
 8001bae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001bb0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001bb2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001bb4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001bb6:	682b      	ldr	r3, [r5, #0]
 8001bb8:	8023      	strh	r3, [r4, #0]
 8001bba:	485b      	ldr	r0, [pc, #364]	; (8001d28 <main+0xb70>)
 8001bbc:	f7fe fb10 	bl	80001e0 <strlen>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	b29a      	uxth	r2, r3
 8001bc4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bc8:	4957      	ldr	r1, [pc, #348]	; (8001d28 <main+0xb70>)
 8001bca:	4858      	ldr	r0, [pc, #352]	; (8001d2c <main+0xb74>)
 8001bcc:	f004 fe1d 	bl	800680a <HAL_UART_Transmit>
				sprintf(TxDataBuffer,"\r\n q=+0.1V low \r\n w=-0.1Vlow \r\n");HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001bd0:	4a55      	ldr	r2, [pc, #340]	; (8001d28 <main+0xb70>)
 8001bd2:	4b5e      	ldr	r3, [pc, #376]	; (8001d4c <main+0xb94>)
 8001bd4:	4614      	mov	r4, r2
 8001bd6:	461d      	mov	r5, r3
 8001bd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001bda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001bdc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001be0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001be4:	4850      	ldr	r0, [pc, #320]	; (8001d28 <main+0xb70>)
 8001be6:	f7fe fafb 	bl	80001e0 <strlen>
 8001bea:	4603      	mov	r3, r0
 8001bec:	b29a      	uxth	r2, r3
 8001bee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bf2:	494d      	ldr	r1, [pc, #308]	; (8001d28 <main+0xb70>)
 8001bf4:	484d      	ldr	r0, [pc, #308]	; (8001d2c <main+0xb74>)
 8001bf6:	f004 fe08 	bl	800680a <HAL_UART_Transmit>
				sprintf(TxDataBuffer,"\r\n x=back \r\n e=run \r\n");HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001bfa:	4a4b      	ldr	r2, [pc, #300]	; (8001d28 <main+0xb70>)
 8001bfc:	4b54      	ldr	r3, [pc, #336]	; (8001d50 <main+0xb98>)
 8001bfe:	4614      	mov	r4, r2
 8001c00:	461d      	mov	r5, r3
 8001c02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c06:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001c0a:	6020      	str	r0, [r4, #0]
 8001c0c:	3404      	adds	r4, #4
 8001c0e:	8021      	strh	r1, [r4, #0]
 8001c10:	4845      	ldr	r0, [pc, #276]	; (8001d28 <main+0xb70>)
 8001c12:	f7fe fae5 	bl	80001e0 <strlen>
 8001c16:	4603      	mov	r3, r0
 8001c18:	b29a      	uxth	r2, r3
 8001c1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c1e:	4942      	ldr	r1, [pc, #264]	; (8001d28 <main+0xb70>)
 8001c20:	4842      	ldr	r0, [pc, #264]	; (8001d2c <main+0xb74>)
 8001c22:	f004 fdf2 	bl	800680a <HAL_UART_Transmit>
				sprintf(TxDataBuffer,"\r\n t=+1%% dutycycle \r\n y=-1%% dutycycle \r\n");HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001c26:	494b      	ldr	r1, [pc, #300]	; (8001d54 <main+0xb9c>)
 8001c28:	483f      	ldr	r0, [pc, #252]	; (8001d28 <main+0xb70>)
 8001c2a:	f006 fb4f 	bl	80082cc <siprintf>
 8001c2e:	483e      	ldr	r0, [pc, #248]	; (8001d28 <main+0xb70>)
 8001c30:	f7fe fad6 	bl	80001e0 <strlen>
 8001c34:	4603      	mov	r3, r0
 8001c36:	b29a      	uxth	r2, r3
 8001c38:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c3c:	493a      	ldr	r1, [pc, #232]	; (8001d28 <main+0xb70>)
 8001c3e:	483b      	ldr	r0, [pc, #236]	; (8001d2c <main+0xb74>)
 8001c40:	f004 fde3 	bl	800680a <HAL_UART_Transmit>
				state=waitsquare;
 8001c44:	4b3d      	ldr	r3, [pc, #244]	; (8001d3c <main+0xb84>)
 8001c46:	2206      	movs	r2, #6
 8001c48:	801a      	strh	r2, [r3, #0]

			break;
 8001c4a:	e1a0      	b.n	8001f8e <main+0xdd6>
			case waitsquare:
				if(inputchar!=-1)
 8001c4c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c54:	f000 819a 	beq.w	8001f8c <main+0xdd4>
				{if(inputchar=='a')
 8001c58:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c5c:	2b61      	cmp	r3, #97	; 0x61
 8001c5e:	d12b      	bne.n	8001cb8 <main+0xb00>
				 {fq_sq+=0.1;sprintf(TxDataBuffer,"\r\n frequency = [%f]\r\n",(float)fq_sq);HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);}
 8001c60:	4b3d      	ldr	r3, [pc, #244]	; (8001d58 <main+0xba0>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7fe fc77 	bl	8000558 <__aeabi_f2d>
 8001c6a:	a32b      	add	r3, pc, #172	; (adr r3, 8001d18 <main+0xb60>)
 8001c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c70:	f7fe fb14 	bl	800029c <__adddf3>
 8001c74:	4603      	mov	r3, r0
 8001c76:	460c      	mov	r4, r1
 8001c78:	4618      	mov	r0, r3
 8001c7a:	4621      	mov	r1, r4
 8001c7c:	f7fe ffbc 	bl	8000bf8 <__aeabi_d2f>
 8001c80:	4602      	mov	r2, r0
 8001c82:	4b35      	ldr	r3, [pc, #212]	; (8001d58 <main+0xba0>)
 8001c84:	601a      	str	r2, [r3, #0]
 8001c86:	4b34      	ldr	r3, [pc, #208]	; (8001d58 <main+0xba0>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f7fe fc64 	bl	8000558 <__aeabi_f2d>
 8001c90:	4603      	mov	r3, r0
 8001c92:	460c      	mov	r4, r1
 8001c94:	461a      	mov	r2, r3
 8001c96:	4623      	mov	r3, r4
 8001c98:	4930      	ldr	r1, [pc, #192]	; (8001d5c <main+0xba4>)
 8001c9a:	4823      	ldr	r0, [pc, #140]	; (8001d28 <main+0xb70>)
 8001c9c:	f006 fb16 	bl	80082cc <siprintf>
 8001ca0:	4821      	ldr	r0, [pc, #132]	; (8001d28 <main+0xb70>)
 8001ca2:	f7fe fa9d 	bl	80001e0 <strlen>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	b29a      	uxth	r2, r3
 8001caa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cae:	491e      	ldr	r1, [pc, #120]	; (8001d28 <main+0xb70>)
 8001cb0:	481e      	ldr	r0, [pc, #120]	; (8001d2c <main+0xb74>)
 8001cb2:	f004 fdaa 	bl	800680a <HAL_UART_Transmit>
				{state=menu;}
				else if(inputchar=='e')
				{statesin=0;statesaw=0;
					statesq=square;}
				}
			break;
 8001cb6:	e169      	b.n	8001f8c <main+0xdd4>
				else if(inputchar=='s')
 8001cb8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cbc:	2b73      	cmp	r3, #115	; 0x73
 8001cbe:	d14f      	bne.n	8001d60 <main+0xba8>
				 {fq_sq-=0.1;sprintf(TxDataBuffer,"\r\n frequency = [%f]\r\n",(float)fq_sq);HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);}
 8001cc0:	4b25      	ldr	r3, [pc, #148]	; (8001d58 <main+0xba0>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f7fe fc47 	bl	8000558 <__aeabi_f2d>
 8001cca:	a313      	add	r3, pc, #76	; (adr r3, 8001d18 <main+0xb60>)
 8001ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cd0:	f7fe fae2 	bl	8000298 <__aeabi_dsub>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	460c      	mov	r4, r1
 8001cd8:	4618      	mov	r0, r3
 8001cda:	4621      	mov	r1, r4
 8001cdc:	f7fe ff8c 	bl	8000bf8 <__aeabi_d2f>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	4b1d      	ldr	r3, [pc, #116]	; (8001d58 <main+0xba0>)
 8001ce4:	601a      	str	r2, [r3, #0]
 8001ce6:	4b1c      	ldr	r3, [pc, #112]	; (8001d58 <main+0xba0>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7fe fc34 	bl	8000558 <__aeabi_f2d>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	460c      	mov	r4, r1
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	4623      	mov	r3, r4
 8001cf8:	4918      	ldr	r1, [pc, #96]	; (8001d5c <main+0xba4>)
 8001cfa:	480b      	ldr	r0, [pc, #44]	; (8001d28 <main+0xb70>)
 8001cfc:	f006 fae6 	bl	80082cc <siprintf>
 8001d00:	4809      	ldr	r0, [pc, #36]	; (8001d28 <main+0xb70>)
 8001d02:	f7fe fa6d 	bl	80001e0 <strlen>
 8001d06:	4603      	mov	r3, r0
 8001d08:	b29a      	uxth	r2, r3
 8001d0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d0e:	4906      	ldr	r1, [pc, #24]	; (8001d28 <main+0xb70>)
 8001d10:	4806      	ldr	r0, [pc, #24]	; (8001d2c <main+0xb74>)
 8001d12:	f004 fd7a 	bl	800680a <HAL_UART_Transmit>
			break;
 8001d16:	e139      	b.n	8001f8c <main+0xdd4>
 8001d18:	9999999a 	.word	0x9999999a
 8001d1c:	3fb99999 	.word	0x3fb99999
 8001d20:	20000244 	.word	0x20000244
 8001d24:	0800c218 	.word	0x0800c218
 8001d28:	20000260 	.word	0x20000260
 8001d2c:	20000440 	.word	0x20000440
 8001d30:	200002a6 	.word	0x200002a6
 8001d34:	200002a2 	.word	0x200002a2
 8001d38:	200002a4 	.word	0x200002a4
 8001d3c:	200002a0 	.word	0x200002a0
 8001d40:	0800c258 	.word	0x0800c258
 8001d44:	0800c158 	.word	0x0800c158
 8001d48:	0800c26c 	.word	0x0800c26c
 8001d4c:	0800c290 	.word	0x0800c290
 8001d50:	0800c240 	.word	0x0800c240
 8001d54:	0800c2b0 	.word	0x0800c2b0
 8001d58:	20000018 	.word	0x20000018
 8001d5c:	0800c1ec 	.word	0x0800c1ec
				else if(inputchar=='d')
 8001d60:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d64:	2b64      	cmp	r3, #100	; 0x64
 8001d66:	d12b      	bne.n	8001dc0 <main+0xc08>
				 {high_sq+=0.1;sprintf(TxDataBuffer,"\r\n Vhigh = [%f]\r\n",(float)high_sq);HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);}
 8001d68:	4b8f      	ldr	r3, [pc, #572]	; (8001fa8 <main+0xdf0>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7fe fbf3 	bl	8000558 <__aeabi_f2d>
 8001d72:	a38b      	add	r3, pc, #556	; (adr r3, 8001fa0 <main+0xde8>)
 8001d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d78:	f7fe fa90 	bl	800029c <__adddf3>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	460c      	mov	r4, r1
 8001d80:	4618      	mov	r0, r3
 8001d82:	4621      	mov	r1, r4
 8001d84:	f7fe ff38 	bl	8000bf8 <__aeabi_d2f>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	4b87      	ldr	r3, [pc, #540]	; (8001fa8 <main+0xdf0>)
 8001d8c:	601a      	str	r2, [r3, #0]
 8001d8e:	4b86      	ldr	r3, [pc, #536]	; (8001fa8 <main+0xdf0>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4618      	mov	r0, r3
 8001d94:	f7fe fbe0 	bl	8000558 <__aeabi_f2d>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	460c      	mov	r4, r1
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	4623      	mov	r3, r4
 8001da0:	4982      	ldr	r1, [pc, #520]	; (8001fac <main+0xdf4>)
 8001da2:	4883      	ldr	r0, [pc, #524]	; (8001fb0 <main+0xdf8>)
 8001da4:	f006 fa92 	bl	80082cc <siprintf>
 8001da8:	4881      	ldr	r0, [pc, #516]	; (8001fb0 <main+0xdf8>)
 8001daa:	f7fe fa19 	bl	80001e0 <strlen>
 8001dae:	4603      	mov	r3, r0
 8001db0:	b29a      	uxth	r2, r3
 8001db2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001db6:	497e      	ldr	r1, [pc, #504]	; (8001fb0 <main+0xdf8>)
 8001db8:	487e      	ldr	r0, [pc, #504]	; (8001fb4 <main+0xdfc>)
 8001dba:	f004 fd26 	bl	800680a <HAL_UART_Transmit>
			break;
 8001dbe:	e0e5      	b.n	8001f8c <main+0xdd4>
				else if (inputchar=='f')
 8001dc0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001dc4:	2b66      	cmp	r3, #102	; 0x66
 8001dc6:	d12b      	bne.n	8001e20 <main+0xc68>
				{high_sq-=0.1;sprintf(TxDataBuffer,"\r\n Vhigh = [%f]\r\n",(float)high_sq);HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);}
 8001dc8:	4b77      	ldr	r3, [pc, #476]	; (8001fa8 <main+0xdf0>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7fe fbc3 	bl	8000558 <__aeabi_f2d>
 8001dd2:	a373      	add	r3, pc, #460	; (adr r3, 8001fa0 <main+0xde8>)
 8001dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dd8:	f7fe fa5e 	bl	8000298 <__aeabi_dsub>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	460c      	mov	r4, r1
 8001de0:	4618      	mov	r0, r3
 8001de2:	4621      	mov	r1, r4
 8001de4:	f7fe ff08 	bl	8000bf8 <__aeabi_d2f>
 8001de8:	4602      	mov	r2, r0
 8001dea:	4b6f      	ldr	r3, [pc, #444]	; (8001fa8 <main+0xdf0>)
 8001dec:	601a      	str	r2, [r3, #0]
 8001dee:	4b6e      	ldr	r3, [pc, #440]	; (8001fa8 <main+0xdf0>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4618      	mov	r0, r3
 8001df4:	f7fe fbb0 	bl	8000558 <__aeabi_f2d>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	460c      	mov	r4, r1
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	4623      	mov	r3, r4
 8001e00:	496a      	ldr	r1, [pc, #424]	; (8001fac <main+0xdf4>)
 8001e02:	486b      	ldr	r0, [pc, #428]	; (8001fb0 <main+0xdf8>)
 8001e04:	f006 fa62 	bl	80082cc <siprintf>
 8001e08:	4869      	ldr	r0, [pc, #420]	; (8001fb0 <main+0xdf8>)
 8001e0a:	f7fe f9e9 	bl	80001e0 <strlen>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	b29a      	uxth	r2, r3
 8001e12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e16:	4966      	ldr	r1, [pc, #408]	; (8001fb0 <main+0xdf8>)
 8001e18:	4866      	ldr	r0, [pc, #408]	; (8001fb4 <main+0xdfc>)
 8001e1a:	f004 fcf6 	bl	800680a <HAL_UART_Transmit>
			break;
 8001e1e:	e0b5      	b.n	8001f8c <main+0xdd4>
				else if(inputchar=='q')
 8001e20:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e24:	2b71      	cmp	r3, #113	; 0x71
 8001e26:	d12b      	bne.n	8001e80 <main+0xcc8>
				{low_sq+=0.1;sprintf(TxDataBuffer,"\r\n Vlow = [%f]\r\n",(float)low_sq);HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);}
 8001e28:	4b63      	ldr	r3, [pc, #396]	; (8001fb8 <main+0xe00>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7fe fb93 	bl	8000558 <__aeabi_f2d>
 8001e32:	a35b      	add	r3, pc, #364	; (adr r3, 8001fa0 <main+0xde8>)
 8001e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e38:	f7fe fa30 	bl	800029c <__adddf3>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	460c      	mov	r4, r1
 8001e40:	4618      	mov	r0, r3
 8001e42:	4621      	mov	r1, r4
 8001e44:	f7fe fed8 	bl	8000bf8 <__aeabi_d2f>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	4b5b      	ldr	r3, [pc, #364]	; (8001fb8 <main+0xe00>)
 8001e4c:	601a      	str	r2, [r3, #0]
 8001e4e:	4b5a      	ldr	r3, [pc, #360]	; (8001fb8 <main+0xe00>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4618      	mov	r0, r3
 8001e54:	f7fe fb80 	bl	8000558 <__aeabi_f2d>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	460c      	mov	r4, r1
 8001e5c:	461a      	mov	r2, r3
 8001e5e:	4623      	mov	r3, r4
 8001e60:	4956      	ldr	r1, [pc, #344]	; (8001fbc <main+0xe04>)
 8001e62:	4853      	ldr	r0, [pc, #332]	; (8001fb0 <main+0xdf8>)
 8001e64:	f006 fa32 	bl	80082cc <siprintf>
 8001e68:	4851      	ldr	r0, [pc, #324]	; (8001fb0 <main+0xdf8>)
 8001e6a:	f7fe f9b9 	bl	80001e0 <strlen>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	b29a      	uxth	r2, r3
 8001e72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e76:	494e      	ldr	r1, [pc, #312]	; (8001fb0 <main+0xdf8>)
 8001e78:	484e      	ldr	r0, [pc, #312]	; (8001fb4 <main+0xdfc>)
 8001e7a:	f004 fcc6 	bl	800680a <HAL_UART_Transmit>
			break;
 8001e7e:	e085      	b.n	8001f8c <main+0xdd4>
				else if(inputchar=='w')
 8001e80:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e84:	2b77      	cmp	r3, #119	; 0x77
 8001e86:	d12b      	bne.n	8001ee0 <main+0xd28>
				{low_sq-=0.1;sprintf(TxDataBuffer,"\r\n Vlow = [%f]\r\n",(float)low_sq);HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);}
 8001e88:	4b4b      	ldr	r3, [pc, #300]	; (8001fb8 <main+0xe00>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f7fe fb63 	bl	8000558 <__aeabi_f2d>
 8001e92:	a343      	add	r3, pc, #268	; (adr r3, 8001fa0 <main+0xde8>)
 8001e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e98:	f7fe f9fe 	bl	8000298 <__aeabi_dsub>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	460c      	mov	r4, r1
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	4621      	mov	r1, r4
 8001ea4:	f7fe fea8 	bl	8000bf8 <__aeabi_d2f>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	4b43      	ldr	r3, [pc, #268]	; (8001fb8 <main+0xe00>)
 8001eac:	601a      	str	r2, [r3, #0]
 8001eae:	4b42      	ldr	r3, [pc, #264]	; (8001fb8 <main+0xe00>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f7fe fb50 	bl	8000558 <__aeabi_f2d>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	460c      	mov	r4, r1
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	4623      	mov	r3, r4
 8001ec0:	493e      	ldr	r1, [pc, #248]	; (8001fbc <main+0xe04>)
 8001ec2:	483b      	ldr	r0, [pc, #236]	; (8001fb0 <main+0xdf8>)
 8001ec4:	f006 fa02 	bl	80082cc <siprintf>
 8001ec8:	4839      	ldr	r0, [pc, #228]	; (8001fb0 <main+0xdf8>)
 8001eca:	f7fe f989 	bl	80001e0 <strlen>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	b29a      	uxth	r2, r3
 8001ed2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ed6:	4936      	ldr	r1, [pc, #216]	; (8001fb0 <main+0xdf8>)
 8001ed8:	4836      	ldr	r0, [pc, #216]	; (8001fb4 <main+0xdfc>)
 8001eda:	f004 fc96 	bl	800680a <HAL_UART_Transmit>
			break;
 8001ede:	e055      	b.n	8001f8c <main+0xdd4>
				else if(inputchar=='t')
 8001ee0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ee4:	2b74      	cmp	r3, #116	; 0x74
 8001ee6:	d118      	bne.n	8001f1a <main+0xd62>
			    {dutycycle+=1;sprintf(TxDataBuffer,"\r\n dutycycle = [%u]\r\n",dutycycle);HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);}
 8001ee8:	4b35      	ldr	r3, [pc, #212]	; (8001fc0 <main+0xe08>)
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	3301      	adds	r3, #1
 8001eee:	b2da      	uxtb	r2, r3
 8001ef0:	4b33      	ldr	r3, [pc, #204]	; (8001fc0 <main+0xe08>)
 8001ef2:	701a      	strb	r2, [r3, #0]
 8001ef4:	4b32      	ldr	r3, [pc, #200]	; (8001fc0 <main+0xe08>)
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	461a      	mov	r2, r3
 8001efa:	4932      	ldr	r1, [pc, #200]	; (8001fc4 <main+0xe0c>)
 8001efc:	482c      	ldr	r0, [pc, #176]	; (8001fb0 <main+0xdf8>)
 8001efe:	f006 f9e5 	bl	80082cc <siprintf>
 8001f02:	482b      	ldr	r0, [pc, #172]	; (8001fb0 <main+0xdf8>)
 8001f04:	f7fe f96c 	bl	80001e0 <strlen>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	b29a      	uxth	r2, r3
 8001f0c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f10:	4927      	ldr	r1, [pc, #156]	; (8001fb0 <main+0xdf8>)
 8001f12:	4828      	ldr	r0, [pc, #160]	; (8001fb4 <main+0xdfc>)
 8001f14:	f004 fc79 	bl	800680a <HAL_UART_Transmit>
			break;
 8001f18:	e038      	b.n	8001f8c <main+0xdd4>
				else if(inputchar=='y')
 8001f1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f1e:	2b79      	cmp	r3, #121	; 0x79
 8001f20:	d118      	bne.n	8001f54 <main+0xd9c>
				{dutycycle-=1;sprintf(TxDataBuffer,"\r\n dutycycle = [%u]\r\n",dutycycle);HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);}
 8001f22:	4b27      	ldr	r3, [pc, #156]	; (8001fc0 <main+0xe08>)
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	3b01      	subs	r3, #1
 8001f28:	b2da      	uxtb	r2, r3
 8001f2a:	4b25      	ldr	r3, [pc, #148]	; (8001fc0 <main+0xe08>)
 8001f2c:	701a      	strb	r2, [r3, #0]
 8001f2e:	4b24      	ldr	r3, [pc, #144]	; (8001fc0 <main+0xe08>)
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	461a      	mov	r2, r3
 8001f34:	4923      	ldr	r1, [pc, #140]	; (8001fc4 <main+0xe0c>)
 8001f36:	481e      	ldr	r0, [pc, #120]	; (8001fb0 <main+0xdf8>)
 8001f38:	f006 f9c8 	bl	80082cc <siprintf>
 8001f3c:	481c      	ldr	r0, [pc, #112]	; (8001fb0 <main+0xdf8>)
 8001f3e:	f7fe f94f 	bl	80001e0 <strlen>
 8001f42:	4603      	mov	r3, r0
 8001f44:	b29a      	uxth	r2, r3
 8001f46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f4a:	4919      	ldr	r1, [pc, #100]	; (8001fb0 <main+0xdf8>)
 8001f4c:	4819      	ldr	r0, [pc, #100]	; (8001fb4 <main+0xdfc>)
 8001f4e:	f004 fc5c 	bl	800680a <HAL_UART_Transmit>
			break;
 8001f52:	e01b      	b.n	8001f8c <main+0xdd4>
				else if(inputchar=='x')
 8001f54:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f58:	2b78      	cmp	r3, #120	; 0x78
 8001f5a:	d103      	bne.n	8001f64 <main+0xdac>
				{state=menu;}
 8001f5c:	4b1a      	ldr	r3, [pc, #104]	; (8001fc8 <main+0xe10>)
 8001f5e:	2201      	movs	r2, #1
 8001f60:	801a      	strh	r2, [r3, #0]
			break;
 8001f62:	e013      	b.n	8001f8c <main+0xdd4>
				else if(inputchar=='e')
 8001f64:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f68:	2b65      	cmp	r3, #101	; 0x65
 8001f6a:	d10f      	bne.n	8001f8c <main+0xdd4>
				{statesin=0;statesaw=0;
 8001f6c:	4b17      	ldr	r3, [pc, #92]	; (8001fcc <main+0xe14>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	801a      	strh	r2, [r3, #0]
 8001f72:	4b17      	ldr	r3, [pc, #92]	; (8001fd0 <main+0xe18>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	801a      	strh	r2, [r3, #0]
					statesq=square;}
 8001f78:	4b16      	ldr	r3, [pc, #88]	; (8001fd4 <main+0xe1c>)
 8001f7a:	220f      	movs	r2, #15
 8001f7c:	801a      	strh	r2, [r3, #0]
			break;
 8001f7e:	e005      	b.n	8001f8c <main+0xdd4>
			break;
 8001f80:	bf00      	nop
 8001f82:	e004      	b.n	8001f8e <main+0xdd6>
			break;
 8001f84:	bf00      	nop
 8001f86:	e002      	b.n	8001f8e <main+0xdd6>
			break;
 8001f88:	bf00      	nop
 8001f8a:	e000      	b.n	8001f8e <main+0xdd6>
			break;
 8001f8c:	bf00      	nop
			}
			switch(statesaw)
 8001f8e:	4b10      	ldr	r3, [pc, #64]	; (8001fd0 <main+0xe18>)
 8001f90:	881b      	ldrh	r3, [r3, #0]
 8001f92:	2b0c      	cmp	r3, #12
 8001f94:	d020      	beq.n	8001fd8 <main+0xe20>
 8001f96:	2b0d      	cmp	r3, #13
 8001f98:	f000 80b7 	beq.w	800210a <main+0xf52>
 8001f9c:	e171      	b.n	8002282 <main+0x10ca>
 8001f9e:	bf00      	nop
 8001fa0:	9999999a 	.word	0x9999999a
 8001fa4:	3fb99999 	.word	0x3fb99999
 8001fa8:	2000001c 	.word	0x2000001c
 8001fac:	0800c204 	.word	0x0800c204
 8001fb0:	20000260 	.word	0x20000260
 8001fb4:	20000440 	.word	0x20000440
 8001fb8:	20000248 	.word	0x20000248
 8001fbc:	0800c218 	.word	0x0800c218
 8001fc0:	20000020 	.word	0x20000020
 8001fc4:	0800c2dc 	.word	0x0800c2dc
 8001fc8:	200002a0 	.word	0x200002a0
 8001fcc:	200002a4 	.word	0x200002a4
 8001fd0:	200002a2 	.word	0x200002a2
 8001fd4:	200002a6 	.word	0x200002a6
			{case slopeup:
				if (micros() - timestamp > 100)
 8001fd8:	f000 fe7a 	bl	8002cd0 <micros>
 8001fdc:	460a      	mov	r2, r1
 8001fde:	4601      	mov	r1, r0
 8001fe0:	4b9b      	ldr	r3, [pc, #620]	; (8002250 <main+0x1098>)
 8001fe2:	e9d3 8900 	ldrd	r8, r9, [r3]
 8001fe6:	460b      	mov	r3, r1
 8001fe8:	4614      	mov	r4, r2
 8001fea:	ebb3 0308 	subs.w	r3, r3, r8
 8001fee:	eb64 0409 	sbc.w	r4, r4, r9
 8001ff2:	2c00      	cmp	r4, #0
 8001ff4:	bf08      	it	eq
 8001ff6:	2b65      	cmpeq	r3, #101	; 0x65
 8001ff8:	f0c0 8120 	bcc.w	800223c <main+0x1084>
				{timestamp = micros();
 8001ffc:	f000 fe68 	bl	8002cd0 <micros>
 8002000:	4603      	mov	r3, r0
 8002002:	460c      	mov	r4, r1
 8002004:	4a92      	ldr	r2, [pc, #584]	; (8002250 <main+0x1098>)
 8002006:	e9c2 3400 	strd	r3, r4, [r2]
				period=1/fq_saw; 							// sawtooth
 800200a:	4b92      	ldr	r3, [pc, #584]	; (8002254 <main+0x109c>)
 800200c:	ed93 7a00 	vldr	s14, [r3]
 8002010:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002014:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002018:	4b8f      	ldr	r3, [pc, #572]	; (8002258 <main+0x10a0>)
 800201a:	edc3 7a00 	vstr	s15, [r3]
				x+=0.0001;
 800201e:	4b8f      	ldr	r3, [pc, #572]	; (800225c <main+0x10a4>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4618      	mov	r0, r3
 8002024:	f7fe fa98 	bl	8000558 <__aeabi_f2d>
 8002028:	a385      	add	r3, pc, #532	; (adr r3, 8002240 <main+0x1088>)
 800202a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800202e:	f7fe f935 	bl	800029c <__adddf3>
 8002032:	4603      	mov	r3, r0
 8002034:	460c      	mov	r4, r1
 8002036:	4618      	mov	r0, r3
 8002038:	4621      	mov	r1, r4
 800203a:	f7fe fddd 	bl	8000bf8 <__aeabi_d2f>
 800203e:	4602      	mov	r2, r0
 8002040:	4b86      	ldr	r3, [pc, #536]	; (800225c <main+0x10a4>)
 8002042:	601a      	str	r2, [r3, #0]
				m=(high_saw-low_saw)/period;
 8002044:	4b86      	ldr	r3, [pc, #536]	; (8002260 <main+0x10a8>)
 8002046:	ed93 7a00 	vldr	s14, [r3]
 800204a:	4b86      	ldr	r3, [pc, #536]	; (8002264 <main+0x10ac>)
 800204c:	edd3 7a00 	vldr	s15, [r3]
 8002050:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002054:	4b80      	ldr	r3, [pc, #512]	; (8002258 <main+0x10a0>)
 8002056:	ed93 7a00 	vldr	s14, [r3]
 800205a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800205e:	4b82      	ldr	r3, [pc, #520]	; (8002268 <main+0x10b0>)
 8002060:	edc3 7a00 	vstr	s15, [r3]
				if(dataOut>=high_saw){dataOut=low_saw;x=0;}
 8002064:	4b81      	ldr	r3, [pc, #516]	; (800226c <main+0x10b4>)
 8002066:	ed93 7a00 	vldr	s14, [r3]
 800206a:	4b7d      	ldr	r3, [pc, #500]	; (8002260 <main+0x10a8>)
 800206c:	edd3 7a00 	vldr	s15, [r3]
 8002070:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002074:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002078:	db08      	blt.n	800208c <main+0xed4>
 800207a:	4b7a      	ldr	r3, [pc, #488]	; (8002264 <main+0x10ac>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a7b      	ldr	r2, [pc, #492]	; (800226c <main+0x10b4>)
 8002080:	6013      	str	r3, [r2, #0]
 8002082:	4b76      	ldr	r3, [pc, #472]	; (800225c <main+0x10a4>)
 8002084:	f04f 0200 	mov.w	r2, #0
 8002088:	601a      	str	r2, [r3, #0]
 800208a:	e00f      	b.n	80020ac <main+0xef4>
				else{dataOut=low_saw+(m*x);}
 800208c:	4b76      	ldr	r3, [pc, #472]	; (8002268 <main+0x10b0>)
 800208e:	ed93 7a00 	vldr	s14, [r3]
 8002092:	4b72      	ldr	r3, [pc, #456]	; (800225c <main+0x10a4>)
 8002094:	edd3 7a00 	vldr	s15, [r3]
 8002098:	ee27 7a27 	vmul.f32	s14, s14, s15
 800209c:	4b71      	ldr	r3, [pc, #452]	; (8002264 <main+0x10ac>)
 800209e:	edd3 7a00 	vldr	s15, [r3]
 80020a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020a6:	4b71      	ldr	r3, [pc, #452]	; (800226c <main+0x10b4>)
 80020a8:	edc3 7a00 	vstr	s15, [r3]
				if (hspi3.State == HAL_SPI_STATE_READY&& HAL_GPIO_ReadPin(SPI_SS_GPIO_Port, SPI_SS_Pin)== GPIO_PIN_SET)
 80020ac:	4b70      	ldr	r3, [pc, #448]	; (8002270 <main+0x10b8>)
 80020ae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	f040 80c1 	bne.w	800223c <main+0x1084>
 80020ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80020be:	486d      	ldr	r0, [pc, #436]	; (8002274 <main+0x10bc>)
 80020c0:	f002 fc94 	bl	80049ec <HAL_GPIO_ReadPin>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	f040 80b8 	bne.w	800223c <main+0x1084>
				{MCP4922SetOutput(DACConfig, dataOut*4096/3.3);}
 80020cc:	4b6a      	ldr	r3, [pc, #424]	; (8002278 <main+0x10c0>)
 80020ce:	781c      	ldrb	r4, [r3, #0]
 80020d0:	4b66      	ldr	r3, [pc, #408]	; (800226c <main+0x10b4>)
 80020d2:	edd3 7a00 	vldr	s15, [r3]
 80020d6:	ed9f 7a69 	vldr	s14, [pc, #420]	; 800227c <main+0x10c4>
 80020da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020de:	ee17 0a90 	vmov	r0, s15
 80020e2:	f7fe fa39 	bl	8000558 <__aeabi_f2d>
 80020e6:	a358      	add	r3, pc, #352	; (adr r3, 8002248 <main+0x1090>)
 80020e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ec:	f7fe fbb6 	bl	800085c <__aeabi_ddiv>
 80020f0:	4602      	mov	r2, r0
 80020f2:	460b      	mov	r3, r1
 80020f4:	4610      	mov	r0, r2
 80020f6:	4619      	mov	r1, r3
 80020f8:	f7fe fd5e 	bl	8000bb8 <__aeabi_d2uiz>
 80020fc:	4603      	mov	r3, r0
 80020fe:	b29b      	uxth	r3, r3
 8002100:	4619      	mov	r1, r3
 8002102:	4620      	mov	r0, r4
 8002104:	f000 fd40 	bl	8002b88 <MCP4922SetOutput>
				}
		     break;
 8002108:	e098      	b.n	800223c <main+0x1084>
			case slopedown:
				if (micros() - timestamp > 100)
 800210a:	f000 fde1 	bl	8002cd0 <micros>
 800210e:	460a      	mov	r2, r1
 8002110:	4601      	mov	r1, r0
 8002112:	4b4f      	ldr	r3, [pc, #316]	; (8002250 <main+0x1098>)
 8002114:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002118:	460b      	mov	r3, r1
 800211a:	4614      	mov	r4, r2
 800211c:	ebb3 0308 	subs.w	r3, r3, r8
 8002120:	eb64 0409 	sbc.w	r4, r4, r9
 8002124:	2c00      	cmp	r4, #0
 8002126:	bf08      	it	eq
 8002128:	2b65      	cmpeq	r3, #101	; 0x65
 800212a:	f0c0 80a9 	bcc.w	8002280 <main+0x10c8>
					{timestamp = micros();
 800212e:	f000 fdcf 	bl	8002cd0 <micros>
 8002132:	4603      	mov	r3, r0
 8002134:	460c      	mov	r4, r1
 8002136:	4a46      	ldr	r2, [pc, #280]	; (8002250 <main+0x1098>)
 8002138:	e9c2 3400 	strd	r3, r4, [r2]
					period=1/fq_saw; 							//invese sawtooth
 800213c:	4b45      	ldr	r3, [pc, #276]	; (8002254 <main+0x109c>)
 800213e:	ed93 7a00 	vldr	s14, [r3]
 8002142:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002146:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800214a:	4b43      	ldr	r3, [pc, #268]	; (8002258 <main+0x10a0>)
 800214c:	edc3 7a00 	vstr	s15, [r3]
					x+=0.0001;
 8002150:	4b42      	ldr	r3, [pc, #264]	; (800225c <main+0x10a4>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4618      	mov	r0, r3
 8002156:	f7fe f9ff 	bl	8000558 <__aeabi_f2d>
 800215a:	a339      	add	r3, pc, #228	; (adr r3, 8002240 <main+0x1088>)
 800215c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002160:	f7fe f89c 	bl	800029c <__adddf3>
 8002164:	4603      	mov	r3, r0
 8002166:	460c      	mov	r4, r1
 8002168:	4618      	mov	r0, r3
 800216a:	4621      	mov	r1, r4
 800216c:	f7fe fd44 	bl	8000bf8 <__aeabi_d2f>
 8002170:	4602      	mov	r2, r0
 8002172:	4b3a      	ldr	r3, [pc, #232]	; (800225c <main+0x10a4>)
 8002174:	601a      	str	r2, [r3, #0]
					m=-1*(high_saw-low_saw)/period;
 8002176:	4b3a      	ldr	r3, [pc, #232]	; (8002260 <main+0x10a8>)
 8002178:	ed93 7a00 	vldr	s14, [r3]
 800217c:	4b39      	ldr	r3, [pc, #228]	; (8002264 <main+0x10ac>)
 800217e:	edd3 7a00 	vldr	s15, [r3]
 8002182:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002186:	eef1 6a67 	vneg.f32	s13, s15
 800218a:	4b33      	ldr	r3, [pc, #204]	; (8002258 <main+0x10a0>)
 800218c:	ed93 7a00 	vldr	s14, [r3]
 8002190:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002194:	4b34      	ldr	r3, [pc, #208]	; (8002268 <main+0x10b0>)
 8002196:	edc3 7a00 	vstr	s15, [r3]
					if(dataOut<=low_saw){dataOut=high_saw;x=0;}
 800219a:	4b34      	ldr	r3, [pc, #208]	; (800226c <main+0x10b4>)
 800219c:	ed93 7a00 	vldr	s14, [r3]
 80021a0:	4b30      	ldr	r3, [pc, #192]	; (8002264 <main+0x10ac>)
 80021a2:	edd3 7a00 	vldr	s15, [r3]
 80021a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80021aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021ae:	d808      	bhi.n	80021c2 <main+0x100a>
 80021b0:	4b2b      	ldr	r3, [pc, #172]	; (8002260 <main+0x10a8>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a2d      	ldr	r2, [pc, #180]	; (800226c <main+0x10b4>)
 80021b6:	6013      	str	r3, [r2, #0]
 80021b8:	4b28      	ldr	r3, [pc, #160]	; (800225c <main+0x10a4>)
 80021ba:	f04f 0200 	mov.w	r2, #0
 80021be:	601a      	str	r2, [r3, #0]
 80021c0:	e00f      	b.n	80021e2 <main+0x102a>
					else{dataOut=high_saw+(m*x);}
 80021c2:	4b29      	ldr	r3, [pc, #164]	; (8002268 <main+0x10b0>)
 80021c4:	ed93 7a00 	vldr	s14, [r3]
 80021c8:	4b24      	ldr	r3, [pc, #144]	; (800225c <main+0x10a4>)
 80021ca:	edd3 7a00 	vldr	s15, [r3]
 80021ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80021d2:	4b23      	ldr	r3, [pc, #140]	; (8002260 <main+0x10a8>)
 80021d4:	edd3 7a00 	vldr	s15, [r3]
 80021d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021dc:	4b23      	ldr	r3, [pc, #140]	; (800226c <main+0x10b4>)
 80021de:	edc3 7a00 	vstr	s15, [r3]
					if (hspi3.State == HAL_SPI_STATE_READY&& HAL_GPIO_ReadPin(SPI_SS_GPIO_Port, SPI_SS_Pin)== GPIO_PIN_SET)
 80021e2:	4b23      	ldr	r3, [pc, #140]	; (8002270 <main+0x10b8>)
 80021e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d148      	bne.n	8002280 <main+0x10c8>
 80021ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80021f2:	4820      	ldr	r0, [pc, #128]	; (8002274 <main+0x10bc>)
 80021f4:	f002 fbfa 	bl	80049ec <HAL_GPIO_ReadPin>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d140      	bne.n	8002280 <main+0x10c8>
					{MCP4922SetOutput(DACConfig, dataOut*4096/3.3);}
 80021fe:	4b1e      	ldr	r3, [pc, #120]	; (8002278 <main+0x10c0>)
 8002200:	781c      	ldrb	r4, [r3, #0]
 8002202:	4b1a      	ldr	r3, [pc, #104]	; (800226c <main+0x10b4>)
 8002204:	edd3 7a00 	vldr	s15, [r3]
 8002208:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800227c <main+0x10c4>
 800220c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002210:	ee17 0a90 	vmov	r0, s15
 8002214:	f7fe f9a0 	bl	8000558 <__aeabi_f2d>
 8002218:	a30b      	add	r3, pc, #44	; (adr r3, 8002248 <main+0x1090>)
 800221a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800221e:	f7fe fb1d 	bl	800085c <__aeabi_ddiv>
 8002222:	4602      	mov	r2, r0
 8002224:	460b      	mov	r3, r1
 8002226:	4610      	mov	r0, r2
 8002228:	4619      	mov	r1, r3
 800222a:	f7fe fcc5 	bl	8000bb8 <__aeabi_d2uiz>
 800222e:	4603      	mov	r3, r0
 8002230:	b29b      	uxth	r3, r3
 8002232:	4619      	mov	r1, r3
 8002234:	4620      	mov	r0, r4
 8002236:	f000 fca7 	bl	8002b88 <MCP4922SetOutput>
					}
			 break;
 800223a:	e021      	b.n	8002280 <main+0x10c8>
		     break;
 800223c:	bf00      	nop
 800223e:	e020      	b.n	8002282 <main+0x10ca>
 8002240:	eb1c432d 	.word	0xeb1c432d
 8002244:	3f1a36e2 	.word	0x3f1a36e2
 8002248:	66666666 	.word	0x66666666
 800224c:	400a6666 	.word	0x400a6666
 8002250:	200002a8 	.word	0x200002a8
 8002254:	20000008 	.word	0x20000008
 8002258:	2000023c 	.word	0x2000023c
 800225c:	2000024c 	.word	0x2000024c
 8002260:	20000000 	.word	0x20000000
 8002264:	20000238 	.word	0x20000238
 8002268:	20000240 	.word	0x20000240
 800226c:	20000228 	.word	0x20000228
 8002270:	20000300 	.word	0x20000300
 8002274:	40020400 	.word	0x40020400
 8002278:	2000000c 	.word	0x2000000c
 800227c:	45800000 	.word	0x45800000
			 break;
 8002280:	bf00      	nop
			}

			switch(statesin)
 8002282:	4bbd      	ldr	r3, [pc, #756]	; (8002578 <main+0x13c0>)
 8002284:	881b      	ldrh	r3, [r3, #0]
 8002286:	2b0e      	cmp	r3, #14
 8002288:	f040 80b7 	bne.w	80023fa <main+0x1242>
			{case sine:
				if (micros() - ts_sin > 100)
 800228c:	f000 fd20 	bl	8002cd0 <micros>
 8002290:	460a      	mov	r2, r1
 8002292:	4601      	mov	r1, r0
 8002294:	4bb9      	ldr	r3, [pc, #740]	; (800257c <main+0x13c4>)
 8002296:	e9d3 8900 	ldrd	r8, r9, [r3]
 800229a:	460b      	mov	r3, r1
 800229c:	4614      	mov	r4, r2
 800229e:	ebb3 0308 	subs.w	r3, r3, r8
 80022a2:	eb64 0409 	sbc.w	r4, r4, r9
 80022a6:	2c00      	cmp	r4, #0
 80022a8:	bf08      	it	eq
 80022aa:	2b65      	cmpeq	r3, #101	; 0x65
 80022ac:	f0c0 80a4 	bcc.w	80023f8 <main+0x1240>
				{ts_sin = micros();
 80022b0:	f000 fd0e 	bl	8002cd0 <micros>
 80022b4:	4603      	mov	r3, r0
 80022b6:	460c      	mov	r4, r1
 80022b8:	4ab0      	ldr	r2, [pc, #704]	; (800257c <main+0x13c4>)
 80022ba:	e9c2 3400 	strd	r3, r4, [r2]
				x+=0.0001;
 80022be:	4bb0      	ldr	r3, [pc, #704]	; (8002580 <main+0x13c8>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4618      	mov	r0, r3
 80022c4:	f7fe f948 	bl	8000558 <__aeabi_f2d>
 80022c8:	a3a5      	add	r3, pc, #660	; (adr r3, 8002560 <main+0x13a8>)
 80022ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022ce:	f7fd ffe5 	bl	800029c <__adddf3>
 80022d2:	4603      	mov	r3, r0
 80022d4:	460c      	mov	r4, r1
 80022d6:	4618      	mov	r0, r3
 80022d8:	4621      	mov	r1, r4
 80022da:	f7fe fc8d 	bl	8000bf8 <__aeabi_d2f>
 80022de:	4602      	mov	r2, r0
 80022e0:	4ba7      	ldr	r3, [pc, #668]	; (8002580 <main+0x13c8>)
 80022e2:	601a      	str	r2, [r3, #0]
				dataOut =  (((high_sin-low_sin)/2)*(sin(2*3.141592*fq_sin*x)))+((high_sin+low_sin)/2);  //sin wave +shift 3.3/0
 80022e4:	4ba7      	ldr	r3, [pc, #668]	; (8002584 <main+0x13cc>)
 80022e6:	ed93 7a00 	vldr	s14, [r3]
 80022ea:	4ba7      	ldr	r3, [pc, #668]	; (8002588 <main+0x13d0>)
 80022ec:	edd3 7a00 	vldr	s15, [r3]
 80022f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022f4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80022f8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80022fc:	ee16 0a90 	vmov	r0, s13
 8002300:	f7fe f92a 	bl	8000558 <__aeabi_f2d>
 8002304:	4604      	mov	r4, r0
 8002306:	460d      	mov	r5, r1
 8002308:	4ba0      	ldr	r3, [pc, #640]	; (800258c <main+0x13d4>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4618      	mov	r0, r3
 800230e:	f7fe f923 	bl	8000558 <__aeabi_f2d>
 8002312:	a395      	add	r3, pc, #596	; (adr r3, 8002568 <main+0x13b0>)
 8002314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002318:	f7fe f976 	bl	8000608 <__aeabi_dmul>
 800231c:	4602      	mov	r2, r0
 800231e:	460b      	mov	r3, r1
 8002320:	4690      	mov	r8, r2
 8002322:	4699      	mov	r9, r3
 8002324:	4b96      	ldr	r3, [pc, #600]	; (8002580 <main+0x13c8>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4618      	mov	r0, r3
 800232a:	f7fe f915 	bl	8000558 <__aeabi_f2d>
 800232e:	4602      	mov	r2, r0
 8002330:	460b      	mov	r3, r1
 8002332:	4640      	mov	r0, r8
 8002334:	4649      	mov	r1, r9
 8002336:	f7fe f967 	bl	8000608 <__aeabi_dmul>
 800233a:	4602      	mov	r2, r0
 800233c:	460b      	mov	r3, r1
 800233e:	ec43 2b17 	vmov	d7, r2, r3
 8002342:	eeb0 0a47 	vmov.f32	s0, s14
 8002346:	eef0 0a67 	vmov.f32	s1, s15
 800234a:	f008 feb5 	bl	800b0b8 <sin>
 800234e:	ec53 2b10 	vmov	r2, r3, d0
 8002352:	4620      	mov	r0, r4
 8002354:	4629      	mov	r1, r5
 8002356:	f7fe f957 	bl	8000608 <__aeabi_dmul>
 800235a:	4603      	mov	r3, r0
 800235c:	460c      	mov	r4, r1
 800235e:	4625      	mov	r5, r4
 8002360:	461c      	mov	r4, r3
 8002362:	4b88      	ldr	r3, [pc, #544]	; (8002584 <main+0x13cc>)
 8002364:	ed93 7a00 	vldr	s14, [r3]
 8002368:	4b87      	ldr	r3, [pc, #540]	; (8002588 <main+0x13d0>)
 800236a:	edd3 7a00 	vldr	s15, [r3]
 800236e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002372:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8002376:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800237a:	ee16 0a90 	vmov	r0, s13
 800237e:	f7fe f8eb 	bl	8000558 <__aeabi_f2d>
 8002382:	4602      	mov	r2, r0
 8002384:	460b      	mov	r3, r1
 8002386:	4620      	mov	r0, r4
 8002388:	4629      	mov	r1, r5
 800238a:	f7fd ff87 	bl	800029c <__adddf3>
 800238e:	4603      	mov	r3, r0
 8002390:	460c      	mov	r4, r1
 8002392:	4618      	mov	r0, r3
 8002394:	4621      	mov	r1, r4
 8002396:	f7fe fc2f 	bl	8000bf8 <__aeabi_d2f>
 800239a:	4602      	mov	r2, r0
 800239c:	4b7c      	ldr	r3, [pc, #496]	; (8002590 <main+0x13d8>)
 800239e:	601a      	str	r2, [r3, #0]
				if (hspi3.State == HAL_SPI_STATE_READY&& HAL_GPIO_ReadPin(SPI_SS_GPIO_Port, SPI_SS_Pin)== GPIO_PIN_SET)
 80023a0:	4b7c      	ldr	r3, [pc, #496]	; (8002594 <main+0x13dc>)
 80023a2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d125      	bne.n	80023f8 <main+0x1240>
 80023ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80023b0:	4879      	ldr	r0, [pc, #484]	; (8002598 <main+0x13e0>)
 80023b2:	f002 fb1b 	bl	80049ec <HAL_GPIO_ReadPin>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d11d      	bne.n	80023f8 <main+0x1240>
				{MCP4922SetOutput(DACConfig, dataOut*4096/3.3);}
 80023bc:	4b77      	ldr	r3, [pc, #476]	; (800259c <main+0x13e4>)
 80023be:	781c      	ldrb	r4, [r3, #0]
 80023c0:	4b73      	ldr	r3, [pc, #460]	; (8002590 <main+0x13d8>)
 80023c2:	edd3 7a00 	vldr	s15, [r3]
 80023c6:	ed9f 7a76 	vldr	s14, [pc, #472]	; 80025a0 <main+0x13e8>
 80023ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023ce:	ee17 0a90 	vmov	r0, s15
 80023d2:	f7fe f8c1 	bl	8000558 <__aeabi_f2d>
 80023d6:	a366      	add	r3, pc, #408	; (adr r3, 8002570 <main+0x13b8>)
 80023d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023dc:	f7fe fa3e 	bl	800085c <__aeabi_ddiv>
 80023e0:	4602      	mov	r2, r0
 80023e2:	460b      	mov	r3, r1
 80023e4:	4610      	mov	r0, r2
 80023e6:	4619      	mov	r1, r3
 80023e8:	f7fe fbe6 	bl	8000bb8 <__aeabi_d2uiz>
 80023ec:	4603      	mov	r3, r0
 80023ee:	b29b      	uxth	r3, r3
 80023f0:	4619      	mov	r1, r3
 80023f2:	4620      	mov	r0, r4
 80023f4:	f000 fbc8 	bl	8002b88 <MCP4922SetOutput>
				}
			break;
 80023f8:	bf00      	nop
			}


			switch(statesq)
 80023fa:	4b6a      	ldr	r3, [pc, #424]	; (80025a4 <main+0x13ec>)
 80023fc:	881b      	ldrh	r3, [r3, #0]
 80023fe:	2b04      	cmp	r3, #4
 8002400:	f000 808b 	beq.w	800251a <main+0x1362>
 8002404:	2b0f      	cmp	r3, #15
 8002406:	d002      	beq.n	800240e <main+0x1256>
 8002408:	2b03      	cmp	r3, #3
 800240a:	d02b      	beq.n	8002464 <main+0x12ac>
 800240c:	e119      	b.n	8002642 <main+0x148a>
			{case square:
			period = 1/fq;
 800240e:	4b66      	ldr	r3, [pc, #408]	; (80025a8 <main+0x13f0>)
 8002410:	ed93 7a00 	vldr	s14, [r3]
 8002414:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002418:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800241c:	4b63      	ldr	r3, [pc, #396]	; (80025ac <main+0x13f4>)
 800241e:	edc3 7a00 	vstr	s15, [r3]
			t_off = dutycycle*period/100;
 8002422:	4b63      	ldr	r3, [pc, #396]	; (80025b0 <main+0x13f8>)
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	ee07 3a90 	vmov	s15, r3
 800242a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800242e:	4b5f      	ldr	r3, [pc, #380]	; (80025ac <main+0x13f4>)
 8002430:	edd3 7a00 	vldr	s15, [r3]
 8002434:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002438:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80025b4 <main+0x13fc>
 800243c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002440:	4b5d      	ldr	r3, [pc, #372]	; (80025b8 <main+0x1400>)
 8002442:	edc3 7a00 	vstr	s15, [r3]
			t_on = period-t_off;
 8002446:	4b59      	ldr	r3, [pc, #356]	; (80025ac <main+0x13f4>)
 8002448:	ed93 7a00 	vldr	s14, [r3]
 800244c:	4b5a      	ldr	r3, [pc, #360]	; (80025b8 <main+0x1400>)
 800244e:	edd3 7a00 	vldr	s15, [r3]
 8002452:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002456:	4b59      	ldr	r3, [pc, #356]	; (80025bc <main+0x1404>)
 8002458:	edc3 7a00 	vstr	s15, [r3]
			statesq=on;
 800245c:	4b51      	ldr	r3, [pc, #324]	; (80025a4 <main+0x13ec>)
 800245e:	2203      	movs	r2, #3
 8002460:	801a      	strh	r2, [r3, #0]
			break;
 8002462:	e0ee      	b.n	8002642 <main+0x148a>
			case on:
				if(micros()-ts_square>=t_on*1000000)
 8002464:	f000 fc34 	bl	8002cd0 <micros>
 8002468:	460a      	mov	r2, r1
 800246a:	4601      	mov	r1, r0
 800246c:	4b54      	ldr	r3, [pc, #336]	; (80025c0 <main+0x1408>)
 800246e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002472:	460b      	mov	r3, r1
 8002474:	4614      	mov	r4, r2
 8002476:	ebb3 0308 	subs.w	r3, r3, r8
 800247a:	eb64 0409 	sbc.w	r4, r4, r9
 800247e:	4618      	mov	r0, r3
 8002480:	4621      	mov	r1, r4
 8002482:	f7fe fcd1 	bl	8000e28 <__aeabi_ul2f>
 8002486:	ee06 0a90 	vmov	s13, r0
 800248a:	4b4c      	ldr	r3, [pc, #304]	; (80025bc <main+0x1404>)
 800248c:	edd3 7a00 	vldr	s15, [r3]
 8002490:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 80025c4 <main+0x140c>
 8002494:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002498:	eef4 6ae7 	vcmpe.f32	s13, s15
 800249c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024a0:	da00      	bge.n	80024a4 <main+0x12ec>
				{ dataOut=high_sq;
				ts_square=micros();
				if (hspi3.State == HAL_SPI_STATE_READY&& HAL_GPIO_ReadPin(SPI_SS_GPIO_Port, SPI_SS_Pin)== GPIO_PIN_SET)
				{MCP4922SetOutput(DACConfig, dataOut*4096/3.3);}
				statesq = off;}
			break;
 80024a2:	e0ce      	b.n	8002642 <main+0x148a>
				{ dataOut=high_sq;
 80024a4:	4b48      	ldr	r3, [pc, #288]	; (80025c8 <main+0x1410>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a39      	ldr	r2, [pc, #228]	; (8002590 <main+0x13d8>)
 80024aa:	6013      	str	r3, [r2, #0]
				ts_square=micros();
 80024ac:	f000 fc10 	bl	8002cd0 <micros>
 80024b0:	4603      	mov	r3, r0
 80024b2:	460c      	mov	r4, r1
 80024b4:	4a42      	ldr	r2, [pc, #264]	; (80025c0 <main+0x1408>)
 80024b6:	e9c2 3400 	strd	r3, r4, [r2]
				if (hspi3.State == HAL_SPI_STATE_READY&& HAL_GPIO_ReadPin(SPI_SS_GPIO_Port, SPI_SS_Pin)== GPIO_PIN_SET)
 80024ba:	4b36      	ldr	r3, [pc, #216]	; (8002594 <main+0x13dc>)
 80024bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d125      	bne.n	8002512 <main+0x135a>
 80024c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80024ca:	4833      	ldr	r0, [pc, #204]	; (8002598 <main+0x13e0>)
 80024cc:	f002 fa8e 	bl	80049ec <HAL_GPIO_ReadPin>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d11d      	bne.n	8002512 <main+0x135a>
				{MCP4922SetOutput(DACConfig, dataOut*4096/3.3);}
 80024d6:	4b31      	ldr	r3, [pc, #196]	; (800259c <main+0x13e4>)
 80024d8:	781c      	ldrb	r4, [r3, #0]
 80024da:	4b2d      	ldr	r3, [pc, #180]	; (8002590 <main+0x13d8>)
 80024dc:	edd3 7a00 	vldr	s15, [r3]
 80024e0:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80025a0 <main+0x13e8>
 80024e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024e8:	ee17 0a90 	vmov	r0, s15
 80024ec:	f7fe f834 	bl	8000558 <__aeabi_f2d>
 80024f0:	a31f      	add	r3, pc, #124	; (adr r3, 8002570 <main+0x13b8>)
 80024f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024f6:	f7fe f9b1 	bl	800085c <__aeabi_ddiv>
 80024fa:	4602      	mov	r2, r0
 80024fc:	460b      	mov	r3, r1
 80024fe:	4610      	mov	r0, r2
 8002500:	4619      	mov	r1, r3
 8002502:	f7fe fb59 	bl	8000bb8 <__aeabi_d2uiz>
 8002506:	4603      	mov	r3, r0
 8002508:	b29b      	uxth	r3, r3
 800250a:	4619      	mov	r1, r3
 800250c:	4620      	mov	r0, r4
 800250e:	f000 fb3b 	bl	8002b88 <MCP4922SetOutput>
				statesq = off;}
 8002512:	4b24      	ldr	r3, [pc, #144]	; (80025a4 <main+0x13ec>)
 8002514:	2204      	movs	r2, #4
 8002516:	801a      	strh	r2, [r3, #0]
			break;
 8002518:	e093      	b.n	8002642 <main+0x148a>
			case off:
				if(micros()-ts_square>=t_off*1000000)
 800251a:	f000 fbd9 	bl	8002cd0 <micros>
 800251e:	460a      	mov	r2, r1
 8002520:	4601      	mov	r1, r0
 8002522:	4b27      	ldr	r3, [pc, #156]	; (80025c0 <main+0x1408>)
 8002524:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002528:	460b      	mov	r3, r1
 800252a:	4614      	mov	r4, r2
 800252c:	ebb3 0308 	subs.w	r3, r3, r8
 8002530:	eb64 0409 	sbc.w	r4, r4, r9
 8002534:	4618      	mov	r0, r3
 8002536:	4621      	mov	r1, r4
 8002538:	f7fe fc76 	bl	8000e28 <__aeabi_ul2f>
 800253c:	ee06 0a90 	vmov	s13, r0
 8002540:	4b1d      	ldr	r3, [pc, #116]	; (80025b8 <main+0x1400>)
 8002542:	edd3 7a00 	vldr	s15, [r3]
 8002546:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80025c4 <main+0x140c>
 800254a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800254e:	eef4 6ae7 	vcmpe.f32	s13, s15
 8002552:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002556:	da39      	bge.n	80025cc <main+0x1414>
				{   ts_square=micros();
					dataOut=low_sq;
					if (hspi3.State == HAL_SPI_STATE_READY&& HAL_GPIO_ReadPin(SPI_SS_GPIO_Port, SPI_SS_Pin)== GPIO_PIN_SET)
					{MCP4922SetOutput(DACConfig, dataOut*4096/3.3);}
					statesq = on;}
			break;
 8002558:	e072      	b.n	8002640 <main+0x1488>
 800255a:	bf00      	nop
 800255c:	f3af 8000 	nop.w
 8002560:	eb1c432d 	.word	0xeb1c432d
 8002564:	3f1a36e2 	.word	0x3f1a36e2
 8002568:	fc8b007a 	.word	0xfc8b007a
 800256c:	401921fa 	.word	0x401921fa
 8002570:	66666666 	.word	0x66666666
 8002574:	400a6666 	.word	0x400a6666
 8002578:	200002a4 	.word	0x200002a4
 800257c:	20000250 	.word	0x20000250
 8002580:	2000024c 	.word	0x2000024c
 8002584:	20000010 	.word	0x20000010
 8002588:	20000244 	.word	0x20000244
 800258c:	20000014 	.word	0x20000014
 8002590:	20000228 	.word	0x20000228
 8002594:	20000300 	.word	0x20000300
 8002598:	40020400 	.word	0x40020400
 800259c:	2000000c 	.word	0x2000000c
 80025a0:	45800000 	.word	0x45800000
 80025a4:	200002a6 	.word	0x200002a6
 80025a8:	20000004 	.word	0x20000004
 80025ac:	2000023c 	.word	0x2000023c
 80025b0:	20000020 	.word	0x20000020
 80025b4:	42c80000 	.word	0x42c80000
 80025b8:	2000025c 	.word	0x2000025c
 80025bc:	20000258 	.word	0x20000258
 80025c0:	20000230 	.word	0x20000230
 80025c4:	49742400 	.word	0x49742400
 80025c8:	2000001c 	.word	0x2000001c
				{   ts_square=micros();
 80025cc:	f000 fb80 	bl	8002cd0 <micros>
 80025d0:	4603      	mov	r3, r0
 80025d2:	460c      	mov	r4, r1
 80025d4:	4a1e      	ldr	r2, [pc, #120]	; (8002650 <main+0x1498>)
 80025d6:	e9c2 3400 	strd	r3, r4, [r2]
					dataOut=low_sq;
 80025da:	4b1e      	ldr	r3, [pc, #120]	; (8002654 <main+0x149c>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a1e      	ldr	r2, [pc, #120]	; (8002658 <main+0x14a0>)
 80025e0:	6013      	str	r3, [r2, #0]
					if (hspi3.State == HAL_SPI_STATE_READY&& HAL_GPIO_ReadPin(SPI_SS_GPIO_Port, SPI_SS_Pin)== GPIO_PIN_SET)
 80025e2:	4b1e      	ldr	r3, [pc, #120]	; (800265c <main+0x14a4>)
 80025e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d125      	bne.n	800263a <main+0x1482>
 80025ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80025f2:	481b      	ldr	r0, [pc, #108]	; (8002660 <main+0x14a8>)
 80025f4:	f002 f9fa 	bl	80049ec <HAL_GPIO_ReadPin>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d11d      	bne.n	800263a <main+0x1482>
					{MCP4922SetOutput(DACConfig, dataOut*4096/3.3);}
 80025fe:	4b19      	ldr	r3, [pc, #100]	; (8002664 <main+0x14ac>)
 8002600:	781c      	ldrb	r4, [r3, #0]
 8002602:	4b15      	ldr	r3, [pc, #84]	; (8002658 <main+0x14a0>)
 8002604:	edd3 7a00 	vldr	s15, [r3]
 8002608:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8002668 <main+0x14b0>
 800260c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002610:	ee17 0a90 	vmov	r0, s15
 8002614:	f7fd ffa0 	bl	8000558 <__aeabi_f2d>
 8002618:	a30b      	add	r3, pc, #44	; (adr r3, 8002648 <main+0x1490>)
 800261a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800261e:	f7fe f91d 	bl	800085c <__aeabi_ddiv>
 8002622:	4602      	mov	r2, r0
 8002624:	460b      	mov	r3, r1
 8002626:	4610      	mov	r0, r2
 8002628:	4619      	mov	r1, r3
 800262a:	f7fe fac5 	bl	8000bb8 <__aeabi_d2uiz>
 800262e:	4603      	mov	r3, r0
 8002630:	b29b      	uxth	r3, r3
 8002632:	4619      	mov	r1, r3
 8002634:	4620      	mov	r0, r4
 8002636:	f000 faa7 	bl	8002b88 <MCP4922SetOutput>
					statesq = on;}
 800263a:	4b0c      	ldr	r3, [pc, #48]	; (800266c <main+0x14b4>)
 800263c:	2203      	movs	r2, #3
 800263e:	801a      	strh	r2, [r3, #0]
			break;
 8002640:	bf00      	nop
	{
 8002642:	f7fe bde0 	b.w	8001206 <main+0x4e>
 8002646:	bf00      	nop
 8002648:	66666666 	.word	0x66666666
 800264c:	400a6666 	.word	0x400a6666
 8002650:	20000230 	.word	0x20000230
 8002654:	20000248 	.word	0x20000248
 8002658:	20000228 	.word	0x20000228
 800265c:	20000300 	.word	0x20000300
 8002660:	40020400 	.word	0x40020400
 8002664:	2000000c 	.word	0x2000000c
 8002668:	45800000 	.word	0x45800000
 800266c:	200002a6 	.word	0x200002a6

08002670 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b09a      	sub	sp, #104	; 0x68
 8002674:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002676:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800267a:	2230      	movs	r2, #48	; 0x30
 800267c:	2100      	movs	r1, #0
 800267e:	4618      	mov	r0, r3
 8002680:	f004 ffd8 	bl	8007634 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002684:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002688:	2200      	movs	r2, #0
 800268a:	601a      	str	r2, [r3, #0]
 800268c:	605a      	str	r2, [r3, #4]
 800268e:	609a      	str	r2, [r3, #8]
 8002690:	60da      	str	r2, [r3, #12]
 8002692:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002694:	f107 030c 	add.w	r3, r7, #12
 8002698:	2200      	movs	r2, #0
 800269a:	601a      	str	r2, [r3, #0]
 800269c:	605a      	str	r2, [r3, #4]
 800269e:	609a      	str	r2, [r3, #8]
 80026a0:	60da      	str	r2, [r3, #12]
 80026a2:	611a      	str	r2, [r3, #16]
 80026a4:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80026a6:	2300      	movs	r3, #0
 80026a8:	60bb      	str	r3, [r7, #8]
 80026aa:	4b31      	ldr	r3, [pc, #196]	; (8002770 <SystemClock_Config+0x100>)
 80026ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ae:	4a30      	ldr	r2, [pc, #192]	; (8002770 <SystemClock_Config+0x100>)
 80026b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026b4:	6413      	str	r3, [r2, #64]	; 0x40
 80026b6:	4b2e      	ldr	r3, [pc, #184]	; (8002770 <SystemClock_Config+0x100>)
 80026b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026be:	60bb      	str	r3, [r7, #8]
 80026c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80026c2:	2300      	movs	r3, #0
 80026c4:	607b      	str	r3, [r7, #4]
 80026c6:	4b2b      	ldr	r3, [pc, #172]	; (8002774 <SystemClock_Config+0x104>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a2a      	ldr	r2, [pc, #168]	; (8002774 <SystemClock_Config+0x104>)
 80026cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026d0:	6013      	str	r3, [r2, #0]
 80026d2:	4b28      	ldr	r3, [pc, #160]	; (8002774 <SystemClock_Config+0x104>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80026da:	607b      	str	r3, [r7, #4]
 80026dc:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80026de:	2303      	movs	r3, #3
 80026e0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80026e2:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80026e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80026e8:	2301      	movs	r3, #1
 80026ea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80026ec:	2310      	movs	r3, #16
 80026ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80026f0:	2302      	movs	r3, #2
 80026f2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80026f4:	2300      	movs	r3, #0
 80026f6:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 8;
 80026f8:	2308      	movs	r3, #8
 80026fa:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 100;
 80026fc:	2364      	movs	r3, #100	; 0x64
 80026fe:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002700:	2302      	movs	r3, #2
 8002702:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002704:	2304      	movs	r3, #4
 8002706:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002708:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800270c:	4618      	mov	r0, r3
 800270e:	f002 f99f 	bl	8004a50 <HAL_RCC_OscConfig>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d001      	beq.n	800271c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8002718:	f000 faf4 	bl	8002d04 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800271c:	230f      	movs	r3, #15
 800271e:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002720:	2302      	movs	r3, #2
 8002722:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002724:	2300      	movs	r3, #0
 8002726:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002728:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800272c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800272e:	2300      	movs	r3, #0
 8002730:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002732:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002736:	2103      	movs	r1, #3
 8002738:	4618      	mov	r0, r3
 800273a:	f002 fbf9 	bl	8004f30 <HAL_RCC_ClockConfig>
 800273e:	4603      	mov	r3, r0
 8002740:	2b00      	cmp	r3, #0
 8002742:	d001      	beq.n	8002748 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8002744:	f000 fade 	bl	8002d04 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002748:	2302      	movs	r3, #2
 800274a:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800274c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002750:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002752:	f107 030c 	add.w	r3, r7, #12
 8002756:	4618      	mov	r0, r3
 8002758:	f002 fddc 	bl	8005314 <HAL_RCCEx_PeriphCLKConfig>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d001      	beq.n	8002766 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8002762:	f000 facf 	bl	8002d04 <Error_Handler>
  }
}
 8002766:	bf00      	nop
 8002768:	3768      	adds	r7, #104	; 0x68
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	40023800 	.word	0x40023800
 8002774:	40007000 	.word	0x40007000

08002778 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b084      	sub	sp, #16
 800277c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800277e:	463b      	mov	r3, r7
 8002780:	2200      	movs	r2, #0
 8002782:	601a      	str	r2, [r3, #0]
 8002784:	605a      	str	r2, [r3, #4]
 8002786:	609a      	str	r2, [r3, #8]
 8002788:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800278a:	4b22      	ldr	r3, [pc, #136]	; (8002814 <MX_ADC1_Init+0x9c>)
 800278c:	4a22      	ldr	r2, [pc, #136]	; (8002818 <MX_ADC1_Init+0xa0>)
 800278e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002790:	4b20      	ldr	r3, [pc, #128]	; (8002814 <MX_ADC1_Init+0x9c>)
 8002792:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002796:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002798:	4b1e      	ldr	r3, [pc, #120]	; (8002814 <MX_ADC1_Init+0x9c>)
 800279a:	2200      	movs	r2, #0
 800279c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800279e:	4b1d      	ldr	r3, [pc, #116]	; (8002814 <MX_ADC1_Init+0x9c>)
 80027a0:	2201      	movs	r2, #1
 80027a2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80027a4:	4b1b      	ldr	r3, [pc, #108]	; (8002814 <MX_ADC1_Init+0x9c>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80027aa:	4b1a      	ldr	r3, [pc, #104]	; (8002814 <MX_ADC1_Init+0x9c>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80027b2:	4b18      	ldr	r3, [pc, #96]	; (8002814 <MX_ADC1_Init+0x9c>)
 80027b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80027ba:	4b16      	ldr	r3, [pc, #88]	; (8002814 <MX_ADC1_Init+0x9c>)
 80027bc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80027c0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80027c2:	4b14      	ldr	r3, [pc, #80]	; (8002814 <MX_ADC1_Init+0x9c>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80027c8:	4b12      	ldr	r3, [pc, #72]	; (8002814 <MX_ADC1_Init+0x9c>)
 80027ca:	2201      	movs	r2, #1
 80027cc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80027ce:	4b11      	ldr	r3, [pc, #68]	; (8002814 <MX_ADC1_Init+0x9c>)
 80027d0:	2201      	movs	r2, #1
 80027d2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80027d6:	4b0f      	ldr	r3, [pc, #60]	; (8002814 <MX_ADC1_Init+0x9c>)
 80027d8:	2201      	movs	r2, #1
 80027da:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80027dc:	480d      	ldr	r0, [pc, #52]	; (8002814 <MX_ADC1_Init+0x9c>)
 80027de:	f000 fda7 	bl	8003330 <HAL_ADC_Init>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d001      	beq.n	80027ec <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 80027e8:	f000 fa8c 	bl	8002d04 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80027ec:	2300      	movs	r3, #0
 80027ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80027f0:	2301      	movs	r3, #1
 80027f2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80027f4:	2300      	movs	r3, #0
 80027f6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80027f8:	463b      	mov	r3, r7
 80027fa:	4619      	mov	r1, r3
 80027fc:	4805      	ldr	r0, [pc, #20]	; (8002814 <MX_ADC1_Init+0x9c>)
 80027fe:	f001 f817 	bl	8003830 <HAL_ADC_ConfigChannel>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d001      	beq.n	800280c <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8002808:	f000 fa7c 	bl	8002d04 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800280c:	bf00      	nop
 800280e:	3710      	adds	r7, #16
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}
 8002814:	20000358 	.word	0x20000358
 8002818:	40012000 	.word	0x40012000

0800281c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8002820:	4b18      	ldr	r3, [pc, #96]	; (8002884 <MX_SPI3_Init+0x68>)
 8002822:	4a19      	ldr	r2, [pc, #100]	; (8002888 <MX_SPI3_Init+0x6c>)
 8002824:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002826:	4b17      	ldr	r3, [pc, #92]	; (8002884 <MX_SPI3_Init+0x68>)
 8002828:	f44f 7282 	mov.w	r2, #260	; 0x104
 800282c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800282e:	4b15      	ldr	r3, [pc, #84]	; (8002884 <MX_SPI3_Init+0x68>)
 8002830:	2200      	movs	r2, #0
 8002832:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8002834:	4b13      	ldr	r3, [pc, #76]	; (8002884 <MX_SPI3_Init+0x68>)
 8002836:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800283a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800283c:	4b11      	ldr	r3, [pc, #68]	; (8002884 <MX_SPI3_Init+0x68>)
 800283e:	2200      	movs	r2, #0
 8002840:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002842:	4b10      	ldr	r3, [pc, #64]	; (8002884 <MX_SPI3_Init+0x68>)
 8002844:	2200      	movs	r2, #0
 8002846:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002848:	4b0e      	ldr	r3, [pc, #56]	; (8002884 <MX_SPI3_Init+0x68>)
 800284a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800284e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002850:	4b0c      	ldr	r3, [pc, #48]	; (8002884 <MX_SPI3_Init+0x68>)
 8002852:	2208      	movs	r2, #8
 8002854:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002856:	4b0b      	ldr	r3, [pc, #44]	; (8002884 <MX_SPI3_Init+0x68>)
 8002858:	2200      	movs	r2, #0
 800285a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800285c:	4b09      	ldr	r3, [pc, #36]	; (8002884 <MX_SPI3_Init+0x68>)
 800285e:	2200      	movs	r2, #0
 8002860:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002862:	4b08      	ldr	r3, [pc, #32]	; (8002884 <MX_SPI3_Init+0x68>)
 8002864:	2200      	movs	r2, #0
 8002866:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8002868:	4b06      	ldr	r3, [pc, #24]	; (8002884 <MX_SPI3_Init+0x68>)
 800286a:	220a      	movs	r2, #10
 800286c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800286e:	4805      	ldr	r0, [pc, #20]	; (8002884 <MX_SPI3_Init+0x68>)
 8002870:	f002 fe40 	bl	80054f4 <HAL_SPI_Init>
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	d001      	beq.n	800287e <MX_SPI3_Init+0x62>
  {
    Error_Handler();
 800287a:	f000 fa43 	bl	8002d04 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800287e:	bf00      	nop
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	20000300 	.word	0x20000300
 8002888:	40003c00 	.word	0x40003c00

0800288c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b086      	sub	sp, #24
 8002890:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002892:	f107 0308 	add.w	r3, r7, #8
 8002896:	2200      	movs	r2, #0
 8002898:	601a      	str	r2, [r3, #0]
 800289a:	605a      	str	r2, [r3, #4]
 800289c:	609a      	str	r2, [r3, #8]
 800289e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028a0:	463b      	mov	r3, r7
 80028a2:	2200      	movs	r2, #0
 80028a4:	601a      	str	r2, [r3, #0]
 80028a6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80028a8:	4b1c      	ldr	r3, [pc, #112]	; (800291c <MX_TIM3_Init+0x90>)
 80028aa:	4a1d      	ldr	r2, [pc, #116]	; (8002920 <MX_TIM3_Init+0x94>)
 80028ac:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 99;
 80028ae:	4b1b      	ldr	r3, [pc, #108]	; (800291c <MX_TIM3_Init+0x90>)
 80028b0:	2263      	movs	r2, #99	; 0x63
 80028b2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028b4:	4b19      	ldr	r3, [pc, #100]	; (800291c <MX_TIM3_Init+0x90>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 80028ba:	4b18      	ldr	r3, [pc, #96]	; (800291c <MX_TIM3_Init+0x90>)
 80028bc:	2264      	movs	r2, #100	; 0x64
 80028be:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028c0:	4b16      	ldr	r3, [pc, #88]	; (800291c <MX_TIM3_Init+0x90>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028c6:	4b15      	ldr	r3, [pc, #84]	; (800291c <MX_TIM3_Init+0x90>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80028cc:	4813      	ldr	r0, [pc, #76]	; (800291c <MX_TIM3_Init+0x90>)
 80028ce:	f003 f969 	bl	8005ba4 <HAL_TIM_Base_Init>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d001      	beq.n	80028dc <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 80028d8:	f000 fa14 	bl	8002d04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028e0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80028e2:	f107 0308 	add.w	r3, r7, #8
 80028e6:	4619      	mov	r1, r3
 80028e8:	480c      	ldr	r0, [pc, #48]	; (800291c <MX_TIM3_Init+0x90>)
 80028ea:	f003 fba7 	bl	800603c <HAL_TIM_ConfigClockSource>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d001      	beq.n	80028f8 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 80028f4:	f000 fa06 	bl	8002d04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80028f8:	2320      	movs	r3, #32
 80028fa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028fc:	2300      	movs	r3, #0
 80028fe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002900:	463b      	mov	r3, r7
 8002902:	4619      	mov	r1, r3
 8002904:	4805      	ldr	r0, [pc, #20]	; (800291c <MX_TIM3_Init+0x90>)
 8002906:	f003 feb1 	bl	800666c <HAL_TIMEx_MasterConfigSynchronization>
 800290a:	4603      	mov	r3, r0
 800290c:	2b00      	cmp	r3, #0
 800290e:	d001      	beq.n	8002914 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8002910:	f000 f9f8 	bl	8002d04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002914:	bf00      	nop
 8002916:	3718      	adds	r7, #24
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}
 800291c:	200002c0 	.word	0x200002c0
 8002920:	40000400 	.word	0x40000400

08002924 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b084      	sub	sp, #16
 8002928:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 800292a:	463b      	mov	r3, r7
 800292c:	2200      	movs	r2, #0
 800292e:	601a      	str	r2, [r3, #0]
 8002930:	605a      	str	r2, [r3, #4]
 8002932:	609a      	str	r2, [r3, #8]
 8002934:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8002936:	4b1d      	ldr	r3, [pc, #116]	; (80029ac <MX_TIM11_Init+0x88>)
 8002938:	4a1d      	ldr	r2, [pc, #116]	; (80029b0 <MX_TIM11_Init+0x8c>)
 800293a:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 800293c:	4b1b      	ldr	r3, [pc, #108]	; (80029ac <MX_TIM11_Init+0x88>)
 800293e:	2263      	movs	r2, #99	; 0x63
 8002940:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002942:	4b1a      	ldr	r3, [pc, #104]	; (80029ac <MX_TIM11_Init+0x88>)
 8002944:	2200      	movs	r2, #0
 8002946:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8002948:	4b18      	ldr	r3, [pc, #96]	; (80029ac <MX_TIM11_Init+0x88>)
 800294a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800294e:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002950:	4b16      	ldr	r3, [pc, #88]	; (80029ac <MX_TIM11_Init+0x88>)
 8002952:	2200      	movs	r2, #0
 8002954:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002956:	4b15      	ldr	r3, [pc, #84]	; (80029ac <MX_TIM11_Init+0x88>)
 8002958:	2200      	movs	r2, #0
 800295a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800295c:	4813      	ldr	r0, [pc, #76]	; (80029ac <MX_TIM11_Init+0x88>)
 800295e:	f003 f921 	bl	8005ba4 <HAL_TIM_Base_Init>
 8002962:	4603      	mov	r3, r0
 8002964:	2b00      	cmp	r3, #0
 8002966:	d001      	beq.n	800296c <MX_TIM11_Init+0x48>
  {
    Error_Handler();
 8002968:	f000 f9cc 	bl	8002d04 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim11) != HAL_OK)
 800296c:	480f      	ldr	r0, [pc, #60]	; (80029ac <MX_TIM11_Init+0x88>)
 800296e:	f003 f98c 	bl	8005c8a <HAL_TIM_IC_Init>
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d001      	beq.n	800297c <MX_TIM11_Init+0x58>
  {
    Error_Handler();
 8002978:	f000 f9c4 	bl	8002d04 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800297c:	2300      	movs	r3, #0
 800297e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002980:	2301      	movs	r3, #1
 8002982:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002984:	2300      	movs	r3, #0
 8002986:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002988:	2300      	movs	r3, #0
 800298a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim11, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800298c:	463b      	mov	r3, r7
 800298e:	2200      	movs	r2, #0
 8002990:	4619      	mov	r1, r3
 8002992:	4806      	ldr	r0, [pc, #24]	; (80029ac <MX_TIM11_Init+0x88>)
 8002994:	f003 fab6 	bl	8005f04 <HAL_TIM_IC_ConfigChannel>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d001      	beq.n	80029a2 <MX_TIM11_Init+0x7e>
  {
    Error_Handler();
 800299e:	f000 f9b1 	bl	8002d04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80029a2:	bf00      	nop
 80029a4:	3710      	adds	r7, #16
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	200003a0 	.word	0x200003a0
 80029b0:	40014800 	.word	0x40014800

080029b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80029b8:	4b11      	ldr	r3, [pc, #68]	; (8002a00 <MX_USART2_UART_Init+0x4c>)
 80029ba:	4a12      	ldr	r2, [pc, #72]	; (8002a04 <MX_USART2_UART_Init+0x50>)
 80029bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80029be:	4b10      	ldr	r3, [pc, #64]	; (8002a00 <MX_USART2_UART_Init+0x4c>)
 80029c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80029c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80029c6:	4b0e      	ldr	r3, [pc, #56]	; (8002a00 <MX_USART2_UART_Init+0x4c>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80029cc:	4b0c      	ldr	r3, [pc, #48]	; (8002a00 <MX_USART2_UART_Init+0x4c>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80029d2:	4b0b      	ldr	r3, [pc, #44]	; (8002a00 <MX_USART2_UART_Init+0x4c>)
 80029d4:	2200      	movs	r2, #0
 80029d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80029d8:	4b09      	ldr	r3, [pc, #36]	; (8002a00 <MX_USART2_UART_Init+0x4c>)
 80029da:	220c      	movs	r2, #12
 80029dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029de:	4b08      	ldr	r3, [pc, #32]	; (8002a00 <MX_USART2_UART_Init+0x4c>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80029e4:	4b06      	ldr	r3, [pc, #24]	; (8002a00 <MX_USART2_UART_Init+0x4c>)
 80029e6:	2200      	movs	r2, #0
 80029e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80029ea:	4805      	ldr	r0, [pc, #20]	; (8002a00 <MX_USART2_UART_Init+0x4c>)
 80029ec:	f003 fec0 	bl	8006770 <HAL_UART_Init>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d001      	beq.n	80029fa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80029f6:	f000 f985 	bl	8002d04 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80029fa:	bf00      	nop
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	20000440 	.word	0x20000440
 8002a04:	40004400 	.word	0x40004400

08002a08 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002a0e:	2300      	movs	r3, #0
 8002a10:	607b      	str	r3, [r7, #4]
 8002a12:	4b0c      	ldr	r3, [pc, #48]	; (8002a44 <MX_DMA_Init+0x3c>)
 8002a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a16:	4a0b      	ldr	r2, [pc, #44]	; (8002a44 <MX_DMA_Init+0x3c>)
 8002a18:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a1e:	4b09      	ldr	r3, [pc, #36]	; (8002a44 <MX_DMA_Init+0x3c>)
 8002a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a26:	607b      	str	r3, [r7, #4]
 8002a28:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	2100      	movs	r1, #0
 8002a2e:	2038      	movs	r0, #56	; 0x38
 8002a30:	f001 fa93 	bl	8003f5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002a34:	2038      	movs	r0, #56	; 0x38
 8002a36:	f001 faac 	bl	8003f92 <HAL_NVIC_EnableIRQ>

}
 8002a3a:	bf00      	nop
 8002a3c:	3708      	adds	r7, #8
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	40023800 	.word	0x40023800

08002a48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b08a      	sub	sp, #40	; 0x28
 8002a4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a4e:	f107 0314 	add.w	r3, r7, #20
 8002a52:	2200      	movs	r2, #0
 8002a54:	601a      	str	r2, [r3, #0]
 8002a56:	605a      	str	r2, [r3, #4]
 8002a58:	609a      	str	r2, [r3, #8]
 8002a5a:	60da      	str	r2, [r3, #12]
 8002a5c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a5e:	2300      	movs	r3, #0
 8002a60:	613b      	str	r3, [r7, #16]
 8002a62:	4b44      	ldr	r3, [pc, #272]	; (8002b74 <MX_GPIO_Init+0x12c>)
 8002a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a66:	4a43      	ldr	r2, [pc, #268]	; (8002b74 <MX_GPIO_Init+0x12c>)
 8002a68:	f043 0304 	orr.w	r3, r3, #4
 8002a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a6e:	4b41      	ldr	r3, [pc, #260]	; (8002b74 <MX_GPIO_Init+0x12c>)
 8002a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a72:	f003 0304 	and.w	r3, r3, #4
 8002a76:	613b      	str	r3, [r7, #16]
 8002a78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	60fb      	str	r3, [r7, #12]
 8002a7e:	4b3d      	ldr	r3, [pc, #244]	; (8002b74 <MX_GPIO_Init+0x12c>)
 8002a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a82:	4a3c      	ldr	r2, [pc, #240]	; (8002b74 <MX_GPIO_Init+0x12c>)
 8002a84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a88:	6313      	str	r3, [r2, #48]	; 0x30
 8002a8a:	4b3a      	ldr	r3, [pc, #232]	; (8002b74 <MX_GPIO_Init+0x12c>)
 8002a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a92:	60fb      	str	r3, [r7, #12]
 8002a94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a96:	2300      	movs	r3, #0
 8002a98:	60bb      	str	r3, [r7, #8]
 8002a9a:	4b36      	ldr	r3, [pc, #216]	; (8002b74 <MX_GPIO_Init+0x12c>)
 8002a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9e:	4a35      	ldr	r2, [pc, #212]	; (8002b74 <MX_GPIO_Init+0x12c>)
 8002aa0:	f043 0301 	orr.w	r3, r3, #1
 8002aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8002aa6:	4b33      	ldr	r3, [pc, #204]	; (8002b74 <MX_GPIO_Init+0x12c>)
 8002aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aaa:	f003 0301 	and.w	r3, r3, #1
 8002aae:	60bb      	str	r3, [r7, #8]
 8002ab0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	607b      	str	r3, [r7, #4]
 8002ab6:	4b2f      	ldr	r3, [pc, #188]	; (8002b74 <MX_GPIO_Init+0x12c>)
 8002ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aba:	4a2e      	ldr	r2, [pc, #184]	; (8002b74 <MX_GPIO_Init+0x12c>)
 8002abc:	f043 0302 	orr.w	r3, r3, #2
 8002ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ac2:	4b2c      	ldr	r3, [pc, #176]	; (8002b74 <MX_GPIO_Init+0x12c>)
 8002ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac6:	f003 0302 	and.w	r3, r3, #2
 8002aca:	607b      	str	r3, [r7, #4]
 8002acc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002ace:	2200      	movs	r2, #0
 8002ad0:	2120      	movs	r1, #32
 8002ad2:	4829      	ldr	r0, [pc, #164]	; (8002b78 <MX_GPIO_Init+0x130>)
 8002ad4:	f001 ffa2 	bl	8004a1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_SET);
 8002ad8:	2201      	movs	r2, #1
 8002ada:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002ade:	4827      	ldr	r0, [pc, #156]	; (8002b7c <MX_GPIO_Init+0x134>)
 8002ae0:	f001 ff9c 	bl	8004a1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SHDN_GPIO_Port, SHDN_Pin, GPIO_PIN_SET);
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	2180      	movs	r1, #128	; 0x80
 8002ae8:	4825      	ldr	r0, [pc, #148]	; (8002b80 <MX_GPIO_Init+0x138>)
 8002aea:	f001 ff97 	bl	8004a1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LOAD_GPIO_Port, LOAD_Pin, GPIO_PIN_SET);
 8002aee:	2201      	movs	r2, #1
 8002af0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002af4:	4820      	ldr	r0, [pc, #128]	; (8002b78 <MX_GPIO_Init+0x130>)
 8002af6:	f001 ff91 	bl	8004a1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002afa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002afe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002b00:	4b20      	ldr	r3, [pc, #128]	; (8002b84 <MX_GPIO_Init+0x13c>)
 8002b02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b04:	2300      	movs	r3, #0
 8002b06:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002b08:	f107 0314 	add.w	r3, r7, #20
 8002b0c:	4619      	mov	r1, r3
 8002b0e:	481c      	ldr	r0, [pc, #112]	; (8002b80 <MX_GPIO_Init+0x138>)
 8002b10:	f001 fdea 	bl	80046e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LOAD_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LOAD_Pin;
 8002b14:	f44f 7308 	mov.w	r3, #544	; 0x220
 8002b18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b22:	2300      	movs	r3, #0
 8002b24:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b26:	f107 0314 	add.w	r3, r7, #20
 8002b2a:	4619      	mov	r1, r3
 8002b2c:	4812      	ldr	r0, [pc, #72]	; (8002b78 <MX_GPIO_Init+0x130>)
 8002b2e:	f001 fddb 	bl	80046e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_SS_Pin */
  GPIO_InitStruct.Pin = SPI_SS_Pin;
 8002b32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b40:	2300      	movs	r3, #0
 8002b42:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_SS_GPIO_Port, &GPIO_InitStruct);
 8002b44:	f107 0314 	add.w	r3, r7, #20
 8002b48:	4619      	mov	r1, r3
 8002b4a:	480c      	ldr	r0, [pc, #48]	; (8002b7c <MX_GPIO_Init+0x134>)
 8002b4c:	f001 fdcc 	bl	80046e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SHDN_Pin */
  GPIO_InitStruct.Pin = SHDN_Pin;
 8002b50:	2380      	movs	r3, #128	; 0x80
 8002b52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b54:	2301      	movs	r3, #1
 8002b56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SHDN_GPIO_Port, &GPIO_InitStruct);
 8002b60:	f107 0314 	add.w	r3, r7, #20
 8002b64:	4619      	mov	r1, r3
 8002b66:	4806      	ldr	r0, [pc, #24]	; (8002b80 <MX_GPIO_Init+0x138>)
 8002b68:	f001 fdbe 	bl	80046e8 <HAL_GPIO_Init>

}
 8002b6c:	bf00      	nop
 8002b6e:	3728      	adds	r7, #40	; 0x28
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	40023800 	.word	0x40023800
 8002b78:	40020000 	.word	0x40020000
 8002b7c:	40020400 	.word	0x40020400
 8002b80:	40020800 	.word	0x40020800
 8002b84:	10210000 	.word	0x10210000

08002b88 <MCP4922SetOutput>:

/* USER CODE BEGIN 4 */
void MCP4922SetOutput(uint8_t Config, uint16_t DACOutput)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b084      	sub	sp, #16
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	4603      	mov	r3, r0
 8002b90:	460a      	mov	r2, r1
 8002b92:	71fb      	strb	r3, [r7, #7]
 8002b94:	4613      	mov	r3, r2
 8002b96:	80bb      	strh	r3, [r7, #4]
	uint32_t OutputPacket = (DACOutput & 0x0fff) | ((Config & 0xf) << 12);
 8002b98:	88bb      	ldrh	r3, [r7, #4]
 8002b9a:	f3c3 020b 	ubfx	r2, r3, #0, #12
 8002b9e:	79fb      	ldrb	r3, [r7, #7]
 8002ba0:	031b      	lsls	r3, r3, #12
 8002ba2:	b29b      	uxth	r3, r3
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_RESET);
 8002ba8:	2200      	movs	r2, #0
 8002baa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002bae:	4807      	ldr	r0, [pc, #28]	; (8002bcc <MCP4922SetOutput+0x44>)
 8002bb0:	f001 ff34 	bl	8004a1c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_IT(&hspi3, &OutputPacket, 1);
 8002bb4:	f107 030c 	add.w	r3, r7, #12
 8002bb8:	2201      	movs	r2, #1
 8002bba:	4619      	mov	r1, r3
 8002bbc:	4804      	ldr	r0, [pc, #16]	; (8002bd0 <MCP4922SetOutput+0x48>)
 8002bbe:	f002 fcfd 	bl	80055bc <HAL_SPI_Transmit_IT>
}
 8002bc2:	bf00      	nop
 8002bc4:	3710      	adds	r7, #16
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	40020400 	.word	0x40020400
 8002bd0:	20000300 	.word	0x20000300

08002bd4 <UARTRecieveIT>:
int16_t UARTRecieveIT()
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b083      	sub	sp, #12
 8002bd8:	af00      	add	r7, sp, #0
	static uint32_t dataPos =0;
	int16_t data=-1;
 8002bda:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002bde:	80fb      	strh	r3, [r7, #6]

	if(huart2.RxXferSize - huart2.RxXferCount!=dataPos)
 8002be0:	4b12      	ldr	r3, [pc, #72]	; (8002c2c <UARTRecieveIT+0x58>)
 8002be2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002be4:	461a      	mov	r2, r3
 8002be6:	4b11      	ldr	r3, [pc, #68]	; (8002c2c <UARTRecieveIT+0x58>)
 8002be8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	461a      	mov	r2, r3
 8002bf0:	4b0f      	ldr	r3, [pc, #60]	; (8002c30 <UARTRecieveIT+0x5c>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d010      	beq.n	8002c1a <UARTRecieveIT+0x46>
	{
		data=RxDataBuffer[dataPos];
 8002bf8:	4b0d      	ldr	r3, [pc, #52]	; (8002c30 <UARTRecieveIT+0x5c>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a0d      	ldr	r2, [pc, #52]	; (8002c34 <UARTRecieveIT+0x60>)
 8002bfe:	5cd3      	ldrb	r3, [r2, r3]
 8002c00:	80fb      	strh	r3, [r7, #6]
		dataPos= (dataPos+1)%huart2.RxXferSize;
 8002c02:	4b0b      	ldr	r3, [pc, #44]	; (8002c30 <UARTRecieveIT+0x5c>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	3301      	adds	r3, #1
 8002c08:	4a08      	ldr	r2, [pc, #32]	; (8002c2c <UARTRecieveIT+0x58>)
 8002c0a:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8002c0c:	fbb3 f1f2 	udiv	r1, r3, r2
 8002c10:	fb02 f201 	mul.w	r2, r2, r1
 8002c14:	1a9b      	subs	r3, r3, r2
 8002c16:	4a06      	ldr	r2, [pc, #24]	; (8002c30 <UARTRecieveIT+0x5c>)
 8002c18:	6013      	str	r3, [r2, #0]
	}
	return data;
 8002c1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	370c      	adds	r7, #12
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr
 8002c2a:	bf00      	nop
 8002c2c:	20000440 	.word	0x20000440
 8002c30:	200002b0 	.word	0x200002b0
 8002c34:	20000280 	.word	0x20000280

08002c38 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b082      	sub	sp, #8
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi3)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	4a06      	ldr	r2, [pc, #24]	; (8002c5c <HAL_SPI_TxCpltCallback+0x24>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d105      	bne.n	8002c54 <HAL_SPI_TxCpltCallback+0x1c>
	{
		HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_SET);
 8002c48:	2201      	movs	r2, #1
 8002c4a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002c4e:	4804      	ldr	r0, [pc, #16]	; (8002c60 <HAL_SPI_TxCpltCallback+0x28>)
 8002c50:	f001 fee4 	bl	8004a1c <HAL_GPIO_WritePin>
	}
}
 8002c54:	bf00      	nop
 8002c56:	3708      	adds	r7, #8
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	20000300 	.word	0x20000300
 8002c60:	40020400 	.word	0x40020400

08002c64 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c64:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 8002c68:	b083      	sub	sp, #12
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	6078      	str	r0, [r7, #4]
	if (htim == &htim11)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4a0b      	ldr	r2, [pc, #44]	; (8002ca0 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d10d      	bne.n	8002c92 <HAL_TIM_PeriodElapsedCallback+0x2e>
	{
		_micro += 65535;
 8002c76:	4b0b      	ldr	r3, [pc, #44]	; (8002ca4 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8002c78:	e9d3 bc00 	ldrd	fp, ip, [r3]
 8002c7c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002c80:	f04f 0200 	mov.w	r2, #0
 8002c84:	eb1b 0301 	adds.w	r3, fp, r1
 8002c88:	eb4c 0402 	adc.w	r4, ip, r2
 8002c8c:	4a05      	ldr	r2, [pc, #20]	; (8002ca4 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8002c8e:	e9c2 3400 	strd	r3, r4, [r2]
	}
}
 8002c92:	bf00      	nop
 8002c94:	370c      	adds	r7, #12
 8002c96:	46bd      	mov	sp, r7
 8002c98:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 8002c9c:	4770      	bx	lr
 8002c9e:	bf00      	nop
 8002ca0:	200003a0 	.word	0x200003a0
 8002ca4:	20000220 	.word	0x20000220

08002ca8 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b082      	sub	sp, #8
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
	sprintf(TxDataBuffer, "Received:[%s]\r\n", RxDataBuffer);
 8002cb0:	4a04      	ldr	r2, [pc, #16]	; (8002cc4 <HAL_UART_RxCpltCallback+0x1c>)
 8002cb2:	4905      	ldr	r1, [pc, #20]	; (8002cc8 <HAL_UART_RxCpltCallback+0x20>)
 8002cb4:	4805      	ldr	r0, [pc, #20]	; (8002ccc <HAL_UART_RxCpltCallback+0x24>)
 8002cb6:	f005 fb09 	bl	80082cc <siprintf>
	//HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
}
 8002cba:	bf00      	nop
 8002cbc:	3708      	adds	r7, #8
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	20000280 	.word	0x20000280
 8002cc8:	0800c2f4 	.word	0x0800c2f4
 8002ccc:	20000260 	.word	0x20000260

08002cd0 <micros>:

inline uint64_t micros()
{
 8002cd0:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 8002cd4:	af00      	add	r7, sp, #0
	return htim11.Instance->CNT + _micro;
 8002cd6:	4b09      	ldr	r3, [pc, #36]	; (8002cfc <micros+0x2c>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cdc:	4619      	mov	r1, r3
 8002cde:	f04f 0200 	mov.w	r2, #0
 8002ce2:	4b07      	ldr	r3, [pc, #28]	; (8002d00 <micros+0x30>)
 8002ce4:	e9d3 bc00 	ldrd	fp, ip, [r3]
 8002ce8:	eb1b 0301 	adds.w	r3, fp, r1
 8002cec:	eb4c 0402 	adc.w	r4, ip, r2
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	4621      	mov	r1, r4
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 8002cfa:	4770      	bx	lr
 8002cfc:	200003a0 	.word	0x200003a0
 8002d00:	20000220 	.word	0x20000220

08002d04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d04:	b480      	push	{r7}
 8002d06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002d08:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002d0a:	e7fe      	b.n	8002d0a <Error_Handler+0x6>

08002d0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b082      	sub	sp, #8
 8002d10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d12:	2300      	movs	r3, #0
 8002d14:	607b      	str	r3, [r7, #4]
 8002d16:	4b10      	ldr	r3, [pc, #64]	; (8002d58 <HAL_MspInit+0x4c>)
 8002d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d1a:	4a0f      	ldr	r2, [pc, #60]	; (8002d58 <HAL_MspInit+0x4c>)
 8002d1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d20:	6453      	str	r3, [r2, #68]	; 0x44
 8002d22:	4b0d      	ldr	r3, [pc, #52]	; (8002d58 <HAL_MspInit+0x4c>)
 8002d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d2a:	607b      	str	r3, [r7, #4]
 8002d2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d2e:	2300      	movs	r3, #0
 8002d30:	603b      	str	r3, [r7, #0]
 8002d32:	4b09      	ldr	r3, [pc, #36]	; (8002d58 <HAL_MspInit+0x4c>)
 8002d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d36:	4a08      	ldr	r2, [pc, #32]	; (8002d58 <HAL_MspInit+0x4c>)
 8002d38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d3c:	6413      	str	r3, [r2, #64]	; 0x40
 8002d3e:	4b06      	ldr	r3, [pc, #24]	; (8002d58 <HAL_MspInit+0x4c>)
 8002d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d46:	603b      	str	r3, [r7, #0]
 8002d48:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002d4a:	2007      	movs	r0, #7
 8002d4c:	f001 f8fa 	bl	8003f44 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d50:	bf00      	nop
 8002d52:	3708      	adds	r7, #8
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	40023800 	.word	0x40023800

08002d5c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b08a      	sub	sp, #40	; 0x28
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d64:	f107 0314 	add.w	r3, r7, #20
 8002d68:	2200      	movs	r2, #0
 8002d6a:	601a      	str	r2, [r3, #0]
 8002d6c:	605a      	str	r2, [r3, #4]
 8002d6e:	609a      	str	r2, [r3, #8]
 8002d70:	60da      	str	r2, [r3, #12]
 8002d72:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a33      	ldr	r2, [pc, #204]	; (8002e48 <HAL_ADC_MspInit+0xec>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d15f      	bne.n	8002e3e <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002d7e:	2300      	movs	r3, #0
 8002d80:	613b      	str	r3, [r7, #16]
 8002d82:	4b32      	ldr	r3, [pc, #200]	; (8002e4c <HAL_ADC_MspInit+0xf0>)
 8002d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d86:	4a31      	ldr	r2, [pc, #196]	; (8002e4c <HAL_ADC_MspInit+0xf0>)
 8002d88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d8c:	6453      	str	r3, [r2, #68]	; 0x44
 8002d8e:	4b2f      	ldr	r3, [pc, #188]	; (8002e4c <HAL_ADC_MspInit+0xf0>)
 8002d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d96:	613b      	str	r3, [r7, #16]
 8002d98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	60fb      	str	r3, [r7, #12]
 8002d9e:	4b2b      	ldr	r3, [pc, #172]	; (8002e4c <HAL_ADC_MspInit+0xf0>)
 8002da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da2:	4a2a      	ldr	r2, [pc, #168]	; (8002e4c <HAL_ADC_MspInit+0xf0>)
 8002da4:	f043 0301 	orr.w	r3, r3, #1
 8002da8:	6313      	str	r3, [r2, #48]	; 0x30
 8002daa:	4b28      	ldr	r3, [pc, #160]	; (8002e4c <HAL_ADC_MspInit+0xf0>)
 8002dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dae:	f003 0301 	and.w	r3, r3, #1
 8002db2:	60fb      	str	r3, [r7, #12]
 8002db4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002db6:	2301      	movs	r3, #1
 8002db8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dc2:	f107 0314 	add.w	r3, r7, #20
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	4821      	ldr	r0, [pc, #132]	; (8002e50 <HAL_ADC_MspInit+0xf4>)
 8002dca:	f001 fc8d 	bl	80046e8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002dce:	4b21      	ldr	r3, [pc, #132]	; (8002e54 <HAL_ADC_MspInit+0xf8>)
 8002dd0:	4a21      	ldr	r2, [pc, #132]	; (8002e58 <HAL_ADC_MspInit+0xfc>)
 8002dd2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002dd4:	4b1f      	ldr	r3, [pc, #124]	; (8002e54 <HAL_ADC_MspInit+0xf8>)
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002dda:	4b1e      	ldr	r3, [pc, #120]	; (8002e54 <HAL_ADC_MspInit+0xf8>)
 8002ddc:	2200      	movs	r2, #0
 8002dde:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002de0:	4b1c      	ldr	r3, [pc, #112]	; (8002e54 <HAL_ADC_MspInit+0xf8>)
 8002de2:	2200      	movs	r2, #0
 8002de4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002de6:	4b1b      	ldr	r3, [pc, #108]	; (8002e54 <HAL_ADC_MspInit+0xf8>)
 8002de8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002dec:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002dee:	4b19      	ldr	r3, [pc, #100]	; (8002e54 <HAL_ADC_MspInit+0xf8>)
 8002df0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002df4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002df6:	4b17      	ldr	r3, [pc, #92]	; (8002e54 <HAL_ADC_MspInit+0xf8>)
 8002df8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002dfc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002dfe:	4b15      	ldr	r3, [pc, #84]	; (8002e54 <HAL_ADC_MspInit+0xf8>)
 8002e00:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e04:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002e06:	4b13      	ldr	r3, [pc, #76]	; (8002e54 <HAL_ADC_MspInit+0xf8>)
 8002e08:	2200      	movs	r2, #0
 8002e0a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e0c:	4b11      	ldr	r3, [pc, #68]	; (8002e54 <HAL_ADC_MspInit+0xf8>)
 8002e0e:	2200      	movs	r2, #0
 8002e10:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002e12:	4810      	ldr	r0, [pc, #64]	; (8002e54 <HAL_ADC_MspInit+0xf8>)
 8002e14:	f001 f8d8 	bl	8003fc8 <HAL_DMA_Init>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d001      	beq.n	8002e22 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8002e1e:	f7ff ff71 	bl	8002d04 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4a0b      	ldr	r2, [pc, #44]	; (8002e54 <HAL_ADC_MspInit+0xf8>)
 8002e26:	639a      	str	r2, [r3, #56]	; 0x38
 8002e28:	4a0a      	ldr	r2, [pc, #40]	; (8002e54 <HAL_ADC_MspInit+0xf8>)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002e2e:	2200      	movs	r2, #0
 8002e30:	2100      	movs	r1, #0
 8002e32:	2012      	movs	r0, #18
 8002e34:	f001 f891 	bl	8003f5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002e38:	2012      	movs	r0, #18
 8002e3a:	f001 f8aa 	bl	8003f92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002e3e:	bf00      	nop
 8002e40:	3728      	adds	r7, #40	; 0x28
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	40012000 	.word	0x40012000
 8002e4c:	40023800 	.word	0x40023800
 8002e50:	40020000 	.word	0x40020000
 8002e54:	200003e0 	.word	0x200003e0
 8002e58:	40026410 	.word	0x40026410

08002e5c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b08a      	sub	sp, #40	; 0x28
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e64:	f107 0314 	add.w	r3, r7, #20
 8002e68:	2200      	movs	r2, #0
 8002e6a:	601a      	str	r2, [r3, #0]
 8002e6c:	605a      	str	r2, [r3, #4]
 8002e6e:	609a      	str	r2, [r3, #8]
 8002e70:	60da      	str	r2, [r3, #12]
 8002e72:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a2c      	ldr	r2, [pc, #176]	; (8002f2c <HAL_SPI_MspInit+0xd0>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d152      	bne.n	8002f24 <HAL_SPI_MspInit+0xc8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002e7e:	2300      	movs	r3, #0
 8002e80:	613b      	str	r3, [r7, #16]
 8002e82:	4b2b      	ldr	r3, [pc, #172]	; (8002f30 <HAL_SPI_MspInit+0xd4>)
 8002e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e86:	4a2a      	ldr	r2, [pc, #168]	; (8002f30 <HAL_SPI_MspInit+0xd4>)
 8002e88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e8c:	6413      	str	r3, [r2, #64]	; 0x40
 8002e8e:	4b28      	ldr	r3, [pc, #160]	; (8002f30 <HAL_SPI_MspInit+0xd4>)
 8002e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e92:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e96:	613b      	str	r3, [r7, #16]
 8002e98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	60fb      	str	r3, [r7, #12]
 8002e9e:	4b24      	ldr	r3, [pc, #144]	; (8002f30 <HAL_SPI_MspInit+0xd4>)
 8002ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea2:	4a23      	ldr	r2, [pc, #140]	; (8002f30 <HAL_SPI_MspInit+0xd4>)
 8002ea4:	f043 0304 	orr.w	r3, r3, #4
 8002ea8:	6313      	str	r3, [r2, #48]	; 0x30
 8002eaa:	4b21      	ldr	r3, [pc, #132]	; (8002f30 <HAL_SPI_MspInit+0xd4>)
 8002eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eae:	f003 0304 	and.w	r3, r3, #4
 8002eb2:	60fb      	str	r3, [r7, #12]
 8002eb4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	60bb      	str	r3, [r7, #8]
 8002eba:	4b1d      	ldr	r3, [pc, #116]	; (8002f30 <HAL_SPI_MspInit+0xd4>)
 8002ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ebe:	4a1c      	ldr	r2, [pc, #112]	; (8002f30 <HAL_SPI_MspInit+0xd4>)
 8002ec0:	f043 0302 	orr.w	r3, r3, #2
 8002ec4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ec6:	4b1a      	ldr	r3, [pc, #104]	; (8002f30 <HAL_SPI_MspInit+0xd4>)
 8002ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eca:	f003 0302 	and.w	r3, r3, #2
 8002ece:	60bb      	str	r3, [r7, #8]
 8002ed0:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC11     ------> SPI3_MISO
    PB3     ------> SPI3_SCK
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002ed2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002ed6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ed8:	2302      	movs	r3, #2
 8002eda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002edc:	2300      	movs	r3, #0
 8002ede:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ee0:	2303      	movs	r3, #3
 8002ee2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002ee4:	2306      	movs	r3, #6
 8002ee6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ee8:	f107 0314 	add.w	r3, r7, #20
 8002eec:	4619      	mov	r1, r3
 8002eee:	4811      	ldr	r0, [pc, #68]	; (8002f34 <HAL_SPI_MspInit+0xd8>)
 8002ef0:	f001 fbfa 	bl	80046e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8002ef4:	2328      	movs	r3, #40	; 0x28
 8002ef6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ef8:	2302      	movs	r3, #2
 8002efa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002efc:	2300      	movs	r3, #0
 8002efe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f00:	2303      	movs	r3, #3
 8002f02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002f04:	2306      	movs	r3, #6
 8002f06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f08:	f107 0314 	add.w	r3, r7, #20
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	480a      	ldr	r0, [pc, #40]	; (8002f38 <HAL_SPI_MspInit+0xdc>)
 8002f10:	f001 fbea 	bl	80046e8 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8002f14:	2200      	movs	r2, #0
 8002f16:	2100      	movs	r1, #0
 8002f18:	2033      	movs	r0, #51	; 0x33
 8002f1a:	f001 f81e 	bl	8003f5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8002f1e:	2033      	movs	r0, #51	; 0x33
 8002f20:	f001 f837 	bl	8003f92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002f24:	bf00      	nop
 8002f26:	3728      	adds	r7, #40	; 0x28
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	40003c00 	.word	0x40003c00
 8002f30:	40023800 	.word	0x40023800
 8002f34:	40020800 	.word	0x40020800
 8002f38:	40020400 	.word	0x40020400

08002f3c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b08a      	sub	sp, #40	; 0x28
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f44:	f107 0314 	add.w	r3, r7, #20
 8002f48:	2200      	movs	r2, #0
 8002f4a:	601a      	str	r2, [r3, #0]
 8002f4c:	605a      	str	r2, [r3, #4]
 8002f4e:	609a      	str	r2, [r3, #8]
 8002f50:	60da      	str	r2, [r3, #12]
 8002f52:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM3)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a27      	ldr	r2, [pc, #156]	; (8002ff8 <HAL_TIM_Base_MspInit+0xbc>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d10e      	bne.n	8002f7c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002f5e:	2300      	movs	r3, #0
 8002f60:	613b      	str	r3, [r7, #16]
 8002f62:	4b26      	ldr	r3, [pc, #152]	; (8002ffc <HAL_TIM_Base_MspInit+0xc0>)
 8002f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f66:	4a25      	ldr	r2, [pc, #148]	; (8002ffc <HAL_TIM_Base_MspInit+0xc0>)
 8002f68:	f043 0302 	orr.w	r3, r3, #2
 8002f6c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f6e:	4b23      	ldr	r3, [pc, #140]	; (8002ffc <HAL_TIM_Base_MspInit+0xc0>)
 8002f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f72:	f003 0302 	and.w	r3, r3, #2
 8002f76:	613b      	str	r3, [r7, #16]
 8002f78:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8002f7a:	e039      	b.n	8002ff0 <HAL_TIM_Base_MspInit+0xb4>
  else if(htim_base->Instance==TIM11)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a1f      	ldr	r2, [pc, #124]	; (8003000 <HAL_TIM_Base_MspInit+0xc4>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d134      	bne.n	8002ff0 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002f86:	2300      	movs	r3, #0
 8002f88:	60fb      	str	r3, [r7, #12]
 8002f8a:	4b1c      	ldr	r3, [pc, #112]	; (8002ffc <HAL_TIM_Base_MspInit+0xc0>)
 8002f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f8e:	4a1b      	ldr	r2, [pc, #108]	; (8002ffc <HAL_TIM_Base_MspInit+0xc0>)
 8002f90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f94:	6453      	str	r3, [r2, #68]	; 0x44
 8002f96:	4b19      	ldr	r3, [pc, #100]	; (8002ffc <HAL_TIM_Base_MspInit+0xc0>)
 8002f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f9e:	60fb      	str	r3, [r7, #12]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	60bb      	str	r3, [r7, #8]
 8002fa6:	4b15      	ldr	r3, [pc, #84]	; (8002ffc <HAL_TIM_Base_MspInit+0xc0>)
 8002fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002faa:	4a14      	ldr	r2, [pc, #80]	; (8002ffc <HAL_TIM_Base_MspInit+0xc0>)
 8002fac:	f043 0302 	orr.w	r3, r3, #2
 8002fb0:	6313      	str	r3, [r2, #48]	; 0x30
 8002fb2:	4b12      	ldr	r3, [pc, #72]	; (8002ffc <HAL_TIM_Base_MspInit+0xc0>)
 8002fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb6:	f003 0302 	and.w	r3, r3, #2
 8002fba:	60bb      	str	r3, [r7, #8]
 8002fbc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002fbe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002fc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fc4:	2302      	movs	r3, #2
 8002fc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8002fd0:	2303      	movs	r3, #3
 8002fd2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fd4:	f107 0314 	add.w	r3, r7, #20
 8002fd8:	4619      	mov	r1, r3
 8002fda:	480a      	ldr	r0, [pc, #40]	; (8003004 <HAL_TIM_Base_MspInit+0xc8>)
 8002fdc:	f001 fb84 	bl	80046e8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	2100      	movs	r1, #0
 8002fe4:	201a      	movs	r0, #26
 8002fe6:	f000 ffb8 	bl	8003f5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002fea:	201a      	movs	r0, #26
 8002fec:	f000 ffd1 	bl	8003f92 <HAL_NVIC_EnableIRQ>
}
 8002ff0:	bf00      	nop
 8002ff2:	3728      	adds	r7, #40	; 0x28
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}
 8002ff8:	40000400 	.word	0x40000400
 8002ffc:	40023800 	.word	0x40023800
 8003000:	40014800 	.word	0x40014800
 8003004:	40020400 	.word	0x40020400

08003008 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b08a      	sub	sp, #40	; 0x28
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003010:	f107 0314 	add.w	r3, r7, #20
 8003014:	2200      	movs	r2, #0
 8003016:	601a      	str	r2, [r3, #0]
 8003018:	605a      	str	r2, [r3, #4]
 800301a:	609a      	str	r2, [r3, #8]
 800301c:	60da      	str	r2, [r3, #12]
 800301e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a1d      	ldr	r2, [pc, #116]	; (800309c <HAL_UART_MspInit+0x94>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d133      	bne.n	8003092 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800302a:	2300      	movs	r3, #0
 800302c:	613b      	str	r3, [r7, #16]
 800302e:	4b1c      	ldr	r3, [pc, #112]	; (80030a0 <HAL_UART_MspInit+0x98>)
 8003030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003032:	4a1b      	ldr	r2, [pc, #108]	; (80030a0 <HAL_UART_MspInit+0x98>)
 8003034:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003038:	6413      	str	r3, [r2, #64]	; 0x40
 800303a:	4b19      	ldr	r3, [pc, #100]	; (80030a0 <HAL_UART_MspInit+0x98>)
 800303c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003042:	613b      	str	r3, [r7, #16]
 8003044:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003046:	2300      	movs	r3, #0
 8003048:	60fb      	str	r3, [r7, #12]
 800304a:	4b15      	ldr	r3, [pc, #84]	; (80030a0 <HAL_UART_MspInit+0x98>)
 800304c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800304e:	4a14      	ldr	r2, [pc, #80]	; (80030a0 <HAL_UART_MspInit+0x98>)
 8003050:	f043 0301 	orr.w	r3, r3, #1
 8003054:	6313      	str	r3, [r2, #48]	; 0x30
 8003056:	4b12      	ldr	r3, [pc, #72]	; (80030a0 <HAL_UART_MspInit+0x98>)
 8003058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800305a:	f003 0301 	and.w	r3, r3, #1
 800305e:	60fb      	str	r3, [r7, #12]
 8003060:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003062:	230c      	movs	r3, #12
 8003064:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003066:	2302      	movs	r3, #2
 8003068:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800306a:	2300      	movs	r3, #0
 800306c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800306e:	2303      	movs	r3, #3
 8003070:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003072:	2307      	movs	r3, #7
 8003074:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003076:	f107 0314 	add.w	r3, r7, #20
 800307a:	4619      	mov	r1, r3
 800307c:	4809      	ldr	r0, [pc, #36]	; (80030a4 <HAL_UART_MspInit+0x9c>)
 800307e:	f001 fb33 	bl	80046e8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003082:	2200      	movs	r2, #0
 8003084:	2100      	movs	r1, #0
 8003086:	2026      	movs	r0, #38	; 0x26
 8003088:	f000 ff67 	bl	8003f5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800308c:	2026      	movs	r0, #38	; 0x26
 800308e:	f000 ff80 	bl	8003f92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003092:	bf00      	nop
 8003094:	3728      	adds	r7, #40	; 0x28
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	40004400 	.word	0x40004400
 80030a0:	40023800 	.word	0x40023800
 80030a4:	40020000 	.word	0x40020000

080030a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80030a8:	b480      	push	{r7}
 80030aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80030ac:	e7fe      	b.n	80030ac <NMI_Handler+0x4>

080030ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80030ae:	b480      	push	{r7}
 80030b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80030b2:	e7fe      	b.n	80030b2 <HardFault_Handler+0x4>

080030b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80030b4:	b480      	push	{r7}
 80030b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80030b8:	e7fe      	b.n	80030b8 <MemManage_Handler+0x4>

080030ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80030ba:	b480      	push	{r7}
 80030bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80030be:	e7fe      	b.n	80030be <BusFault_Handler+0x4>

080030c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80030c0:	b480      	push	{r7}
 80030c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80030c4:	e7fe      	b.n	80030c4 <UsageFault_Handler+0x4>

080030c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80030c6:	b480      	push	{r7}
 80030c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80030ca:	bf00      	nop
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr

080030d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80030d4:	b480      	push	{r7}
 80030d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80030d8:	bf00      	nop
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr

080030e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80030e2:	b480      	push	{r7}
 80030e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80030e6:	bf00      	nop
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr

080030f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80030f4:	f000 f8fc 	bl	80032f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80030f8:	bf00      	nop
 80030fa:	bd80      	pop	{r7, pc}

080030fc <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003100:	4802      	ldr	r0, [pc, #8]	; (800310c <ADC_IRQHandler+0x10>)
 8003102:	f000 f958 	bl	80033b6 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8003106:	bf00      	nop
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	20000358 	.word	0x20000358

08003110 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8003114:	4802      	ldr	r0, [pc, #8]	; (8003120 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8003116:	f002 fded 	bl	8005cf4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800311a:	bf00      	nop
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	200003a0 	.word	0x200003a0

08003124 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003128:	4802      	ldr	r0, [pc, #8]	; (8003134 <USART2_IRQHandler+0x10>)
 800312a:	f003 fc5d 	bl	80069e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800312e:	bf00      	nop
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	20000440 	.word	0x20000440

08003138 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 800313c:	4802      	ldr	r0, [pc, #8]	; (8003148 <SPI3_IRQHandler+0x10>)
 800313e:	f002 fabf 	bl	80056c0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8003142:	bf00      	nop
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	20000300 	.word	0x20000300

0800314c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003150:	4802      	ldr	r0, [pc, #8]	; (800315c <DMA2_Stream0_IRQHandler+0x10>)
 8003152:	f001 f861 	bl	8004218 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003156:	bf00      	nop
 8003158:	bd80      	pop	{r7, pc}
 800315a:	bf00      	nop
 800315c:	200003e0 	.word	0x200003e0

08003160 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b086      	sub	sp, #24
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003168:	4a14      	ldr	r2, [pc, #80]	; (80031bc <_sbrk+0x5c>)
 800316a:	4b15      	ldr	r3, [pc, #84]	; (80031c0 <_sbrk+0x60>)
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003174:	4b13      	ldr	r3, [pc, #76]	; (80031c4 <_sbrk+0x64>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d102      	bne.n	8003182 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800317c:	4b11      	ldr	r3, [pc, #68]	; (80031c4 <_sbrk+0x64>)
 800317e:	4a12      	ldr	r2, [pc, #72]	; (80031c8 <_sbrk+0x68>)
 8003180:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003182:	4b10      	ldr	r3, [pc, #64]	; (80031c4 <_sbrk+0x64>)
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4413      	add	r3, r2
 800318a:	693a      	ldr	r2, [r7, #16]
 800318c:	429a      	cmp	r2, r3
 800318e:	d207      	bcs.n	80031a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003190:	f004 fa26 	bl	80075e0 <__errno>
 8003194:	4602      	mov	r2, r0
 8003196:	230c      	movs	r3, #12
 8003198:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800319a:	f04f 33ff 	mov.w	r3, #4294967295
 800319e:	e009      	b.n	80031b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80031a0:	4b08      	ldr	r3, [pc, #32]	; (80031c4 <_sbrk+0x64>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80031a6:	4b07      	ldr	r3, [pc, #28]	; (80031c4 <_sbrk+0x64>)
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4413      	add	r3, r2
 80031ae:	4a05      	ldr	r2, [pc, #20]	; (80031c4 <_sbrk+0x64>)
 80031b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80031b2:	68fb      	ldr	r3, [r7, #12]
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3718      	adds	r7, #24
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}
 80031bc:	20020000 	.word	0x20020000
 80031c0:	00000400 	.word	0x00000400
 80031c4:	200002b4 	.word	0x200002b4
 80031c8:	20000488 	.word	0x20000488

080031cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80031cc:	b480      	push	{r7}
 80031ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80031d0:	4b08      	ldr	r3, [pc, #32]	; (80031f4 <SystemInit+0x28>)
 80031d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031d6:	4a07      	ldr	r2, [pc, #28]	; (80031f4 <SystemInit+0x28>)
 80031d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80031dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80031e0:	4b04      	ldr	r3, [pc, #16]	; (80031f4 <SystemInit+0x28>)
 80031e2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80031e6:	609a      	str	r2, [r3, #8]
#endif
}
 80031e8:	bf00      	nop
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr
 80031f2:	bf00      	nop
 80031f4:	e000ed00 	.word	0xe000ed00

080031f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80031f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003230 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80031fc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80031fe:	e003      	b.n	8003208 <LoopCopyDataInit>

08003200 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003200:	4b0c      	ldr	r3, [pc, #48]	; (8003234 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003202:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003204:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003206:	3104      	adds	r1, #4

08003208 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003208:	480b      	ldr	r0, [pc, #44]	; (8003238 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800320a:	4b0c      	ldr	r3, [pc, #48]	; (800323c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800320c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800320e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003210:	d3f6      	bcc.n	8003200 <CopyDataInit>
  ldr  r2, =_sbss
 8003212:	4a0b      	ldr	r2, [pc, #44]	; (8003240 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003214:	e002      	b.n	800321c <LoopFillZerobss>

08003216 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003216:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003218:	f842 3b04 	str.w	r3, [r2], #4

0800321c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800321c:	4b09      	ldr	r3, [pc, #36]	; (8003244 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800321e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003220:	d3f9      	bcc.n	8003216 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003222:	f7ff ffd3 	bl	80031cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003226:	f004 f9e1 	bl	80075ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800322a:	f7fd ffc5 	bl	80011b8 <main>
  bx  lr    
 800322e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003230:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003234:	0800c7c0 	.word	0x0800c7c0
  ldr  r0, =_sdata
 8003238:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800323c:	20000200 	.word	0x20000200
  ldr  r2, =_sbss
 8003240:	20000200 	.word	0x20000200
  ldr  r3, = _ebss
 8003244:	20000488 	.word	0x20000488

08003248 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003248:	e7fe      	b.n	8003248 <DMA1_Stream0_IRQHandler>
	...

0800324c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003250:	4b0e      	ldr	r3, [pc, #56]	; (800328c <HAL_Init+0x40>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a0d      	ldr	r2, [pc, #52]	; (800328c <HAL_Init+0x40>)
 8003256:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800325a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800325c:	4b0b      	ldr	r3, [pc, #44]	; (800328c <HAL_Init+0x40>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a0a      	ldr	r2, [pc, #40]	; (800328c <HAL_Init+0x40>)
 8003262:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003266:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003268:	4b08      	ldr	r3, [pc, #32]	; (800328c <HAL_Init+0x40>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a07      	ldr	r2, [pc, #28]	; (800328c <HAL_Init+0x40>)
 800326e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003272:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003274:	2003      	movs	r0, #3
 8003276:	f000 fe65 	bl	8003f44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800327a:	2000      	movs	r0, #0
 800327c:	f000 f808 	bl	8003290 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003280:	f7ff fd44 	bl	8002d0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003284:	2300      	movs	r3, #0
}
 8003286:	4618      	mov	r0, r3
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	40023c00 	.word	0x40023c00

08003290 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b082      	sub	sp, #8
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003298:	4b12      	ldr	r3, [pc, #72]	; (80032e4 <HAL_InitTick+0x54>)
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	4b12      	ldr	r3, [pc, #72]	; (80032e8 <HAL_InitTick+0x58>)
 800329e:	781b      	ldrb	r3, [r3, #0]
 80032a0:	4619      	mov	r1, r3
 80032a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80032aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ae:	4618      	mov	r0, r3
 80032b0:	f000 fe7d 	bl	8003fae <HAL_SYSTICK_Config>
 80032b4:	4603      	mov	r3, r0
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d001      	beq.n	80032be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e00e      	b.n	80032dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2b0f      	cmp	r3, #15
 80032c2:	d80a      	bhi.n	80032da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80032c4:	2200      	movs	r2, #0
 80032c6:	6879      	ldr	r1, [r7, #4]
 80032c8:	f04f 30ff 	mov.w	r0, #4294967295
 80032cc:	f000 fe45 	bl	8003f5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80032d0:	4a06      	ldr	r2, [pc, #24]	; (80032ec <HAL_InitTick+0x5c>)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80032d6:	2300      	movs	r3, #0
 80032d8:	e000      	b.n	80032dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3708      	adds	r7, #8
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	20000024 	.word	0x20000024
 80032e8:	2000002c 	.word	0x2000002c
 80032ec:	20000028 	.word	0x20000028

080032f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80032f0:	b480      	push	{r7}
 80032f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80032f4:	4b06      	ldr	r3, [pc, #24]	; (8003310 <HAL_IncTick+0x20>)
 80032f6:	781b      	ldrb	r3, [r3, #0]
 80032f8:	461a      	mov	r2, r3
 80032fa:	4b06      	ldr	r3, [pc, #24]	; (8003314 <HAL_IncTick+0x24>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4413      	add	r3, r2
 8003300:	4a04      	ldr	r2, [pc, #16]	; (8003314 <HAL_IncTick+0x24>)
 8003302:	6013      	str	r3, [r2, #0]
}
 8003304:	bf00      	nop
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr
 800330e:	bf00      	nop
 8003310:	2000002c 	.word	0x2000002c
 8003314:	20000480 	.word	0x20000480

08003318 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003318:	b480      	push	{r7}
 800331a:	af00      	add	r7, sp, #0
  return uwTick;
 800331c:	4b03      	ldr	r3, [pc, #12]	; (800332c <HAL_GetTick+0x14>)
 800331e:	681b      	ldr	r3, [r3, #0]
}
 8003320:	4618      	mov	r0, r3
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr
 800332a:	bf00      	nop
 800332c:	20000480 	.word	0x20000480

08003330 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b084      	sub	sp, #16
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003338:	2300      	movs	r3, #0
 800333a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d101      	bne.n	8003346 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e033      	b.n	80033ae <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334a:	2b00      	cmp	r3, #0
 800334c:	d109      	bne.n	8003362 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f7ff fd04 	bl	8002d5c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2200      	movs	r2, #0
 8003358:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2200      	movs	r2, #0
 800335e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003366:	f003 0310 	and.w	r3, r3, #16
 800336a:	2b00      	cmp	r3, #0
 800336c:	d118      	bne.n	80033a0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003372:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003376:	f023 0302 	bic.w	r3, r3, #2
 800337a:	f043 0202 	orr.w	r2, r3, #2
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f000 fb86 	bl	8003a94 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003392:	f023 0303 	bic.w	r3, r3, #3
 8003396:	f043 0201 	orr.w	r2, r3, #1
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	641a      	str	r2, [r3, #64]	; 0x40
 800339e:	e001      	b.n	80033a4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2200      	movs	r2, #0
 80033a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80033ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3710      	adds	r7, #16
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}

080033b6 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80033b6:	b580      	push	{r7, lr}
 80033b8:	b084      	sub	sp, #16
 80033ba:	af00      	add	r7, sp, #0
 80033bc:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80033be:	2300      	movs	r3, #0
 80033c0:	60fb      	str	r3, [r7, #12]
 80033c2:	2300      	movs	r3, #0
 80033c4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 0302 	and.w	r3, r3, #2
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	bf0c      	ite	eq
 80033d4:	2301      	moveq	r3, #1
 80033d6:	2300      	movne	r3, #0
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	f003 0320 	and.w	r3, r3, #32
 80033e6:	2b20      	cmp	r3, #32
 80033e8:	bf0c      	ite	eq
 80033ea:	2301      	moveq	r3, #1
 80033ec:	2300      	movne	r3, #0
 80033ee:	b2db      	uxtb	r3, r3
 80033f0:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d049      	beq.n	800348c <HAL_ADC_IRQHandler+0xd6>
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d046      	beq.n	800348c <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003402:	f003 0310 	and.w	r3, r3, #16
 8003406:	2b00      	cmp	r3, #0
 8003408:	d105      	bne.n	8003416 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003420:	2b00      	cmp	r3, #0
 8003422:	d12b      	bne.n	800347c <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003428:	2b00      	cmp	r3, #0
 800342a:	d127      	bne.n	800347c <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003432:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003436:	2b00      	cmp	r3, #0
 8003438:	d006      	beq.n	8003448 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003444:	2b00      	cmp	r3, #0
 8003446:	d119      	bne.n	800347c <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	685a      	ldr	r2, [r3, #4]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f022 0220 	bic.w	r2, r2, #32
 8003456:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003468:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800346c:	2b00      	cmp	r3, #0
 800346e:	d105      	bne.n	800347c <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003474:	f043 0201 	orr.w	r2, r3, #1
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f000 f9af 	bl	80037e0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f06f 0212 	mvn.w	r2, #18
 800348a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0304 	and.w	r3, r3, #4
 8003496:	2b04      	cmp	r3, #4
 8003498:	bf0c      	ite	eq
 800349a:	2301      	moveq	r3, #1
 800349c:	2300      	movne	r3, #0
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034ac:	2b80      	cmp	r3, #128	; 0x80
 80034ae:	bf0c      	ite	eq
 80034b0:	2301      	moveq	r3, #1
 80034b2:	2300      	movne	r3, #0
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d057      	beq.n	800356e <HAL_ADC_IRQHandler+0x1b8>
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d054      	beq.n	800356e <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c8:	f003 0310 	and.w	r3, r3, #16
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d105      	bne.n	80034dc <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d139      	bne.n	800355e <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034f0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d006      	beq.n	8003506 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003502:	2b00      	cmp	r3, #0
 8003504:	d12b      	bne.n	800355e <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8003510:	2b00      	cmp	r3, #0
 8003512:	d124      	bne.n	800355e <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800351e:	2b00      	cmp	r3, #0
 8003520:	d11d      	bne.n	800355e <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003526:	2b00      	cmp	r3, #0
 8003528:	d119      	bne.n	800355e <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	685a      	ldr	r2, [r3, #4]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003538:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800354e:	2b00      	cmp	r3, #0
 8003550:	d105      	bne.n	800355e <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003556:	f043 0201 	orr.w	r2, r3, #1
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f000 fc16 	bl	8003d90 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f06f 020c 	mvn.w	r2, #12
 800356c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0301 	and.w	r3, r3, #1
 8003578:	2b01      	cmp	r3, #1
 800357a:	bf0c      	ite	eq
 800357c:	2301      	moveq	r3, #1
 800357e:	2300      	movne	r3, #0
 8003580:	b2db      	uxtb	r3, r3
 8003582:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800358e:	2b40      	cmp	r3, #64	; 0x40
 8003590:	bf0c      	ite	eq
 8003592:	2301      	moveq	r3, #1
 8003594:	2300      	movne	r3, #0
 8003596:	b2db      	uxtb	r3, r3
 8003598:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d017      	beq.n	80035d0 <HAL_ADC_IRQHandler+0x21a>
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d014      	beq.n	80035d0 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 0301 	and.w	r3, r3, #1
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d10d      	bne.n	80035d0 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80035c0:	6878      	ldr	r0, [r7, #4]
 80035c2:	f000 f921 	bl	8003808 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f06f 0201 	mvn.w	r2, #1
 80035ce:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0320 	and.w	r3, r3, #32
 80035da:	2b20      	cmp	r3, #32
 80035dc:	bf0c      	ite	eq
 80035de:	2301      	moveq	r3, #1
 80035e0:	2300      	movne	r3, #0
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80035f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80035f4:	bf0c      	ite	eq
 80035f6:	2301      	moveq	r3, #1
 80035f8:	2300      	movne	r3, #0
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d015      	beq.n	8003630 <HAL_ADC_IRQHandler+0x27a>
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d012      	beq.n	8003630 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800360e:	f043 0202 	orr.w	r2, r3, #2
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f06f 0220 	mvn.w	r2, #32
 800361e:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	f000 f8fb 	bl	800381c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f06f 0220 	mvn.w	r2, #32
 800362e:	601a      	str	r2, [r3, #0]
  }
}
 8003630:	bf00      	nop
 8003632:	3710      	adds	r7, #16
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}

08003638 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b086      	sub	sp, #24
 800363c:	af00      	add	r7, sp, #0
 800363e:	60f8      	str	r0, [r7, #12]
 8003640:	60b9      	str	r1, [r7, #8]
 8003642:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003644:	2300      	movs	r3, #0
 8003646:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800364e:	2b01      	cmp	r3, #1
 8003650:	d101      	bne.n	8003656 <HAL_ADC_Start_DMA+0x1e>
 8003652:	2302      	movs	r3, #2
 8003654:	e0b1      	b.n	80037ba <HAL_ADC_Start_DMA+0x182>
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2201      	movs	r2, #1
 800365a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	f003 0301 	and.w	r3, r3, #1
 8003668:	2b01      	cmp	r3, #1
 800366a:	d018      	beq.n	800369e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	689a      	ldr	r2, [r3, #8]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f042 0201 	orr.w	r2, r2, #1
 800367a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800367c:	4b51      	ldr	r3, [pc, #324]	; (80037c4 <HAL_ADC_Start_DMA+0x18c>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a51      	ldr	r2, [pc, #324]	; (80037c8 <HAL_ADC_Start_DMA+0x190>)
 8003682:	fba2 2303 	umull	r2, r3, r2, r3
 8003686:	0c9a      	lsrs	r2, r3, #18
 8003688:	4613      	mov	r3, r2
 800368a:	005b      	lsls	r3, r3, #1
 800368c:	4413      	add	r3, r2
 800368e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003690:	e002      	b.n	8003698 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	3b01      	subs	r3, #1
 8003696:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d1f9      	bne.n	8003692 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	f003 0301 	and.w	r3, r3, #1
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	f040 8085 	bne.w	80037b8 <HAL_ADC_Start_DMA+0x180>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80036b6:	f023 0301 	bic.w	r3, r3, #1
 80036ba:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d007      	beq.n	80036e0 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80036d8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036ec:	d106      	bne.n	80036fc <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036f2:	f023 0206 	bic.w	r2, r3, #6
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	645a      	str	r2, [r3, #68]	; 0x44
 80036fa:	e002      	b.n	8003702 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2200      	movs	r2, #0
 8003700:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2200      	movs	r2, #0
 8003706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800370a:	4b30      	ldr	r3, [pc, #192]	; (80037cc <HAL_ADC_Start_DMA+0x194>)
 800370c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003712:	4a2f      	ldr	r2, [pc, #188]	; (80037d0 <HAL_ADC_Start_DMA+0x198>)
 8003714:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800371a:	4a2e      	ldr	r2, [pc, #184]	; (80037d4 <HAL_ADC_Start_DMA+0x19c>)
 800371c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003722:	4a2d      	ldr	r2, [pc, #180]	; (80037d8 <HAL_ADC_Start_DMA+0x1a0>)
 8003724:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800372e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	685a      	ldr	r2, [r3, #4]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800373e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	689a      	ldr	r2, [r3, #8]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800374e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	334c      	adds	r3, #76	; 0x4c
 800375a:	4619      	mov	r1, r3
 800375c:	68ba      	ldr	r2, [r7, #8]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	f000 fce0 	bl	8004124 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	f003 031f 	and.w	r3, r3, #31
 800376c:	2b00      	cmp	r3, #0
 800376e:	d10f      	bne.n	8003790 <HAL_ADC_Start_DMA+0x158>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800377a:	2b00      	cmp	r3, #0
 800377c:	d11c      	bne.n	80037b8 <HAL_ADC_Start_DMA+0x180>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	689a      	ldr	r2, [r3, #8]
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800378c:	609a      	str	r2, [r3, #8]
 800378e:	e013      	b.n	80037b8 <HAL_ADC_Start_DMA+0x180>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a11      	ldr	r2, [pc, #68]	; (80037dc <HAL_ADC_Start_DMA+0x1a4>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d10e      	bne.n	80037b8 <HAL_ADC_Start_DMA+0x180>
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d107      	bne.n	80037b8 <HAL_ADC_Start_DMA+0x180>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	689a      	ldr	r2, [r3, #8]
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80037b6:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80037b8:	2300      	movs	r3, #0
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3718      	adds	r7, #24
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	bf00      	nop
 80037c4:	20000024 	.word	0x20000024
 80037c8:	431bde83 	.word	0x431bde83
 80037cc:	40012300 	.word	0x40012300
 80037d0:	08003c8d 	.word	0x08003c8d
 80037d4:	08003d47 	.word	0x08003d47
 80037d8:	08003d63 	.word	0x08003d63
 80037dc:	40012000 	.word	0x40012000

080037e0 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b083      	sub	sp, #12
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80037e8:	bf00      	nop
 80037ea:	370c      	adds	r7, #12
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr

080037f4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b083      	sub	sp, #12
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80037fc:	bf00      	nop
 80037fe:	370c      	adds	r7, #12
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr

08003808 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003808:	b480      	push	{r7}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8003810:	bf00      	nop
 8003812:	370c      	adds	r7, #12
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr

0800381c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003824:	bf00      	nop
 8003826:	370c      	adds	r7, #12
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr

08003830 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003830:	b480      	push	{r7}
 8003832:	b085      	sub	sp, #20
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800383a:	2300      	movs	r3, #0
 800383c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003844:	2b01      	cmp	r3, #1
 8003846:	d101      	bne.n	800384c <HAL_ADC_ConfigChannel+0x1c>
 8003848:	2302      	movs	r3, #2
 800384a:	e113      	b.n	8003a74 <HAL_ADC_ConfigChannel+0x244>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2201      	movs	r2, #1
 8003850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	2b09      	cmp	r3, #9
 800385a:	d925      	bls.n	80038a8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	68d9      	ldr	r1, [r3, #12]
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	b29b      	uxth	r3, r3
 8003868:	461a      	mov	r2, r3
 800386a:	4613      	mov	r3, r2
 800386c:	005b      	lsls	r3, r3, #1
 800386e:	4413      	add	r3, r2
 8003870:	3b1e      	subs	r3, #30
 8003872:	2207      	movs	r2, #7
 8003874:	fa02 f303 	lsl.w	r3, r2, r3
 8003878:	43da      	mvns	r2, r3
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	400a      	ands	r2, r1
 8003880:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	68d9      	ldr	r1, [r3, #12]
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	689a      	ldr	r2, [r3, #8]
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	b29b      	uxth	r3, r3
 8003892:	4618      	mov	r0, r3
 8003894:	4603      	mov	r3, r0
 8003896:	005b      	lsls	r3, r3, #1
 8003898:	4403      	add	r3, r0
 800389a:	3b1e      	subs	r3, #30
 800389c:	409a      	lsls	r2, r3
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	430a      	orrs	r2, r1
 80038a4:	60da      	str	r2, [r3, #12]
 80038a6:	e022      	b.n	80038ee <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	6919      	ldr	r1, [r3, #16]
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	b29b      	uxth	r3, r3
 80038b4:	461a      	mov	r2, r3
 80038b6:	4613      	mov	r3, r2
 80038b8:	005b      	lsls	r3, r3, #1
 80038ba:	4413      	add	r3, r2
 80038bc:	2207      	movs	r2, #7
 80038be:	fa02 f303 	lsl.w	r3, r2, r3
 80038c2:	43da      	mvns	r2, r3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	400a      	ands	r2, r1
 80038ca:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	6919      	ldr	r1, [r3, #16]
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	689a      	ldr	r2, [r3, #8]
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	b29b      	uxth	r3, r3
 80038dc:	4618      	mov	r0, r3
 80038de:	4603      	mov	r3, r0
 80038e0:	005b      	lsls	r3, r3, #1
 80038e2:	4403      	add	r3, r0
 80038e4:	409a      	lsls	r2, r3
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	430a      	orrs	r2, r1
 80038ec:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	2b06      	cmp	r3, #6
 80038f4:	d824      	bhi.n	8003940 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	685a      	ldr	r2, [r3, #4]
 8003900:	4613      	mov	r3, r2
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	4413      	add	r3, r2
 8003906:	3b05      	subs	r3, #5
 8003908:	221f      	movs	r2, #31
 800390a:	fa02 f303 	lsl.w	r3, r2, r3
 800390e:	43da      	mvns	r2, r3
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	400a      	ands	r2, r1
 8003916:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	b29b      	uxth	r3, r3
 8003924:	4618      	mov	r0, r3
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	685a      	ldr	r2, [r3, #4]
 800392a:	4613      	mov	r3, r2
 800392c:	009b      	lsls	r3, r3, #2
 800392e:	4413      	add	r3, r2
 8003930:	3b05      	subs	r3, #5
 8003932:	fa00 f203 	lsl.w	r2, r0, r3
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	430a      	orrs	r2, r1
 800393c:	635a      	str	r2, [r3, #52]	; 0x34
 800393e:	e04c      	b.n	80039da <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	2b0c      	cmp	r3, #12
 8003946:	d824      	bhi.n	8003992 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	685a      	ldr	r2, [r3, #4]
 8003952:	4613      	mov	r3, r2
 8003954:	009b      	lsls	r3, r3, #2
 8003956:	4413      	add	r3, r2
 8003958:	3b23      	subs	r3, #35	; 0x23
 800395a:	221f      	movs	r2, #31
 800395c:	fa02 f303 	lsl.w	r3, r2, r3
 8003960:	43da      	mvns	r2, r3
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	400a      	ands	r2, r1
 8003968:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	b29b      	uxth	r3, r3
 8003976:	4618      	mov	r0, r3
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	685a      	ldr	r2, [r3, #4]
 800397c:	4613      	mov	r3, r2
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	4413      	add	r3, r2
 8003982:	3b23      	subs	r3, #35	; 0x23
 8003984:	fa00 f203 	lsl.w	r2, r0, r3
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	430a      	orrs	r2, r1
 800398e:	631a      	str	r2, [r3, #48]	; 0x30
 8003990:	e023      	b.n	80039da <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	685a      	ldr	r2, [r3, #4]
 800399c:	4613      	mov	r3, r2
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	4413      	add	r3, r2
 80039a2:	3b41      	subs	r3, #65	; 0x41
 80039a4:	221f      	movs	r2, #31
 80039a6:	fa02 f303 	lsl.w	r3, r2, r3
 80039aa:	43da      	mvns	r2, r3
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	400a      	ands	r2, r1
 80039b2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	b29b      	uxth	r3, r3
 80039c0:	4618      	mov	r0, r3
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	685a      	ldr	r2, [r3, #4]
 80039c6:	4613      	mov	r3, r2
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	4413      	add	r3, r2
 80039cc:	3b41      	subs	r3, #65	; 0x41
 80039ce:	fa00 f203 	lsl.w	r2, r0, r3
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	430a      	orrs	r2, r1
 80039d8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80039da:	4b29      	ldr	r3, [pc, #164]	; (8003a80 <HAL_ADC_ConfigChannel+0x250>)
 80039dc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a28      	ldr	r2, [pc, #160]	; (8003a84 <HAL_ADC_ConfigChannel+0x254>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d10f      	bne.n	8003a08 <HAL_ADC_ConfigChannel+0x1d8>
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	2b12      	cmp	r3, #18
 80039ee:	d10b      	bne.n	8003a08 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a1d      	ldr	r2, [pc, #116]	; (8003a84 <HAL_ADC_ConfigChannel+0x254>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d12b      	bne.n	8003a6a <HAL_ADC_ConfigChannel+0x23a>
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a1c      	ldr	r2, [pc, #112]	; (8003a88 <HAL_ADC_ConfigChannel+0x258>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d003      	beq.n	8003a24 <HAL_ADC_ConfigChannel+0x1f4>
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	2b11      	cmp	r3, #17
 8003a22:	d122      	bne.n	8003a6a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a11      	ldr	r2, [pc, #68]	; (8003a88 <HAL_ADC_ConfigChannel+0x258>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d111      	bne.n	8003a6a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003a46:	4b11      	ldr	r3, [pc, #68]	; (8003a8c <HAL_ADC_ConfigChannel+0x25c>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a11      	ldr	r2, [pc, #68]	; (8003a90 <HAL_ADC_ConfigChannel+0x260>)
 8003a4c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a50:	0c9a      	lsrs	r2, r3, #18
 8003a52:	4613      	mov	r3, r2
 8003a54:	009b      	lsls	r3, r3, #2
 8003a56:	4413      	add	r3, r2
 8003a58:	005b      	lsls	r3, r3, #1
 8003a5a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003a5c:	e002      	b.n	8003a64 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	3b01      	subs	r3, #1
 8003a62:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d1f9      	bne.n	8003a5e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003a72:	2300      	movs	r3, #0
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3714      	adds	r7, #20
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr
 8003a80:	40012300 	.word	0x40012300
 8003a84:	40012000 	.word	0x40012000
 8003a88:	10000012 	.word	0x10000012
 8003a8c:	20000024 	.word	0x20000024
 8003a90:	431bde83 	.word	0x431bde83

08003a94 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b085      	sub	sp, #20
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003a9c:	4b79      	ldr	r3, [pc, #484]	; (8003c84 <ADC_Init+0x1f0>)
 8003a9e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	685a      	ldr	r2, [r3, #4]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	431a      	orrs	r2, r3
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	685a      	ldr	r2, [r3, #4]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ac8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	6859      	ldr	r1, [r3, #4]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	691b      	ldr	r3, [r3, #16]
 8003ad4:	021a      	lsls	r2, r3, #8
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	430a      	orrs	r2, r1
 8003adc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	685a      	ldr	r2, [r3, #4]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003aec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	6859      	ldr	r1, [r3, #4]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	689a      	ldr	r2, [r3, #8]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	430a      	orrs	r2, r1
 8003afe:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	689a      	ldr	r2, [r3, #8]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b0e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	6899      	ldr	r1, [r3, #8]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	68da      	ldr	r2, [r3, #12]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	430a      	orrs	r2, r1
 8003b20:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b26:	4a58      	ldr	r2, [pc, #352]	; (8003c88 <ADC_Init+0x1f4>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d022      	beq.n	8003b72 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	689a      	ldr	r2, [r3, #8]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003b3a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	6899      	ldr	r1, [r3, #8]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	430a      	orrs	r2, r1
 8003b4c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	689a      	ldr	r2, [r3, #8]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003b5c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	6899      	ldr	r1, [r3, #8]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	430a      	orrs	r2, r1
 8003b6e:	609a      	str	r2, [r3, #8]
 8003b70:	e00f      	b.n	8003b92 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	689a      	ldr	r2, [r3, #8]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003b80:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	689a      	ldr	r2, [r3, #8]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003b90:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	689a      	ldr	r2, [r3, #8]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f022 0202 	bic.w	r2, r2, #2
 8003ba0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	6899      	ldr	r1, [r3, #8]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	7e1b      	ldrb	r3, [r3, #24]
 8003bac:	005a      	lsls	r2, r3, #1
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	430a      	orrs	r2, r1
 8003bb4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d01b      	beq.n	8003bf8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	685a      	ldr	r2, [r3, #4]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003bce:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	685a      	ldr	r2, [r3, #4]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003bde:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	6859      	ldr	r1, [r3, #4]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bea:	3b01      	subs	r3, #1
 8003bec:	035a      	lsls	r2, r3, #13
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	430a      	orrs	r2, r1
 8003bf4:	605a      	str	r2, [r3, #4]
 8003bf6:	e007      	b.n	8003c08 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	685a      	ldr	r2, [r3, #4]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c06:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003c16:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	69db      	ldr	r3, [r3, #28]
 8003c22:	3b01      	subs	r3, #1
 8003c24:	051a      	lsls	r2, r3, #20
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	430a      	orrs	r2, r1
 8003c2c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	689a      	ldr	r2, [r3, #8]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003c3c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	6899      	ldr	r1, [r3, #8]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003c4a:	025a      	lsls	r2, r3, #9
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	430a      	orrs	r2, r1
 8003c52:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	689a      	ldr	r2, [r3, #8]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c62:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	6899      	ldr	r1, [r3, #8]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	695b      	ldr	r3, [r3, #20]
 8003c6e:	029a      	lsls	r2, r3, #10
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	430a      	orrs	r2, r1
 8003c76:	609a      	str	r2, [r3, #8]
}
 8003c78:	bf00      	nop
 8003c7a:	3714      	adds	r7, #20
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr
 8003c84:	40012300 	.word	0x40012300
 8003c88:	0f000001 	.word	0x0f000001

08003c8c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b084      	sub	sp, #16
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c98:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d13c      	bne.n	8003d20 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003caa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d12b      	bne.n	8003d18 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d127      	bne.n	8003d18 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cce:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d006      	beq.n	8003ce4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d119      	bne.n	8003d18 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	685a      	ldr	r2, [r3, #4]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f022 0220 	bic.w	r2, r2, #32
 8003cf2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d105      	bne.n	8003d18 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d10:	f043 0201 	orr.w	r2, r3, #1
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003d18:	68f8      	ldr	r0, [r7, #12]
 8003d1a:	f7ff fd61 	bl	80037e0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003d1e:	e00e      	b.n	8003d3e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d24:	f003 0310 	and.w	r3, r3, #16
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d003      	beq.n	8003d34 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003d2c:	68f8      	ldr	r0, [r7, #12]
 8003d2e:	f7ff fd75 	bl	800381c <HAL_ADC_ErrorCallback>
}
 8003d32:	e004      	b.n	8003d3e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	4798      	blx	r3
}
 8003d3e:	bf00      	nop
 8003d40:	3710      	adds	r7, #16
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}

08003d46 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003d46:	b580      	push	{r7, lr}
 8003d48:	b084      	sub	sp, #16
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d52:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003d54:	68f8      	ldr	r0, [r7, #12]
 8003d56:	f7ff fd4d 	bl	80037f4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003d5a:	bf00      	nop
 8003d5c:	3710      	adds	r7, #16
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}

08003d62 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003d62:	b580      	push	{r7, lr}
 8003d64:	b084      	sub	sp, #16
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d6e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2240      	movs	r2, #64	; 0x40
 8003d74:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d7a:	f043 0204 	orr.w	r2, r3, #4
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003d82:	68f8      	ldr	r0, [r7, #12]
 8003d84:	f7ff fd4a 	bl	800381c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003d88:	bf00      	nop
 8003d8a:	3710      	adds	r7, #16
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}

08003d90 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b083      	sub	sp, #12
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003d98:	bf00      	nop
 8003d9a:	370c      	adds	r7, #12
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr

08003da4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b085      	sub	sp, #20
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	f003 0307 	and.w	r3, r3, #7
 8003db2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003db4:	4b0c      	ldr	r3, [pc, #48]	; (8003de8 <__NVIC_SetPriorityGrouping+0x44>)
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003dba:	68ba      	ldr	r2, [r7, #8]
 8003dbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003dcc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003dd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003dd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003dd6:	4a04      	ldr	r2, [pc, #16]	; (8003de8 <__NVIC_SetPriorityGrouping+0x44>)
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	60d3      	str	r3, [r2, #12]
}
 8003ddc:	bf00      	nop
 8003dde:	3714      	adds	r7, #20
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr
 8003de8:	e000ed00 	.word	0xe000ed00

08003dec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003dec:	b480      	push	{r7}
 8003dee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003df0:	4b04      	ldr	r3, [pc, #16]	; (8003e04 <__NVIC_GetPriorityGrouping+0x18>)
 8003df2:	68db      	ldr	r3, [r3, #12]
 8003df4:	0a1b      	lsrs	r3, r3, #8
 8003df6:	f003 0307 	and.w	r3, r3, #7
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr
 8003e04:	e000ed00 	.word	0xe000ed00

08003e08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b083      	sub	sp, #12
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	4603      	mov	r3, r0
 8003e10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	db0b      	blt.n	8003e32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e1a:	79fb      	ldrb	r3, [r7, #7]
 8003e1c:	f003 021f 	and.w	r2, r3, #31
 8003e20:	4907      	ldr	r1, [pc, #28]	; (8003e40 <__NVIC_EnableIRQ+0x38>)
 8003e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e26:	095b      	lsrs	r3, r3, #5
 8003e28:	2001      	movs	r0, #1
 8003e2a:	fa00 f202 	lsl.w	r2, r0, r2
 8003e2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003e32:	bf00      	nop
 8003e34:	370c      	adds	r7, #12
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr
 8003e3e:	bf00      	nop
 8003e40:	e000e100 	.word	0xe000e100

08003e44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b083      	sub	sp, #12
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	6039      	str	r1, [r7, #0]
 8003e4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	db0a      	blt.n	8003e6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	b2da      	uxtb	r2, r3
 8003e5c:	490c      	ldr	r1, [pc, #48]	; (8003e90 <__NVIC_SetPriority+0x4c>)
 8003e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e62:	0112      	lsls	r2, r2, #4
 8003e64:	b2d2      	uxtb	r2, r2
 8003e66:	440b      	add	r3, r1
 8003e68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e6c:	e00a      	b.n	8003e84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	b2da      	uxtb	r2, r3
 8003e72:	4908      	ldr	r1, [pc, #32]	; (8003e94 <__NVIC_SetPriority+0x50>)
 8003e74:	79fb      	ldrb	r3, [r7, #7]
 8003e76:	f003 030f 	and.w	r3, r3, #15
 8003e7a:	3b04      	subs	r3, #4
 8003e7c:	0112      	lsls	r2, r2, #4
 8003e7e:	b2d2      	uxtb	r2, r2
 8003e80:	440b      	add	r3, r1
 8003e82:	761a      	strb	r2, [r3, #24]
}
 8003e84:	bf00      	nop
 8003e86:	370c      	adds	r7, #12
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8e:	4770      	bx	lr
 8003e90:	e000e100 	.word	0xe000e100
 8003e94:	e000ed00 	.word	0xe000ed00

08003e98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b089      	sub	sp, #36	; 0x24
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	60f8      	str	r0, [r7, #12]
 8003ea0:	60b9      	str	r1, [r7, #8]
 8003ea2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	f003 0307 	and.w	r3, r3, #7
 8003eaa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003eac:	69fb      	ldr	r3, [r7, #28]
 8003eae:	f1c3 0307 	rsb	r3, r3, #7
 8003eb2:	2b04      	cmp	r3, #4
 8003eb4:	bf28      	it	cs
 8003eb6:	2304      	movcs	r3, #4
 8003eb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003eba:	69fb      	ldr	r3, [r7, #28]
 8003ebc:	3304      	adds	r3, #4
 8003ebe:	2b06      	cmp	r3, #6
 8003ec0:	d902      	bls.n	8003ec8 <NVIC_EncodePriority+0x30>
 8003ec2:	69fb      	ldr	r3, [r7, #28]
 8003ec4:	3b03      	subs	r3, #3
 8003ec6:	e000      	b.n	8003eca <NVIC_EncodePriority+0x32>
 8003ec8:	2300      	movs	r3, #0
 8003eca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ecc:	f04f 32ff 	mov.w	r2, #4294967295
 8003ed0:	69bb      	ldr	r3, [r7, #24]
 8003ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed6:	43da      	mvns	r2, r3
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	401a      	ands	r2, r3
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ee0:	f04f 31ff 	mov.w	r1, #4294967295
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8003eea:	43d9      	mvns	r1, r3
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ef0:	4313      	orrs	r3, r2
         );
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3724      	adds	r7, #36	; 0x24
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efc:	4770      	bx	lr
	...

08003f00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b082      	sub	sp, #8
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	3b01      	subs	r3, #1
 8003f0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f10:	d301      	bcc.n	8003f16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003f12:	2301      	movs	r3, #1
 8003f14:	e00f      	b.n	8003f36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f16:	4a0a      	ldr	r2, [pc, #40]	; (8003f40 <SysTick_Config+0x40>)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	3b01      	subs	r3, #1
 8003f1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003f1e:	210f      	movs	r1, #15
 8003f20:	f04f 30ff 	mov.w	r0, #4294967295
 8003f24:	f7ff ff8e 	bl	8003e44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f28:	4b05      	ldr	r3, [pc, #20]	; (8003f40 <SysTick_Config+0x40>)
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f2e:	4b04      	ldr	r3, [pc, #16]	; (8003f40 <SysTick_Config+0x40>)
 8003f30:	2207      	movs	r2, #7
 8003f32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f34:	2300      	movs	r3, #0
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3708      	adds	r7, #8
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}
 8003f3e:	bf00      	nop
 8003f40:	e000e010 	.word	0xe000e010

08003f44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b082      	sub	sp, #8
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	f7ff ff29 	bl	8003da4 <__NVIC_SetPriorityGrouping>
}
 8003f52:	bf00      	nop
 8003f54:	3708      	adds	r7, #8
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}

08003f5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003f5a:	b580      	push	{r7, lr}
 8003f5c:	b086      	sub	sp, #24
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	4603      	mov	r3, r0
 8003f62:	60b9      	str	r1, [r7, #8]
 8003f64:	607a      	str	r2, [r7, #4]
 8003f66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003f6c:	f7ff ff3e 	bl	8003dec <__NVIC_GetPriorityGrouping>
 8003f70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f72:	687a      	ldr	r2, [r7, #4]
 8003f74:	68b9      	ldr	r1, [r7, #8]
 8003f76:	6978      	ldr	r0, [r7, #20]
 8003f78:	f7ff ff8e 	bl	8003e98 <NVIC_EncodePriority>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f82:	4611      	mov	r1, r2
 8003f84:	4618      	mov	r0, r3
 8003f86:	f7ff ff5d 	bl	8003e44 <__NVIC_SetPriority>
}
 8003f8a:	bf00      	nop
 8003f8c:	3718      	adds	r7, #24
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}

08003f92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f92:	b580      	push	{r7, lr}
 8003f94:	b082      	sub	sp, #8
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	4603      	mov	r3, r0
 8003f9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f7ff ff31 	bl	8003e08 <__NVIC_EnableIRQ>
}
 8003fa6:	bf00      	nop
 8003fa8:	3708      	adds	r7, #8
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}

08003fae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003fae:	b580      	push	{r7, lr}
 8003fb0:	b082      	sub	sp, #8
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f7ff ffa2 	bl	8003f00 <SysTick_Config>
 8003fbc:	4603      	mov	r3, r0
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3708      	adds	r7, #8
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}
	...

08003fc8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b086      	sub	sp, #24
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003fd4:	f7ff f9a0 	bl	8003318 <HAL_GetTick>
 8003fd8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d101      	bne.n	8003fe4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	e099      	b.n	8004118 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2202      	movs	r2, #2
 8003ff0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f022 0201 	bic.w	r2, r2, #1
 8004002:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004004:	e00f      	b.n	8004026 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004006:	f7ff f987 	bl	8003318 <HAL_GetTick>
 800400a:	4602      	mov	r2, r0
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	1ad3      	subs	r3, r2, r3
 8004010:	2b05      	cmp	r3, #5
 8004012:	d908      	bls.n	8004026 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2220      	movs	r2, #32
 8004018:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2203      	movs	r2, #3
 800401e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004022:	2303      	movs	r3, #3
 8004024:	e078      	b.n	8004118 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f003 0301 	and.w	r3, r3, #1
 8004030:	2b00      	cmp	r3, #0
 8004032:	d1e8      	bne.n	8004006 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800403c:	697a      	ldr	r2, [r7, #20]
 800403e:	4b38      	ldr	r3, [pc, #224]	; (8004120 <HAL_DMA_Init+0x158>)
 8004040:	4013      	ands	r3, r2
 8004042:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	685a      	ldr	r2, [r3, #4]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004052:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	691b      	ldr	r3, [r3, #16]
 8004058:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800405e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	699b      	ldr	r3, [r3, #24]
 8004064:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800406a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6a1b      	ldr	r3, [r3, #32]
 8004070:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004072:	697a      	ldr	r2, [r7, #20]
 8004074:	4313      	orrs	r3, r2
 8004076:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407c:	2b04      	cmp	r3, #4
 800407e:	d107      	bne.n	8004090 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004088:	4313      	orrs	r3, r2
 800408a:	697a      	ldr	r2, [r7, #20]
 800408c:	4313      	orrs	r3, r2
 800408e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	697a      	ldr	r2, [r7, #20]
 8004096:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	695b      	ldr	r3, [r3, #20]
 800409e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	f023 0307 	bic.w	r3, r3, #7
 80040a6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ac:	697a      	ldr	r2, [r7, #20]
 80040ae:	4313      	orrs	r3, r2
 80040b0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b6:	2b04      	cmp	r3, #4
 80040b8:	d117      	bne.n	80040ea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040be:	697a      	ldr	r2, [r7, #20]
 80040c0:	4313      	orrs	r3, r2
 80040c2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d00e      	beq.n	80040ea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	f000 fa91 	bl	80045f4 <DMA_CheckFifoParam>
 80040d2:	4603      	mov	r3, r0
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d008      	beq.n	80040ea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2240      	movs	r2, #64	; 0x40
 80040dc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2201      	movs	r2, #1
 80040e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80040e6:	2301      	movs	r3, #1
 80040e8:	e016      	b.n	8004118 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	697a      	ldr	r2, [r7, #20]
 80040f0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f000 fa48 	bl	8004588 <DMA_CalcBaseAndBitshift>
 80040f8:	4603      	mov	r3, r0
 80040fa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004100:	223f      	movs	r2, #63	; 0x3f
 8004102:	409a      	lsls	r2, r3
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2200      	movs	r2, #0
 800410c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2201      	movs	r2, #1
 8004112:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004116:	2300      	movs	r3, #0
}
 8004118:	4618      	mov	r0, r3
 800411a:	3718      	adds	r7, #24
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}
 8004120:	f010803f 	.word	0xf010803f

08004124 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b086      	sub	sp, #24
 8004128:	af00      	add	r7, sp, #0
 800412a:	60f8      	str	r0, [r7, #12]
 800412c:	60b9      	str	r1, [r7, #8]
 800412e:	607a      	str	r2, [r7, #4]
 8004130:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004132:	2300      	movs	r3, #0
 8004134:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800413a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004142:	2b01      	cmp	r3, #1
 8004144:	d101      	bne.n	800414a <HAL_DMA_Start_IT+0x26>
 8004146:	2302      	movs	r3, #2
 8004148:	e040      	b.n	80041cc <HAL_DMA_Start_IT+0xa8>
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2201      	movs	r2, #1
 800414e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004158:	b2db      	uxtb	r3, r3
 800415a:	2b01      	cmp	r3, #1
 800415c:	d12f      	bne.n	80041be <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2202      	movs	r2, #2
 8004162:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2200      	movs	r2, #0
 800416a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	687a      	ldr	r2, [r7, #4]
 8004170:	68b9      	ldr	r1, [r7, #8]
 8004172:	68f8      	ldr	r0, [r7, #12]
 8004174:	f000 f9da 	bl	800452c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800417c:	223f      	movs	r2, #63	; 0x3f
 800417e:	409a      	lsls	r2, r3
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f042 0216 	orr.w	r2, r2, #22
 8004192:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004198:	2b00      	cmp	r3, #0
 800419a:	d007      	beq.n	80041ac <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f042 0208 	orr.w	r2, r2, #8
 80041aa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f042 0201 	orr.w	r2, r2, #1
 80041ba:	601a      	str	r2, [r3, #0]
 80041bc:	e005      	b.n	80041ca <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2200      	movs	r2, #0
 80041c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80041c6:	2302      	movs	r3, #2
 80041c8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80041ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3718      	adds	r7, #24
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}

080041d4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b083      	sub	sp, #12
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80041e2:	b2db      	uxtb	r3, r3
 80041e4:	2b02      	cmp	r3, #2
 80041e6:	d004      	beq.n	80041f2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2280      	movs	r2, #128	; 0x80
 80041ec:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e00c      	b.n	800420c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2205      	movs	r2, #5
 80041f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f022 0201 	bic.w	r2, r2, #1
 8004208:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800420a:	2300      	movs	r3, #0
}
 800420c:	4618      	mov	r0, r3
 800420e:	370c      	adds	r7, #12
 8004210:	46bd      	mov	sp, r7
 8004212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004216:	4770      	bx	lr

08004218 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b086      	sub	sp, #24
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004220:	2300      	movs	r3, #0
 8004222:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004224:	4b92      	ldr	r3, [pc, #584]	; (8004470 <HAL_DMA_IRQHandler+0x258>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a92      	ldr	r2, [pc, #584]	; (8004474 <HAL_DMA_IRQHandler+0x25c>)
 800422a:	fba2 2303 	umull	r2, r3, r2, r3
 800422e:	0a9b      	lsrs	r3, r3, #10
 8004230:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004236:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004242:	2208      	movs	r2, #8
 8004244:	409a      	lsls	r2, r3
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	4013      	ands	r3, r2
 800424a:	2b00      	cmp	r3, #0
 800424c:	d01a      	beq.n	8004284 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 0304 	and.w	r3, r3, #4
 8004258:	2b00      	cmp	r3, #0
 800425a:	d013      	beq.n	8004284 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f022 0204 	bic.w	r2, r2, #4
 800426a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004270:	2208      	movs	r2, #8
 8004272:	409a      	lsls	r2, r3
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800427c:	f043 0201 	orr.w	r2, r3, #1
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004288:	2201      	movs	r2, #1
 800428a:	409a      	lsls	r2, r3
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	4013      	ands	r3, r2
 8004290:	2b00      	cmp	r3, #0
 8004292:	d012      	beq.n	80042ba <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	695b      	ldr	r3, [r3, #20]
 800429a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d00b      	beq.n	80042ba <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042a6:	2201      	movs	r2, #1
 80042a8:	409a      	lsls	r2, r3
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042b2:	f043 0202 	orr.w	r2, r3, #2
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042be:	2204      	movs	r2, #4
 80042c0:	409a      	lsls	r2, r3
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	4013      	ands	r3, r2
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d012      	beq.n	80042f0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 0302 	and.w	r3, r3, #2
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d00b      	beq.n	80042f0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042dc:	2204      	movs	r2, #4
 80042de:	409a      	lsls	r2, r3
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042e8:	f043 0204 	orr.w	r2, r3, #4
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042f4:	2210      	movs	r2, #16
 80042f6:	409a      	lsls	r2, r3
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	4013      	ands	r3, r2
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d043      	beq.n	8004388 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 0308 	and.w	r3, r3, #8
 800430a:	2b00      	cmp	r3, #0
 800430c:	d03c      	beq.n	8004388 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004312:	2210      	movs	r2, #16
 8004314:	409a      	lsls	r2, r3
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004324:	2b00      	cmp	r3, #0
 8004326:	d018      	beq.n	800435a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004332:	2b00      	cmp	r3, #0
 8004334:	d108      	bne.n	8004348 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800433a:	2b00      	cmp	r3, #0
 800433c:	d024      	beq.n	8004388 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	4798      	blx	r3
 8004346:	e01f      	b.n	8004388 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800434c:	2b00      	cmp	r3, #0
 800434e:	d01b      	beq.n	8004388 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004354:	6878      	ldr	r0, [r7, #4]
 8004356:	4798      	blx	r3
 8004358:	e016      	b.n	8004388 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004364:	2b00      	cmp	r3, #0
 8004366:	d107      	bne.n	8004378 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	681a      	ldr	r2, [r3, #0]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f022 0208 	bic.w	r2, r2, #8
 8004376:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800437c:	2b00      	cmp	r3, #0
 800437e:	d003      	beq.n	8004388 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800438c:	2220      	movs	r2, #32
 800438e:	409a      	lsls	r2, r3
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	4013      	ands	r3, r2
 8004394:	2b00      	cmp	r3, #0
 8004396:	f000 808e 	beq.w	80044b6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 0310 	and.w	r3, r3, #16
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	f000 8086 	beq.w	80044b6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043ae:	2220      	movs	r2, #32
 80043b0:	409a      	lsls	r2, r3
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80043bc:	b2db      	uxtb	r3, r3
 80043be:	2b05      	cmp	r3, #5
 80043c0:	d136      	bne.n	8004430 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f022 0216 	bic.w	r2, r2, #22
 80043d0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	695a      	ldr	r2, [r3, #20]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80043e0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d103      	bne.n	80043f2 <HAL_DMA_IRQHandler+0x1da>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d007      	beq.n	8004402 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f022 0208 	bic.w	r2, r2, #8
 8004400:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004406:	223f      	movs	r2, #63	; 0x3f
 8004408:	409a      	lsls	r2, r3
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2201      	movs	r2, #1
 800441a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004422:	2b00      	cmp	r3, #0
 8004424:	d07d      	beq.n	8004522 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	4798      	blx	r3
        }
        return;
 800442e:	e078      	b.n	8004522 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800443a:	2b00      	cmp	r3, #0
 800443c:	d01c      	beq.n	8004478 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004448:	2b00      	cmp	r3, #0
 800444a:	d108      	bne.n	800445e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004450:	2b00      	cmp	r3, #0
 8004452:	d030      	beq.n	80044b6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004458:	6878      	ldr	r0, [r7, #4]
 800445a:	4798      	blx	r3
 800445c:	e02b      	b.n	80044b6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004462:	2b00      	cmp	r3, #0
 8004464:	d027      	beq.n	80044b6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	4798      	blx	r3
 800446e:	e022      	b.n	80044b6 <HAL_DMA_IRQHandler+0x29e>
 8004470:	20000024 	.word	0x20000024
 8004474:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004482:	2b00      	cmp	r3, #0
 8004484:	d10f      	bne.n	80044a6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f022 0210 	bic.w	r2, r2, #16
 8004494:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2201      	movs	r2, #1
 80044a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d003      	beq.n	80044b6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d032      	beq.n	8004524 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044c2:	f003 0301 	and.w	r3, r3, #1
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d022      	beq.n	8004510 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2205      	movs	r2, #5
 80044ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f022 0201 	bic.w	r2, r2, #1
 80044e0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	3301      	adds	r3, #1
 80044e6:	60bb      	str	r3, [r7, #8]
 80044e8:	697a      	ldr	r2, [r7, #20]
 80044ea:	429a      	cmp	r2, r3
 80044ec:	d307      	bcc.n	80044fe <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f003 0301 	and.w	r3, r3, #1
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d1f2      	bne.n	80044e2 <HAL_DMA_IRQHandler+0x2ca>
 80044fc:	e000      	b.n	8004500 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80044fe:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2200      	movs	r2, #0
 8004504:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004514:	2b00      	cmp	r3, #0
 8004516:	d005      	beq.n	8004524 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	4798      	blx	r3
 8004520:	e000      	b.n	8004524 <HAL_DMA_IRQHandler+0x30c>
        return;
 8004522:	bf00      	nop
    }
  }
}
 8004524:	3718      	adds	r7, #24
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}
 800452a:	bf00      	nop

0800452c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800452c:	b480      	push	{r7}
 800452e:	b085      	sub	sp, #20
 8004530:	af00      	add	r7, sp, #0
 8004532:	60f8      	str	r0, [r7, #12]
 8004534:	60b9      	str	r1, [r7, #8]
 8004536:	607a      	str	r2, [r7, #4]
 8004538:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004548:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	683a      	ldr	r2, [r7, #0]
 8004550:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	2b40      	cmp	r3, #64	; 0x40
 8004558:	d108      	bne.n	800456c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	68ba      	ldr	r2, [r7, #8]
 8004568:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800456a:	e007      	b.n	800457c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	68ba      	ldr	r2, [r7, #8]
 8004572:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	687a      	ldr	r2, [r7, #4]
 800457a:	60da      	str	r2, [r3, #12]
}
 800457c:	bf00      	nop
 800457e:	3714      	adds	r7, #20
 8004580:	46bd      	mov	sp, r7
 8004582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004586:	4770      	bx	lr

08004588 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004588:	b480      	push	{r7}
 800458a:	b085      	sub	sp, #20
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	b2db      	uxtb	r3, r3
 8004596:	3b10      	subs	r3, #16
 8004598:	4a14      	ldr	r2, [pc, #80]	; (80045ec <DMA_CalcBaseAndBitshift+0x64>)
 800459a:	fba2 2303 	umull	r2, r3, r2, r3
 800459e:	091b      	lsrs	r3, r3, #4
 80045a0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80045a2:	4a13      	ldr	r2, [pc, #76]	; (80045f0 <DMA_CalcBaseAndBitshift+0x68>)
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	4413      	add	r3, r2
 80045a8:	781b      	ldrb	r3, [r3, #0]
 80045aa:	461a      	mov	r2, r3
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2b03      	cmp	r3, #3
 80045b4:	d909      	bls.n	80045ca <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80045be:	f023 0303 	bic.w	r3, r3, #3
 80045c2:	1d1a      	adds	r2, r3, #4
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	659a      	str	r2, [r3, #88]	; 0x58
 80045c8:	e007      	b.n	80045da <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80045d2:	f023 0303 	bic.w	r3, r3, #3
 80045d6:	687a      	ldr	r2, [r7, #4]
 80045d8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80045de:	4618      	mov	r0, r3
 80045e0:	3714      	adds	r7, #20
 80045e2:	46bd      	mov	sp, r7
 80045e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e8:	4770      	bx	lr
 80045ea:	bf00      	nop
 80045ec:	aaaaaaab 	.word	0xaaaaaaab
 80045f0:	0800c31c 	.word	0x0800c31c

080045f4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b085      	sub	sp, #20
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045fc:	2300      	movs	r3, #0
 80045fe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004604:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	699b      	ldr	r3, [r3, #24]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d11f      	bne.n	800464e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	2b03      	cmp	r3, #3
 8004612:	d855      	bhi.n	80046c0 <DMA_CheckFifoParam+0xcc>
 8004614:	a201      	add	r2, pc, #4	; (adr r2, 800461c <DMA_CheckFifoParam+0x28>)
 8004616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800461a:	bf00      	nop
 800461c:	0800462d 	.word	0x0800462d
 8004620:	0800463f 	.word	0x0800463f
 8004624:	0800462d 	.word	0x0800462d
 8004628:	080046c1 	.word	0x080046c1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004630:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004634:	2b00      	cmp	r3, #0
 8004636:	d045      	beq.n	80046c4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800463c:	e042      	b.n	80046c4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004642:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004646:	d13f      	bne.n	80046c8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800464c:	e03c      	b.n	80046c8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	699b      	ldr	r3, [r3, #24]
 8004652:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004656:	d121      	bne.n	800469c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	2b03      	cmp	r3, #3
 800465c:	d836      	bhi.n	80046cc <DMA_CheckFifoParam+0xd8>
 800465e:	a201      	add	r2, pc, #4	; (adr r2, 8004664 <DMA_CheckFifoParam+0x70>)
 8004660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004664:	08004675 	.word	0x08004675
 8004668:	0800467b 	.word	0x0800467b
 800466c:	08004675 	.word	0x08004675
 8004670:	0800468d 	.word	0x0800468d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	73fb      	strb	r3, [r7, #15]
      break;
 8004678:	e02f      	b.n	80046da <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800467e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004682:	2b00      	cmp	r3, #0
 8004684:	d024      	beq.n	80046d0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800468a:	e021      	b.n	80046d0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004690:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004694:	d11e      	bne.n	80046d4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800469a:	e01b      	b.n	80046d4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	2b02      	cmp	r3, #2
 80046a0:	d902      	bls.n	80046a8 <DMA_CheckFifoParam+0xb4>
 80046a2:	2b03      	cmp	r3, #3
 80046a4:	d003      	beq.n	80046ae <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80046a6:	e018      	b.n	80046da <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
 80046aa:	73fb      	strb	r3, [r7, #15]
      break;
 80046ac:	e015      	b.n	80046da <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d00e      	beq.n	80046d8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	73fb      	strb	r3, [r7, #15]
      break;
 80046be:	e00b      	b.n	80046d8 <DMA_CheckFifoParam+0xe4>
      break;
 80046c0:	bf00      	nop
 80046c2:	e00a      	b.n	80046da <DMA_CheckFifoParam+0xe6>
      break;
 80046c4:	bf00      	nop
 80046c6:	e008      	b.n	80046da <DMA_CheckFifoParam+0xe6>
      break;
 80046c8:	bf00      	nop
 80046ca:	e006      	b.n	80046da <DMA_CheckFifoParam+0xe6>
      break;
 80046cc:	bf00      	nop
 80046ce:	e004      	b.n	80046da <DMA_CheckFifoParam+0xe6>
      break;
 80046d0:	bf00      	nop
 80046d2:	e002      	b.n	80046da <DMA_CheckFifoParam+0xe6>
      break;   
 80046d4:	bf00      	nop
 80046d6:	e000      	b.n	80046da <DMA_CheckFifoParam+0xe6>
      break;
 80046d8:	bf00      	nop
    }
  } 
  
  return status; 
 80046da:	7bfb      	ldrb	r3, [r7, #15]
}
 80046dc:	4618      	mov	r0, r3
 80046de:	3714      	adds	r7, #20
 80046e0:	46bd      	mov	sp, r7
 80046e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e6:	4770      	bx	lr

080046e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b089      	sub	sp, #36	; 0x24
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
 80046f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80046f2:	2300      	movs	r3, #0
 80046f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80046f6:	2300      	movs	r3, #0
 80046f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80046fa:	2300      	movs	r3, #0
 80046fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80046fe:	2300      	movs	r3, #0
 8004700:	61fb      	str	r3, [r7, #28]
 8004702:	e159      	b.n	80049b8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004704:	2201      	movs	r2, #1
 8004706:	69fb      	ldr	r3, [r7, #28]
 8004708:	fa02 f303 	lsl.w	r3, r2, r3
 800470c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	697a      	ldr	r2, [r7, #20]
 8004714:	4013      	ands	r3, r2
 8004716:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004718:	693a      	ldr	r2, [r7, #16]
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	429a      	cmp	r2, r3
 800471e:	f040 8148 	bne.w	80049b2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	2b01      	cmp	r3, #1
 8004728:	d00b      	beq.n	8004742 <HAL_GPIO_Init+0x5a>
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	2b02      	cmp	r3, #2
 8004730:	d007      	beq.n	8004742 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004736:	2b11      	cmp	r3, #17
 8004738:	d003      	beq.n	8004742 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	2b12      	cmp	r3, #18
 8004740:	d130      	bne.n	80047a4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004748:	69fb      	ldr	r3, [r7, #28]
 800474a:	005b      	lsls	r3, r3, #1
 800474c:	2203      	movs	r2, #3
 800474e:	fa02 f303 	lsl.w	r3, r2, r3
 8004752:	43db      	mvns	r3, r3
 8004754:	69ba      	ldr	r2, [r7, #24]
 8004756:	4013      	ands	r3, r2
 8004758:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	68da      	ldr	r2, [r3, #12]
 800475e:	69fb      	ldr	r3, [r7, #28]
 8004760:	005b      	lsls	r3, r3, #1
 8004762:	fa02 f303 	lsl.w	r3, r2, r3
 8004766:	69ba      	ldr	r2, [r7, #24]
 8004768:	4313      	orrs	r3, r2
 800476a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	69ba      	ldr	r2, [r7, #24]
 8004770:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004778:	2201      	movs	r2, #1
 800477a:	69fb      	ldr	r3, [r7, #28]
 800477c:	fa02 f303 	lsl.w	r3, r2, r3
 8004780:	43db      	mvns	r3, r3
 8004782:	69ba      	ldr	r2, [r7, #24]
 8004784:	4013      	ands	r3, r2
 8004786:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	091b      	lsrs	r3, r3, #4
 800478e:	f003 0201 	and.w	r2, r3, #1
 8004792:	69fb      	ldr	r3, [r7, #28]
 8004794:	fa02 f303 	lsl.w	r3, r2, r3
 8004798:	69ba      	ldr	r2, [r7, #24]
 800479a:	4313      	orrs	r3, r2
 800479c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	69ba      	ldr	r2, [r7, #24]
 80047a2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	68db      	ldr	r3, [r3, #12]
 80047a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80047aa:	69fb      	ldr	r3, [r7, #28]
 80047ac:	005b      	lsls	r3, r3, #1
 80047ae:	2203      	movs	r2, #3
 80047b0:	fa02 f303 	lsl.w	r3, r2, r3
 80047b4:	43db      	mvns	r3, r3
 80047b6:	69ba      	ldr	r2, [r7, #24]
 80047b8:	4013      	ands	r3, r2
 80047ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	689a      	ldr	r2, [r3, #8]
 80047c0:	69fb      	ldr	r3, [r7, #28]
 80047c2:	005b      	lsls	r3, r3, #1
 80047c4:	fa02 f303 	lsl.w	r3, r2, r3
 80047c8:	69ba      	ldr	r2, [r7, #24]
 80047ca:	4313      	orrs	r3, r2
 80047cc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	69ba      	ldr	r2, [r7, #24]
 80047d2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	2b02      	cmp	r3, #2
 80047da:	d003      	beq.n	80047e4 <HAL_GPIO_Init+0xfc>
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	2b12      	cmp	r3, #18
 80047e2:	d123      	bne.n	800482c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80047e4:	69fb      	ldr	r3, [r7, #28]
 80047e6:	08da      	lsrs	r2, r3, #3
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	3208      	adds	r2, #8
 80047ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80047f2:	69fb      	ldr	r3, [r7, #28]
 80047f4:	f003 0307 	and.w	r3, r3, #7
 80047f8:	009b      	lsls	r3, r3, #2
 80047fa:	220f      	movs	r2, #15
 80047fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004800:	43db      	mvns	r3, r3
 8004802:	69ba      	ldr	r2, [r7, #24]
 8004804:	4013      	ands	r3, r2
 8004806:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	691a      	ldr	r2, [r3, #16]
 800480c:	69fb      	ldr	r3, [r7, #28]
 800480e:	f003 0307 	and.w	r3, r3, #7
 8004812:	009b      	lsls	r3, r3, #2
 8004814:	fa02 f303 	lsl.w	r3, r2, r3
 8004818:	69ba      	ldr	r2, [r7, #24]
 800481a:	4313      	orrs	r3, r2
 800481c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800481e:	69fb      	ldr	r3, [r7, #28]
 8004820:	08da      	lsrs	r2, r3, #3
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	3208      	adds	r2, #8
 8004826:	69b9      	ldr	r1, [r7, #24]
 8004828:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004832:	69fb      	ldr	r3, [r7, #28]
 8004834:	005b      	lsls	r3, r3, #1
 8004836:	2203      	movs	r2, #3
 8004838:	fa02 f303 	lsl.w	r3, r2, r3
 800483c:	43db      	mvns	r3, r3
 800483e:	69ba      	ldr	r2, [r7, #24]
 8004840:	4013      	ands	r3, r2
 8004842:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	f003 0203 	and.w	r2, r3, #3
 800484c:	69fb      	ldr	r3, [r7, #28]
 800484e:	005b      	lsls	r3, r3, #1
 8004850:	fa02 f303 	lsl.w	r3, r2, r3
 8004854:	69ba      	ldr	r2, [r7, #24]
 8004856:	4313      	orrs	r3, r2
 8004858:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	69ba      	ldr	r2, [r7, #24]
 800485e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004868:	2b00      	cmp	r3, #0
 800486a:	f000 80a2 	beq.w	80049b2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800486e:	2300      	movs	r3, #0
 8004870:	60fb      	str	r3, [r7, #12]
 8004872:	4b56      	ldr	r3, [pc, #344]	; (80049cc <HAL_GPIO_Init+0x2e4>)
 8004874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004876:	4a55      	ldr	r2, [pc, #340]	; (80049cc <HAL_GPIO_Init+0x2e4>)
 8004878:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800487c:	6453      	str	r3, [r2, #68]	; 0x44
 800487e:	4b53      	ldr	r3, [pc, #332]	; (80049cc <HAL_GPIO_Init+0x2e4>)
 8004880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004882:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004886:	60fb      	str	r3, [r7, #12]
 8004888:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800488a:	4a51      	ldr	r2, [pc, #324]	; (80049d0 <HAL_GPIO_Init+0x2e8>)
 800488c:	69fb      	ldr	r3, [r7, #28]
 800488e:	089b      	lsrs	r3, r3, #2
 8004890:	3302      	adds	r3, #2
 8004892:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004896:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004898:	69fb      	ldr	r3, [r7, #28]
 800489a:	f003 0303 	and.w	r3, r3, #3
 800489e:	009b      	lsls	r3, r3, #2
 80048a0:	220f      	movs	r2, #15
 80048a2:	fa02 f303 	lsl.w	r3, r2, r3
 80048a6:	43db      	mvns	r3, r3
 80048a8:	69ba      	ldr	r2, [r7, #24]
 80048aa:	4013      	ands	r3, r2
 80048ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	4a48      	ldr	r2, [pc, #288]	; (80049d4 <HAL_GPIO_Init+0x2ec>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d019      	beq.n	80048ea <HAL_GPIO_Init+0x202>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	4a47      	ldr	r2, [pc, #284]	; (80049d8 <HAL_GPIO_Init+0x2f0>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d013      	beq.n	80048e6 <HAL_GPIO_Init+0x1fe>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4a46      	ldr	r2, [pc, #280]	; (80049dc <HAL_GPIO_Init+0x2f4>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d00d      	beq.n	80048e2 <HAL_GPIO_Init+0x1fa>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4a45      	ldr	r2, [pc, #276]	; (80049e0 <HAL_GPIO_Init+0x2f8>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d007      	beq.n	80048de <HAL_GPIO_Init+0x1f6>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	4a44      	ldr	r2, [pc, #272]	; (80049e4 <HAL_GPIO_Init+0x2fc>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d101      	bne.n	80048da <HAL_GPIO_Init+0x1f2>
 80048d6:	2304      	movs	r3, #4
 80048d8:	e008      	b.n	80048ec <HAL_GPIO_Init+0x204>
 80048da:	2307      	movs	r3, #7
 80048dc:	e006      	b.n	80048ec <HAL_GPIO_Init+0x204>
 80048de:	2303      	movs	r3, #3
 80048e0:	e004      	b.n	80048ec <HAL_GPIO_Init+0x204>
 80048e2:	2302      	movs	r3, #2
 80048e4:	e002      	b.n	80048ec <HAL_GPIO_Init+0x204>
 80048e6:	2301      	movs	r3, #1
 80048e8:	e000      	b.n	80048ec <HAL_GPIO_Init+0x204>
 80048ea:	2300      	movs	r3, #0
 80048ec:	69fa      	ldr	r2, [r7, #28]
 80048ee:	f002 0203 	and.w	r2, r2, #3
 80048f2:	0092      	lsls	r2, r2, #2
 80048f4:	4093      	lsls	r3, r2
 80048f6:	69ba      	ldr	r2, [r7, #24]
 80048f8:	4313      	orrs	r3, r2
 80048fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80048fc:	4934      	ldr	r1, [pc, #208]	; (80049d0 <HAL_GPIO_Init+0x2e8>)
 80048fe:	69fb      	ldr	r3, [r7, #28]
 8004900:	089b      	lsrs	r3, r3, #2
 8004902:	3302      	adds	r3, #2
 8004904:	69ba      	ldr	r2, [r7, #24]
 8004906:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800490a:	4b37      	ldr	r3, [pc, #220]	; (80049e8 <HAL_GPIO_Init+0x300>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	43db      	mvns	r3, r3
 8004914:	69ba      	ldr	r2, [r7, #24]
 8004916:	4013      	ands	r3, r2
 8004918:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004922:	2b00      	cmp	r3, #0
 8004924:	d003      	beq.n	800492e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004926:	69ba      	ldr	r2, [r7, #24]
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	4313      	orrs	r3, r2
 800492c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800492e:	4a2e      	ldr	r2, [pc, #184]	; (80049e8 <HAL_GPIO_Init+0x300>)
 8004930:	69bb      	ldr	r3, [r7, #24]
 8004932:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004934:	4b2c      	ldr	r3, [pc, #176]	; (80049e8 <HAL_GPIO_Init+0x300>)
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	43db      	mvns	r3, r3
 800493e:	69ba      	ldr	r2, [r7, #24]
 8004940:	4013      	ands	r3, r2
 8004942:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800494c:	2b00      	cmp	r3, #0
 800494e:	d003      	beq.n	8004958 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004950:	69ba      	ldr	r2, [r7, #24]
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	4313      	orrs	r3, r2
 8004956:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004958:	4a23      	ldr	r2, [pc, #140]	; (80049e8 <HAL_GPIO_Init+0x300>)
 800495a:	69bb      	ldr	r3, [r7, #24]
 800495c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800495e:	4b22      	ldr	r3, [pc, #136]	; (80049e8 <HAL_GPIO_Init+0x300>)
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	43db      	mvns	r3, r3
 8004968:	69ba      	ldr	r2, [r7, #24]
 800496a:	4013      	ands	r3, r2
 800496c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004976:	2b00      	cmp	r3, #0
 8004978:	d003      	beq.n	8004982 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800497a:	69ba      	ldr	r2, [r7, #24]
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	4313      	orrs	r3, r2
 8004980:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004982:	4a19      	ldr	r2, [pc, #100]	; (80049e8 <HAL_GPIO_Init+0x300>)
 8004984:	69bb      	ldr	r3, [r7, #24]
 8004986:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004988:	4b17      	ldr	r3, [pc, #92]	; (80049e8 <HAL_GPIO_Init+0x300>)
 800498a:	68db      	ldr	r3, [r3, #12]
 800498c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	43db      	mvns	r3, r3
 8004992:	69ba      	ldr	r2, [r7, #24]
 8004994:	4013      	ands	r3, r2
 8004996:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d003      	beq.n	80049ac <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80049a4:	69ba      	ldr	r2, [r7, #24]
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	4313      	orrs	r3, r2
 80049aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80049ac:	4a0e      	ldr	r2, [pc, #56]	; (80049e8 <HAL_GPIO_Init+0x300>)
 80049ae:	69bb      	ldr	r3, [r7, #24]
 80049b0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80049b2:	69fb      	ldr	r3, [r7, #28]
 80049b4:	3301      	adds	r3, #1
 80049b6:	61fb      	str	r3, [r7, #28]
 80049b8:	69fb      	ldr	r3, [r7, #28]
 80049ba:	2b0f      	cmp	r3, #15
 80049bc:	f67f aea2 	bls.w	8004704 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80049c0:	bf00      	nop
 80049c2:	3724      	adds	r7, #36	; 0x24
 80049c4:	46bd      	mov	sp, r7
 80049c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ca:	4770      	bx	lr
 80049cc:	40023800 	.word	0x40023800
 80049d0:	40013800 	.word	0x40013800
 80049d4:	40020000 	.word	0x40020000
 80049d8:	40020400 	.word	0x40020400
 80049dc:	40020800 	.word	0x40020800
 80049e0:	40020c00 	.word	0x40020c00
 80049e4:	40021000 	.word	0x40021000
 80049e8:	40013c00 	.word	0x40013c00

080049ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b085      	sub	sp, #20
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
 80049f4:	460b      	mov	r3, r1
 80049f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	691a      	ldr	r2, [r3, #16]
 80049fc:	887b      	ldrh	r3, [r7, #2]
 80049fe:	4013      	ands	r3, r2
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d002      	beq.n	8004a0a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004a04:	2301      	movs	r3, #1
 8004a06:	73fb      	strb	r3, [r7, #15]
 8004a08:	e001      	b.n	8004a0e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004a0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	3714      	adds	r7, #20
 8004a14:	46bd      	mov	sp, r7
 8004a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1a:	4770      	bx	lr

08004a1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b083      	sub	sp, #12
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
 8004a24:	460b      	mov	r3, r1
 8004a26:	807b      	strh	r3, [r7, #2]
 8004a28:	4613      	mov	r3, r2
 8004a2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004a2c:	787b      	ldrb	r3, [r7, #1]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d003      	beq.n	8004a3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a32:	887a      	ldrh	r2, [r7, #2]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004a38:	e003      	b.n	8004a42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004a3a:	887b      	ldrh	r3, [r7, #2]
 8004a3c:	041a      	lsls	r2, r3, #16
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	619a      	str	r2, [r3, #24]
}
 8004a42:	bf00      	nop
 8004a44:	370c      	adds	r7, #12
 8004a46:	46bd      	mov	sp, r7
 8004a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4c:	4770      	bx	lr
	...

08004a50 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b086      	sub	sp, #24
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d101      	bne.n	8004a62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	e25b      	b.n	8004f1a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f003 0301 	and.w	r3, r3, #1
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d075      	beq.n	8004b5a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004a6e:	4ba3      	ldr	r3, [pc, #652]	; (8004cfc <HAL_RCC_OscConfig+0x2ac>)
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	f003 030c 	and.w	r3, r3, #12
 8004a76:	2b04      	cmp	r3, #4
 8004a78:	d00c      	beq.n	8004a94 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a7a:	4ba0      	ldr	r3, [pc, #640]	; (8004cfc <HAL_RCC_OscConfig+0x2ac>)
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004a82:	2b08      	cmp	r3, #8
 8004a84:	d112      	bne.n	8004aac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a86:	4b9d      	ldr	r3, [pc, #628]	; (8004cfc <HAL_RCC_OscConfig+0x2ac>)
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a92:	d10b      	bne.n	8004aac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a94:	4b99      	ldr	r3, [pc, #612]	; (8004cfc <HAL_RCC_OscConfig+0x2ac>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d05b      	beq.n	8004b58 <HAL_RCC_OscConfig+0x108>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d157      	bne.n	8004b58 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	e236      	b.n	8004f1a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ab4:	d106      	bne.n	8004ac4 <HAL_RCC_OscConfig+0x74>
 8004ab6:	4b91      	ldr	r3, [pc, #580]	; (8004cfc <HAL_RCC_OscConfig+0x2ac>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a90      	ldr	r2, [pc, #576]	; (8004cfc <HAL_RCC_OscConfig+0x2ac>)
 8004abc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ac0:	6013      	str	r3, [r2, #0]
 8004ac2:	e01d      	b.n	8004b00 <HAL_RCC_OscConfig+0xb0>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004acc:	d10c      	bne.n	8004ae8 <HAL_RCC_OscConfig+0x98>
 8004ace:	4b8b      	ldr	r3, [pc, #556]	; (8004cfc <HAL_RCC_OscConfig+0x2ac>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a8a      	ldr	r2, [pc, #552]	; (8004cfc <HAL_RCC_OscConfig+0x2ac>)
 8004ad4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ad8:	6013      	str	r3, [r2, #0]
 8004ada:	4b88      	ldr	r3, [pc, #544]	; (8004cfc <HAL_RCC_OscConfig+0x2ac>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a87      	ldr	r2, [pc, #540]	; (8004cfc <HAL_RCC_OscConfig+0x2ac>)
 8004ae0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ae4:	6013      	str	r3, [r2, #0]
 8004ae6:	e00b      	b.n	8004b00 <HAL_RCC_OscConfig+0xb0>
 8004ae8:	4b84      	ldr	r3, [pc, #528]	; (8004cfc <HAL_RCC_OscConfig+0x2ac>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a83      	ldr	r2, [pc, #524]	; (8004cfc <HAL_RCC_OscConfig+0x2ac>)
 8004aee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004af2:	6013      	str	r3, [r2, #0]
 8004af4:	4b81      	ldr	r3, [pc, #516]	; (8004cfc <HAL_RCC_OscConfig+0x2ac>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a80      	ldr	r2, [pc, #512]	; (8004cfc <HAL_RCC_OscConfig+0x2ac>)
 8004afa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004afe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d013      	beq.n	8004b30 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b08:	f7fe fc06 	bl	8003318 <HAL_GetTick>
 8004b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b0e:	e008      	b.n	8004b22 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b10:	f7fe fc02 	bl	8003318 <HAL_GetTick>
 8004b14:	4602      	mov	r2, r0
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	1ad3      	subs	r3, r2, r3
 8004b1a:	2b64      	cmp	r3, #100	; 0x64
 8004b1c:	d901      	bls.n	8004b22 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004b1e:	2303      	movs	r3, #3
 8004b20:	e1fb      	b.n	8004f1a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b22:	4b76      	ldr	r3, [pc, #472]	; (8004cfc <HAL_RCC_OscConfig+0x2ac>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d0f0      	beq.n	8004b10 <HAL_RCC_OscConfig+0xc0>
 8004b2e:	e014      	b.n	8004b5a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b30:	f7fe fbf2 	bl	8003318 <HAL_GetTick>
 8004b34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b36:	e008      	b.n	8004b4a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b38:	f7fe fbee 	bl	8003318 <HAL_GetTick>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	1ad3      	subs	r3, r2, r3
 8004b42:	2b64      	cmp	r3, #100	; 0x64
 8004b44:	d901      	bls.n	8004b4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004b46:	2303      	movs	r3, #3
 8004b48:	e1e7      	b.n	8004f1a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b4a:	4b6c      	ldr	r3, [pc, #432]	; (8004cfc <HAL_RCC_OscConfig+0x2ac>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d1f0      	bne.n	8004b38 <HAL_RCC_OscConfig+0xe8>
 8004b56:	e000      	b.n	8004b5a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f003 0302 	and.w	r3, r3, #2
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d063      	beq.n	8004c2e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004b66:	4b65      	ldr	r3, [pc, #404]	; (8004cfc <HAL_RCC_OscConfig+0x2ac>)
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	f003 030c 	and.w	r3, r3, #12
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d00b      	beq.n	8004b8a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b72:	4b62      	ldr	r3, [pc, #392]	; (8004cfc <HAL_RCC_OscConfig+0x2ac>)
 8004b74:	689b      	ldr	r3, [r3, #8]
 8004b76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004b7a:	2b08      	cmp	r3, #8
 8004b7c:	d11c      	bne.n	8004bb8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b7e:	4b5f      	ldr	r3, [pc, #380]	; (8004cfc <HAL_RCC_OscConfig+0x2ac>)
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d116      	bne.n	8004bb8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b8a:	4b5c      	ldr	r3, [pc, #368]	; (8004cfc <HAL_RCC_OscConfig+0x2ac>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f003 0302 	and.w	r3, r3, #2
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d005      	beq.n	8004ba2 <HAL_RCC_OscConfig+0x152>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	68db      	ldr	r3, [r3, #12]
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d001      	beq.n	8004ba2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e1bb      	b.n	8004f1a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ba2:	4b56      	ldr	r3, [pc, #344]	; (8004cfc <HAL_RCC_OscConfig+0x2ac>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	691b      	ldr	r3, [r3, #16]
 8004bae:	00db      	lsls	r3, r3, #3
 8004bb0:	4952      	ldr	r1, [pc, #328]	; (8004cfc <HAL_RCC_OscConfig+0x2ac>)
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bb6:	e03a      	b.n	8004c2e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d020      	beq.n	8004c02 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004bc0:	4b4f      	ldr	r3, [pc, #316]	; (8004d00 <HAL_RCC_OscConfig+0x2b0>)
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bc6:	f7fe fba7 	bl	8003318 <HAL_GetTick>
 8004bca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bcc:	e008      	b.n	8004be0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004bce:	f7fe fba3 	bl	8003318 <HAL_GetTick>
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	1ad3      	subs	r3, r2, r3
 8004bd8:	2b02      	cmp	r3, #2
 8004bda:	d901      	bls.n	8004be0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004bdc:	2303      	movs	r3, #3
 8004bde:	e19c      	b.n	8004f1a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004be0:	4b46      	ldr	r3, [pc, #280]	; (8004cfc <HAL_RCC_OscConfig+0x2ac>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f003 0302 	and.w	r3, r3, #2
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d0f0      	beq.n	8004bce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bec:	4b43      	ldr	r3, [pc, #268]	; (8004cfc <HAL_RCC_OscConfig+0x2ac>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	691b      	ldr	r3, [r3, #16]
 8004bf8:	00db      	lsls	r3, r3, #3
 8004bfa:	4940      	ldr	r1, [pc, #256]	; (8004cfc <HAL_RCC_OscConfig+0x2ac>)
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	600b      	str	r3, [r1, #0]
 8004c00:	e015      	b.n	8004c2e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c02:	4b3f      	ldr	r3, [pc, #252]	; (8004d00 <HAL_RCC_OscConfig+0x2b0>)
 8004c04:	2200      	movs	r2, #0
 8004c06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c08:	f7fe fb86 	bl	8003318 <HAL_GetTick>
 8004c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c0e:	e008      	b.n	8004c22 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c10:	f7fe fb82 	bl	8003318 <HAL_GetTick>
 8004c14:	4602      	mov	r2, r0
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	1ad3      	subs	r3, r2, r3
 8004c1a:	2b02      	cmp	r3, #2
 8004c1c:	d901      	bls.n	8004c22 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004c1e:	2303      	movs	r3, #3
 8004c20:	e17b      	b.n	8004f1a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c22:	4b36      	ldr	r3, [pc, #216]	; (8004cfc <HAL_RCC_OscConfig+0x2ac>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f003 0302 	and.w	r3, r3, #2
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d1f0      	bne.n	8004c10 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 0308 	and.w	r3, r3, #8
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d030      	beq.n	8004c9c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	695b      	ldr	r3, [r3, #20]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d016      	beq.n	8004c70 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c42:	4b30      	ldr	r3, [pc, #192]	; (8004d04 <HAL_RCC_OscConfig+0x2b4>)
 8004c44:	2201      	movs	r2, #1
 8004c46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c48:	f7fe fb66 	bl	8003318 <HAL_GetTick>
 8004c4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c4e:	e008      	b.n	8004c62 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c50:	f7fe fb62 	bl	8003318 <HAL_GetTick>
 8004c54:	4602      	mov	r2, r0
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	1ad3      	subs	r3, r2, r3
 8004c5a:	2b02      	cmp	r3, #2
 8004c5c:	d901      	bls.n	8004c62 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004c5e:	2303      	movs	r3, #3
 8004c60:	e15b      	b.n	8004f1a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c62:	4b26      	ldr	r3, [pc, #152]	; (8004cfc <HAL_RCC_OscConfig+0x2ac>)
 8004c64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c66:	f003 0302 	and.w	r3, r3, #2
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d0f0      	beq.n	8004c50 <HAL_RCC_OscConfig+0x200>
 8004c6e:	e015      	b.n	8004c9c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c70:	4b24      	ldr	r3, [pc, #144]	; (8004d04 <HAL_RCC_OscConfig+0x2b4>)
 8004c72:	2200      	movs	r2, #0
 8004c74:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c76:	f7fe fb4f 	bl	8003318 <HAL_GetTick>
 8004c7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c7c:	e008      	b.n	8004c90 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c7e:	f7fe fb4b 	bl	8003318 <HAL_GetTick>
 8004c82:	4602      	mov	r2, r0
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	1ad3      	subs	r3, r2, r3
 8004c88:	2b02      	cmp	r3, #2
 8004c8a:	d901      	bls.n	8004c90 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004c8c:	2303      	movs	r3, #3
 8004c8e:	e144      	b.n	8004f1a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c90:	4b1a      	ldr	r3, [pc, #104]	; (8004cfc <HAL_RCC_OscConfig+0x2ac>)
 8004c92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c94:	f003 0302 	and.w	r3, r3, #2
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d1f0      	bne.n	8004c7e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f003 0304 	and.w	r3, r3, #4
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	f000 80a0 	beq.w	8004dea <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004caa:	2300      	movs	r3, #0
 8004cac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004cae:	4b13      	ldr	r3, [pc, #76]	; (8004cfc <HAL_RCC_OscConfig+0x2ac>)
 8004cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d10f      	bne.n	8004cda <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cba:	2300      	movs	r3, #0
 8004cbc:	60bb      	str	r3, [r7, #8]
 8004cbe:	4b0f      	ldr	r3, [pc, #60]	; (8004cfc <HAL_RCC_OscConfig+0x2ac>)
 8004cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc2:	4a0e      	ldr	r2, [pc, #56]	; (8004cfc <HAL_RCC_OscConfig+0x2ac>)
 8004cc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cc8:	6413      	str	r3, [r2, #64]	; 0x40
 8004cca:	4b0c      	ldr	r3, [pc, #48]	; (8004cfc <HAL_RCC_OscConfig+0x2ac>)
 8004ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cd2:	60bb      	str	r3, [r7, #8]
 8004cd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cda:	4b0b      	ldr	r3, [pc, #44]	; (8004d08 <HAL_RCC_OscConfig+0x2b8>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d121      	bne.n	8004d2a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ce6:	4b08      	ldr	r3, [pc, #32]	; (8004d08 <HAL_RCC_OscConfig+0x2b8>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a07      	ldr	r2, [pc, #28]	; (8004d08 <HAL_RCC_OscConfig+0x2b8>)
 8004cec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cf0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004cf2:	f7fe fb11 	bl	8003318 <HAL_GetTick>
 8004cf6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cf8:	e011      	b.n	8004d1e <HAL_RCC_OscConfig+0x2ce>
 8004cfa:	bf00      	nop
 8004cfc:	40023800 	.word	0x40023800
 8004d00:	42470000 	.word	0x42470000
 8004d04:	42470e80 	.word	0x42470e80
 8004d08:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d0c:	f7fe fb04 	bl	8003318 <HAL_GetTick>
 8004d10:	4602      	mov	r2, r0
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	1ad3      	subs	r3, r2, r3
 8004d16:	2b02      	cmp	r3, #2
 8004d18:	d901      	bls.n	8004d1e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004d1a:	2303      	movs	r3, #3
 8004d1c:	e0fd      	b.n	8004f1a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d1e:	4b81      	ldr	r3, [pc, #516]	; (8004f24 <HAL_RCC_OscConfig+0x4d4>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d0f0      	beq.n	8004d0c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	d106      	bne.n	8004d40 <HAL_RCC_OscConfig+0x2f0>
 8004d32:	4b7d      	ldr	r3, [pc, #500]	; (8004f28 <HAL_RCC_OscConfig+0x4d8>)
 8004d34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d36:	4a7c      	ldr	r2, [pc, #496]	; (8004f28 <HAL_RCC_OscConfig+0x4d8>)
 8004d38:	f043 0301 	orr.w	r3, r3, #1
 8004d3c:	6713      	str	r3, [r2, #112]	; 0x70
 8004d3e:	e01c      	b.n	8004d7a <HAL_RCC_OscConfig+0x32a>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	2b05      	cmp	r3, #5
 8004d46:	d10c      	bne.n	8004d62 <HAL_RCC_OscConfig+0x312>
 8004d48:	4b77      	ldr	r3, [pc, #476]	; (8004f28 <HAL_RCC_OscConfig+0x4d8>)
 8004d4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d4c:	4a76      	ldr	r2, [pc, #472]	; (8004f28 <HAL_RCC_OscConfig+0x4d8>)
 8004d4e:	f043 0304 	orr.w	r3, r3, #4
 8004d52:	6713      	str	r3, [r2, #112]	; 0x70
 8004d54:	4b74      	ldr	r3, [pc, #464]	; (8004f28 <HAL_RCC_OscConfig+0x4d8>)
 8004d56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d58:	4a73      	ldr	r2, [pc, #460]	; (8004f28 <HAL_RCC_OscConfig+0x4d8>)
 8004d5a:	f043 0301 	orr.w	r3, r3, #1
 8004d5e:	6713      	str	r3, [r2, #112]	; 0x70
 8004d60:	e00b      	b.n	8004d7a <HAL_RCC_OscConfig+0x32a>
 8004d62:	4b71      	ldr	r3, [pc, #452]	; (8004f28 <HAL_RCC_OscConfig+0x4d8>)
 8004d64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d66:	4a70      	ldr	r2, [pc, #448]	; (8004f28 <HAL_RCC_OscConfig+0x4d8>)
 8004d68:	f023 0301 	bic.w	r3, r3, #1
 8004d6c:	6713      	str	r3, [r2, #112]	; 0x70
 8004d6e:	4b6e      	ldr	r3, [pc, #440]	; (8004f28 <HAL_RCC_OscConfig+0x4d8>)
 8004d70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d72:	4a6d      	ldr	r2, [pc, #436]	; (8004f28 <HAL_RCC_OscConfig+0x4d8>)
 8004d74:	f023 0304 	bic.w	r3, r3, #4
 8004d78:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d015      	beq.n	8004dae <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d82:	f7fe fac9 	bl	8003318 <HAL_GetTick>
 8004d86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d88:	e00a      	b.n	8004da0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d8a:	f7fe fac5 	bl	8003318 <HAL_GetTick>
 8004d8e:	4602      	mov	r2, r0
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	1ad3      	subs	r3, r2, r3
 8004d94:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d901      	bls.n	8004da0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004d9c:	2303      	movs	r3, #3
 8004d9e:	e0bc      	b.n	8004f1a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004da0:	4b61      	ldr	r3, [pc, #388]	; (8004f28 <HAL_RCC_OscConfig+0x4d8>)
 8004da2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004da4:	f003 0302 	and.w	r3, r3, #2
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d0ee      	beq.n	8004d8a <HAL_RCC_OscConfig+0x33a>
 8004dac:	e014      	b.n	8004dd8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004dae:	f7fe fab3 	bl	8003318 <HAL_GetTick>
 8004db2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004db4:	e00a      	b.n	8004dcc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004db6:	f7fe faaf 	bl	8003318 <HAL_GetTick>
 8004dba:	4602      	mov	r2, r0
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	1ad3      	subs	r3, r2, r3
 8004dc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d901      	bls.n	8004dcc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004dc8:	2303      	movs	r3, #3
 8004dca:	e0a6      	b.n	8004f1a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004dcc:	4b56      	ldr	r3, [pc, #344]	; (8004f28 <HAL_RCC_OscConfig+0x4d8>)
 8004dce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dd0:	f003 0302 	and.w	r3, r3, #2
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d1ee      	bne.n	8004db6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004dd8:	7dfb      	ldrb	r3, [r7, #23]
 8004dda:	2b01      	cmp	r3, #1
 8004ddc:	d105      	bne.n	8004dea <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004dde:	4b52      	ldr	r3, [pc, #328]	; (8004f28 <HAL_RCC_OscConfig+0x4d8>)
 8004de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de2:	4a51      	ldr	r2, [pc, #324]	; (8004f28 <HAL_RCC_OscConfig+0x4d8>)
 8004de4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004de8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	699b      	ldr	r3, [r3, #24]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	f000 8092 	beq.w	8004f18 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004df4:	4b4c      	ldr	r3, [pc, #304]	; (8004f28 <HAL_RCC_OscConfig+0x4d8>)
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	f003 030c 	and.w	r3, r3, #12
 8004dfc:	2b08      	cmp	r3, #8
 8004dfe:	d05c      	beq.n	8004eba <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	699b      	ldr	r3, [r3, #24]
 8004e04:	2b02      	cmp	r3, #2
 8004e06:	d141      	bne.n	8004e8c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e08:	4b48      	ldr	r3, [pc, #288]	; (8004f2c <HAL_RCC_OscConfig+0x4dc>)
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e0e:	f7fe fa83 	bl	8003318 <HAL_GetTick>
 8004e12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e14:	e008      	b.n	8004e28 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e16:	f7fe fa7f 	bl	8003318 <HAL_GetTick>
 8004e1a:	4602      	mov	r2, r0
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	1ad3      	subs	r3, r2, r3
 8004e20:	2b02      	cmp	r3, #2
 8004e22:	d901      	bls.n	8004e28 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004e24:	2303      	movs	r3, #3
 8004e26:	e078      	b.n	8004f1a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e28:	4b3f      	ldr	r3, [pc, #252]	; (8004f28 <HAL_RCC_OscConfig+0x4d8>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d1f0      	bne.n	8004e16 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	69da      	ldr	r2, [r3, #28]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6a1b      	ldr	r3, [r3, #32]
 8004e3c:	431a      	orrs	r2, r3
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e42:	019b      	lsls	r3, r3, #6
 8004e44:	431a      	orrs	r2, r3
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e4a:	085b      	lsrs	r3, r3, #1
 8004e4c:	3b01      	subs	r3, #1
 8004e4e:	041b      	lsls	r3, r3, #16
 8004e50:	431a      	orrs	r2, r3
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e56:	061b      	lsls	r3, r3, #24
 8004e58:	4933      	ldr	r1, [pc, #204]	; (8004f28 <HAL_RCC_OscConfig+0x4d8>)
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e5e:	4b33      	ldr	r3, [pc, #204]	; (8004f2c <HAL_RCC_OscConfig+0x4dc>)
 8004e60:	2201      	movs	r2, #1
 8004e62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e64:	f7fe fa58 	bl	8003318 <HAL_GetTick>
 8004e68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e6a:	e008      	b.n	8004e7e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e6c:	f7fe fa54 	bl	8003318 <HAL_GetTick>
 8004e70:	4602      	mov	r2, r0
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	1ad3      	subs	r3, r2, r3
 8004e76:	2b02      	cmp	r3, #2
 8004e78:	d901      	bls.n	8004e7e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004e7a:	2303      	movs	r3, #3
 8004e7c:	e04d      	b.n	8004f1a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e7e:	4b2a      	ldr	r3, [pc, #168]	; (8004f28 <HAL_RCC_OscConfig+0x4d8>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d0f0      	beq.n	8004e6c <HAL_RCC_OscConfig+0x41c>
 8004e8a:	e045      	b.n	8004f18 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e8c:	4b27      	ldr	r3, [pc, #156]	; (8004f2c <HAL_RCC_OscConfig+0x4dc>)
 8004e8e:	2200      	movs	r2, #0
 8004e90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e92:	f7fe fa41 	bl	8003318 <HAL_GetTick>
 8004e96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e98:	e008      	b.n	8004eac <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e9a:	f7fe fa3d 	bl	8003318 <HAL_GetTick>
 8004e9e:	4602      	mov	r2, r0
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	1ad3      	subs	r3, r2, r3
 8004ea4:	2b02      	cmp	r3, #2
 8004ea6:	d901      	bls.n	8004eac <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004ea8:	2303      	movs	r3, #3
 8004eaa:	e036      	b.n	8004f1a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004eac:	4b1e      	ldr	r3, [pc, #120]	; (8004f28 <HAL_RCC_OscConfig+0x4d8>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d1f0      	bne.n	8004e9a <HAL_RCC_OscConfig+0x44a>
 8004eb8:	e02e      	b.n	8004f18 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	699b      	ldr	r3, [r3, #24]
 8004ebe:	2b01      	cmp	r3, #1
 8004ec0:	d101      	bne.n	8004ec6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	e029      	b.n	8004f1a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004ec6:	4b18      	ldr	r3, [pc, #96]	; (8004f28 <HAL_RCC_OscConfig+0x4d8>)
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	69db      	ldr	r3, [r3, #28]
 8004ed6:	429a      	cmp	r2, r3
 8004ed8:	d11c      	bne.n	8004f14 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d115      	bne.n	8004f14 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004ee8:	68fa      	ldr	r2, [r7, #12]
 8004eea:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004eee:	4013      	ands	r3, r2
 8004ef0:	687a      	ldr	r2, [r7, #4]
 8004ef2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d10d      	bne.n	8004f14 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004f02:	429a      	cmp	r2, r3
 8004f04:	d106      	bne.n	8004f14 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004f10:	429a      	cmp	r2, r3
 8004f12:	d001      	beq.n	8004f18 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004f14:	2301      	movs	r3, #1
 8004f16:	e000      	b.n	8004f1a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004f18:	2300      	movs	r3, #0
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3718      	adds	r7, #24
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}
 8004f22:	bf00      	nop
 8004f24:	40007000 	.word	0x40007000
 8004f28:	40023800 	.word	0x40023800
 8004f2c:	42470060 	.word	0x42470060

08004f30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b084      	sub	sp, #16
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
 8004f38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d101      	bne.n	8004f44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f40:	2301      	movs	r3, #1
 8004f42:	e0cc      	b.n	80050de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004f44:	4b68      	ldr	r3, [pc, #416]	; (80050e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f003 030f 	and.w	r3, r3, #15
 8004f4c:	683a      	ldr	r2, [r7, #0]
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	d90c      	bls.n	8004f6c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f52:	4b65      	ldr	r3, [pc, #404]	; (80050e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004f54:	683a      	ldr	r2, [r7, #0]
 8004f56:	b2d2      	uxtb	r2, r2
 8004f58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f5a:	4b63      	ldr	r3, [pc, #396]	; (80050e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f003 030f 	and.w	r3, r3, #15
 8004f62:	683a      	ldr	r2, [r7, #0]
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d001      	beq.n	8004f6c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	e0b8      	b.n	80050de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f003 0302 	and.w	r3, r3, #2
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d020      	beq.n	8004fba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f003 0304 	and.w	r3, r3, #4
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d005      	beq.n	8004f90 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f84:	4b59      	ldr	r3, [pc, #356]	; (80050ec <HAL_RCC_ClockConfig+0x1bc>)
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	4a58      	ldr	r2, [pc, #352]	; (80050ec <HAL_RCC_ClockConfig+0x1bc>)
 8004f8a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004f8e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f003 0308 	and.w	r3, r3, #8
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d005      	beq.n	8004fa8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f9c:	4b53      	ldr	r3, [pc, #332]	; (80050ec <HAL_RCC_ClockConfig+0x1bc>)
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	4a52      	ldr	r2, [pc, #328]	; (80050ec <HAL_RCC_ClockConfig+0x1bc>)
 8004fa2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004fa6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fa8:	4b50      	ldr	r3, [pc, #320]	; (80050ec <HAL_RCC_ClockConfig+0x1bc>)
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	494d      	ldr	r1, [pc, #308]	; (80050ec <HAL_RCC_ClockConfig+0x1bc>)
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f003 0301 	and.w	r3, r3, #1
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d044      	beq.n	8005050 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d107      	bne.n	8004fde <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fce:	4b47      	ldr	r3, [pc, #284]	; (80050ec <HAL_RCC_ClockConfig+0x1bc>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d119      	bne.n	800500e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e07f      	b.n	80050de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	2b02      	cmp	r3, #2
 8004fe4:	d003      	beq.n	8004fee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004fea:	2b03      	cmp	r3, #3
 8004fec:	d107      	bne.n	8004ffe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fee:	4b3f      	ldr	r3, [pc, #252]	; (80050ec <HAL_RCC_ClockConfig+0x1bc>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d109      	bne.n	800500e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e06f      	b.n	80050de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ffe:	4b3b      	ldr	r3, [pc, #236]	; (80050ec <HAL_RCC_ClockConfig+0x1bc>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f003 0302 	and.w	r3, r3, #2
 8005006:	2b00      	cmp	r3, #0
 8005008:	d101      	bne.n	800500e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	e067      	b.n	80050de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800500e:	4b37      	ldr	r3, [pc, #220]	; (80050ec <HAL_RCC_ClockConfig+0x1bc>)
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	f023 0203 	bic.w	r2, r3, #3
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	4934      	ldr	r1, [pc, #208]	; (80050ec <HAL_RCC_ClockConfig+0x1bc>)
 800501c:	4313      	orrs	r3, r2
 800501e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005020:	f7fe f97a 	bl	8003318 <HAL_GetTick>
 8005024:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005026:	e00a      	b.n	800503e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005028:	f7fe f976 	bl	8003318 <HAL_GetTick>
 800502c:	4602      	mov	r2, r0
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	1ad3      	subs	r3, r2, r3
 8005032:	f241 3288 	movw	r2, #5000	; 0x1388
 8005036:	4293      	cmp	r3, r2
 8005038:	d901      	bls.n	800503e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800503a:	2303      	movs	r3, #3
 800503c:	e04f      	b.n	80050de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800503e:	4b2b      	ldr	r3, [pc, #172]	; (80050ec <HAL_RCC_ClockConfig+0x1bc>)
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	f003 020c 	and.w	r2, r3, #12
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	009b      	lsls	r3, r3, #2
 800504c:	429a      	cmp	r2, r3
 800504e:	d1eb      	bne.n	8005028 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005050:	4b25      	ldr	r3, [pc, #148]	; (80050e8 <HAL_RCC_ClockConfig+0x1b8>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f003 030f 	and.w	r3, r3, #15
 8005058:	683a      	ldr	r2, [r7, #0]
 800505a:	429a      	cmp	r2, r3
 800505c:	d20c      	bcs.n	8005078 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800505e:	4b22      	ldr	r3, [pc, #136]	; (80050e8 <HAL_RCC_ClockConfig+0x1b8>)
 8005060:	683a      	ldr	r2, [r7, #0]
 8005062:	b2d2      	uxtb	r2, r2
 8005064:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005066:	4b20      	ldr	r3, [pc, #128]	; (80050e8 <HAL_RCC_ClockConfig+0x1b8>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f003 030f 	and.w	r3, r3, #15
 800506e:	683a      	ldr	r2, [r7, #0]
 8005070:	429a      	cmp	r2, r3
 8005072:	d001      	beq.n	8005078 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005074:	2301      	movs	r3, #1
 8005076:	e032      	b.n	80050de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f003 0304 	and.w	r3, r3, #4
 8005080:	2b00      	cmp	r3, #0
 8005082:	d008      	beq.n	8005096 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005084:	4b19      	ldr	r3, [pc, #100]	; (80050ec <HAL_RCC_ClockConfig+0x1bc>)
 8005086:	689b      	ldr	r3, [r3, #8]
 8005088:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	68db      	ldr	r3, [r3, #12]
 8005090:	4916      	ldr	r1, [pc, #88]	; (80050ec <HAL_RCC_ClockConfig+0x1bc>)
 8005092:	4313      	orrs	r3, r2
 8005094:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f003 0308 	and.w	r3, r3, #8
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d009      	beq.n	80050b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80050a2:	4b12      	ldr	r3, [pc, #72]	; (80050ec <HAL_RCC_ClockConfig+0x1bc>)
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	691b      	ldr	r3, [r3, #16]
 80050ae:	00db      	lsls	r3, r3, #3
 80050b0:	490e      	ldr	r1, [pc, #56]	; (80050ec <HAL_RCC_ClockConfig+0x1bc>)
 80050b2:	4313      	orrs	r3, r2
 80050b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80050b6:	f000 f821 	bl	80050fc <HAL_RCC_GetSysClockFreq>
 80050ba:	4601      	mov	r1, r0
 80050bc:	4b0b      	ldr	r3, [pc, #44]	; (80050ec <HAL_RCC_ClockConfig+0x1bc>)
 80050be:	689b      	ldr	r3, [r3, #8]
 80050c0:	091b      	lsrs	r3, r3, #4
 80050c2:	f003 030f 	and.w	r3, r3, #15
 80050c6:	4a0a      	ldr	r2, [pc, #40]	; (80050f0 <HAL_RCC_ClockConfig+0x1c0>)
 80050c8:	5cd3      	ldrb	r3, [r2, r3]
 80050ca:	fa21 f303 	lsr.w	r3, r1, r3
 80050ce:	4a09      	ldr	r2, [pc, #36]	; (80050f4 <HAL_RCC_ClockConfig+0x1c4>)
 80050d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80050d2:	4b09      	ldr	r3, [pc, #36]	; (80050f8 <HAL_RCC_ClockConfig+0x1c8>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4618      	mov	r0, r3
 80050d8:	f7fe f8da 	bl	8003290 <HAL_InitTick>

  return HAL_OK;
 80050dc:	2300      	movs	r3, #0
}
 80050de:	4618      	mov	r0, r3
 80050e0:	3710      	adds	r7, #16
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}
 80050e6:	bf00      	nop
 80050e8:	40023c00 	.word	0x40023c00
 80050ec:	40023800 	.word	0x40023800
 80050f0:	0800c304 	.word	0x0800c304
 80050f4:	20000024 	.word	0x20000024
 80050f8:	20000028 	.word	0x20000028

080050fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050fe:	b085      	sub	sp, #20
 8005100:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005102:	2300      	movs	r3, #0
 8005104:	607b      	str	r3, [r7, #4]
 8005106:	2300      	movs	r3, #0
 8005108:	60fb      	str	r3, [r7, #12]
 800510a:	2300      	movs	r3, #0
 800510c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800510e:	2300      	movs	r3, #0
 8005110:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005112:	4b63      	ldr	r3, [pc, #396]	; (80052a0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005114:	689b      	ldr	r3, [r3, #8]
 8005116:	f003 030c 	and.w	r3, r3, #12
 800511a:	2b04      	cmp	r3, #4
 800511c:	d007      	beq.n	800512e <HAL_RCC_GetSysClockFreq+0x32>
 800511e:	2b08      	cmp	r3, #8
 8005120:	d008      	beq.n	8005134 <HAL_RCC_GetSysClockFreq+0x38>
 8005122:	2b00      	cmp	r3, #0
 8005124:	f040 80b4 	bne.w	8005290 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005128:	4b5e      	ldr	r3, [pc, #376]	; (80052a4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800512a:	60bb      	str	r3, [r7, #8]
       break;
 800512c:	e0b3      	b.n	8005296 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800512e:	4b5e      	ldr	r3, [pc, #376]	; (80052a8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8005130:	60bb      	str	r3, [r7, #8]
      break;
 8005132:	e0b0      	b.n	8005296 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005134:	4b5a      	ldr	r3, [pc, #360]	; (80052a0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800513c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800513e:	4b58      	ldr	r3, [pc, #352]	; (80052a0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005146:	2b00      	cmp	r3, #0
 8005148:	d04a      	beq.n	80051e0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800514a:	4b55      	ldr	r3, [pc, #340]	; (80052a0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	099b      	lsrs	r3, r3, #6
 8005150:	f04f 0400 	mov.w	r4, #0
 8005154:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005158:	f04f 0200 	mov.w	r2, #0
 800515c:	ea03 0501 	and.w	r5, r3, r1
 8005160:	ea04 0602 	and.w	r6, r4, r2
 8005164:	4629      	mov	r1, r5
 8005166:	4632      	mov	r2, r6
 8005168:	f04f 0300 	mov.w	r3, #0
 800516c:	f04f 0400 	mov.w	r4, #0
 8005170:	0154      	lsls	r4, r2, #5
 8005172:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005176:	014b      	lsls	r3, r1, #5
 8005178:	4619      	mov	r1, r3
 800517a:	4622      	mov	r2, r4
 800517c:	1b49      	subs	r1, r1, r5
 800517e:	eb62 0206 	sbc.w	r2, r2, r6
 8005182:	f04f 0300 	mov.w	r3, #0
 8005186:	f04f 0400 	mov.w	r4, #0
 800518a:	0194      	lsls	r4, r2, #6
 800518c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005190:	018b      	lsls	r3, r1, #6
 8005192:	1a5b      	subs	r3, r3, r1
 8005194:	eb64 0402 	sbc.w	r4, r4, r2
 8005198:	f04f 0100 	mov.w	r1, #0
 800519c:	f04f 0200 	mov.w	r2, #0
 80051a0:	00e2      	lsls	r2, r4, #3
 80051a2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80051a6:	00d9      	lsls	r1, r3, #3
 80051a8:	460b      	mov	r3, r1
 80051aa:	4614      	mov	r4, r2
 80051ac:	195b      	adds	r3, r3, r5
 80051ae:	eb44 0406 	adc.w	r4, r4, r6
 80051b2:	f04f 0100 	mov.w	r1, #0
 80051b6:	f04f 0200 	mov.w	r2, #0
 80051ba:	0262      	lsls	r2, r4, #9
 80051bc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80051c0:	0259      	lsls	r1, r3, #9
 80051c2:	460b      	mov	r3, r1
 80051c4:	4614      	mov	r4, r2
 80051c6:	4618      	mov	r0, r3
 80051c8:	4621      	mov	r1, r4
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f04f 0400 	mov.w	r4, #0
 80051d0:	461a      	mov	r2, r3
 80051d2:	4623      	mov	r3, r4
 80051d4:	f7fb fe6e 	bl	8000eb4 <__aeabi_uldivmod>
 80051d8:	4603      	mov	r3, r0
 80051da:	460c      	mov	r4, r1
 80051dc:	60fb      	str	r3, [r7, #12]
 80051de:	e049      	b.n	8005274 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051e0:	4b2f      	ldr	r3, [pc, #188]	; (80052a0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	099b      	lsrs	r3, r3, #6
 80051e6:	f04f 0400 	mov.w	r4, #0
 80051ea:	f240 11ff 	movw	r1, #511	; 0x1ff
 80051ee:	f04f 0200 	mov.w	r2, #0
 80051f2:	ea03 0501 	and.w	r5, r3, r1
 80051f6:	ea04 0602 	and.w	r6, r4, r2
 80051fa:	4629      	mov	r1, r5
 80051fc:	4632      	mov	r2, r6
 80051fe:	f04f 0300 	mov.w	r3, #0
 8005202:	f04f 0400 	mov.w	r4, #0
 8005206:	0154      	lsls	r4, r2, #5
 8005208:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800520c:	014b      	lsls	r3, r1, #5
 800520e:	4619      	mov	r1, r3
 8005210:	4622      	mov	r2, r4
 8005212:	1b49      	subs	r1, r1, r5
 8005214:	eb62 0206 	sbc.w	r2, r2, r6
 8005218:	f04f 0300 	mov.w	r3, #0
 800521c:	f04f 0400 	mov.w	r4, #0
 8005220:	0194      	lsls	r4, r2, #6
 8005222:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005226:	018b      	lsls	r3, r1, #6
 8005228:	1a5b      	subs	r3, r3, r1
 800522a:	eb64 0402 	sbc.w	r4, r4, r2
 800522e:	f04f 0100 	mov.w	r1, #0
 8005232:	f04f 0200 	mov.w	r2, #0
 8005236:	00e2      	lsls	r2, r4, #3
 8005238:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800523c:	00d9      	lsls	r1, r3, #3
 800523e:	460b      	mov	r3, r1
 8005240:	4614      	mov	r4, r2
 8005242:	195b      	adds	r3, r3, r5
 8005244:	eb44 0406 	adc.w	r4, r4, r6
 8005248:	f04f 0100 	mov.w	r1, #0
 800524c:	f04f 0200 	mov.w	r2, #0
 8005250:	02a2      	lsls	r2, r4, #10
 8005252:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005256:	0299      	lsls	r1, r3, #10
 8005258:	460b      	mov	r3, r1
 800525a:	4614      	mov	r4, r2
 800525c:	4618      	mov	r0, r3
 800525e:	4621      	mov	r1, r4
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	f04f 0400 	mov.w	r4, #0
 8005266:	461a      	mov	r2, r3
 8005268:	4623      	mov	r3, r4
 800526a:	f7fb fe23 	bl	8000eb4 <__aeabi_uldivmod>
 800526e:	4603      	mov	r3, r0
 8005270:	460c      	mov	r4, r1
 8005272:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005274:	4b0a      	ldr	r3, [pc, #40]	; (80052a0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	0c1b      	lsrs	r3, r3, #16
 800527a:	f003 0303 	and.w	r3, r3, #3
 800527e:	3301      	adds	r3, #1
 8005280:	005b      	lsls	r3, r3, #1
 8005282:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005284:	68fa      	ldr	r2, [r7, #12]
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	fbb2 f3f3 	udiv	r3, r2, r3
 800528c:	60bb      	str	r3, [r7, #8]
      break;
 800528e:	e002      	b.n	8005296 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005290:	4b04      	ldr	r3, [pc, #16]	; (80052a4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005292:	60bb      	str	r3, [r7, #8]
      break;
 8005294:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005296:	68bb      	ldr	r3, [r7, #8]
}
 8005298:	4618      	mov	r0, r3
 800529a:	3714      	adds	r7, #20
 800529c:	46bd      	mov	sp, r7
 800529e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052a0:	40023800 	.word	0x40023800
 80052a4:	00f42400 	.word	0x00f42400
 80052a8:	007a1200 	.word	0x007a1200

080052ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052ac:	b480      	push	{r7}
 80052ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80052b0:	4b03      	ldr	r3, [pc, #12]	; (80052c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80052b2:	681b      	ldr	r3, [r3, #0]
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr
 80052be:	bf00      	nop
 80052c0:	20000024 	.word	0x20000024

080052c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80052c8:	f7ff fff0 	bl	80052ac <HAL_RCC_GetHCLKFreq>
 80052cc:	4601      	mov	r1, r0
 80052ce:	4b05      	ldr	r3, [pc, #20]	; (80052e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80052d0:	689b      	ldr	r3, [r3, #8]
 80052d2:	0a9b      	lsrs	r3, r3, #10
 80052d4:	f003 0307 	and.w	r3, r3, #7
 80052d8:	4a03      	ldr	r2, [pc, #12]	; (80052e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80052da:	5cd3      	ldrb	r3, [r2, r3]
 80052dc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	bd80      	pop	{r7, pc}
 80052e4:	40023800 	.word	0x40023800
 80052e8:	0800c314 	.word	0x0800c314

080052ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80052f0:	f7ff ffdc 	bl	80052ac <HAL_RCC_GetHCLKFreq>
 80052f4:	4601      	mov	r1, r0
 80052f6:	4b05      	ldr	r3, [pc, #20]	; (800530c <HAL_RCC_GetPCLK2Freq+0x20>)
 80052f8:	689b      	ldr	r3, [r3, #8]
 80052fa:	0b5b      	lsrs	r3, r3, #13
 80052fc:	f003 0307 	and.w	r3, r3, #7
 8005300:	4a03      	ldr	r2, [pc, #12]	; (8005310 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005302:	5cd3      	ldrb	r3, [r2, r3]
 8005304:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005308:	4618      	mov	r0, r3
 800530a:	bd80      	pop	{r7, pc}
 800530c:	40023800 	.word	0x40023800
 8005310:	0800c314 	.word	0x0800c314

08005314 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b086      	sub	sp, #24
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800531c:	2300      	movs	r3, #0
 800531e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005320:	2300      	movs	r3, #0
 8005322:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f003 0301 	and.w	r3, r3, #1
 800532c:	2b00      	cmp	r3, #0
 800532e:	d105      	bne.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005338:	2b00      	cmp	r3, #0
 800533a:	d038      	beq.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800533c:	4b68      	ldr	r3, [pc, #416]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800533e:	2200      	movs	r2, #0
 8005340:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005342:	f7fd ffe9 	bl	8003318 <HAL_GetTick>
 8005346:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005348:	e008      	b.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800534a:	f7fd ffe5 	bl	8003318 <HAL_GetTick>
 800534e:	4602      	mov	r2, r0
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	1ad3      	subs	r3, r2, r3
 8005354:	2b02      	cmp	r3, #2
 8005356:	d901      	bls.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005358:	2303      	movs	r3, #3
 800535a:	e0bd      	b.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800535c:	4b61      	ldr	r3, [pc, #388]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005364:	2b00      	cmp	r3, #0
 8005366:	d1f0      	bne.n	800534a <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	685a      	ldr	r2, [r3, #4]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	689b      	ldr	r3, [r3, #8]
 8005370:	019b      	lsls	r3, r3, #6
 8005372:	431a      	orrs	r2, r3
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	68db      	ldr	r3, [r3, #12]
 8005378:	071b      	lsls	r3, r3, #28
 800537a:	495a      	ldr	r1, [pc, #360]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800537c:	4313      	orrs	r3, r2
 800537e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005382:	4b57      	ldr	r3, [pc, #348]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005384:	2201      	movs	r2, #1
 8005386:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005388:	f7fd ffc6 	bl	8003318 <HAL_GetTick>
 800538c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800538e:	e008      	b.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005390:	f7fd ffc2 	bl	8003318 <HAL_GetTick>
 8005394:	4602      	mov	r2, r0
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	1ad3      	subs	r3, r2, r3
 800539a:	2b02      	cmp	r3, #2
 800539c:	d901      	bls.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800539e:	2303      	movs	r3, #3
 80053a0:	e09a      	b.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80053a2:	4b50      	ldr	r3, [pc, #320]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d0f0      	beq.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f003 0302 	and.w	r3, r3, #2
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	f000 8083 	beq.w	80054c2 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80053bc:	2300      	movs	r3, #0
 80053be:	60fb      	str	r3, [r7, #12]
 80053c0:	4b48      	ldr	r3, [pc, #288]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c4:	4a47      	ldr	r2, [pc, #284]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053ca:	6413      	str	r3, [r2, #64]	; 0x40
 80053cc:	4b45      	ldr	r3, [pc, #276]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053d4:	60fb      	str	r3, [r7, #12]
 80053d6:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80053d8:	4b43      	ldr	r3, [pc, #268]	; (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a42      	ldr	r2, [pc, #264]	; (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80053de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053e2:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80053e4:	f7fd ff98 	bl	8003318 <HAL_GetTick>
 80053e8:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80053ea:	e008      	b.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80053ec:	f7fd ff94 	bl	8003318 <HAL_GetTick>
 80053f0:	4602      	mov	r2, r0
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	1ad3      	subs	r3, r2, r3
 80053f6:	2b02      	cmp	r3, #2
 80053f8:	d901      	bls.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 80053fa:	2303      	movs	r3, #3
 80053fc:	e06c      	b.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80053fe:	4b3a      	ldr	r3, [pc, #232]	; (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005406:	2b00      	cmp	r3, #0
 8005408:	d0f0      	beq.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800540a:	4b36      	ldr	r3, [pc, #216]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800540c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800540e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005412:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d02f      	beq.n	800547a <HAL_RCCEx_PeriphCLKConfig+0x166>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	691b      	ldr	r3, [r3, #16]
 800541e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005422:	693a      	ldr	r2, [r7, #16]
 8005424:	429a      	cmp	r2, r3
 8005426:	d028      	beq.n	800547a <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005428:	4b2e      	ldr	r3, [pc, #184]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800542a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800542c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005430:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005432:	4b2e      	ldr	r3, [pc, #184]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005434:	2201      	movs	r2, #1
 8005436:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005438:	4b2c      	ldr	r3, [pc, #176]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800543a:	2200      	movs	r2, #0
 800543c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800543e:	4a29      	ldr	r2, [pc, #164]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005444:	4b27      	ldr	r3, [pc, #156]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005446:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005448:	f003 0301 	and.w	r3, r3, #1
 800544c:	2b01      	cmp	r3, #1
 800544e:	d114      	bne.n	800547a <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005450:	f7fd ff62 	bl	8003318 <HAL_GetTick>
 8005454:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005456:	e00a      	b.n	800546e <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005458:	f7fd ff5e 	bl	8003318 <HAL_GetTick>
 800545c:	4602      	mov	r2, r0
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	1ad3      	subs	r3, r2, r3
 8005462:	f241 3288 	movw	r2, #5000	; 0x1388
 8005466:	4293      	cmp	r3, r2
 8005468:	d901      	bls.n	800546e <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800546a:	2303      	movs	r3, #3
 800546c:	e034      	b.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800546e:	4b1d      	ldr	r3, [pc, #116]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005472:	f003 0302 	and.w	r3, r3, #2
 8005476:	2b00      	cmp	r3, #0
 8005478:	d0ee      	beq.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	691b      	ldr	r3, [r3, #16]
 800547e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005482:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005486:	d10d      	bne.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8005488:	4b16      	ldr	r3, [pc, #88]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	691b      	ldr	r3, [r3, #16]
 8005494:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005498:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800549c:	4911      	ldr	r1, [pc, #68]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800549e:	4313      	orrs	r3, r2
 80054a0:	608b      	str	r3, [r1, #8]
 80054a2:	e005      	b.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 80054a4:	4b0f      	ldr	r3, [pc, #60]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054a6:	689b      	ldr	r3, [r3, #8]
 80054a8:	4a0e      	ldr	r2, [pc, #56]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054aa:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80054ae:	6093      	str	r3, [r2, #8]
 80054b0:	4b0c      	ldr	r3, [pc, #48]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054b2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	691b      	ldr	r3, [r3, #16]
 80054b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054bc:	4909      	ldr	r1, [pc, #36]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054be:	4313      	orrs	r3, r2
 80054c0:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f003 0308 	and.w	r3, r3, #8
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d003      	beq.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	7d1a      	ldrb	r2, [r3, #20]
 80054d2:	4b07      	ldr	r3, [pc, #28]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80054d4:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80054d6:	2300      	movs	r3, #0
}
 80054d8:	4618      	mov	r0, r3
 80054da:	3718      	adds	r7, #24
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd80      	pop	{r7, pc}
 80054e0:	42470068 	.word	0x42470068
 80054e4:	40023800 	.word	0x40023800
 80054e8:	40007000 	.word	0x40007000
 80054ec:	42470e40 	.word	0x42470e40
 80054f0:	424711e0 	.word	0x424711e0

080054f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b082      	sub	sp, #8
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d101      	bne.n	8005506 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005502:	2301      	movs	r3, #1
 8005504:	e056      	b.n	80055b4 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2200      	movs	r2, #0
 800550a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005512:	b2db      	uxtb	r3, r3
 8005514:	2b00      	cmp	r3, #0
 8005516:	d106      	bne.n	8005526 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2200      	movs	r2, #0
 800551c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	f7fd fc9b 	bl	8002e5c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2202      	movs	r2, #2
 800552a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	681a      	ldr	r2, [r3, #0]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800553c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	685a      	ldr	r2, [r3, #4]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	689b      	ldr	r3, [r3, #8]
 8005546:	431a      	orrs	r2, r3
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	68db      	ldr	r3, [r3, #12]
 800554c:	431a      	orrs	r2, r3
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	691b      	ldr	r3, [r3, #16]
 8005552:	431a      	orrs	r2, r3
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	695b      	ldr	r3, [r3, #20]
 8005558:	431a      	orrs	r2, r3
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	699b      	ldr	r3, [r3, #24]
 800555e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005562:	431a      	orrs	r2, r3
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	69db      	ldr	r3, [r3, #28]
 8005568:	431a      	orrs	r2, r3
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6a1b      	ldr	r3, [r3, #32]
 800556e:	ea42 0103 	orr.w	r1, r2, r3
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	430a      	orrs	r2, r1
 800557c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	699b      	ldr	r3, [r3, #24]
 8005582:	0c1b      	lsrs	r3, r3, #16
 8005584:	f003 0104 	and.w	r1, r3, #4
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	430a      	orrs	r2, r1
 8005592:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	69da      	ldr	r2, [r3, #28]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80055a2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2200      	movs	r2, #0
 80055a8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2201      	movs	r2, #1
 80055ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80055b2:	2300      	movs	r3, #0
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	3708      	adds	r7, #8
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}

080055bc <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80055bc:	b480      	push	{r7}
 80055be:	b087      	sub	sp, #28
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	60f8      	str	r0, [r7, #12]
 80055c4:	60b9      	str	r1, [r7, #8]
 80055c6:	4613      	mov	r3, r2
 80055c8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80055ca:	2300      	movs	r3, #0
 80055cc:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	d101      	bne.n	80055dc <HAL_SPI_Transmit_IT+0x20>
 80055d8:	2302      	movs	r3, #2
 80055da:	e067      	b.n	80056ac <HAL_SPI_Transmit_IT+0xf0>
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2201      	movs	r2, #1
 80055e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if ((pData == NULL) || (Size == 0U))
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d002      	beq.n	80055f0 <HAL_SPI_Transmit_IT+0x34>
 80055ea:	88fb      	ldrh	r3, [r7, #6]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d102      	bne.n	80055f6 <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 80055f0:	2301      	movs	r3, #1
 80055f2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80055f4:	e055      	b.n	80056a2 <HAL_SPI_Transmit_IT+0xe6>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80055fc:	b2db      	uxtb	r3, r3
 80055fe:	2b01      	cmp	r3, #1
 8005600:	d002      	beq.n	8005608 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 8005602:	2302      	movs	r3, #2
 8005604:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005606:	e04c      	b.n	80056a2 <HAL_SPI_Transmit_IT+0xe6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2203      	movs	r2, #3
 800560c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2200      	movs	r2, #0
 8005614:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	68ba      	ldr	r2, [r7, #8]
 800561a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	88fa      	ldrh	r2, [r7, #6]
 8005620:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	88fa      	ldrh	r2, [r7, #6]
 8005626:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2200      	movs	r2, #0
 800562c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2200      	movs	r2, #0
 8005632:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	2200      	movs	r2, #0
 8005638:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2200      	movs	r2, #0
 800563e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	68db      	ldr	r3, [r3, #12]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d003      	beq.n	8005650 <HAL_SPI_Transmit_IT+0x94>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	4a1b      	ldr	r2, [pc, #108]	; (80056b8 <HAL_SPI_Transmit_IT+0xfc>)
 800564c:	645a      	str	r2, [r3, #68]	; 0x44
 800564e:	e002      	b.n	8005656 <HAL_SPI_Transmit_IT+0x9a>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	4a1a      	ldr	r2, [pc, #104]	; (80056bc <HAL_SPI_Transmit_IT+0x100>)
 8005654:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	689b      	ldr	r3, [r3, #8]
 800565a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800565e:	d107      	bne.n	8005670 <HAL_SPI_Transmit_IT+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	681a      	ldr	r2, [r3, #0]
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800566e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	685a      	ldr	r2, [r3, #4]
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 800567e:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800568a:	2b40      	cmp	r3, #64	; 0x40
 800568c:	d008      	beq.n	80056a0 <HAL_SPI_Transmit_IT+0xe4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800569c:	601a      	str	r2, [r3, #0]
 800569e:	e000      	b.n	80056a2 <HAL_SPI_Transmit_IT+0xe6>
  }

error :
 80056a0:	bf00      	nop
  __HAL_UNLOCK(hspi);
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2200      	movs	r2, #0
 80056a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80056aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	371c      	adds	r7, #28
 80056b0:	46bd      	mov	sp, r7
 80056b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b6:	4770      	bx	lr
 80056b8:	08005943 	.word	0x08005943
 80056bc:	080058fd 	.word	0x080058fd

080056c0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b088      	sub	sp, #32
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80056d8:	69bb      	ldr	r3, [r7, #24]
 80056da:	099b      	lsrs	r3, r3, #6
 80056dc:	f003 0301 	and.w	r3, r3, #1
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d10f      	bne.n	8005704 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80056e4:	69bb      	ldr	r3, [r7, #24]
 80056e6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d00a      	beq.n	8005704 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80056ee:	69fb      	ldr	r3, [r7, #28]
 80056f0:	099b      	lsrs	r3, r3, #6
 80056f2:	f003 0301 	and.w	r3, r3, #1
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d004      	beq.n	8005704 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	4798      	blx	r3
    return;
 8005702:	e0d8      	b.n	80058b6 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005704:	69bb      	ldr	r3, [r7, #24]
 8005706:	085b      	lsrs	r3, r3, #1
 8005708:	f003 0301 	and.w	r3, r3, #1
 800570c:	2b00      	cmp	r3, #0
 800570e:	d00a      	beq.n	8005726 <HAL_SPI_IRQHandler+0x66>
 8005710:	69fb      	ldr	r3, [r7, #28]
 8005712:	09db      	lsrs	r3, r3, #7
 8005714:	f003 0301 	and.w	r3, r3, #1
 8005718:	2b00      	cmp	r3, #0
 800571a:	d004      	beq.n	8005726 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005720:	6878      	ldr	r0, [r7, #4]
 8005722:	4798      	blx	r3
    return;
 8005724:	e0c7      	b.n	80058b6 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005726:	69bb      	ldr	r3, [r7, #24]
 8005728:	095b      	lsrs	r3, r3, #5
 800572a:	f003 0301 	and.w	r3, r3, #1
 800572e:	2b00      	cmp	r3, #0
 8005730:	d10c      	bne.n	800574c <HAL_SPI_IRQHandler+0x8c>
 8005732:	69bb      	ldr	r3, [r7, #24]
 8005734:	099b      	lsrs	r3, r3, #6
 8005736:	f003 0301 	and.w	r3, r3, #1
 800573a:	2b00      	cmp	r3, #0
 800573c:	d106      	bne.n	800574c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800573e:	69bb      	ldr	r3, [r7, #24]
 8005740:	0a1b      	lsrs	r3, r3, #8
 8005742:	f003 0301 	and.w	r3, r3, #1
 8005746:	2b00      	cmp	r3, #0
 8005748:	f000 80b5 	beq.w	80058b6 <HAL_SPI_IRQHandler+0x1f6>
 800574c:	69fb      	ldr	r3, [r7, #28]
 800574e:	095b      	lsrs	r3, r3, #5
 8005750:	f003 0301 	and.w	r3, r3, #1
 8005754:	2b00      	cmp	r3, #0
 8005756:	f000 80ae 	beq.w	80058b6 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800575a:	69bb      	ldr	r3, [r7, #24]
 800575c:	099b      	lsrs	r3, r3, #6
 800575e:	f003 0301 	and.w	r3, r3, #1
 8005762:	2b00      	cmp	r3, #0
 8005764:	d023      	beq.n	80057ae <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800576c:	b2db      	uxtb	r3, r3
 800576e:	2b03      	cmp	r3, #3
 8005770:	d011      	beq.n	8005796 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005776:	f043 0204 	orr.w	r2, r3, #4
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800577e:	2300      	movs	r3, #0
 8005780:	617b      	str	r3, [r7, #20]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	68db      	ldr	r3, [r3, #12]
 8005788:	617b      	str	r3, [r7, #20]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	617b      	str	r3, [r7, #20]
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	e00b      	b.n	80057ae <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005796:	2300      	movs	r3, #0
 8005798:	613b      	str	r3, [r7, #16]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	68db      	ldr	r3, [r3, #12]
 80057a0:	613b      	str	r3, [r7, #16]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	613b      	str	r3, [r7, #16]
 80057aa:	693b      	ldr	r3, [r7, #16]
        return;
 80057ac:	e083      	b.n	80058b6 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80057ae:	69bb      	ldr	r3, [r7, #24]
 80057b0:	095b      	lsrs	r3, r3, #5
 80057b2:	f003 0301 	and.w	r3, r3, #1
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d014      	beq.n	80057e4 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057be:	f043 0201 	orr.w	r2, r3, #1
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80057c6:	2300      	movs	r3, #0
 80057c8:	60fb      	str	r3, [r7, #12]
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	689b      	ldr	r3, [r3, #8]
 80057d0:	60fb      	str	r3, [r7, #12]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	681a      	ldr	r2, [r3, #0]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057e0:	601a      	str	r2, [r3, #0]
 80057e2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80057e4:	69bb      	ldr	r3, [r7, #24]
 80057e6:	0a1b      	lsrs	r3, r3, #8
 80057e8:	f003 0301 	and.w	r3, r3, #1
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d00c      	beq.n	800580a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057f4:	f043 0208 	orr.w	r2, r3, #8
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80057fc:	2300      	movs	r3, #0
 80057fe:	60bb      	str	r3, [r7, #8]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	689b      	ldr	r3, [r3, #8]
 8005806:	60bb      	str	r3, [r7, #8]
 8005808:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800580e:	2b00      	cmp	r3, #0
 8005810:	d050      	beq.n	80058b4 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	685a      	ldr	r2, [r3, #4]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005820:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2201      	movs	r2, #1
 8005826:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800582a:	69fb      	ldr	r3, [r7, #28]
 800582c:	f003 0302 	and.w	r3, r3, #2
 8005830:	2b00      	cmp	r3, #0
 8005832:	d104      	bne.n	800583e <HAL_SPI_IRQHandler+0x17e>
 8005834:	69fb      	ldr	r3, [r7, #28]
 8005836:	f003 0301 	and.w	r3, r3, #1
 800583a:	2b00      	cmp	r3, #0
 800583c:	d034      	beq.n	80058a8 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	685a      	ldr	r2, [r3, #4]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f022 0203 	bic.w	r2, r2, #3
 800584c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005852:	2b00      	cmp	r3, #0
 8005854:	d011      	beq.n	800587a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800585a:	4a18      	ldr	r2, [pc, #96]	; (80058bc <HAL_SPI_IRQHandler+0x1fc>)
 800585c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005862:	4618      	mov	r0, r3
 8005864:	f7fe fcb6 	bl	80041d4 <HAL_DMA_Abort_IT>
 8005868:	4603      	mov	r3, r0
 800586a:	2b00      	cmp	r3, #0
 800586c:	d005      	beq.n	800587a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005872:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800587e:	2b00      	cmp	r3, #0
 8005880:	d016      	beq.n	80058b0 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005886:	4a0d      	ldr	r2, [pc, #52]	; (80058bc <HAL_SPI_IRQHandler+0x1fc>)
 8005888:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800588e:	4618      	mov	r0, r3
 8005890:	f7fe fca0 	bl	80041d4 <HAL_DMA_Abort_IT>
 8005894:	4603      	mov	r3, r0
 8005896:	2b00      	cmp	r3, #0
 8005898:	d00a      	beq.n	80058b0 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800589e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80058a6:	e003      	b.n	80058b0 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80058a8:	6878      	ldr	r0, [r7, #4]
 80058aa:	f000 f809 	bl	80058c0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80058ae:	e000      	b.n	80058b2 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80058b0:	bf00      	nop
    return;
 80058b2:	bf00      	nop
 80058b4:	bf00      	nop
  }
}
 80058b6:	3720      	adds	r7, #32
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}
 80058bc:	080058d5 	.word	0x080058d5

080058c0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b083      	sub	sp, #12
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80058c8:	bf00      	nop
 80058ca:	370c      	adds	r7, #12
 80058cc:	46bd      	mov	sp, r7
 80058ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d2:	4770      	bx	lr

080058d4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b084      	sub	sp, #16
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058e0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	2200      	movs	r2, #0
 80058e6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2200      	movs	r2, #0
 80058ec:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80058ee:	68f8      	ldr	r0, [r7, #12]
 80058f0:	f7ff ffe6 	bl	80058c0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80058f4:	bf00      	nop
 80058f6:	3710      	adds	r7, #16
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd80      	pop	{r7, pc}

080058fc <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b082      	sub	sp, #8
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	330c      	adds	r3, #12
 800590e:	7812      	ldrb	r2, [r2, #0]
 8005910:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005916:	1c5a      	adds	r2, r3, #1
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005920:	b29b      	uxth	r3, r3
 8005922:	3b01      	subs	r3, #1
 8005924:	b29a      	uxth	r2, r3
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800592e:	b29b      	uxth	r3, r3
 8005930:	2b00      	cmp	r3, #0
 8005932:	d102      	bne.n	800593a <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8005934:	6878      	ldr	r0, [r7, #4]
 8005936:	f000 f8d3 	bl	8005ae0 <SPI_CloseTx_ISR>
  }
}
 800593a:	bf00      	nop
 800593c:	3708      	adds	r7, #8
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}

08005942 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005942:	b580      	push	{r7, lr}
 8005944:	b082      	sub	sp, #8
 8005946:	af00      	add	r7, sp, #0
 8005948:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800594e:	881a      	ldrh	r2, [r3, #0]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800595a:	1c9a      	adds	r2, r3, #2
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005964:	b29b      	uxth	r3, r3
 8005966:	3b01      	subs	r3, #1
 8005968:	b29a      	uxth	r2, r3
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005972:	b29b      	uxth	r3, r3
 8005974:	2b00      	cmp	r3, #0
 8005976:	d102      	bne.n	800597e <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	f000 f8b1 	bl	8005ae0 <SPI_CloseTx_ISR>
  }
}
 800597e:	bf00      	nop
 8005980:	3708      	adds	r7, #8
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}

08005986 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005986:	b580      	push	{r7, lr}
 8005988:	b084      	sub	sp, #16
 800598a:	af00      	add	r7, sp, #0
 800598c:	60f8      	str	r0, [r7, #12]
 800598e:	60b9      	str	r1, [r7, #8]
 8005990:	603b      	str	r3, [r7, #0]
 8005992:	4613      	mov	r3, r2
 8005994:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005996:	e04c      	b.n	8005a32 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800599e:	d048      	beq.n	8005a32 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80059a0:	f7fd fcba 	bl	8003318 <HAL_GetTick>
 80059a4:	4602      	mov	r2, r0
 80059a6:	69bb      	ldr	r3, [r7, #24]
 80059a8:	1ad3      	subs	r3, r2, r3
 80059aa:	683a      	ldr	r2, [r7, #0]
 80059ac:	429a      	cmp	r2, r3
 80059ae:	d902      	bls.n	80059b6 <SPI_WaitFlagStateUntilTimeout+0x30>
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d13d      	bne.n	8005a32 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	685a      	ldr	r2, [r3, #4]
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80059c4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	685b      	ldr	r3, [r3, #4]
 80059ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80059ce:	d111      	bne.n	80059f4 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	689b      	ldr	r3, [r3, #8]
 80059d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059d8:	d004      	beq.n	80059e4 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	689b      	ldr	r3, [r3, #8]
 80059de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059e2:	d107      	bne.n	80059f4 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	681a      	ldr	r2, [r3, #0]
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059f2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059fc:	d10f      	bne.n	8005a1e <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	681a      	ldr	r2, [r3, #0]
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a0c:	601a      	str	r2, [r3, #0]
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	681a      	ldr	r2, [r3, #0]
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a1c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	2201      	movs	r2, #1
 8005a22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005a2e:	2303      	movs	r3, #3
 8005a30:	e00f      	b.n	8005a52 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	689a      	ldr	r2, [r3, #8]
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	4013      	ands	r3, r2
 8005a3c:	68ba      	ldr	r2, [r7, #8]
 8005a3e:	429a      	cmp	r2, r3
 8005a40:	bf0c      	ite	eq
 8005a42:	2301      	moveq	r3, #1
 8005a44:	2300      	movne	r3, #0
 8005a46:	b2db      	uxtb	r3, r3
 8005a48:	461a      	mov	r2, r3
 8005a4a:	79fb      	ldrb	r3, [r7, #7]
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	d1a3      	bne.n	8005998 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8005a50:	2300      	movs	r3, #0
}
 8005a52:	4618      	mov	r0, r3
 8005a54:	3710      	adds	r7, #16
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bd80      	pop	{r7, pc}
	...

08005a5c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b088      	sub	sp, #32
 8005a60:	af02      	add	r7, sp, #8
 8005a62:	60f8      	str	r0, [r7, #12]
 8005a64:	60b9      	str	r1, [r7, #8]
 8005a66:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005a68:	4b1b      	ldr	r3, [pc, #108]	; (8005ad8 <SPI_EndRxTxTransaction+0x7c>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a1b      	ldr	r2, [pc, #108]	; (8005adc <SPI_EndRxTxTransaction+0x80>)
 8005a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8005a72:	0d5b      	lsrs	r3, r3, #21
 8005a74:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005a78:	fb02 f303 	mul.w	r3, r2, r3
 8005a7c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a86:	d112      	bne.n	8005aae <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	9300      	str	r3, [sp, #0]
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	2180      	movs	r1, #128	; 0x80
 8005a92:	68f8      	ldr	r0, [r7, #12]
 8005a94:	f7ff ff77 	bl	8005986 <SPI_WaitFlagStateUntilTimeout>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d016      	beq.n	8005acc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005aa2:	f043 0220 	orr.w	r2, r3, #32
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005aaa:	2303      	movs	r3, #3
 8005aac:	e00f      	b.n	8005ace <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d00a      	beq.n	8005aca <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	3b01      	subs	r3, #1
 8005ab8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	689b      	ldr	r3, [r3, #8]
 8005ac0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ac4:	2b80      	cmp	r3, #128	; 0x80
 8005ac6:	d0f2      	beq.n	8005aae <SPI_EndRxTxTransaction+0x52>
 8005ac8:	e000      	b.n	8005acc <SPI_EndRxTxTransaction+0x70>
        break;
 8005aca:	bf00      	nop
  }

  return HAL_OK;
 8005acc:	2300      	movs	r3, #0
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	3718      	adds	r7, #24
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}
 8005ad6:	bf00      	nop
 8005ad8:	20000024 	.word	0x20000024
 8005adc:	165e9f81 	.word	0x165e9f81

08005ae0 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b086      	sub	sp, #24
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8005ae8:	4b2c      	ldr	r3, [pc, #176]	; (8005b9c <SPI_CloseTx_ISR+0xbc>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4a2c      	ldr	r2, [pc, #176]	; (8005ba0 <SPI_CloseTx_ISR+0xc0>)
 8005aee:	fba2 2303 	umull	r2, r3, r2, r3
 8005af2:	0a5b      	lsrs	r3, r3, #9
 8005af4:	2264      	movs	r2, #100	; 0x64
 8005af6:	fb02 f303 	mul.w	r3, r2, r3
 8005afa:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005afc:	f7fd fc0c 	bl	8003318 <HAL_GetTick>
 8005b00:	6178      	str	r0, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8005b02:	693b      	ldr	r3, [r7, #16]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d106      	bne.n	8005b16 <SPI_CloseTx_ISR+0x36>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b0c:	f043 0220 	orr.w	r2, r3, #32
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005b14:	e009      	b.n	8005b2a <SPI_CloseTx_ISR+0x4a>
    }
    count--;
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	3b01      	subs	r3, #1
 8005b1a:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	689b      	ldr	r3, [r3, #8]
 8005b22:	f003 0302 	and.w	r3, r3, #2
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d0eb      	beq.n	8005b02 <SPI_CloseTx_ISR+0x22>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	685a      	ldr	r2, [r3, #4]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005b38:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005b3a:	697a      	ldr	r2, [r7, #20]
 8005b3c:	2164      	movs	r1, #100	; 0x64
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f7ff ff8c 	bl	8005a5c <SPI_EndRxTxTransaction>
 8005b44:	4603      	mov	r3, r0
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d005      	beq.n	8005b56 <SPI_CloseTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b4e:	f043 0220 	orr.w	r2, r3, #32
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d10a      	bne.n	8005b74 <SPI_CloseTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b5e:	2300      	movs	r3, #0
 8005b60:	60fb      	str	r3, [r7, #12]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	68db      	ldr	r3, [r3, #12]
 8005b68:	60fb      	str	r3, [r7, #12]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	689b      	ldr	r3, [r3, #8]
 8005b70:	60fb      	str	r3, [r7, #12]
 8005b72:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2201      	movs	r2, #1
 8005b78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d003      	beq.n	8005b8c <SPI_CloseTx_ISR+0xac>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8005b84:	6878      	ldr	r0, [r7, #4]
 8005b86:	f7ff fe9b 	bl	80058c0 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8005b8a:	e002      	b.n	8005b92 <SPI_CloseTx_ISR+0xb2>
    HAL_SPI_TxCpltCallback(hspi);
 8005b8c:	6878      	ldr	r0, [r7, #4]
 8005b8e:	f7fd f853 	bl	8002c38 <HAL_SPI_TxCpltCallback>
}
 8005b92:	bf00      	nop
 8005b94:	3718      	adds	r7, #24
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd80      	pop	{r7, pc}
 8005b9a:	bf00      	nop
 8005b9c:	20000024 	.word	0x20000024
 8005ba0:	057619f1 	.word	0x057619f1

08005ba4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b082      	sub	sp, #8
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d101      	bne.n	8005bb6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	e01d      	b.n	8005bf2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bbc:	b2db      	uxtb	r3, r3
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d106      	bne.n	8005bd0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f7fd f9b6 	bl	8002f3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2202      	movs	r2, #2
 8005bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681a      	ldr	r2, [r3, #0]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	3304      	adds	r3, #4
 8005be0:	4619      	mov	r1, r3
 8005be2:	4610      	mov	r0, r2
 8005be4:	f000 fb0a 	bl	80061fc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2201      	movs	r2, #1
 8005bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005bf0:	2300      	movs	r3, #0
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	3708      	adds	r7, #8
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}

08005bfa <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005bfa:	b480      	push	{r7}
 8005bfc:	b085      	sub	sp, #20
 8005bfe:	af00      	add	r7, sp, #0
 8005c00:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2202      	movs	r2, #2
 8005c06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	689b      	ldr	r3, [r3, #8]
 8005c10:	f003 0307 	and.w	r3, r3, #7
 8005c14:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2b06      	cmp	r3, #6
 8005c1a:	d007      	beq.n	8005c2c <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	681a      	ldr	r2, [r3, #0]
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f042 0201 	orr.w	r2, r2, #1
 8005c2a:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2201      	movs	r2, #1
 8005c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005c34:	2300      	movs	r3, #0
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	3714      	adds	r7, #20
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c40:	4770      	bx	lr

08005c42 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005c42:	b480      	push	{r7}
 8005c44:	b085      	sub	sp, #20
 8005c46:	af00      	add	r7, sp, #0
 8005c48:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	68da      	ldr	r2, [r3, #12]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f042 0201 	orr.w	r2, r2, #1
 8005c58:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	689b      	ldr	r3, [r3, #8]
 8005c60:	f003 0307 	and.w	r3, r3, #7
 8005c64:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2b06      	cmp	r3, #6
 8005c6a:	d007      	beq.n	8005c7c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	681a      	ldr	r2, [r3, #0]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f042 0201 	orr.w	r2, r2, #1
 8005c7a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005c7c:	2300      	movs	r3, #0
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	3714      	adds	r7, #20
 8005c82:	46bd      	mov	sp, r7
 8005c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c88:	4770      	bx	lr

08005c8a <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005c8a:	b580      	push	{r7, lr}
 8005c8c:	b082      	sub	sp, #8
 8005c8e:	af00      	add	r7, sp, #0
 8005c90:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d101      	bne.n	8005c9c <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005c98:	2301      	movs	r3, #1
 8005c9a:	e01d      	b.n	8005cd8 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ca2:	b2db      	uxtb	r3, r3
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d106      	bne.n	8005cb6 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2200      	movs	r2, #0
 8005cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005cb0:	6878      	ldr	r0, [r7, #4]
 8005cb2:	f000 f815 	bl	8005ce0 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2202      	movs	r2, #2
 8005cba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681a      	ldr	r2, [r3, #0]
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	3304      	adds	r3, #4
 8005cc6:	4619      	mov	r1, r3
 8005cc8:	4610      	mov	r0, r2
 8005cca:	f000 fa97 	bl	80061fc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2201      	movs	r2, #1
 8005cd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005cd6:	2300      	movs	r3, #0
}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	3708      	adds	r7, #8
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bd80      	pop	{r7, pc}

08005ce0 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b083      	sub	sp, #12
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005ce8:	bf00      	nop
 8005cea:	370c      	adds	r7, #12
 8005cec:	46bd      	mov	sp, r7
 8005cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf2:	4770      	bx	lr

08005cf4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b082      	sub	sp, #8
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	691b      	ldr	r3, [r3, #16]
 8005d02:	f003 0302 	and.w	r3, r3, #2
 8005d06:	2b02      	cmp	r3, #2
 8005d08:	d122      	bne.n	8005d50 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	68db      	ldr	r3, [r3, #12]
 8005d10:	f003 0302 	and.w	r3, r3, #2
 8005d14:	2b02      	cmp	r3, #2
 8005d16:	d11b      	bne.n	8005d50 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f06f 0202 	mvn.w	r2, #2
 8005d20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2201      	movs	r2, #1
 8005d26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	699b      	ldr	r3, [r3, #24]
 8005d2e:	f003 0303 	and.w	r3, r3, #3
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d003      	beq.n	8005d3e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f000 fa41 	bl	80061be <HAL_TIM_IC_CaptureCallback>
 8005d3c:	e005      	b.n	8005d4a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f000 fa33 	bl	80061aa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d44:	6878      	ldr	r0, [r7, #4]
 8005d46:	f000 fa44 	bl	80061d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	691b      	ldr	r3, [r3, #16]
 8005d56:	f003 0304 	and.w	r3, r3, #4
 8005d5a:	2b04      	cmp	r3, #4
 8005d5c:	d122      	bne.n	8005da4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	68db      	ldr	r3, [r3, #12]
 8005d64:	f003 0304 	and.w	r3, r3, #4
 8005d68:	2b04      	cmp	r3, #4
 8005d6a:	d11b      	bne.n	8005da4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f06f 0204 	mvn.w	r2, #4
 8005d74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2202      	movs	r2, #2
 8005d7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	699b      	ldr	r3, [r3, #24]
 8005d82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d003      	beq.n	8005d92 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	f000 fa17 	bl	80061be <HAL_TIM_IC_CaptureCallback>
 8005d90:	e005      	b.n	8005d9e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f000 fa09 	bl	80061aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d98:	6878      	ldr	r0, [r7, #4]
 8005d9a:	f000 fa1a 	bl	80061d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2200      	movs	r2, #0
 8005da2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	691b      	ldr	r3, [r3, #16]
 8005daa:	f003 0308 	and.w	r3, r3, #8
 8005dae:	2b08      	cmp	r3, #8
 8005db0:	d122      	bne.n	8005df8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	68db      	ldr	r3, [r3, #12]
 8005db8:	f003 0308 	and.w	r3, r3, #8
 8005dbc:	2b08      	cmp	r3, #8
 8005dbe:	d11b      	bne.n	8005df8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f06f 0208 	mvn.w	r2, #8
 8005dc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2204      	movs	r2, #4
 8005dce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	69db      	ldr	r3, [r3, #28]
 8005dd6:	f003 0303 	and.w	r3, r3, #3
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d003      	beq.n	8005de6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f000 f9ed 	bl	80061be <HAL_TIM_IC_CaptureCallback>
 8005de4:	e005      	b.n	8005df2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f000 f9df 	bl	80061aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dec:	6878      	ldr	r0, [r7, #4]
 8005dee:	f000 f9f0 	bl	80061d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2200      	movs	r2, #0
 8005df6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	691b      	ldr	r3, [r3, #16]
 8005dfe:	f003 0310 	and.w	r3, r3, #16
 8005e02:	2b10      	cmp	r3, #16
 8005e04:	d122      	bne.n	8005e4c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	68db      	ldr	r3, [r3, #12]
 8005e0c:	f003 0310 	and.w	r3, r3, #16
 8005e10:	2b10      	cmp	r3, #16
 8005e12:	d11b      	bne.n	8005e4c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f06f 0210 	mvn.w	r2, #16
 8005e1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2208      	movs	r2, #8
 8005e22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	69db      	ldr	r3, [r3, #28]
 8005e2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d003      	beq.n	8005e3a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f000 f9c3 	bl	80061be <HAL_TIM_IC_CaptureCallback>
 8005e38:	e005      	b.n	8005e46 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f000 f9b5 	bl	80061aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e40:	6878      	ldr	r0, [r7, #4]
 8005e42:	f000 f9c6 	bl	80061d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	691b      	ldr	r3, [r3, #16]
 8005e52:	f003 0301 	and.w	r3, r3, #1
 8005e56:	2b01      	cmp	r3, #1
 8005e58:	d10e      	bne.n	8005e78 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	68db      	ldr	r3, [r3, #12]
 8005e60:	f003 0301 	and.w	r3, r3, #1
 8005e64:	2b01      	cmp	r3, #1
 8005e66:	d107      	bne.n	8005e78 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f06f 0201 	mvn.w	r2, #1
 8005e70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f7fc fef6 	bl	8002c64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	691b      	ldr	r3, [r3, #16]
 8005e7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e82:	2b80      	cmp	r3, #128	; 0x80
 8005e84:	d10e      	bne.n	8005ea4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	68db      	ldr	r3, [r3, #12]
 8005e8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e90:	2b80      	cmp	r3, #128	; 0x80
 8005e92:	d107      	bne.n	8005ea4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005e9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f000 fc5c 	bl	800675c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	691b      	ldr	r3, [r3, #16]
 8005eaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eae:	2b40      	cmp	r3, #64	; 0x40
 8005eb0:	d10e      	bne.n	8005ed0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	68db      	ldr	r3, [r3, #12]
 8005eb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ebc:	2b40      	cmp	r3, #64	; 0x40
 8005ebe:	d107      	bne.n	8005ed0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005ec8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f000 f98b 	bl	80061e6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	691b      	ldr	r3, [r3, #16]
 8005ed6:	f003 0320 	and.w	r3, r3, #32
 8005eda:	2b20      	cmp	r3, #32
 8005edc:	d10e      	bne.n	8005efc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	68db      	ldr	r3, [r3, #12]
 8005ee4:	f003 0320 	and.w	r3, r3, #32
 8005ee8:	2b20      	cmp	r3, #32
 8005eea:	d107      	bne.n	8005efc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f06f 0220 	mvn.w	r2, #32
 8005ef4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f000 fc26 	bl	8006748 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005efc:	bf00      	nop
 8005efe:	3708      	adds	r7, #8
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}

08005f04 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b084      	sub	sp, #16
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	60f8      	str	r0, [r7, #12]
 8005f0c:	60b9      	str	r1, [r7, #8]
 8005f0e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f16:	2b01      	cmp	r3, #1
 8005f18:	d101      	bne.n	8005f1e <HAL_TIM_IC_ConfigChannel+0x1a>
 8005f1a:	2302      	movs	r3, #2
 8005f1c:	e08a      	b.n	8006034 <HAL_TIM_IC_ConfigChannel+0x130>
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	2201      	movs	r2, #1
 8005f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2202      	movs	r2, #2
 8005f2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d11b      	bne.n	8005f6c <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	6818      	ldr	r0, [r3, #0]
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	6819      	ldr	r1, [r3, #0]
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	685a      	ldr	r2, [r3, #4]
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	68db      	ldr	r3, [r3, #12]
 8005f44:	f000 f9da 	bl	80062fc <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	699a      	ldr	r2, [r3, #24]
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f022 020c 	bic.w	r2, r2, #12
 8005f56:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	6999      	ldr	r1, [r3, #24]
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	689a      	ldr	r2, [r3, #8]
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	430a      	orrs	r2, r1
 8005f68:	619a      	str	r2, [r3, #24]
 8005f6a:	e05a      	b.n	8006022 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2b04      	cmp	r3, #4
 8005f70:	d11c      	bne.n	8005fac <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	6818      	ldr	r0, [r3, #0]
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	6819      	ldr	r1, [r3, #0]
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	685a      	ldr	r2, [r3, #4]
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	68db      	ldr	r3, [r3, #12]
 8005f82:	f000 fa52 	bl	800642a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	699a      	ldr	r2, [r3, #24]
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005f94:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	6999      	ldr	r1, [r3, #24]
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	689b      	ldr	r3, [r3, #8]
 8005fa0:	021a      	lsls	r2, r3, #8
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	430a      	orrs	r2, r1
 8005fa8:	619a      	str	r2, [r3, #24]
 8005faa:	e03a      	b.n	8006022 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2b08      	cmp	r3, #8
 8005fb0:	d11b      	bne.n	8005fea <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	6818      	ldr	r0, [r3, #0]
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	6819      	ldr	r1, [r3, #0]
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	685a      	ldr	r2, [r3, #4]
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	68db      	ldr	r3, [r3, #12]
 8005fc2:	f000 fa9f 	bl	8006504 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	69da      	ldr	r2, [r3, #28]
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f022 020c 	bic.w	r2, r2, #12
 8005fd4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	69d9      	ldr	r1, [r3, #28]
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	689a      	ldr	r2, [r3, #8]
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	430a      	orrs	r2, r1
 8005fe6:	61da      	str	r2, [r3, #28]
 8005fe8:	e01b      	b.n	8006022 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	6818      	ldr	r0, [r3, #0]
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	6819      	ldr	r1, [r3, #0]
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	685a      	ldr	r2, [r3, #4]
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	68db      	ldr	r3, [r3, #12]
 8005ffa:	f000 fabf 	bl	800657c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	69da      	ldr	r2, [r3, #28]
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800600c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	69d9      	ldr	r1, [r3, #28]
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	021a      	lsls	r2, r3, #8
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	430a      	orrs	r2, r1
 8006020:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	2201      	movs	r2, #1
 8006026:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2200      	movs	r2, #0
 800602e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006032:	2300      	movs	r3, #0
}
 8006034:	4618      	mov	r0, r3
 8006036:	3710      	adds	r7, #16
 8006038:	46bd      	mov	sp, r7
 800603a:	bd80      	pop	{r7, pc}

0800603c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b084      	sub	sp, #16
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
 8006044:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800604c:	2b01      	cmp	r3, #1
 800604e:	d101      	bne.n	8006054 <HAL_TIM_ConfigClockSource+0x18>
 8006050:	2302      	movs	r3, #2
 8006052:	e0a6      	b.n	80061a2 <HAL_TIM_ConfigClockSource+0x166>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2201      	movs	r2, #1
 8006058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2202      	movs	r2, #2
 8006060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	689b      	ldr	r3, [r3, #8]
 800606a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006072:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800607a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	68fa      	ldr	r2, [r7, #12]
 8006082:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	2b40      	cmp	r3, #64	; 0x40
 800608a:	d067      	beq.n	800615c <HAL_TIM_ConfigClockSource+0x120>
 800608c:	2b40      	cmp	r3, #64	; 0x40
 800608e:	d80b      	bhi.n	80060a8 <HAL_TIM_ConfigClockSource+0x6c>
 8006090:	2b10      	cmp	r3, #16
 8006092:	d073      	beq.n	800617c <HAL_TIM_ConfigClockSource+0x140>
 8006094:	2b10      	cmp	r3, #16
 8006096:	d802      	bhi.n	800609e <HAL_TIM_ConfigClockSource+0x62>
 8006098:	2b00      	cmp	r3, #0
 800609a:	d06f      	beq.n	800617c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800609c:	e078      	b.n	8006190 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800609e:	2b20      	cmp	r3, #32
 80060a0:	d06c      	beq.n	800617c <HAL_TIM_ConfigClockSource+0x140>
 80060a2:	2b30      	cmp	r3, #48	; 0x30
 80060a4:	d06a      	beq.n	800617c <HAL_TIM_ConfigClockSource+0x140>
      break;
 80060a6:	e073      	b.n	8006190 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80060a8:	2b70      	cmp	r3, #112	; 0x70
 80060aa:	d00d      	beq.n	80060c8 <HAL_TIM_ConfigClockSource+0x8c>
 80060ac:	2b70      	cmp	r3, #112	; 0x70
 80060ae:	d804      	bhi.n	80060ba <HAL_TIM_ConfigClockSource+0x7e>
 80060b0:	2b50      	cmp	r3, #80	; 0x50
 80060b2:	d033      	beq.n	800611c <HAL_TIM_ConfigClockSource+0xe0>
 80060b4:	2b60      	cmp	r3, #96	; 0x60
 80060b6:	d041      	beq.n	800613c <HAL_TIM_ConfigClockSource+0x100>
      break;
 80060b8:	e06a      	b.n	8006190 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80060ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060be:	d066      	beq.n	800618e <HAL_TIM_ConfigClockSource+0x152>
 80060c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060c4:	d017      	beq.n	80060f6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80060c6:	e063      	b.n	8006190 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6818      	ldr	r0, [r3, #0]
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	6899      	ldr	r1, [r3, #8]
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	685a      	ldr	r2, [r3, #4]
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	68db      	ldr	r3, [r3, #12]
 80060d8:	f000 faa8 	bl	800662c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	689b      	ldr	r3, [r3, #8]
 80060e2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80060ea:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	68fa      	ldr	r2, [r7, #12]
 80060f2:	609a      	str	r2, [r3, #8]
      break;
 80060f4:	e04c      	b.n	8006190 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6818      	ldr	r0, [r3, #0]
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	6899      	ldr	r1, [r3, #8]
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	685a      	ldr	r2, [r3, #4]
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	68db      	ldr	r3, [r3, #12]
 8006106:	f000 fa91 	bl	800662c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	689a      	ldr	r2, [r3, #8]
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006118:	609a      	str	r2, [r3, #8]
      break;
 800611a:	e039      	b.n	8006190 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6818      	ldr	r0, [r3, #0]
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	6859      	ldr	r1, [r3, #4]
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	68db      	ldr	r3, [r3, #12]
 8006128:	461a      	mov	r2, r3
 800612a:	f000 f94f 	bl	80063cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	2150      	movs	r1, #80	; 0x50
 8006134:	4618      	mov	r0, r3
 8006136:	f000 fa5e 	bl	80065f6 <TIM_ITRx_SetConfig>
      break;
 800613a:	e029      	b.n	8006190 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6818      	ldr	r0, [r3, #0]
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	6859      	ldr	r1, [r3, #4]
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	68db      	ldr	r3, [r3, #12]
 8006148:	461a      	mov	r2, r3
 800614a:	f000 f9ab 	bl	80064a4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	2160      	movs	r1, #96	; 0x60
 8006154:	4618      	mov	r0, r3
 8006156:	f000 fa4e 	bl	80065f6 <TIM_ITRx_SetConfig>
      break;
 800615a:	e019      	b.n	8006190 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6818      	ldr	r0, [r3, #0]
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	6859      	ldr	r1, [r3, #4]
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	68db      	ldr	r3, [r3, #12]
 8006168:	461a      	mov	r2, r3
 800616a:	f000 f92f 	bl	80063cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	2140      	movs	r1, #64	; 0x40
 8006174:	4618      	mov	r0, r3
 8006176:	f000 fa3e 	bl	80065f6 <TIM_ITRx_SetConfig>
      break;
 800617a:	e009      	b.n	8006190 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681a      	ldr	r2, [r3, #0]
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4619      	mov	r1, r3
 8006186:	4610      	mov	r0, r2
 8006188:	f000 fa35 	bl	80065f6 <TIM_ITRx_SetConfig>
      break;
 800618c:	e000      	b.n	8006190 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800618e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2201      	movs	r2, #1
 8006194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2200      	movs	r2, #0
 800619c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80061a0:	2300      	movs	r3, #0
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	3710      	adds	r7, #16
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}

080061aa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80061aa:	b480      	push	{r7}
 80061ac:	b083      	sub	sp, #12
 80061ae:	af00      	add	r7, sp, #0
 80061b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80061b2:	bf00      	nop
 80061b4:	370c      	adds	r7, #12
 80061b6:	46bd      	mov	sp, r7
 80061b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061bc:	4770      	bx	lr

080061be <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80061be:	b480      	push	{r7}
 80061c0:	b083      	sub	sp, #12
 80061c2:	af00      	add	r7, sp, #0
 80061c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80061c6:	bf00      	nop
 80061c8:	370c      	adds	r7, #12
 80061ca:	46bd      	mov	sp, r7
 80061cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d0:	4770      	bx	lr

080061d2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80061d2:	b480      	push	{r7}
 80061d4:	b083      	sub	sp, #12
 80061d6:	af00      	add	r7, sp, #0
 80061d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80061da:	bf00      	nop
 80061dc:	370c      	adds	r7, #12
 80061de:	46bd      	mov	sp, r7
 80061e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e4:	4770      	bx	lr

080061e6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80061e6:	b480      	push	{r7}
 80061e8:	b083      	sub	sp, #12
 80061ea:	af00      	add	r7, sp, #0
 80061ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80061ee:	bf00      	nop
 80061f0:	370c      	adds	r7, #12
 80061f2:	46bd      	mov	sp, r7
 80061f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f8:	4770      	bx	lr
	...

080061fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80061fc:	b480      	push	{r7}
 80061fe:	b085      	sub	sp, #20
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
 8006204:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	4a34      	ldr	r2, [pc, #208]	; (80062e0 <TIM_Base_SetConfig+0xe4>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d00f      	beq.n	8006234 <TIM_Base_SetConfig+0x38>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800621a:	d00b      	beq.n	8006234 <TIM_Base_SetConfig+0x38>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	4a31      	ldr	r2, [pc, #196]	; (80062e4 <TIM_Base_SetConfig+0xe8>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d007      	beq.n	8006234 <TIM_Base_SetConfig+0x38>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	4a30      	ldr	r2, [pc, #192]	; (80062e8 <TIM_Base_SetConfig+0xec>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d003      	beq.n	8006234 <TIM_Base_SetConfig+0x38>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	4a2f      	ldr	r2, [pc, #188]	; (80062ec <TIM_Base_SetConfig+0xf0>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d108      	bne.n	8006246 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800623a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	685b      	ldr	r3, [r3, #4]
 8006240:	68fa      	ldr	r2, [r7, #12]
 8006242:	4313      	orrs	r3, r2
 8006244:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	4a25      	ldr	r2, [pc, #148]	; (80062e0 <TIM_Base_SetConfig+0xe4>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d01b      	beq.n	8006286 <TIM_Base_SetConfig+0x8a>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006254:	d017      	beq.n	8006286 <TIM_Base_SetConfig+0x8a>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	4a22      	ldr	r2, [pc, #136]	; (80062e4 <TIM_Base_SetConfig+0xe8>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d013      	beq.n	8006286 <TIM_Base_SetConfig+0x8a>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	4a21      	ldr	r2, [pc, #132]	; (80062e8 <TIM_Base_SetConfig+0xec>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d00f      	beq.n	8006286 <TIM_Base_SetConfig+0x8a>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	4a20      	ldr	r2, [pc, #128]	; (80062ec <TIM_Base_SetConfig+0xf0>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d00b      	beq.n	8006286 <TIM_Base_SetConfig+0x8a>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	4a1f      	ldr	r2, [pc, #124]	; (80062f0 <TIM_Base_SetConfig+0xf4>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d007      	beq.n	8006286 <TIM_Base_SetConfig+0x8a>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	4a1e      	ldr	r2, [pc, #120]	; (80062f4 <TIM_Base_SetConfig+0xf8>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d003      	beq.n	8006286 <TIM_Base_SetConfig+0x8a>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	4a1d      	ldr	r2, [pc, #116]	; (80062f8 <TIM_Base_SetConfig+0xfc>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d108      	bne.n	8006298 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800628c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	68db      	ldr	r3, [r3, #12]
 8006292:	68fa      	ldr	r2, [r7, #12]
 8006294:	4313      	orrs	r3, r2
 8006296:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	695b      	ldr	r3, [r3, #20]
 80062a2:	4313      	orrs	r3, r2
 80062a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	68fa      	ldr	r2, [r7, #12]
 80062aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	689a      	ldr	r2, [r3, #8]
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	681a      	ldr	r2, [r3, #0]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	4a08      	ldr	r2, [pc, #32]	; (80062e0 <TIM_Base_SetConfig+0xe4>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d103      	bne.n	80062cc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	691a      	ldr	r2, [r3, #16]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2201      	movs	r2, #1
 80062d0:	615a      	str	r2, [r3, #20]
}
 80062d2:	bf00      	nop
 80062d4:	3714      	adds	r7, #20
 80062d6:	46bd      	mov	sp, r7
 80062d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062dc:	4770      	bx	lr
 80062de:	bf00      	nop
 80062e0:	40010000 	.word	0x40010000
 80062e4:	40000400 	.word	0x40000400
 80062e8:	40000800 	.word	0x40000800
 80062ec:	40000c00 	.word	0x40000c00
 80062f0:	40014000 	.word	0x40014000
 80062f4:	40014400 	.word	0x40014400
 80062f8:	40014800 	.word	0x40014800

080062fc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b087      	sub	sp, #28
 8006300:	af00      	add	r7, sp, #0
 8006302:	60f8      	str	r0, [r7, #12]
 8006304:	60b9      	str	r1, [r7, #8]
 8006306:	607a      	str	r2, [r7, #4]
 8006308:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	6a1b      	ldr	r3, [r3, #32]
 800630e:	f023 0201 	bic.w	r2, r3, #1
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	699b      	ldr	r3, [r3, #24]
 800631a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	6a1b      	ldr	r3, [r3, #32]
 8006320:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	4a24      	ldr	r2, [pc, #144]	; (80063b8 <TIM_TI1_SetConfig+0xbc>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d013      	beq.n	8006352 <TIM_TI1_SetConfig+0x56>
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006330:	d00f      	beq.n	8006352 <TIM_TI1_SetConfig+0x56>
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	4a21      	ldr	r2, [pc, #132]	; (80063bc <TIM_TI1_SetConfig+0xc0>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d00b      	beq.n	8006352 <TIM_TI1_SetConfig+0x56>
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	4a20      	ldr	r2, [pc, #128]	; (80063c0 <TIM_TI1_SetConfig+0xc4>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d007      	beq.n	8006352 <TIM_TI1_SetConfig+0x56>
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	4a1f      	ldr	r2, [pc, #124]	; (80063c4 <TIM_TI1_SetConfig+0xc8>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d003      	beq.n	8006352 <TIM_TI1_SetConfig+0x56>
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	4a1e      	ldr	r2, [pc, #120]	; (80063c8 <TIM_TI1_SetConfig+0xcc>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d101      	bne.n	8006356 <TIM_TI1_SetConfig+0x5a>
 8006352:	2301      	movs	r3, #1
 8006354:	e000      	b.n	8006358 <TIM_TI1_SetConfig+0x5c>
 8006356:	2300      	movs	r3, #0
 8006358:	2b00      	cmp	r3, #0
 800635a:	d008      	beq.n	800636e <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800635c:	697b      	ldr	r3, [r7, #20]
 800635e:	f023 0303 	bic.w	r3, r3, #3
 8006362:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006364:	697a      	ldr	r2, [r7, #20]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	4313      	orrs	r3, r2
 800636a:	617b      	str	r3, [r7, #20]
 800636c:	e003      	b.n	8006376 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	f043 0301 	orr.w	r3, r3, #1
 8006374:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800637c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	011b      	lsls	r3, r3, #4
 8006382:	b2db      	uxtb	r3, r3
 8006384:	697a      	ldr	r2, [r7, #20]
 8006386:	4313      	orrs	r3, r2
 8006388:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800638a:	693b      	ldr	r3, [r7, #16]
 800638c:	f023 030a 	bic.w	r3, r3, #10
 8006390:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	f003 030a 	and.w	r3, r3, #10
 8006398:	693a      	ldr	r2, [r7, #16]
 800639a:	4313      	orrs	r3, r2
 800639c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	697a      	ldr	r2, [r7, #20]
 80063a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	693a      	ldr	r2, [r7, #16]
 80063a8:	621a      	str	r2, [r3, #32]
}
 80063aa:	bf00      	nop
 80063ac:	371c      	adds	r7, #28
 80063ae:	46bd      	mov	sp, r7
 80063b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b4:	4770      	bx	lr
 80063b6:	bf00      	nop
 80063b8:	40010000 	.word	0x40010000
 80063bc:	40000400 	.word	0x40000400
 80063c0:	40000800 	.word	0x40000800
 80063c4:	40000c00 	.word	0x40000c00
 80063c8:	40014000 	.word	0x40014000

080063cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b087      	sub	sp, #28
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	60f8      	str	r0, [r7, #12]
 80063d4:	60b9      	str	r1, [r7, #8]
 80063d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	6a1b      	ldr	r3, [r3, #32]
 80063dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	6a1b      	ldr	r3, [r3, #32]
 80063e2:	f023 0201 	bic.w	r2, r3, #1
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	699b      	ldr	r3, [r3, #24]
 80063ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80063f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	011b      	lsls	r3, r3, #4
 80063fc:	693a      	ldr	r2, [r7, #16]
 80063fe:	4313      	orrs	r3, r2
 8006400:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	f023 030a 	bic.w	r3, r3, #10
 8006408:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800640a:	697a      	ldr	r2, [r7, #20]
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	4313      	orrs	r3, r2
 8006410:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	693a      	ldr	r2, [r7, #16]
 8006416:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	697a      	ldr	r2, [r7, #20]
 800641c:	621a      	str	r2, [r3, #32]
}
 800641e:	bf00      	nop
 8006420:	371c      	adds	r7, #28
 8006422:	46bd      	mov	sp, r7
 8006424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006428:	4770      	bx	lr

0800642a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800642a:	b480      	push	{r7}
 800642c:	b087      	sub	sp, #28
 800642e:	af00      	add	r7, sp, #0
 8006430:	60f8      	str	r0, [r7, #12]
 8006432:	60b9      	str	r1, [r7, #8]
 8006434:	607a      	str	r2, [r7, #4]
 8006436:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	6a1b      	ldr	r3, [r3, #32]
 800643c:	f023 0210 	bic.w	r2, r3, #16
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	699b      	ldr	r3, [r3, #24]
 8006448:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	6a1b      	ldr	r3, [r3, #32]
 800644e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006450:	697b      	ldr	r3, [r7, #20]
 8006452:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006456:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	021b      	lsls	r3, r3, #8
 800645c:	697a      	ldr	r2, [r7, #20]
 800645e:	4313      	orrs	r3, r2
 8006460:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006468:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	031b      	lsls	r3, r3, #12
 800646e:	b29b      	uxth	r3, r3
 8006470:	697a      	ldr	r2, [r7, #20]
 8006472:	4313      	orrs	r3, r2
 8006474:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006476:	693b      	ldr	r3, [r7, #16]
 8006478:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800647c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	011b      	lsls	r3, r3, #4
 8006482:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006486:	693a      	ldr	r2, [r7, #16]
 8006488:	4313      	orrs	r3, r2
 800648a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	697a      	ldr	r2, [r7, #20]
 8006490:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	693a      	ldr	r2, [r7, #16]
 8006496:	621a      	str	r2, [r3, #32]
}
 8006498:	bf00      	nop
 800649a:	371c      	adds	r7, #28
 800649c:	46bd      	mov	sp, r7
 800649e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a2:	4770      	bx	lr

080064a4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80064a4:	b480      	push	{r7}
 80064a6:	b087      	sub	sp, #28
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	60f8      	str	r0, [r7, #12]
 80064ac:	60b9      	str	r1, [r7, #8]
 80064ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	6a1b      	ldr	r3, [r3, #32]
 80064b4:	f023 0210 	bic.w	r2, r3, #16
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	699b      	ldr	r3, [r3, #24]
 80064c0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	6a1b      	ldr	r3, [r3, #32]
 80064c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80064ce:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	031b      	lsls	r3, r3, #12
 80064d4:	697a      	ldr	r2, [r7, #20]
 80064d6:	4313      	orrs	r3, r2
 80064d8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80064da:	693b      	ldr	r3, [r7, #16]
 80064dc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80064e0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	011b      	lsls	r3, r3, #4
 80064e6:	693a      	ldr	r2, [r7, #16]
 80064e8:	4313      	orrs	r3, r2
 80064ea:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	697a      	ldr	r2, [r7, #20]
 80064f0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	693a      	ldr	r2, [r7, #16]
 80064f6:	621a      	str	r2, [r3, #32]
}
 80064f8:	bf00      	nop
 80064fa:	371c      	adds	r7, #28
 80064fc:	46bd      	mov	sp, r7
 80064fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006502:	4770      	bx	lr

08006504 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006504:	b480      	push	{r7}
 8006506:	b087      	sub	sp, #28
 8006508:	af00      	add	r7, sp, #0
 800650a:	60f8      	str	r0, [r7, #12]
 800650c:	60b9      	str	r1, [r7, #8]
 800650e:	607a      	str	r2, [r7, #4]
 8006510:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	6a1b      	ldr	r3, [r3, #32]
 8006516:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	69db      	ldr	r3, [r3, #28]
 8006522:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	6a1b      	ldr	r3, [r3, #32]
 8006528:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	f023 0303 	bic.w	r3, r3, #3
 8006530:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006532:	697a      	ldr	r2, [r7, #20]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	4313      	orrs	r3, r2
 8006538:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006540:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	011b      	lsls	r3, r3, #4
 8006546:	b2db      	uxtb	r3, r3
 8006548:	697a      	ldr	r2, [r7, #20]
 800654a:	4313      	orrs	r3, r2
 800654c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006554:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	021b      	lsls	r3, r3, #8
 800655a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800655e:	693a      	ldr	r2, [r7, #16]
 8006560:	4313      	orrs	r3, r2
 8006562:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	697a      	ldr	r2, [r7, #20]
 8006568:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	693a      	ldr	r2, [r7, #16]
 800656e:	621a      	str	r2, [r3, #32]
}
 8006570:	bf00      	nop
 8006572:	371c      	adds	r7, #28
 8006574:	46bd      	mov	sp, r7
 8006576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657a:	4770      	bx	lr

0800657c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800657c:	b480      	push	{r7}
 800657e:	b087      	sub	sp, #28
 8006580:	af00      	add	r7, sp, #0
 8006582:	60f8      	str	r0, [r7, #12]
 8006584:	60b9      	str	r1, [r7, #8]
 8006586:	607a      	str	r2, [r7, #4]
 8006588:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	6a1b      	ldr	r3, [r3, #32]
 800658e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	69db      	ldr	r3, [r3, #28]
 800659a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	6a1b      	ldr	r3, [r3, #32]
 80065a0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065a8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	021b      	lsls	r3, r3, #8
 80065ae:	697a      	ldr	r2, [r7, #20]
 80065b0:	4313      	orrs	r3, r2
 80065b2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80065b4:	697b      	ldr	r3, [r7, #20]
 80065b6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80065ba:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	031b      	lsls	r3, r3, #12
 80065c0:	b29b      	uxth	r3, r3
 80065c2:	697a      	ldr	r2, [r7, #20]
 80065c4:	4313      	orrs	r3, r2
 80065c6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80065c8:	693b      	ldr	r3, [r7, #16]
 80065ca:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80065ce:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	031b      	lsls	r3, r3, #12
 80065d4:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80065d8:	693a      	ldr	r2, [r7, #16]
 80065da:	4313      	orrs	r3, r2
 80065dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	697a      	ldr	r2, [r7, #20]
 80065e2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	693a      	ldr	r2, [r7, #16]
 80065e8:	621a      	str	r2, [r3, #32]
}
 80065ea:	bf00      	nop
 80065ec:	371c      	adds	r7, #28
 80065ee:	46bd      	mov	sp, r7
 80065f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f4:	4770      	bx	lr

080065f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80065f6:	b480      	push	{r7}
 80065f8:	b085      	sub	sp, #20
 80065fa:	af00      	add	r7, sp, #0
 80065fc:	6078      	str	r0, [r7, #4]
 80065fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	689b      	ldr	r3, [r3, #8]
 8006604:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800660c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800660e:	683a      	ldr	r2, [r7, #0]
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	4313      	orrs	r3, r2
 8006614:	f043 0307 	orr.w	r3, r3, #7
 8006618:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	68fa      	ldr	r2, [r7, #12]
 800661e:	609a      	str	r2, [r3, #8]
}
 8006620:	bf00      	nop
 8006622:	3714      	adds	r7, #20
 8006624:	46bd      	mov	sp, r7
 8006626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662a:	4770      	bx	lr

0800662c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800662c:	b480      	push	{r7}
 800662e:	b087      	sub	sp, #28
 8006630:	af00      	add	r7, sp, #0
 8006632:	60f8      	str	r0, [r7, #12]
 8006634:	60b9      	str	r1, [r7, #8]
 8006636:	607a      	str	r2, [r7, #4]
 8006638:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	689b      	ldr	r3, [r3, #8]
 800663e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006640:	697b      	ldr	r3, [r7, #20]
 8006642:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006646:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	021a      	lsls	r2, r3, #8
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	431a      	orrs	r2, r3
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	4313      	orrs	r3, r2
 8006654:	697a      	ldr	r2, [r7, #20]
 8006656:	4313      	orrs	r3, r2
 8006658:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	697a      	ldr	r2, [r7, #20]
 800665e:	609a      	str	r2, [r3, #8]
}
 8006660:	bf00      	nop
 8006662:	371c      	adds	r7, #28
 8006664:	46bd      	mov	sp, r7
 8006666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666a:	4770      	bx	lr

0800666c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800666c:	b480      	push	{r7}
 800666e:	b085      	sub	sp, #20
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
 8006674:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800667c:	2b01      	cmp	r3, #1
 800667e:	d101      	bne.n	8006684 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006680:	2302      	movs	r3, #2
 8006682:	e050      	b.n	8006726 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2201      	movs	r2, #1
 8006688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2202      	movs	r2, #2
 8006690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	685b      	ldr	r3, [r3, #4]
 800669a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	689b      	ldr	r3, [r3, #8]
 80066a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	68fa      	ldr	r2, [r7, #12]
 80066b2:	4313      	orrs	r3, r2
 80066b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	68fa      	ldr	r2, [r7, #12]
 80066bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a1c      	ldr	r2, [pc, #112]	; (8006734 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d018      	beq.n	80066fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066d0:	d013      	beq.n	80066fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4a18      	ldr	r2, [pc, #96]	; (8006738 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d00e      	beq.n	80066fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a16      	ldr	r2, [pc, #88]	; (800673c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d009      	beq.n	80066fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a15      	ldr	r2, [pc, #84]	; (8006740 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d004      	beq.n	80066fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a13      	ldr	r2, [pc, #76]	; (8006744 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d10c      	bne.n	8006714 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006700:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	685b      	ldr	r3, [r3, #4]
 8006706:	68ba      	ldr	r2, [r7, #8]
 8006708:	4313      	orrs	r3, r2
 800670a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	68ba      	ldr	r2, [r7, #8]
 8006712:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2201      	movs	r2, #1
 8006718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2200      	movs	r2, #0
 8006720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006724:	2300      	movs	r3, #0
}
 8006726:	4618      	mov	r0, r3
 8006728:	3714      	adds	r7, #20
 800672a:	46bd      	mov	sp, r7
 800672c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006730:	4770      	bx	lr
 8006732:	bf00      	nop
 8006734:	40010000 	.word	0x40010000
 8006738:	40000400 	.word	0x40000400
 800673c:	40000800 	.word	0x40000800
 8006740:	40000c00 	.word	0x40000c00
 8006744:	40014000 	.word	0x40014000

08006748 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006748:	b480      	push	{r7}
 800674a:	b083      	sub	sp, #12
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006750:	bf00      	nop
 8006752:	370c      	adds	r7, #12
 8006754:	46bd      	mov	sp, r7
 8006756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675a:	4770      	bx	lr

0800675c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800675c:	b480      	push	{r7}
 800675e:	b083      	sub	sp, #12
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006764:	bf00      	nop
 8006766:	370c      	adds	r7, #12
 8006768:	46bd      	mov	sp, r7
 800676a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676e:	4770      	bx	lr

08006770 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b082      	sub	sp, #8
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d101      	bne.n	8006782 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800677e:	2301      	movs	r3, #1
 8006780:	e03f      	b.n	8006802 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006788:	b2db      	uxtb	r3, r3
 800678a:	2b00      	cmp	r3, #0
 800678c:	d106      	bne.n	800679c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2200      	movs	r2, #0
 8006792:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f7fc fc36 	bl	8003008 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2224      	movs	r2, #36	; 0x24
 80067a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	68da      	ldr	r2, [r3, #12]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80067b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f000 fb97 	bl	8006ee8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	691a      	ldr	r2, [r3, #16]
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80067c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	695a      	ldr	r2, [r3, #20]
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80067d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	68da      	ldr	r2, [r3, #12]
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80067e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2200      	movs	r2, #0
 80067ee:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2220      	movs	r2, #32
 80067f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2220      	movs	r2, #32
 80067fc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006800:	2300      	movs	r3, #0
}
 8006802:	4618      	mov	r0, r3
 8006804:	3708      	adds	r7, #8
 8006806:	46bd      	mov	sp, r7
 8006808:	bd80      	pop	{r7, pc}

0800680a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800680a:	b580      	push	{r7, lr}
 800680c:	b088      	sub	sp, #32
 800680e:	af02      	add	r7, sp, #8
 8006810:	60f8      	str	r0, [r7, #12]
 8006812:	60b9      	str	r1, [r7, #8]
 8006814:	603b      	str	r3, [r7, #0]
 8006816:	4613      	mov	r3, r2
 8006818:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800681a:	2300      	movs	r3, #0
 800681c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006824:	b2db      	uxtb	r3, r3
 8006826:	2b20      	cmp	r3, #32
 8006828:	f040 8083 	bne.w	8006932 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d002      	beq.n	8006838 <HAL_UART_Transmit+0x2e>
 8006832:	88fb      	ldrh	r3, [r7, #6]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d101      	bne.n	800683c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8006838:	2301      	movs	r3, #1
 800683a:	e07b      	b.n	8006934 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006842:	2b01      	cmp	r3, #1
 8006844:	d101      	bne.n	800684a <HAL_UART_Transmit+0x40>
 8006846:	2302      	movs	r3, #2
 8006848:	e074      	b.n	8006934 <HAL_UART_Transmit+0x12a>
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	2201      	movs	r2, #1
 800684e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	2200      	movs	r2, #0
 8006856:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	2221      	movs	r2, #33	; 0x21
 800685c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8006860:	f7fc fd5a 	bl	8003318 <HAL_GetTick>
 8006864:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	88fa      	ldrh	r2, [r7, #6]
 800686a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	88fa      	ldrh	r2, [r7, #6]
 8006870:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	2200      	movs	r2, #0
 8006876:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800687a:	e042      	b.n	8006902 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006880:	b29b      	uxth	r3, r3
 8006882:	3b01      	subs	r3, #1
 8006884:	b29a      	uxth	r2, r3
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	689b      	ldr	r3, [r3, #8]
 800688e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006892:	d122      	bne.n	80068da <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	9300      	str	r3, [sp, #0]
 8006898:	697b      	ldr	r3, [r7, #20]
 800689a:	2200      	movs	r2, #0
 800689c:	2180      	movs	r1, #128	; 0x80
 800689e:	68f8      	ldr	r0, [r7, #12]
 80068a0:	f000 f9b6 	bl	8006c10 <UART_WaitOnFlagUntilTimeout>
 80068a4:	4603      	mov	r3, r0
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d001      	beq.n	80068ae <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80068aa:	2303      	movs	r3, #3
 80068ac:	e042      	b.n	8006934 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80068b2:	693b      	ldr	r3, [r7, #16]
 80068b4:	881b      	ldrh	r3, [r3, #0]
 80068b6:	461a      	mov	r2, r3
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80068c0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	691b      	ldr	r3, [r3, #16]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d103      	bne.n	80068d2 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	3302      	adds	r3, #2
 80068ce:	60bb      	str	r3, [r7, #8]
 80068d0:	e017      	b.n	8006902 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	3301      	adds	r3, #1
 80068d6:	60bb      	str	r3, [r7, #8]
 80068d8:	e013      	b.n	8006902 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	9300      	str	r3, [sp, #0]
 80068de:	697b      	ldr	r3, [r7, #20]
 80068e0:	2200      	movs	r2, #0
 80068e2:	2180      	movs	r1, #128	; 0x80
 80068e4:	68f8      	ldr	r0, [r7, #12]
 80068e6:	f000 f993 	bl	8006c10 <UART_WaitOnFlagUntilTimeout>
 80068ea:	4603      	mov	r3, r0
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d001      	beq.n	80068f4 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80068f0:	2303      	movs	r3, #3
 80068f2:	e01f      	b.n	8006934 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	1c5a      	adds	r2, r3, #1
 80068f8:	60ba      	str	r2, [r7, #8]
 80068fa:	781a      	ldrb	r2, [r3, #0]
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006906:	b29b      	uxth	r3, r3
 8006908:	2b00      	cmp	r3, #0
 800690a:	d1b7      	bne.n	800687c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	9300      	str	r3, [sp, #0]
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	2200      	movs	r2, #0
 8006914:	2140      	movs	r1, #64	; 0x40
 8006916:	68f8      	ldr	r0, [r7, #12]
 8006918:	f000 f97a 	bl	8006c10 <UART_WaitOnFlagUntilTimeout>
 800691c:	4603      	mov	r3, r0
 800691e:	2b00      	cmp	r3, #0
 8006920:	d001      	beq.n	8006926 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8006922:	2303      	movs	r3, #3
 8006924:	e006      	b.n	8006934 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	2220      	movs	r2, #32
 800692a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800692e:	2300      	movs	r3, #0
 8006930:	e000      	b.n	8006934 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8006932:	2302      	movs	r3, #2
  }
}
 8006934:	4618      	mov	r0, r3
 8006936:	3718      	adds	r7, #24
 8006938:	46bd      	mov	sp, r7
 800693a:	bd80      	pop	{r7, pc}

0800693c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800693c:	b480      	push	{r7}
 800693e:	b085      	sub	sp, #20
 8006940:	af00      	add	r7, sp, #0
 8006942:	60f8      	str	r0, [r7, #12]
 8006944:	60b9      	str	r1, [r7, #8]
 8006946:	4613      	mov	r3, r2
 8006948:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006950:	b2db      	uxtb	r3, r3
 8006952:	2b20      	cmp	r3, #32
 8006954:	d140      	bne.n	80069d8 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d002      	beq.n	8006962 <HAL_UART_Receive_IT+0x26>
 800695c:	88fb      	ldrh	r3, [r7, #6]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d101      	bne.n	8006966 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006962:	2301      	movs	r3, #1
 8006964:	e039      	b.n	80069da <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800696c:	2b01      	cmp	r3, #1
 800696e:	d101      	bne.n	8006974 <HAL_UART_Receive_IT+0x38>
 8006970:	2302      	movs	r3, #2
 8006972:	e032      	b.n	80069da <HAL_UART_Receive_IT+0x9e>
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	2201      	movs	r2, #1
 8006978:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	68ba      	ldr	r2, [r7, #8]
 8006980:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	88fa      	ldrh	r2, [r7, #6]
 8006986:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	88fa      	ldrh	r2, [r7, #6]
 800698c:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	2200      	movs	r2, #0
 8006992:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	2222      	movs	r2, #34	; 0x22
 8006998:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	2200      	movs	r2, #0
 80069a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	68da      	ldr	r2, [r3, #12]
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80069b2:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	695a      	ldr	r2, [r3, #20]
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f042 0201 	orr.w	r2, r2, #1
 80069c2:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	68da      	ldr	r2, [r3, #12]
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f042 0220 	orr.w	r2, r2, #32
 80069d2:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80069d4:	2300      	movs	r3, #0
 80069d6:	e000      	b.n	80069da <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80069d8:	2302      	movs	r3, #2
  }
}
 80069da:	4618      	mov	r0, r3
 80069dc:	3714      	adds	r7, #20
 80069de:	46bd      	mov	sp, r7
 80069e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e4:	4770      	bx	lr
	...

080069e8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b088      	sub	sp, #32
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	68db      	ldr	r3, [r3, #12]
 80069fe:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	695b      	ldr	r3, [r3, #20]
 8006a06:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8006a08:	2300      	movs	r3, #0
 8006a0a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006a10:	69fb      	ldr	r3, [r7, #28]
 8006a12:	f003 030f 	and.w	r3, r3, #15
 8006a16:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8006a18:	693b      	ldr	r3, [r7, #16]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d10d      	bne.n	8006a3a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006a1e:	69fb      	ldr	r3, [r7, #28]
 8006a20:	f003 0320 	and.w	r3, r3, #32
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d008      	beq.n	8006a3a <HAL_UART_IRQHandler+0x52>
 8006a28:	69bb      	ldr	r3, [r7, #24]
 8006a2a:	f003 0320 	and.w	r3, r3, #32
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d003      	beq.n	8006a3a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f000 f9d6 	bl	8006de4 <UART_Receive_IT>
      return;
 8006a38:	e0d1      	b.n	8006bde <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	f000 80b0 	beq.w	8006ba2 <HAL_UART_IRQHandler+0x1ba>
 8006a42:	697b      	ldr	r3, [r7, #20]
 8006a44:	f003 0301 	and.w	r3, r3, #1
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d105      	bne.n	8006a58 <HAL_UART_IRQHandler+0x70>
 8006a4c:	69bb      	ldr	r3, [r7, #24]
 8006a4e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	f000 80a5 	beq.w	8006ba2 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006a58:	69fb      	ldr	r3, [r7, #28]
 8006a5a:	f003 0301 	and.w	r3, r3, #1
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d00a      	beq.n	8006a78 <HAL_UART_IRQHandler+0x90>
 8006a62:	69bb      	ldr	r3, [r7, #24]
 8006a64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d005      	beq.n	8006a78 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a70:	f043 0201 	orr.w	r2, r3, #1
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006a78:	69fb      	ldr	r3, [r7, #28]
 8006a7a:	f003 0304 	and.w	r3, r3, #4
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d00a      	beq.n	8006a98 <HAL_UART_IRQHandler+0xb0>
 8006a82:	697b      	ldr	r3, [r7, #20]
 8006a84:	f003 0301 	and.w	r3, r3, #1
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d005      	beq.n	8006a98 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a90:	f043 0202 	orr.w	r2, r3, #2
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006a98:	69fb      	ldr	r3, [r7, #28]
 8006a9a:	f003 0302 	and.w	r3, r3, #2
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d00a      	beq.n	8006ab8 <HAL_UART_IRQHandler+0xd0>
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	f003 0301 	and.w	r3, r3, #1
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d005      	beq.n	8006ab8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ab0:	f043 0204 	orr.w	r2, r3, #4
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006ab8:	69fb      	ldr	r3, [r7, #28]
 8006aba:	f003 0308 	and.w	r3, r3, #8
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d00f      	beq.n	8006ae2 <HAL_UART_IRQHandler+0xfa>
 8006ac2:	69bb      	ldr	r3, [r7, #24]
 8006ac4:	f003 0320 	and.w	r3, r3, #32
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d104      	bne.n	8006ad6 <HAL_UART_IRQHandler+0xee>
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	f003 0301 	and.w	r3, r3, #1
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d005      	beq.n	8006ae2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ada:	f043 0208 	orr.w	r2, r3, #8
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d078      	beq.n	8006bdc <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006aea:	69fb      	ldr	r3, [r7, #28]
 8006aec:	f003 0320 	and.w	r3, r3, #32
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d007      	beq.n	8006b04 <HAL_UART_IRQHandler+0x11c>
 8006af4:	69bb      	ldr	r3, [r7, #24]
 8006af6:	f003 0320 	and.w	r3, r3, #32
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d002      	beq.n	8006b04 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f000 f970 	bl	8006de4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	695b      	ldr	r3, [r3, #20]
 8006b0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b0e:	2b40      	cmp	r3, #64	; 0x40
 8006b10:	bf0c      	ite	eq
 8006b12:	2301      	moveq	r3, #1
 8006b14:	2300      	movne	r3, #0
 8006b16:	b2db      	uxtb	r3, r3
 8006b18:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b1e:	f003 0308 	and.w	r3, r3, #8
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d102      	bne.n	8006b2c <HAL_UART_IRQHandler+0x144>
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d031      	beq.n	8006b90 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	f000 f8b9 	bl	8006ca4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	695b      	ldr	r3, [r3, #20]
 8006b38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b3c:	2b40      	cmp	r3, #64	; 0x40
 8006b3e:	d123      	bne.n	8006b88 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	695a      	ldr	r2, [r3, #20]
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b4e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d013      	beq.n	8006b80 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b5c:	4a21      	ldr	r2, [pc, #132]	; (8006be4 <HAL_UART_IRQHandler+0x1fc>)
 8006b5e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b64:	4618      	mov	r0, r3
 8006b66:	f7fd fb35 	bl	80041d4 <HAL_DMA_Abort_IT>
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d016      	beq.n	8006b9e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b76:	687a      	ldr	r2, [r7, #4]
 8006b78:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006b7a:	4610      	mov	r0, r2
 8006b7c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b7e:	e00e      	b.n	8006b9e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006b80:	6878      	ldr	r0, [r7, #4]
 8006b82:	f000 f83b 	bl	8006bfc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b86:	e00a      	b.n	8006b9e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	f000 f837 	bl	8006bfc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b8e:	e006      	b.n	8006b9e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	f000 f833 	bl	8006bfc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8006b9c:	e01e      	b.n	8006bdc <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b9e:	bf00      	nop
    return;
 8006ba0:	e01c      	b.n	8006bdc <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006ba2:	69fb      	ldr	r3, [r7, #28]
 8006ba4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d008      	beq.n	8006bbe <HAL_UART_IRQHandler+0x1d6>
 8006bac:	69bb      	ldr	r3, [r7, #24]
 8006bae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d003      	beq.n	8006bbe <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	f000 f8a6 	bl	8006d08 <UART_Transmit_IT>
    return;
 8006bbc:	e00f      	b.n	8006bde <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006bbe:	69fb      	ldr	r3, [r7, #28]
 8006bc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d00a      	beq.n	8006bde <HAL_UART_IRQHandler+0x1f6>
 8006bc8:	69bb      	ldr	r3, [r7, #24]
 8006bca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d005      	beq.n	8006bde <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f000 f8ee 	bl	8006db4 <UART_EndTransmit_IT>
    return;
 8006bd8:	bf00      	nop
 8006bda:	e000      	b.n	8006bde <HAL_UART_IRQHandler+0x1f6>
    return;
 8006bdc:	bf00      	nop
  }
}
 8006bde:	3720      	adds	r7, #32
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bd80      	pop	{r7, pc}
 8006be4:	08006ce1 	.word	0x08006ce1

08006be8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006be8:	b480      	push	{r7}
 8006bea:	b083      	sub	sp, #12
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006bf0:	bf00      	nop
 8006bf2:	370c      	adds	r7, #12
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfa:	4770      	bx	lr

08006bfc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b083      	sub	sp, #12
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006c04:	bf00      	nop
 8006c06:	370c      	adds	r7, #12
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0e:	4770      	bx	lr

08006c10 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b084      	sub	sp, #16
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	60f8      	str	r0, [r7, #12]
 8006c18:	60b9      	str	r1, [r7, #8]
 8006c1a:	603b      	str	r3, [r7, #0]
 8006c1c:	4613      	mov	r3, r2
 8006c1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c20:	e02c      	b.n	8006c7c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c22:	69bb      	ldr	r3, [r7, #24]
 8006c24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c28:	d028      	beq.n	8006c7c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006c2a:	69bb      	ldr	r3, [r7, #24]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d007      	beq.n	8006c40 <UART_WaitOnFlagUntilTimeout+0x30>
 8006c30:	f7fc fb72 	bl	8003318 <HAL_GetTick>
 8006c34:	4602      	mov	r2, r0
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	1ad3      	subs	r3, r2, r3
 8006c3a:	69ba      	ldr	r2, [r7, #24]
 8006c3c:	429a      	cmp	r2, r3
 8006c3e:	d21d      	bcs.n	8006c7c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	68da      	ldr	r2, [r3, #12]
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006c4e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	695a      	ldr	r2, [r3, #20]
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f022 0201 	bic.w	r2, r2, #1
 8006c5e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	2220      	movs	r2, #32
 8006c64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	2220      	movs	r2, #32
 8006c6c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	2200      	movs	r2, #0
 8006c74:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8006c78:	2303      	movs	r3, #3
 8006c7a:	e00f      	b.n	8006c9c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	681a      	ldr	r2, [r3, #0]
 8006c82:	68bb      	ldr	r3, [r7, #8]
 8006c84:	4013      	ands	r3, r2
 8006c86:	68ba      	ldr	r2, [r7, #8]
 8006c88:	429a      	cmp	r2, r3
 8006c8a:	bf0c      	ite	eq
 8006c8c:	2301      	moveq	r3, #1
 8006c8e:	2300      	movne	r3, #0
 8006c90:	b2db      	uxtb	r3, r3
 8006c92:	461a      	mov	r2, r3
 8006c94:	79fb      	ldrb	r3, [r7, #7]
 8006c96:	429a      	cmp	r2, r3
 8006c98:	d0c3      	beq.n	8006c22 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006c9a:	2300      	movs	r3, #0
}
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	3710      	adds	r7, #16
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	bd80      	pop	{r7, pc}

08006ca4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b083      	sub	sp, #12
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	68da      	ldr	r2, [r3, #12]
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006cba:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	695a      	ldr	r2, [r3, #20]
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f022 0201 	bic.w	r2, r2, #1
 8006cca:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2220      	movs	r2, #32
 8006cd0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8006cd4:	bf00      	nop
 8006cd6:	370c      	adds	r7, #12
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cde:	4770      	bx	lr

08006ce0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b084      	sub	sp, #16
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006cfa:	68f8      	ldr	r0, [r7, #12]
 8006cfc:	f7ff ff7e 	bl	8006bfc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d00:	bf00      	nop
 8006d02:	3710      	adds	r7, #16
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd80      	pop	{r7, pc}

08006d08 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006d08:	b480      	push	{r7}
 8006d0a:	b085      	sub	sp, #20
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006d16:	b2db      	uxtb	r3, r3
 8006d18:	2b21      	cmp	r3, #33	; 0x21
 8006d1a:	d144      	bne.n	8006da6 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	689b      	ldr	r3, [r3, #8]
 8006d20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d24:	d11a      	bne.n	8006d5c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6a1b      	ldr	r3, [r3, #32]
 8006d2a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	881b      	ldrh	r3, [r3, #0]
 8006d30:	461a      	mov	r2, r3
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006d3a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	691b      	ldr	r3, [r3, #16]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d105      	bne.n	8006d50 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6a1b      	ldr	r3, [r3, #32]
 8006d48:	1c9a      	adds	r2, r3, #2
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	621a      	str	r2, [r3, #32]
 8006d4e:	e00e      	b.n	8006d6e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6a1b      	ldr	r3, [r3, #32]
 8006d54:	1c5a      	adds	r2, r3, #1
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	621a      	str	r2, [r3, #32]
 8006d5a:	e008      	b.n	8006d6e <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6a1b      	ldr	r3, [r3, #32]
 8006d60:	1c59      	adds	r1, r3, #1
 8006d62:	687a      	ldr	r2, [r7, #4]
 8006d64:	6211      	str	r1, [r2, #32]
 8006d66:	781a      	ldrb	r2, [r3, #0]
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006d72:	b29b      	uxth	r3, r3
 8006d74:	3b01      	subs	r3, #1
 8006d76:	b29b      	uxth	r3, r3
 8006d78:	687a      	ldr	r2, [r7, #4]
 8006d7a:	4619      	mov	r1, r3
 8006d7c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d10f      	bne.n	8006da2 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	68da      	ldr	r2, [r3, #12]
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006d90:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	68da      	ldr	r2, [r3, #12]
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006da0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006da2:	2300      	movs	r3, #0
 8006da4:	e000      	b.n	8006da8 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006da6:	2302      	movs	r3, #2
  }
}
 8006da8:	4618      	mov	r0, r3
 8006daa:	3714      	adds	r7, #20
 8006dac:	46bd      	mov	sp, r7
 8006dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db2:	4770      	bx	lr

08006db4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b082      	sub	sp, #8
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	68da      	ldr	r2, [r3, #12]
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006dca:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2220      	movs	r2, #32
 8006dd0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	f7ff ff07 	bl	8006be8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006dda:	2300      	movs	r3, #0
}
 8006ddc:	4618      	mov	r0, r3
 8006dde:	3708      	adds	r7, #8
 8006de0:	46bd      	mov	sp, r7
 8006de2:	bd80      	pop	{r7, pc}

08006de4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b084      	sub	sp, #16
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006df2:	b2db      	uxtb	r3, r3
 8006df4:	2b22      	cmp	r3, #34	; 0x22
 8006df6:	d171      	bne.n	8006edc <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	689b      	ldr	r3, [r3, #8]
 8006dfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e00:	d123      	bne.n	8006e4a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e06:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	691b      	ldr	r3, [r3, #16]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d10e      	bne.n	8006e2e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	685b      	ldr	r3, [r3, #4]
 8006e16:	b29b      	uxth	r3, r3
 8006e18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e1c:	b29a      	uxth	r2, r3
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e26:	1c9a      	adds	r2, r3, #2
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	629a      	str	r2, [r3, #40]	; 0x28
 8006e2c:	e029      	b.n	8006e82 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	685b      	ldr	r3, [r3, #4]
 8006e34:	b29b      	uxth	r3, r3
 8006e36:	b2db      	uxtb	r3, r3
 8006e38:	b29a      	uxth	r2, r3
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e42:	1c5a      	adds	r2, r3, #1
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	629a      	str	r2, [r3, #40]	; 0x28
 8006e48:	e01b      	b.n	8006e82 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	691b      	ldr	r3, [r3, #16]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d10a      	bne.n	8006e68 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	6858      	ldr	r0, [r3, #4]
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e5c:	1c59      	adds	r1, r3, #1
 8006e5e:	687a      	ldr	r2, [r7, #4]
 8006e60:	6291      	str	r1, [r2, #40]	; 0x28
 8006e62:	b2c2      	uxtb	r2, r0
 8006e64:	701a      	strb	r2, [r3, #0]
 8006e66:	e00c      	b.n	8006e82 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	685b      	ldr	r3, [r3, #4]
 8006e6e:	b2da      	uxtb	r2, r3
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e74:	1c58      	adds	r0, r3, #1
 8006e76:	6879      	ldr	r1, [r7, #4]
 8006e78:	6288      	str	r0, [r1, #40]	; 0x28
 8006e7a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006e7e:	b2d2      	uxtb	r2, r2
 8006e80:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006e86:	b29b      	uxth	r3, r3
 8006e88:	3b01      	subs	r3, #1
 8006e8a:	b29b      	uxth	r3, r3
 8006e8c:	687a      	ldr	r2, [r7, #4]
 8006e8e:	4619      	mov	r1, r3
 8006e90:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d120      	bne.n	8006ed8 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	68da      	ldr	r2, [r3, #12]
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f022 0220 	bic.w	r2, r2, #32
 8006ea4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	68da      	ldr	r2, [r3, #12]
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006eb4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	695a      	ldr	r2, [r3, #20]
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f022 0201 	bic.w	r2, r2, #1
 8006ec4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2220      	movs	r2, #32
 8006eca:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	f7fb feea 	bl	8002ca8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	e002      	b.n	8006ede <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8006ed8:	2300      	movs	r3, #0
 8006eda:	e000      	b.n	8006ede <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8006edc:	2302      	movs	r3, #2
  }
}
 8006ede:	4618      	mov	r0, r3
 8006ee0:	3710      	adds	r7, #16
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}
	...

08006ee8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006eec:	b085      	sub	sp, #20
 8006eee:	af00      	add	r7, sp, #0
 8006ef0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	691b      	ldr	r3, [r3, #16]
 8006ef8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	68da      	ldr	r2, [r3, #12]
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	430a      	orrs	r2, r1
 8006f06:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	689a      	ldr	r2, [r3, #8]
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	691b      	ldr	r3, [r3, #16]
 8006f10:	431a      	orrs	r2, r3
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	695b      	ldr	r3, [r3, #20]
 8006f16:	431a      	orrs	r2, r3
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	69db      	ldr	r3, [r3, #28]
 8006f1c:	4313      	orrs	r3, r2
 8006f1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	68db      	ldr	r3, [r3, #12]
 8006f26:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006f2a:	f023 030c 	bic.w	r3, r3, #12
 8006f2e:	687a      	ldr	r2, [r7, #4]
 8006f30:	6812      	ldr	r2, [r2, #0]
 8006f32:	68f9      	ldr	r1, [r7, #12]
 8006f34:	430b      	orrs	r3, r1
 8006f36:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	695b      	ldr	r3, [r3, #20]
 8006f3e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	699a      	ldr	r2, [r3, #24]
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	430a      	orrs	r2, r1
 8006f4c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	69db      	ldr	r3, [r3, #28]
 8006f52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f56:	f040 818b 	bne.w	8007270 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	4ac1      	ldr	r2, [pc, #772]	; (8007264 <UART_SetConfig+0x37c>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d005      	beq.n	8006f70 <UART_SetConfig+0x88>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4abf      	ldr	r2, [pc, #764]	; (8007268 <UART_SetConfig+0x380>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	f040 80bd 	bne.w	80070ea <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006f70:	f7fe f9bc 	bl	80052ec <HAL_RCC_GetPCLK2Freq>
 8006f74:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	461d      	mov	r5, r3
 8006f7a:	f04f 0600 	mov.w	r6, #0
 8006f7e:	46a8      	mov	r8, r5
 8006f80:	46b1      	mov	r9, r6
 8006f82:	eb18 0308 	adds.w	r3, r8, r8
 8006f86:	eb49 0409 	adc.w	r4, r9, r9
 8006f8a:	4698      	mov	r8, r3
 8006f8c:	46a1      	mov	r9, r4
 8006f8e:	eb18 0805 	adds.w	r8, r8, r5
 8006f92:	eb49 0906 	adc.w	r9, r9, r6
 8006f96:	f04f 0100 	mov.w	r1, #0
 8006f9a:	f04f 0200 	mov.w	r2, #0
 8006f9e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006fa2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006fa6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006faa:	4688      	mov	r8, r1
 8006fac:	4691      	mov	r9, r2
 8006fae:	eb18 0005 	adds.w	r0, r8, r5
 8006fb2:	eb49 0106 	adc.w	r1, r9, r6
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	685b      	ldr	r3, [r3, #4]
 8006fba:	461d      	mov	r5, r3
 8006fbc:	f04f 0600 	mov.w	r6, #0
 8006fc0:	196b      	adds	r3, r5, r5
 8006fc2:	eb46 0406 	adc.w	r4, r6, r6
 8006fc6:	461a      	mov	r2, r3
 8006fc8:	4623      	mov	r3, r4
 8006fca:	f7f9 ff73 	bl	8000eb4 <__aeabi_uldivmod>
 8006fce:	4603      	mov	r3, r0
 8006fd0:	460c      	mov	r4, r1
 8006fd2:	461a      	mov	r2, r3
 8006fd4:	4ba5      	ldr	r3, [pc, #660]	; (800726c <UART_SetConfig+0x384>)
 8006fd6:	fba3 2302 	umull	r2, r3, r3, r2
 8006fda:	095b      	lsrs	r3, r3, #5
 8006fdc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006fe0:	68bb      	ldr	r3, [r7, #8]
 8006fe2:	461d      	mov	r5, r3
 8006fe4:	f04f 0600 	mov.w	r6, #0
 8006fe8:	46a9      	mov	r9, r5
 8006fea:	46b2      	mov	sl, r6
 8006fec:	eb19 0309 	adds.w	r3, r9, r9
 8006ff0:	eb4a 040a 	adc.w	r4, sl, sl
 8006ff4:	4699      	mov	r9, r3
 8006ff6:	46a2      	mov	sl, r4
 8006ff8:	eb19 0905 	adds.w	r9, r9, r5
 8006ffc:	eb4a 0a06 	adc.w	sl, sl, r6
 8007000:	f04f 0100 	mov.w	r1, #0
 8007004:	f04f 0200 	mov.w	r2, #0
 8007008:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800700c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007010:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007014:	4689      	mov	r9, r1
 8007016:	4692      	mov	sl, r2
 8007018:	eb19 0005 	adds.w	r0, r9, r5
 800701c:	eb4a 0106 	adc.w	r1, sl, r6
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	685b      	ldr	r3, [r3, #4]
 8007024:	461d      	mov	r5, r3
 8007026:	f04f 0600 	mov.w	r6, #0
 800702a:	196b      	adds	r3, r5, r5
 800702c:	eb46 0406 	adc.w	r4, r6, r6
 8007030:	461a      	mov	r2, r3
 8007032:	4623      	mov	r3, r4
 8007034:	f7f9 ff3e 	bl	8000eb4 <__aeabi_uldivmod>
 8007038:	4603      	mov	r3, r0
 800703a:	460c      	mov	r4, r1
 800703c:	461a      	mov	r2, r3
 800703e:	4b8b      	ldr	r3, [pc, #556]	; (800726c <UART_SetConfig+0x384>)
 8007040:	fba3 1302 	umull	r1, r3, r3, r2
 8007044:	095b      	lsrs	r3, r3, #5
 8007046:	2164      	movs	r1, #100	; 0x64
 8007048:	fb01 f303 	mul.w	r3, r1, r3
 800704c:	1ad3      	subs	r3, r2, r3
 800704e:	00db      	lsls	r3, r3, #3
 8007050:	3332      	adds	r3, #50	; 0x32
 8007052:	4a86      	ldr	r2, [pc, #536]	; (800726c <UART_SetConfig+0x384>)
 8007054:	fba2 2303 	umull	r2, r3, r2, r3
 8007058:	095b      	lsrs	r3, r3, #5
 800705a:	005b      	lsls	r3, r3, #1
 800705c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007060:	4498      	add	r8, r3
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	461d      	mov	r5, r3
 8007066:	f04f 0600 	mov.w	r6, #0
 800706a:	46a9      	mov	r9, r5
 800706c:	46b2      	mov	sl, r6
 800706e:	eb19 0309 	adds.w	r3, r9, r9
 8007072:	eb4a 040a 	adc.w	r4, sl, sl
 8007076:	4699      	mov	r9, r3
 8007078:	46a2      	mov	sl, r4
 800707a:	eb19 0905 	adds.w	r9, r9, r5
 800707e:	eb4a 0a06 	adc.w	sl, sl, r6
 8007082:	f04f 0100 	mov.w	r1, #0
 8007086:	f04f 0200 	mov.w	r2, #0
 800708a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800708e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007092:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007096:	4689      	mov	r9, r1
 8007098:	4692      	mov	sl, r2
 800709a:	eb19 0005 	adds.w	r0, r9, r5
 800709e:	eb4a 0106 	adc.w	r1, sl, r6
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	685b      	ldr	r3, [r3, #4]
 80070a6:	461d      	mov	r5, r3
 80070a8:	f04f 0600 	mov.w	r6, #0
 80070ac:	196b      	adds	r3, r5, r5
 80070ae:	eb46 0406 	adc.w	r4, r6, r6
 80070b2:	461a      	mov	r2, r3
 80070b4:	4623      	mov	r3, r4
 80070b6:	f7f9 fefd 	bl	8000eb4 <__aeabi_uldivmod>
 80070ba:	4603      	mov	r3, r0
 80070bc:	460c      	mov	r4, r1
 80070be:	461a      	mov	r2, r3
 80070c0:	4b6a      	ldr	r3, [pc, #424]	; (800726c <UART_SetConfig+0x384>)
 80070c2:	fba3 1302 	umull	r1, r3, r3, r2
 80070c6:	095b      	lsrs	r3, r3, #5
 80070c8:	2164      	movs	r1, #100	; 0x64
 80070ca:	fb01 f303 	mul.w	r3, r1, r3
 80070ce:	1ad3      	subs	r3, r2, r3
 80070d0:	00db      	lsls	r3, r3, #3
 80070d2:	3332      	adds	r3, #50	; 0x32
 80070d4:	4a65      	ldr	r2, [pc, #404]	; (800726c <UART_SetConfig+0x384>)
 80070d6:	fba2 2303 	umull	r2, r3, r2, r3
 80070da:	095b      	lsrs	r3, r3, #5
 80070dc:	f003 0207 	and.w	r2, r3, #7
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4442      	add	r2, r8
 80070e6:	609a      	str	r2, [r3, #8]
 80070e8:	e26f      	b.n	80075ca <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80070ea:	f7fe f8eb 	bl	80052c4 <HAL_RCC_GetPCLK1Freq>
 80070ee:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	461d      	mov	r5, r3
 80070f4:	f04f 0600 	mov.w	r6, #0
 80070f8:	46a8      	mov	r8, r5
 80070fa:	46b1      	mov	r9, r6
 80070fc:	eb18 0308 	adds.w	r3, r8, r8
 8007100:	eb49 0409 	adc.w	r4, r9, r9
 8007104:	4698      	mov	r8, r3
 8007106:	46a1      	mov	r9, r4
 8007108:	eb18 0805 	adds.w	r8, r8, r5
 800710c:	eb49 0906 	adc.w	r9, r9, r6
 8007110:	f04f 0100 	mov.w	r1, #0
 8007114:	f04f 0200 	mov.w	r2, #0
 8007118:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800711c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007120:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007124:	4688      	mov	r8, r1
 8007126:	4691      	mov	r9, r2
 8007128:	eb18 0005 	adds.w	r0, r8, r5
 800712c:	eb49 0106 	adc.w	r1, r9, r6
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	685b      	ldr	r3, [r3, #4]
 8007134:	461d      	mov	r5, r3
 8007136:	f04f 0600 	mov.w	r6, #0
 800713a:	196b      	adds	r3, r5, r5
 800713c:	eb46 0406 	adc.w	r4, r6, r6
 8007140:	461a      	mov	r2, r3
 8007142:	4623      	mov	r3, r4
 8007144:	f7f9 feb6 	bl	8000eb4 <__aeabi_uldivmod>
 8007148:	4603      	mov	r3, r0
 800714a:	460c      	mov	r4, r1
 800714c:	461a      	mov	r2, r3
 800714e:	4b47      	ldr	r3, [pc, #284]	; (800726c <UART_SetConfig+0x384>)
 8007150:	fba3 2302 	umull	r2, r3, r3, r2
 8007154:	095b      	lsrs	r3, r3, #5
 8007156:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	461d      	mov	r5, r3
 800715e:	f04f 0600 	mov.w	r6, #0
 8007162:	46a9      	mov	r9, r5
 8007164:	46b2      	mov	sl, r6
 8007166:	eb19 0309 	adds.w	r3, r9, r9
 800716a:	eb4a 040a 	adc.w	r4, sl, sl
 800716e:	4699      	mov	r9, r3
 8007170:	46a2      	mov	sl, r4
 8007172:	eb19 0905 	adds.w	r9, r9, r5
 8007176:	eb4a 0a06 	adc.w	sl, sl, r6
 800717a:	f04f 0100 	mov.w	r1, #0
 800717e:	f04f 0200 	mov.w	r2, #0
 8007182:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007186:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800718a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800718e:	4689      	mov	r9, r1
 8007190:	4692      	mov	sl, r2
 8007192:	eb19 0005 	adds.w	r0, r9, r5
 8007196:	eb4a 0106 	adc.w	r1, sl, r6
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	685b      	ldr	r3, [r3, #4]
 800719e:	461d      	mov	r5, r3
 80071a0:	f04f 0600 	mov.w	r6, #0
 80071a4:	196b      	adds	r3, r5, r5
 80071a6:	eb46 0406 	adc.w	r4, r6, r6
 80071aa:	461a      	mov	r2, r3
 80071ac:	4623      	mov	r3, r4
 80071ae:	f7f9 fe81 	bl	8000eb4 <__aeabi_uldivmod>
 80071b2:	4603      	mov	r3, r0
 80071b4:	460c      	mov	r4, r1
 80071b6:	461a      	mov	r2, r3
 80071b8:	4b2c      	ldr	r3, [pc, #176]	; (800726c <UART_SetConfig+0x384>)
 80071ba:	fba3 1302 	umull	r1, r3, r3, r2
 80071be:	095b      	lsrs	r3, r3, #5
 80071c0:	2164      	movs	r1, #100	; 0x64
 80071c2:	fb01 f303 	mul.w	r3, r1, r3
 80071c6:	1ad3      	subs	r3, r2, r3
 80071c8:	00db      	lsls	r3, r3, #3
 80071ca:	3332      	adds	r3, #50	; 0x32
 80071cc:	4a27      	ldr	r2, [pc, #156]	; (800726c <UART_SetConfig+0x384>)
 80071ce:	fba2 2303 	umull	r2, r3, r2, r3
 80071d2:	095b      	lsrs	r3, r3, #5
 80071d4:	005b      	lsls	r3, r3, #1
 80071d6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80071da:	4498      	add	r8, r3
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	461d      	mov	r5, r3
 80071e0:	f04f 0600 	mov.w	r6, #0
 80071e4:	46a9      	mov	r9, r5
 80071e6:	46b2      	mov	sl, r6
 80071e8:	eb19 0309 	adds.w	r3, r9, r9
 80071ec:	eb4a 040a 	adc.w	r4, sl, sl
 80071f0:	4699      	mov	r9, r3
 80071f2:	46a2      	mov	sl, r4
 80071f4:	eb19 0905 	adds.w	r9, r9, r5
 80071f8:	eb4a 0a06 	adc.w	sl, sl, r6
 80071fc:	f04f 0100 	mov.w	r1, #0
 8007200:	f04f 0200 	mov.w	r2, #0
 8007204:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007208:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800720c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007210:	4689      	mov	r9, r1
 8007212:	4692      	mov	sl, r2
 8007214:	eb19 0005 	adds.w	r0, r9, r5
 8007218:	eb4a 0106 	adc.w	r1, sl, r6
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	685b      	ldr	r3, [r3, #4]
 8007220:	461d      	mov	r5, r3
 8007222:	f04f 0600 	mov.w	r6, #0
 8007226:	196b      	adds	r3, r5, r5
 8007228:	eb46 0406 	adc.w	r4, r6, r6
 800722c:	461a      	mov	r2, r3
 800722e:	4623      	mov	r3, r4
 8007230:	f7f9 fe40 	bl	8000eb4 <__aeabi_uldivmod>
 8007234:	4603      	mov	r3, r0
 8007236:	460c      	mov	r4, r1
 8007238:	461a      	mov	r2, r3
 800723a:	4b0c      	ldr	r3, [pc, #48]	; (800726c <UART_SetConfig+0x384>)
 800723c:	fba3 1302 	umull	r1, r3, r3, r2
 8007240:	095b      	lsrs	r3, r3, #5
 8007242:	2164      	movs	r1, #100	; 0x64
 8007244:	fb01 f303 	mul.w	r3, r1, r3
 8007248:	1ad3      	subs	r3, r2, r3
 800724a:	00db      	lsls	r3, r3, #3
 800724c:	3332      	adds	r3, #50	; 0x32
 800724e:	4a07      	ldr	r2, [pc, #28]	; (800726c <UART_SetConfig+0x384>)
 8007250:	fba2 2303 	umull	r2, r3, r2, r3
 8007254:	095b      	lsrs	r3, r3, #5
 8007256:	f003 0207 	and.w	r2, r3, #7
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4442      	add	r2, r8
 8007260:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8007262:	e1b2      	b.n	80075ca <UART_SetConfig+0x6e2>
 8007264:	40011000 	.word	0x40011000
 8007268:	40011400 	.word	0x40011400
 800726c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	4ad7      	ldr	r2, [pc, #860]	; (80075d4 <UART_SetConfig+0x6ec>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d005      	beq.n	8007286 <UART_SetConfig+0x39e>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	4ad6      	ldr	r2, [pc, #856]	; (80075d8 <UART_SetConfig+0x6f0>)
 8007280:	4293      	cmp	r3, r2
 8007282:	f040 80d1 	bne.w	8007428 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8007286:	f7fe f831 	bl	80052ec <HAL_RCC_GetPCLK2Freq>
 800728a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	469a      	mov	sl, r3
 8007290:	f04f 0b00 	mov.w	fp, #0
 8007294:	46d0      	mov	r8, sl
 8007296:	46d9      	mov	r9, fp
 8007298:	eb18 0308 	adds.w	r3, r8, r8
 800729c:	eb49 0409 	adc.w	r4, r9, r9
 80072a0:	4698      	mov	r8, r3
 80072a2:	46a1      	mov	r9, r4
 80072a4:	eb18 080a 	adds.w	r8, r8, sl
 80072a8:	eb49 090b 	adc.w	r9, r9, fp
 80072ac:	f04f 0100 	mov.w	r1, #0
 80072b0:	f04f 0200 	mov.w	r2, #0
 80072b4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80072b8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80072bc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80072c0:	4688      	mov	r8, r1
 80072c2:	4691      	mov	r9, r2
 80072c4:	eb1a 0508 	adds.w	r5, sl, r8
 80072c8:	eb4b 0609 	adc.w	r6, fp, r9
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	685b      	ldr	r3, [r3, #4]
 80072d0:	4619      	mov	r1, r3
 80072d2:	f04f 0200 	mov.w	r2, #0
 80072d6:	f04f 0300 	mov.w	r3, #0
 80072da:	f04f 0400 	mov.w	r4, #0
 80072de:	0094      	lsls	r4, r2, #2
 80072e0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80072e4:	008b      	lsls	r3, r1, #2
 80072e6:	461a      	mov	r2, r3
 80072e8:	4623      	mov	r3, r4
 80072ea:	4628      	mov	r0, r5
 80072ec:	4631      	mov	r1, r6
 80072ee:	f7f9 fde1 	bl	8000eb4 <__aeabi_uldivmod>
 80072f2:	4603      	mov	r3, r0
 80072f4:	460c      	mov	r4, r1
 80072f6:	461a      	mov	r2, r3
 80072f8:	4bb8      	ldr	r3, [pc, #736]	; (80075dc <UART_SetConfig+0x6f4>)
 80072fa:	fba3 2302 	umull	r2, r3, r3, r2
 80072fe:	095b      	lsrs	r3, r3, #5
 8007300:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	469b      	mov	fp, r3
 8007308:	f04f 0c00 	mov.w	ip, #0
 800730c:	46d9      	mov	r9, fp
 800730e:	46e2      	mov	sl, ip
 8007310:	eb19 0309 	adds.w	r3, r9, r9
 8007314:	eb4a 040a 	adc.w	r4, sl, sl
 8007318:	4699      	mov	r9, r3
 800731a:	46a2      	mov	sl, r4
 800731c:	eb19 090b 	adds.w	r9, r9, fp
 8007320:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007324:	f04f 0100 	mov.w	r1, #0
 8007328:	f04f 0200 	mov.w	r2, #0
 800732c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007330:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007334:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007338:	4689      	mov	r9, r1
 800733a:	4692      	mov	sl, r2
 800733c:	eb1b 0509 	adds.w	r5, fp, r9
 8007340:	eb4c 060a 	adc.w	r6, ip, sl
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	685b      	ldr	r3, [r3, #4]
 8007348:	4619      	mov	r1, r3
 800734a:	f04f 0200 	mov.w	r2, #0
 800734e:	f04f 0300 	mov.w	r3, #0
 8007352:	f04f 0400 	mov.w	r4, #0
 8007356:	0094      	lsls	r4, r2, #2
 8007358:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800735c:	008b      	lsls	r3, r1, #2
 800735e:	461a      	mov	r2, r3
 8007360:	4623      	mov	r3, r4
 8007362:	4628      	mov	r0, r5
 8007364:	4631      	mov	r1, r6
 8007366:	f7f9 fda5 	bl	8000eb4 <__aeabi_uldivmod>
 800736a:	4603      	mov	r3, r0
 800736c:	460c      	mov	r4, r1
 800736e:	461a      	mov	r2, r3
 8007370:	4b9a      	ldr	r3, [pc, #616]	; (80075dc <UART_SetConfig+0x6f4>)
 8007372:	fba3 1302 	umull	r1, r3, r3, r2
 8007376:	095b      	lsrs	r3, r3, #5
 8007378:	2164      	movs	r1, #100	; 0x64
 800737a:	fb01 f303 	mul.w	r3, r1, r3
 800737e:	1ad3      	subs	r3, r2, r3
 8007380:	011b      	lsls	r3, r3, #4
 8007382:	3332      	adds	r3, #50	; 0x32
 8007384:	4a95      	ldr	r2, [pc, #596]	; (80075dc <UART_SetConfig+0x6f4>)
 8007386:	fba2 2303 	umull	r2, r3, r2, r3
 800738a:	095b      	lsrs	r3, r3, #5
 800738c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007390:	4498      	add	r8, r3
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	469b      	mov	fp, r3
 8007396:	f04f 0c00 	mov.w	ip, #0
 800739a:	46d9      	mov	r9, fp
 800739c:	46e2      	mov	sl, ip
 800739e:	eb19 0309 	adds.w	r3, r9, r9
 80073a2:	eb4a 040a 	adc.w	r4, sl, sl
 80073a6:	4699      	mov	r9, r3
 80073a8:	46a2      	mov	sl, r4
 80073aa:	eb19 090b 	adds.w	r9, r9, fp
 80073ae:	eb4a 0a0c 	adc.w	sl, sl, ip
 80073b2:	f04f 0100 	mov.w	r1, #0
 80073b6:	f04f 0200 	mov.w	r2, #0
 80073ba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80073be:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80073c2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80073c6:	4689      	mov	r9, r1
 80073c8:	4692      	mov	sl, r2
 80073ca:	eb1b 0509 	adds.w	r5, fp, r9
 80073ce:	eb4c 060a 	adc.w	r6, ip, sl
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	685b      	ldr	r3, [r3, #4]
 80073d6:	4619      	mov	r1, r3
 80073d8:	f04f 0200 	mov.w	r2, #0
 80073dc:	f04f 0300 	mov.w	r3, #0
 80073e0:	f04f 0400 	mov.w	r4, #0
 80073e4:	0094      	lsls	r4, r2, #2
 80073e6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80073ea:	008b      	lsls	r3, r1, #2
 80073ec:	461a      	mov	r2, r3
 80073ee:	4623      	mov	r3, r4
 80073f0:	4628      	mov	r0, r5
 80073f2:	4631      	mov	r1, r6
 80073f4:	f7f9 fd5e 	bl	8000eb4 <__aeabi_uldivmod>
 80073f8:	4603      	mov	r3, r0
 80073fa:	460c      	mov	r4, r1
 80073fc:	461a      	mov	r2, r3
 80073fe:	4b77      	ldr	r3, [pc, #476]	; (80075dc <UART_SetConfig+0x6f4>)
 8007400:	fba3 1302 	umull	r1, r3, r3, r2
 8007404:	095b      	lsrs	r3, r3, #5
 8007406:	2164      	movs	r1, #100	; 0x64
 8007408:	fb01 f303 	mul.w	r3, r1, r3
 800740c:	1ad3      	subs	r3, r2, r3
 800740e:	011b      	lsls	r3, r3, #4
 8007410:	3332      	adds	r3, #50	; 0x32
 8007412:	4a72      	ldr	r2, [pc, #456]	; (80075dc <UART_SetConfig+0x6f4>)
 8007414:	fba2 2303 	umull	r2, r3, r2, r3
 8007418:	095b      	lsrs	r3, r3, #5
 800741a:	f003 020f 	and.w	r2, r3, #15
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	4442      	add	r2, r8
 8007424:	609a      	str	r2, [r3, #8]
 8007426:	e0d0      	b.n	80075ca <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8007428:	f7fd ff4c 	bl	80052c4 <HAL_RCC_GetPCLK1Freq>
 800742c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	469a      	mov	sl, r3
 8007432:	f04f 0b00 	mov.w	fp, #0
 8007436:	46d0      	mov	r8, sl
 8007438:	46d9      	mov	r9, fp
 800743a:	eb18 0308 	adds.w	r3, r8, r8
 800743e:	eb49 0409 	adc.w	r4, r9, r9
 8007442:	4698      	mov	r8, r3
 8007444:	46a1      	mov	r9, r4
 8007446:	eb18 080a 	adds.w	r8, r8, sl
 800744a:	eb49 090b 	adc.w	r9, r9, fp
 800744e:	f04f 0100 	mov.w	r1, #0
 8007452:	f04f 0200 	mov.w	r2, #0
 8007456:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800745a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800745e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007462:	4688      	mov	r8, r1
 8007464:	4691      	mov	r9, r2
 8007466:	eb1a 0508 	adds.w	r5, sl, r8
 800746a:	eb4b 0609 	adc.w	r6, fp, r9
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	685b      	ldr	r3, [r3, #4]
 8007472:	4619      	mov	r1, r3
 8007474:	f04f 0200 	mov.w	r2, #0
 8007478:	f04f 0300 	mov.w	r3, #0
 800747c:	f04f 0400 	mov.w	r4, #0
 8007480:	0094      	lsls	r4, r2, #2
 8007482:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007486:	008b      	lsls	r3, r1, #2
 8007488:	461a      	mov	r2, r3
 800748a:	4623      	mov	r3, r4
 800748c:	4628      	mov	r0, r5
 800748e:	4631      	mov	r1, r6
 8007490:	f7f9 fd10 	bl	8000eb4 <__aeabi_uldivmod>
 8007494:	4603      	mov	r3, r0
 8007496:	460c      	mov	r4, r1
 8007498:	461a      	mov	r2, r3
 800749a:	4b50      	ldr	r3, [pc, #320]	; (80075dc <UART_SetConfig+0x6f4>)
 800749c:	fba3 2302 	umull	r2, r3, r3, r2
 80074a0:	095b      	lsrs	r3, r3, #5
 80074a2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80074a6:	68bb      	ldr	r3, [r7, #8]
 80074a8:	469b      	mov	fp, r3
 80074aa:	f04f 0c00 	mov.w	ip, #0
 80074ae:	46d9      	mov	r9, fp
 80074b0:	46e2      	mov	sl, ip
 80074b2:	eb19 0309 	adds.w	r3, r9, r9
 80074b6:	eb4a 040a 	adc.w	r4, sl, sl
 80074ba:	4699      	mov	r9, r3
 80074bc:	46a2      	mov	sl, r4
 80074be:	eb19 090b 	adds.w	r9, r9, fp
 80074c2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80074c6:	f04f 0100 	mov.w	r1, #0
 80074ca:	f04f 0200 	mov.w	r2, #0
 80074ce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80074d2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80074d6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80074da:	4689      	mov	r9, r1
 80074dc:	4692      	mov	sl, r2
 80074de:	eb1b 0509 	adds.w	r5, fp, r9
 80074e2:	eb4c 060a 	adc.w	r6, ip, sl
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	685b      	ldr	r3, [r3, #4]
 80074ea:	4619      	mov	r1, r3
 80074ec:	f04f 0200 	mov.w	r2, #0
 80074f0:	f04f 0300 	mov.w	r3, #0
 80074f4:	f04f 0400 	mov.w	r4, #0
 80074f8:	0094      	lsls	r4, r2, #2
 80074fa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80074fe:	008b      	lsls	r3, r1, #2
 8007500:	461a      	mov	r2, r3
 8007502:	4623      	mov	r3, r4
 8007504:	4628      	mov	r0, r5
 8007506:	4631      	mov	r1, r6
 8007508:	f7f9 fcd4 	bl	8000eb4 <__aeabi_uldivmod>
 800750c:	4603      	mov	r3, r0
 800750e:	460c      	mov	r4, r1
 8007510:	461a      	mov	r2, r3
 8007512:	4b32      	ldr	r3, [pc, #200]	; (80075dc <UART_SetConfig+0x6f4>)
 8007514:	fba3 1302 	umull	r1, r3, r3, r2
 8007518:	095b      	lsrs	r3, r3, #5
 800751a:	2164      	movs	r1, #100	; 0x64
 800751c:	fb01 f303 	mul.w	r3, r1, r3
 8007520:	1ad3      	subs	r3, r2, r3
 8007522:	011b      	lsls	r3, r3, #4
 8007524:	3332      	adds	r3, #50	; 0x32
 8007526:	4a2d      	ldr	r2, [pc, #180]	; (80075dc <UART_SetConfig+0x6f4>)
 8007528:	fba2 2303 	umull	r2, r3, r2, r3
 800752c:	095b      	lsrs	r3, r3, #5
 800752e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007532:	4498      	add	r8, r3
 8007534:	68bb      	ldr	r3, [r7, #8]
 8007536:	469b      	mov	fp, r3
 8007538:	f04f 0c00 	mov.w	ip, #0
 800753c:	46d9      	mov	r9, fp
 800753e:	46e2      	mov	sl, ip
 8007540:	eb19 0309 	adds.w	r3, r9, r9
 8007544:	eb4a 040a 	adc.w	r4, sl, sl
 8007548:	4699      	mov	r9, r3
 800754a:	46a2      	mov	sl, r4
 800754c:	eb19 090b 	adds.w	r9, r9, fp
 8007550:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007554:	f04f 0100 	mov.w	r1, #0
 8007558:	f04f 0200 	mov.w	r2, #0
 800755c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007560:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007564:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007568:	4689      	mov	r9, r1
 800756a:	4692      	mov	sl, r2
 800756c:	eb1b 0509 	adds.w	r5, fp, r9
 8007570:	eb4c 060a 	adc.w	r6, ip, sl
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	685b      	ldr	r3, [r3, #4]
 8007578:	4619      	mov	r1, r3
 800757a:	f04f 0200 	mov.w	r2, #0
 800757e:	f04f 0300 	mov.w	r3, #0
 8007582:	f04f 0400 	mov.w	r4, #0
 8007586:	0094      	lsls	r4, r2, #2
 8007588:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800758c:	008b      	lsls	r3, r1, #2
 800758e:	461a      	mov	r2, r3
 8007590:	4623      	mov	r3, r4
 8007592:	4628      	mov	r0, r5
 8007594:	4631      	mov	r1, r6
 8007596:	f7f9 fc8d 	bl	8000eb4 <__aeabi_uldivmod>
 800759a:	4603      	mov	r3, r0
 800759c:	460c      	mov	r4, r1
 800759e:	461a      	mov	r2, r3
 80075a0:	4b0e      	ldr	r3, [pc, #56]	; (80075dc <UART_SetConfig+0x6f4>)
 80075a2:	fba3 1302 	umull	r1, r3, r3, r2
 80075a6:	095b      	lsrs	r3, r3, #5
 80075a8:	2164      	movs	r1, #100	; 0x64
 80075aa:	fb01 f303 	mul.w	r3, r1, r3
 80075ae:	1ad3      	subs	r3, r2, r3
 80075b0:	011b      	lsls	r3, r3, #4
 80075b2:	3332      	adds	r3, #50	; 0x32
 80075b4:	4a09      	ldr	r2, [pc, #36]	; (80075dc <UART_SetConfig+0x6f4>)
 80075b6:	fba2 2303 	umull	r2, r3, r2, r3
 80075ba:	095b      	lsrs	r3, r3, #5
 80075bc:	f003 020f 	and.w	r2, r3, #15
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	4442      	add	r2, r8
 80075c6:	609a      	str	r2, [r3, #8]
}
 80075c8:	e7ff      	b.n	80075ca <UART_SetConfig+0x6e2>
 80075ca:	bf00      	nop
 80075cc:	3714      	adds	r7, #20
 80075ce:	46bd      	mov	sp, r7
 80075d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075d4:	40011000 	.word	0x40011000
 80075d8:	40011400 	.word	0x40011400
 80075dc:	51eb851f 	.word	0x51eb851f

080075e0 <__errno>:
 80075e0:	4b01      	ldr	r3, [pc, #4]	; (80075e8 <__errno+0x8>)
 80075e2:	6818      	ldr	r0, [r3, #0]
 80075e4:	4770      	bx	lr
 80075e6:	bf00      	nop
 80075e8:	20000030 	.word	0x20000030

080075ec <__libc_init_array>:
 80075ec:	b570      	push	{r4, r5, r6, lr}
 80075ee:	4e0d      	ldr	r6, [pc, #52]	; (8007624 <__libc_init_array+0x38>)
 80075f0:	4c0d      	ldr	r4, [pc, #52]	; (8007628 <__libc_init_array+0x3c>)
 80075f2:	1ba4      	subs	r4, r4, r6
 80075f4:	10a4      	asrs	r4, r4, #2
 80075f6:	2500      	movs	r5, #0
 80075f8:	42a5      	cmp	r5, r4
 80075fa:	d109      	bne.n	8007610 <__libc_init_array+0x24>
 80075fc:	4e0b      	ldr	r6, [pc, #44]	; (800762c <__libc_init_array+0x40>)
 80075fe:	4c0c      	ldr	r4, [pc, #48]	; (8007630 <__libc_init_array+0x44>)
 8007600:	f004 fd6c 	bl	800c0dc <_init>
 8007604:	1ba4      	subs	r4, r4, r6
 8007606:	10a4      	asrs	r4, r4, #2
 8007608:	2500      	movs	r5, #0
 800760a:	42a5      	cmp	r5, r4
 800760c:	d105      	bne.n	800761a <__libc_init_array+0x2e>
 800760e:	bd70      	pop	{r4, r5, r6, pc}
 8007610:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007614:	4798      	blx	r3
 8007616:	3501      	adds	r5, #1
 8007618:	e7ee      	b.n	80075f8 <__libc_init_array+0xc>
 800761a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800761e:	4798      	blx	r3
 8007620:	3501      	adds	r5, #1
 8007622:	e7f2      	b.n	800760a <__libc_init_array+0x1e>
 8007624:	0800c7b8 	.word	0x0800c7b8
 8007628:	0800c7b8 	.word	0x0800c7b8
 800762c:	0800c7b8 	.word	0x0800c7b8
 8007630:	0800c7bc 	.word	0x0800c7bc

08007634 <memset>:
 8007634:	4402      	add	r2, r0
 8007636:	4603      	mov	r3, r0
 8007638:	4293      	cmp	r3, r2
 800763a:	d100      	bne.n	800763e <memset+0xa>
 800763c:	4770      	bx	lr
 800763e:	f803 1b01 	strb.w	r1, [r3], #1
 8007642:	e7f9      	b.n	8007638 <memset+0x4>

08007644 <__cvt>:
 8007644:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007648:	ec55 4b10 	vmov	r4, r5, d0
 800764c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800764e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007652:	2d00      	cmp	r5, #0
 8007654:	460e      	mov	r6, r1
 8007656:	4691      	mov	r9, r2
 8007658:	4619      	mov	r1, r3
 800765a:	bfb8      	it	lt
 800765c:	4622      	movlt	r2, r4
 800765e:	462b      	mov	r3, r5
 8007660:	f027 0720 	bic.w	r7, r7, #32
 8007664:	bfbb      	ittet	lt
 8007666:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800766a:	461d      	movlt	r5, r3
 800766c:	2300      	movge	r3, #0
 800766e:	232d      	movlt	r3, #45	; 0x2d
 8007670:	bfb8      	it	lt
 8007672:	4614      	movlt	r4, r2
 8007674:	2f46      	cmp	r7, #70	; 0x46
 8007676:	700b      	strb	r3, [r1, #0]
 8007678:	d004      	beq.n	8007684 <__cvt+0x40>
 800767a:	2f45      	cmp	r7, #69	; 0x45
 800767c:	d100      	bne.n	8007680 <__cvt+0x3c>
 800767e:	3601      	adds	r6, #1
 8007680:	2102      	movs	r1, #2
 8007682:	e000      	b.n	8007686 <__cvt+0x42>
 8007684:	2103      	movs	r1, #3
 8007686:	ab03      	add	r3, sp, #12
 8007688:	9301      	str	r3, [sp, #4]
 800768a:	ab02      	add	r3, sp, #8
 800768c:	9300      	str	r3, [sp, #0]
 800768e:	4632      	mov	r2, r6
 8007690:	4653      	mov	r3, sl
 8007692:	ec45 4b10 	vmov	d0, r4, r5
 8007696:	f001 fd77 	bl	8009188 <_dtoa_r>
 800769a:	2f47      	cmp	r7, #71	; 0x47
 800769c:	4680      	mov	r8, r0
 800769e:	d102      	bne.n	80076a6 <__cvt+0x62>
 80076a0:	f019 0f01 	tst.w	r9, #1
 80076a4:	d026      	beq.n	80076f4 <__cvt+0xb0>
 80076a6:	2f46      	cmp	r7, #70	; 0x46
 80076a8:	eb08 0906 	add.w	r9, r8, r6
 80076ac:	d111      	bne.n	80076d2 <__cvt+0x8e>
 80076ae:	f898 3000 	ldrb.w	r3, [r8]
 80076b2:	2b30      	cmp	r3, #48	; 0x30
 80076b4:	d10a      	bne.n	80076cc <__cvt+0x88>
 80076b6:	2200      	movs	r2, #0
 80076b8:	2300      	movs	r3, #0
 80076ba:	4620      	mov	r0, r4
 80076bc:	4629      	mov	r1, r5
 80076be:	f7f9 fa0b 	bl	8000ad8 <__aeabi_dcmpeq>
 80076c2:	b918      	cbnz	r0, 80076cc <__cvt+0x88>
 80076c4:	f1c6 0601 	rsb	r6, r6, #1
 80076c8:	f8ca 6000 	str.w	r6, [sl]
 80076cc:	f8da 3000 	ldr.w	r3, [sl]
 80076d0:	4499      	add	r9, r3
 80076d2:	2200      	movs	r2, #0
 80076d4:	2300      	movs	r3, #0
 80076d6:	4620      	mov	r0, r4
 80076d8:	4629      	mov	r1, r5
 80076da:	f7f9 f9fd 	bl	8000ad8 <__aeabi_dcmpeq>
 80076de:	b938      	cbnz	r0, 80076f0 <__cvt+0xac>
 80076e0:	2230      	movs	r2, #48	; 0x30
 80076e2:	9b03      	ldr	r3, [sp, #12]
 80076e4:	454b      	cmp	r3, r9
 80076e6:	d205      	bcs.n	80076f4 <__cvt+0xb0>
 80076e8:	1c59      	adds	r1, r3, #1
 80076ea:	9103      	str	r1, [sp, #12]
 80076ec:	701a      	strb	r2, [r3, #0]
 80076ee:	e7f8      	b.n	80076e2 <__cvt+0x9e>
 80076f0:	f8cd 900c 	str.w	r9, [sp, #12]
 80076f4:	9b03      	ldr	r3, [sp, #12]
 80076f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80076f8:	eba3 0308 	sub.w	r3, r3, r8
 80076fc:	4640      	mov	r0, r8
 80076fe:	6013      	str	r3, [r2, #0]
 8007700:	b004      	add	sp, #16
 8007702:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08007706 <__exponent>:
 8007706:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007708:	2900      	cmp	r1, #0
 800770a:	4604      	mov	r4, r0
 800770c:	bfba      	itte	lt
 800770e:	4249      	neglt	r1, r1
 8007710:	232d      	movlt	r3, #45	; 0x2d
 8007712:	232b      	movge	r3, #43	; 0x2b
 8007714:	2909      	cmp	r1, #9
 8007716:	f804 2b02 	strb.w	r2, [r4], #2
 800771a:	7043      	strb	r3, [r0, #1]
 800771c:	dd20      	ble.n	8007760 <__exponent+0x5a>
 800771e:	f10d 0307 	add.w	r3, sp, #7
 8007722:	461f      	mov	r7, r3
 8007724:	260a      	movs	r6, #10
 8007726:	fb91 f5f6 	sdiv	r5, r1, r6
 800772a:	fb06 1115 	mls	r1, r6, r5, r1
 800772e:	3130      	adds	r1, #48	; 0x30
 8007730:	2d09      	cmp	r5, #9
 8007732:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007736:	f103 32ff 	add.w	r2, r3, #4294967295
 800773a:	4629      	mov	r1, r5
 800773c:	dc09      	bgt.n	8007752 <__exponent+0x4c>
 800773e:	3130      	adds	r1, #48	; 0x30
 8007740:	3b02      	subs	r3, #2
 8007742:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007746:	42bb      	cmp	r3, r7
 8007748:	4622      	mov	r2, r4
 800774a:	d304      	bcc.n	8007756 <__exponent+0x50>
 800774c:	1a10      	subs	r0, r2, r0
 800774e:	b003      	add	sp, #12
 8007750:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007752:	4613      	mov	r3, r2
 8007754:	e7e7      	b.n	8007726 <__exponent+0x20>
 8007756:	f813 2b01 	ldrb.w	r2, [r3], #1
 800775a:	f804 2b01 	strb.w	r2, [r4], #1
 800775e:	e7f2      	b.n	8007746 <__exponent+0x40>
 8007760:	2330      	movs	r3, #48	; 0x30
 8007762:	4419      	add	r1, r3
 8007764:	7083      	strb	r3, [r0, #2]
 8007766:	1d02      	adds	r2, r0, #4
 8007768:	70c1      	strb	r1, [r0, #3]
 800776a:	e7ef      	b.n	800774c <__exponent+0x46>

0800776c <_printf_float>:
 800776c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007770:	b08d      	sub	sp, #52	; 0x34
 8007772:	460c      	mov	r4, r1
 8007774:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8007778:	4616      	mov	r6, r2
 800777a:	461f      	mov	r7, r3
 800777c:	4605      	mov	r5, r0
 800777e:	f002 fde7 	bl	800a350 <_localeconv_r>
 8007782:	6803      	ldr	r3, [r0, #0]
 8007784:	9304      	str	r3, [sp, #16]
 8007786:	4618      	mov	r0, r3
 8007788:	f7f8 fd2a 	bl	80001e0 <strlen>
 800778c:	2300      	movs	r3, #0
 800778e:	930a      	str	r3, [sp, #40]	; 0x28
 8007790:	f8d8 3000 	ldr.w	r3, [r8]
 8007794:	9005      	str	r0, [sp, #20]
 8007796:	3307      	adds	r3, #7
 8007798:	f023 0307 	bic.w	r3, r3, #7
 800779c:	f103 0208 	add.w	r2, r3, #8
 80077a0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80077a4:	f8d4 b000 	ldr.w	fp, [r4]
 80077a8:	f8c8 2000 	str.w	r2, [r8]
 80077ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077b0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80077b4:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80077b8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80077bc:	9307      	str	r3, [sp, #28]
 80077be:	f8cd 8018 	str.w	r8, [sp, #24]
 80077c2:	f04f 32ff 	mov.w	r2, #4294967295
 80077c6:	4ba7      	ldr	r3, [pc, #668]	; (8007a64 <_printf_float+0x2f8>)
 80077c8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80077cc:	f7f9 f9b6 	bl	8000b3c <__aeabi_dcmpun>
 80077d0:	bb70      	cbnz	r0, 8007830 <_printf_float+0xc4>
 80077d2:	f04f 32ff 	mov.w	r2, #4294967295
 80077d6:	4ba3      	ldr	r3, [pc, #652]	; (8007a64 <_printf_float+0x2f8>)
 80077d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80077dc:	f7f9 f990 	bl	8000b00 <__aeabi_dcmple>
 80077e0:	bb30      	cbnz	r0, 8007830 <_printf_float+0xc4>
 80077e2:	2200      	movs	r2, #0
 80077e4:	2300      	movs	r3, #0
 80077e6:	4640      	mov	r0, r8
 80077e8:	4649      	mov	r1, r9
 80077ea:	f7f9 f97f 	bl	8000aec <__aeabi_dcmplt>
 80077ee:	b110      	cbz	r0, 80077f6 <_printf_float+0x8a>
 80077f0:	232d      	movs	r3, #45	; 0x2d
 80077f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80077f6:	4a9c      	ldr	r2, [pc, #624]	; (8007a68 <_printf_float+0x2fc>)
 80077f8:	4b9c      	ldr	r3, [pc, #624]	; (8007a6c <_printf_float+0x300>)
 80077fa:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80077fe:	bf8c      	ite	hi
 8007800:	4690      	movhi	r8, r2
 8007802:	4698      	movls	r8, r3
 8007804:	2303      	movs	r3, #3
 8007806:	f02b 0204 	bic.w	r2, fp, #4
 800780a:	6123      	str	r3, [r4, #16]
 800780c:	6022      	str	r2, [r4, #0]
 800780e:	f04f 0900 	mov.w	r9, #0
 8007812:	9700      	str	r7, [sp, #0]
 8007814:	4633      	mov	r3, r6
 8007816:	aa0b      	add	r2, sp, #44	; 0x2c
 8007818:	4621      	mov	r1, r4
 800781a:	4628      	mov	r0, r5
 800781c:	f000 f9e6 	bl	8007bec <_printf_common>
 8007820:	3001      	adds	r0, #1
 8007822:	f040 808d 	bne.w	8007940 <_printf_float+0x1d4>
 8007826:	f04f 30ff 	mov.w	r0, #4294967295
 800782a:	b00d      	add	sp, #52	; 0x34
 800782c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007830:	4642      	mov	r2, r8
 8007832:	464b      	mov	r3, r9
 8007834:	4640      	mov	r0, r8
 8007836:	4649      	mov	r1, r9
 8007838:	f7f9 f980 	bl	8000b3c <__aeabi_dcmpun>
 800783c:	b110      	cbz	r0, 8007844 <_printf_float+0xd8>
 800783e:	4a8c      	ldr	r2, [pc, #560]	; (8007a70 <_printf_float+0x304>)
 8007840:	4b8c      	ldr	r3, [pc, #560]	; (8007a74 <_printf_float+0x308>)
 8007842:	e7da      	b.n	80077fa <_printf_float+0x8e>
 8007844:	6861      	ldr	r1, [r4, #4]
 8007846:	1c4b      	adds	r3, r1, #1
 8007848:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800784c:	a80a      	add	r0, sp, #40	; 0x28
 800784e:	d13e      	bne.n	80078ce <_printf_float+0x162>
 8007850:	2306      	movs	r3, #6
 8007852:	6063      	str	r3, [r4, #4]
 8007854:	2300      	movs	r3, #0
 8007856:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800785a:	ab09      	add	r3, sp, #36	; 0x24
 800785c:	9300      	str	r3, [sp, #0]
 800785e:	ec49 8b10 	vmov	d0, r8, r9
 8007862:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007866:	6022      	str	r2, [r4, #0]
 8007868:	f8cd a004 	str.w	sl, [sp, #4]
 800786c:	6861      	ldr	r1, [r4, #4]
 800786e:	4628      	mov	r0, r5
 8007870:	f7ff fee8 	bl	8007644 <__cvt>
 8007874:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8007878:	2b47      	cmp	r3, #71	; 0x47
 800787a:	4680      	mov	r8, r0
 800787c:	d109      	bne.n	8007892 <_printf_float+0x126>
 800787e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007880:	1cd8      	adds	r0, r3, #3
 8007882:	db02      	blt.n	800788a <_printf_float+0x11e>
 8007884:	6862      	ldr	r2, [r4, #4]
 8007886:	4293      	cmp	r3, r2
 8007888:	dd47      	ble.n	800791a <_printf_float+0x1ae>
 800788a:	f1aa 0a02 	sub.w	sl, sl, #2
 800788e:	fa5f fa8a 	uxtb.w	sl, sl
 8007892:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8007896:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007898:	d824      	bhi.n	80078e4 <_printf_float+0x178>
 800789a:	3901      	subs	r1, #1
 800789c:	4652      	mov	r2, sl
 800789e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80078a2:	9109      	str	r1, [sp, #36]	; 0x24
 80078a4:	f7ff ff2f 	bl	8007706 <__exponent>
 80078a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80078aa:	1813      	adds	r3, r2, r0
 80078ac:	2a01      	cmp	r2, #1
 80078ae:	4681      	mov	r9, r0
 80078b0:	6123      	str	r3, [r4, #16]
 80078b2:	dc02      	bgt.n	80078ba <_printf_float+0x14e>
 80078b4:	6822      	ldr	r2, [r4, #0]
 80078b6:	07d1      	lsls	r1, r2, #31
 80078b8:	d501      	bpl.n	80078be <_printf_float+0x152>
 80078ba:	3301      	adds	r3, #1
 80078bc:	6123      	str	r3, [r4, #16]
 80078be:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d0a5      	beq.n	8007812 <_printf_float+0xa6>
 80078c6:	232d      	movs	r3, #45	; 0x2d
 80078c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80078cc:	e7a1      	b.n	8007812 <_printf_float+0xa6>
 80078ce:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80078d2:	f000 8177 	beq.w	8007bc4 <_printf_float+0x458>
 80078d6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80078da:	d1bb      	bne.n	8007854 <_printf_float+0xe8>
 80078dc:	2900      	cmp	r1, #0
 80078de:	d1b9      	bne.n	8007854 <_printf_float+0xe8>
 80078e0:	2301      	movs	r3, #1
 80078e2:	e7b6      	b.n	8007852 <_printf_float+0xe6>
 80078e4:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80078e8:	d119      	bne.n	800791e <_printf_float+0x1b2>
 80078ea:	2900      	cmp	r1, #0
 80078ec:	6863      	ldr	r3, [r4, #4]
 80078ee:	dd0c      	ble.n	800790a <_printf_float+0x19e>
 80078f0:	6121      	str	r1, [r4, #16]
 80078f2:	b913      	cbnz	r3, 80078fa <_printf_float+0x18e>
 80078f4:	6822      	ldr	r2, [r4, #0]
 80078f6:	07d2      	lsls	r2, r2, #31
 80078f8:	d502      	bpl.n	8007900 <_printf_float+0x194>
 80078fa:	3301      	adds	r3, #1
 80078fc:	440b      	add	r3, r1
 80078fe:	6123      	str	r3, [r4, #16]
 8007900:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007902:	65a3      	str	r3, [r4, #88]	; 0x58
 8007904:	f04f 0900 	mov.w	r9, #0
 8007908:	e7d9      	b.n	80078be <_printf_float+0x152>
 800790a:	b913      	cbnz	r3, 8007912 <_printf_float+0x1a6>
 800790c:	6822      	ldr	r2, [r4, #0]
 800790e:	07d0      	lsls	r0, r2, #31
 8007910:	d501      	bpl.n	8007916 <_printf_float+0x1aa>
 8007912:	3302      	adds	r3, #2
 8007914:	e7f3      	b.n	80078fe <_printf_float+0x192>
 8007916:	2301      	movs	r3, #1
 8007918:	e7f1      	b.n	80078fe <_printf_float+0x192>
 800791a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800791e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007922:	4293      	cmp	r3, r2
 8007924:	db05      	blt.n	8007932 <_printf_float+0x1c6>
 8007926:	6822      	ldr	r2, [r4, #0]
 8007928:	6123      	str	r3, [r4, #16]
 800792a:	07d1      	lsls	r1, r2, #31
 800792c:	d5e8      	bpl.n	8007900 <_printf_float+0x194>
 800792e:	3301      	adds	r3, #1
 8007930:	e7e5      	b.n	80078fe <_printf_float+0x192>
 8007932:	2b00      	cmp	r3, #0
 8007934:	bfd4      	ite	le
 8007936:	f1c3 0302 	rsble	r3, r3, #2
 800793a:	2301      	movgt	r3, #1
 800793c:	4413      	add	r3, r2
 800793e:	e7de      	b.n	80078fe <_printf_float+0x192>
 8007940:	6823      	ldr	r3, [r4, #0]
 8007942:	055a      	lsls	r2, r3, #21
 8007944:	d407      	bmi.n	8007956 <_printf_float+0x1ea>
 8007946:	6923      	ldr	r3, [r4, #16]
 8007948:	4642      	mov	r2, r8
 800794a:	4631      	mov	r1, r6
 800794c:	4628      	mov	r0, r5
 800794e:	47b8      	blx	r7
 8007950:	3001      	adds	r0, #1
 8007952:	d12b      	bne.n	80079ac <_printf_float+0x240>
 8007954:	e767      	b.n	8007826 <_printf_float+0xba>
 8007956:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800795a:	f240 80dc 	bls.w	8007b16 <_printf_float+0x3aa>
 800795e:	2200      	movs	r2, #0
 8007960:	2300      	movs	r3, #0
 8007962:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007966:	f7f9 f8b7 	bl	8000ad8 <__aeabi_dcmpeq>
 800796a:	2800      	cmp	r0, #0
 800796c:	d033      	beq.n	80079d6 <_printf_float+0x26a>
 800796e:	2301      	movs	r3, #1
 8007970:	4a41      	ldr	r2, [pc, #260]	; (8007a78 <_printf_float+0x30c>)
 8007972:	4631      	mov	r1, r6
 8007974:	4628      	mov	r0, r5
 8007976:	47b8      	blx	r7
 8007978:	3001      	adds	r0, #1
 800797a:	f43f af54 	beq.w	8007826 <_printf_float+0xba>
 800797e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007982:	429a      	cmp	r2, r3
 8007984:	db02      	blt.n	800798c <_printf_float+0x220>
 8007986:	6823      	ldr	r3, [r4, #0]
 8007988:	07d8      	lsls	r0, r3, #31
 800798a:	d50f      	bpl.n	80079ac <_printf_float+0x240>
 800798c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007990:	4631      	mov	r1, r6
 8007992:	4628      	mov	r0, r5
 8007994:	47b8      	blx	r7
 8007996:	3001      	adds	r0, #1
 8007998:	f43f af45 	beq.w	8007826 <_printf_float+0xba>
 800799c:	f04f 0800 	mov.w	r8, #0
 80079a0:	f104 091a 	add.w	r9, r4, #26
 80079a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079a6:	3b01      	subs	r3, #1
 80079a8:	4543      	cmp	r3, r8
 80079aa:	dc09      	bgt.n	80079c0 <_printf_float+0x254>
 80079ac:	6823      	ldr	r3, [r4, #0]
 80079ae:	079b      	lsls	r3, r3, #30
 80079b0:	f100 8103 	bmi.w	8007bba <_printf_float+0x44e>
 80079b4:	68e0      	ldr	r0, [r4, #12]
 80079b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80079b8:	4298      	cmp	r0, r3
 80079ba:	bfb8      	it	lt
 80079bc:	4618      	movlt	r0, r3
 80079be:	e734      	b.n	800782a <_printf_float+0xbe>
 80079c0:	2301      	movs	r3, #1
 80079c2:	464a      	mov	r2, r9
 80079c4:	4631      	mov	r1, r6
 80079c6:	4628      	mov	r0, r5
 80079c8:	47b8      	blx	r7
 80079ca:	3001      	adds	r0, #1
 80079cc:	f43f af2b 	beq.w	8007826 <_printf_float+0xba>
 80079d0:	f108 0801 	add.w	r8, r8, #1
 80079d4:	e7e6      	b.n	80079a4 <_printf_float+0x238>
 80079d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079d8:	2b00      	cmp	r3, #0
 80079da:	dc2b      	bgt.n	8007a34 <_printf_float+0x2c8>
 80079dc:	2301      	movs	r3, #1
 80079de:	4a26      	ldr	r2, [pc, #152]	; (8007a78 <_printf_float+0x30c>)
 80079e0:	4631      	mov	r1, r6
 80079e2:	4628      	mov	r0, r5
 80079e4:	47b8      	blx	r7
 80079e6:	3001      	adds	r0, #1
 80079e8:	f43f af1d 	beq.w	8007826 <_printf_float+0xba>
 80079ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079ee:	b923      	cbnz	r3, 80079fa <_printf_float+0x28e>
 80079f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079f2:	b913      	cbnz	r3, 80079fa <_printf_float+0x28e>
 80079f4:	6823      	ldr	r3, [r4, #0]
 80079f6:	07d9      	lsls	r1, r3, #31
 80079f8:	d5d8      	bpl.n	80079ac <_printf_float+0x240>
 80079fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80079fe:	4631      	mov	r1, r6
 8007a00:	4628      	mov	r0, r5
 8007a02:	47b8      	blx	r7
 8007a04:	3001      	adds	r0, #1
 8007a06:	f43f af0e 	beq.w	8007826 <_printf_float+0xba>
 8007a0a:	f04f 0900 	mov.w	r9, #0
 8007a0e:	f104 0a1a 	add.w	sl, r4, #26
 8007a12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a14:	425b      	negs	r3, r3
 8007a16:	454b      	cmp	r3, r9
 8007a18:	dc01      	bgt.n	8007a1e <_printf_float+0x2b2>
 8007a1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a1c:	e794      	b.n	8007948 <_printf_float+0x1dc>
 8007a1e:	2301      	movs	r3, #1
 8007a20:	4652      	mov	r2, sl
 8007a22:	4631      	mov	r1, r6
 8007a24:	4628      	mov	r0, r5
 8007a26:	47b8      	blx	r7
 8007a28:	3001      	adds	r0, #1
 8007a2a:	f43f aefc 	beq.w	8007826 <_printf_float+0xba>
 8007a2e:	f109 0901 	add.w	r9, r9, #1
 8007a32:	e7ee      	b.n	8007a12 <_printf_float+0x2a6>
 8007a34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007a36:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007a38:	429a      	cmp	r2, r3
 8007a3a:	bfa8      	it	ge
 8007a3c:	461a      	movge	r2, r3
 8007a3e:	2a00      	cmp	r2, #0
 8007a40:	4691      	mov	r9, r2
 8007a42:	dd07      	ble.n	8007a54 <_printf_float+0x2e8>
 8007a44:	4613      	mov	r3, r2
 8007a46:	4631      	mov	r1, r6
 8007a48:	4642      	mov	r2, r8
 8007a4a:	4628      	mov	r0, r5
 8007a4c:	47b8      	blx	r7
 8007a4e:	3001      	adds	r0, #1
 8007a50:	f43f aee9 	beq.w	8007826 <_printf_float+0xba>
 8007a54:	f104 031a 	add.w	r3, r4, #26
 8007a58:	f04f 0b00 	mov.w	fp, #0
 8007a5c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007a60:	9306      	str	r3, [sp, #24]
 8007a62:	e015      	b.n	8007a90 <_printf_float+0x324>
 8007a64:	7fefffff 	.word	0x7fefffff
 8007a68:	0800c328 	.word	0x0800c328
 8007a6c:	0800c324 	.word	0x0800c324
 8007a70:	0800c330 	.word	0x0800c330
 8007a74:	0800c32c 	.word	0x0800c32c
 8007a78:	0800c334 	.word	0x0800c334
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	9a06      	ldr	r2, [sp, #24]
 8007a80:	4631      	mov	r1, r6
 8007a82:	4628      	mov	r0, r5
 8007a84:	47b8      	blx	r7
 8007a86:	3001      	adds	r0, #1
 8007a88:	f43f aecd 	beq.w	8007826 <_printf_float+0xba>
 8007a8c:	f10b 0b01 	add.w	fp, fp, #1
 8007a90:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8007a94:	ebaa 0309 	sub.w	r3, sl, r9
 8007a98:	455b      	cmp	r3, fp
 8007a9a:	dcef      	bgt.n	8007a7c <_printf_float+0x310>
 8007a9c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007aa0:	429a      	cmp	r2, r3
 8007aa2:	44d0      	add	r8, sl
 8007aa4:	db15      	blt.n	8007ad2 <_printf_float+0x366>
 8007aa6:	6823      	ldr	r3, [r4, #0]
 8007aa8:	07da      	lsls	r2, r3, #31
 8007aaa:	d412      	bmi.n	8007ad2 <_printf_float+0x366>
 8007aac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007aae:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007ab0:	eba3 020a 	sub.w	r2, r3, sl
 8007ab4:	eba3 0a01 	sub.w	sl, r3, r1
 8007ab8:	4592      	cmp	sl, r2
 8007aba:	bfa8      	it	ge
 8007abc:	4692      	movge	sl, r2
 8007abe:	f1ba 0f00 	cmp.w	sl, #0
 8007ac2:	dc0e      	bgt.n	8007ae2 <_printf_float+0x376>
 8007ac4:	f04f 0800 	mov.w	r8, #0
 8007ac8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007acc:	f104 091a 	add.w	r9, r4, #26
 8007ad0:	e019      	b.n	8007b06 <_printf_float+0x39a>
 8007ad2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007ad6:	4631      	mov	r1, r6
 8007ad8:	4628      	mov	r0, r5
 8007ada:	47b8      	blx	r7
 8007adc:	3001      	adds	r0, #1
 8007ade:	d1e5      	bne.n	8007aac <_printf_float+0x340>
 8007ae0:	e6a1      	b.n	8007826 <_printf_float+0xba>
 8007ae2:	4653      	mov	r3, sl
 8007ae4:	4642      	mov	r2, r8
 8007ae6:	4631      	mov	r1, r6
 8007ae8:	4628      	mov	r0, r5
 8007aea:	47b8      	blx	r7
 8007aec:	3001      	adds	r0, #1
 8007aee:	d1e9      	bne.n	8007ac4 <_printf_float+0x358>
 8007af0:	e699      	b.n	8007826 <_printf_float+0xba>
 8007af2:	2301      	movs	r3, #1
 8007af4:	464a      	mov	r2, r9
 8007af6:	4631      	mov	r1, r6
 8007af8:	4628      	mov	r0, r5
 8007afa:	47b8      	blx	r7
 8007afc:	3001      	adds	r0, #1
 8007afe:	f43f ae92 	beq.w	8007826 <_printf_float+0xba>
 8007b02:	f108 0801 	add.w	r8, r8, #1
 8007b06:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007b0a:	1a9b      	subs	r3, r3, r2
 8007b0c:	eba3 030a 	sub.w	r3, r3, sl
 8007b10:	4543      	cmp	r3, r8
 8007b12:	dcee      	bgt.n	8007af2 <_printf_float+0x386>
 8007b14:	e74a      	b.n	80079ac <_printf_float+0x240>
 8007b16:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007b18:	2a01      	cmp	r2, #1
 8007b1a:	dc01      	bgt.n	8007b20 <_printf_float+0x3b4>
 8007b1c:	07db      	lsls	r3, r3, #31
 8007b1e:	d53a      	bpl.n	8007b96 <_printf_float+0x42a>
 8007b20:	2301      	movs	r3, #1
 8007b22:	4642      	mov	r2, r8
 8007b24:	4631      	mov	r1, r6
 8007b26:	4628      	mov	r0, r5
 8007b28:	47b8      	blx	r7
 8007b2a:	3001      	adds	r0, #1
 8007b2c:	f43f ae7b 	beq.w	8007826 <_printf_float+0xba>
 8007b30:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b34:	4631      	mov	r1, r6
 8007b36:	4628      	mov	r0, r5
 8007b38:	47b8      	blx	r7
 8007b3a:	3001      	adds	r0, #1
 8007b3c:	f108 0801 	add.w	r8, r8, #1
 8007b40:	f43f ae71 	beq.w	8007826 <_printf_float+0xba>
 8007b44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b46:	2200      	movs	r2, #0
 8007b48:	f103 3aff 	add.w	sl, r3, #4294967295
 8007b4c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007b50:	2300      	movs	r3, #0
 8007b52:	f7f8 ffc1 	bl	8000ad8 <__aeabi_dcmpeq>
 8007b56:	b9c8      	cbnz	r0, 8007b8c <_printf_float+0x420>
 8007b58:	4653      	mov	r3, sl
 8007b5a:	4642      	mov	r2, r8
 8007b5c:	4631      	mov	r1, r6
 8007b5e:	4628      	mov	r0, r5
 8007b60:	47b8      	blx	r7
 8007b62:	3001      	adds	r0, #1
 8007b64:	d10e      	bne.n	8007b84 <_printf_float+0x418>
 8007b66:	e65e      	b.n	8007826 <_printf_float+0xba>
 8007b68:	2301      	movs	r3, #1
 8007b6a:	4652      	mov	r2, sl
 8007b6c:	4631      	mov	r1, r6
 8007b6e:	4628      	mov	r0, r5
 8007b70:	47b8      	blx	r7
 8007b72:	3001      	adds	r0, #1
 8007b74:	f43f ae57 	beq.w	8007826 <_printf_float+0xba>
 8007b78:	f108 0801 	add.w	r8, r8, #1
 8007b7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b7e:	3b01      	subs	r3, #1
 8007b80:	4543      	cmp	r3, r8
 8007b82:	dcf1      	bgt.n	8007b68 <_printf_float+0x3fc>
 8007b84:	464b      	mov	r3, r9
 8007b86:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007b8a:	e6de      	b.n	800794a <_printf_float+0x1de>
 8007b8c:	f04f 0800 	mov.w	r8, #0
 8007b90:	f104 0a1a 	add.w	sl, r4, #26
 8007b94:	e7f2      	b.n	8007b7c <_printf_float+0x410>
 8007b96:	2301      	movs	r3, #1
 8007b98:	e7df      	b.n	8007b5a <_printf_float+0x3ee>
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	464a      	mov	r2, r9
 8007b9e:	4631      	mov	r1, r6
 8007ba0:	4628      	mov	r0, r5
 8007ba2:	47b8      	blx	r7
 8007ba4:	3001      	adds	r0, #1
 8007ba6:	f43f ae3e 	beq.w	8007826 <_printf_float+0xba>
 8007baa:	f108 0801 	add.w	r8, r8, #1
 8007bae:	68e3      	ldr	r3, [r4, #12]
 8007bb0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007bb2:	1a9b      	subs	r3, r3, r2
 8007bb4:	4543      	cmp	r3, r8
 8007bb6:	dcf0      	bgt.n	8007b9a <_printf_float+0x42e>
 8007bb8:	e6fc      	b.n	80079b4 <_printf_float+0x248>
 8007bba:	f04f 0800 	mov.w	r8, #0
 8007bbe:	f104 0919 	add.w	r9, r4, #25
 8007bc2:	e7f4      	b.n	8007bae <_printf_float+0x442>
 8007bc4:	2900      	cmp	r1, #0
 8007bc6:	f43f ae8b 	beq.w	80078e0 <_printf_float+0x174>
 8007bca:	2300      	movs	r3, #0
 8007bcc:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8007bd0:	ab09      	add	r3, sp, #36	; 0x24
 8007bd2:	9300      	str	r3, [sp, #0]
 8007bd4:	ec49 8b10 	vmov	d0, r8, r9
 8007bd8:	6022      	str	r2, [r4, #0]
 8007bda:	f8cd a004 	str.w	sl, [sp, #4]
 8007bde:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007be2:	4628      	mov	r0, r5
 8007be4:	f7ff fd2e 	bl	8007644 <__cvt>
 8007be8:	4680      	mov	r8, r0
 8007bea:	e648      	b.n	800787e <_printf_float+0x112>

08007bec <_printf_common>:
 8007bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007bf0:	4691      	mov	r9, r2
 8007bf2:	461f      	mov	r7, r3
 8007bf4:	688a      	ldr	r2, [r1, #8]
 8007bf6:	690b      	ldr	r3, [r1, #16]
 8007bf8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007bfc:	4293      	cmp	r3, r2
 8007bfe:	bfb8      	it	lt
 8007c00:	4613      	movlt	r3, r2
 8007c02:	f8c9 3000 	str.w	r3, [r9]
 8007c06:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007c0a:	4606      	mov	r6, r0
 8007c0c:	460c      	mov	r4, r1
 8007c0e:	b112      	cbz	r2, 8007c16 <_printf_common+0x2a>
 8007c10:	3301      	adds	r3, #1
 8007c12:	f8c9 3000 	str.w	r3, [r9]
 8007c16:	6823      	ldr	r3, [r4, #0]
 8007c18:	0699      	lsls	r1, r3, #26
 8007c1a:	bf42      	ittt	mi
 8007c1c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007c20:	3302      	addmi	r3, #2
 8007c22:	f8c9 3000 	strmi.w	r3, [r9]
 8007c26:	6825      	ldr	r5, [r4, #0]
 8007c28:	f015 0506 	ands.w	r5, r5, #6
 8007c2c:	d107      	bne.n	8007c3e <_printf_common+0x52>
 8007c2e:	f104 0a19 	add.w	sl, r4, #25
 8007c32:	68e3      	ldr	r3, [r4, #12]
 8007c34:	f8d9 2000 	ldr.w	r2, [r9]
 8007c38:	1a9b      	subs	r3, r3, r2
 8007c3a:	42ab      	cmp	r3, r5
 8007c3c:	dc28      	bgt.n	8007c90 <_printf_common+0xa4>
 8007c3e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007c42:	6822      	ldr	r2, [r4, #0]
 8007c44:	3300      	adds	r3, #0
 8007c46:	bf18      	it	ne
 8007c48:	2301      	movne	r3, #1
 8007c4a:	0692      	lsls	r2, r2, #26
 8007c4c:	d42d      	bmi.n	8007caa <_printf_common+0xbe>
 8007c4e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007c52:	4639      	mov	r1, r7
 8007c54:	4630      	mov	r0, r6
 8007c56:	47c0      	blx	r8
 8007c58:	3001      	adds	r0, #1
 8007c5a:	d020      	beq.n	8007c9e <_printf_common+0xb2>
 8007c5c:	6823      	ldr	r3, [r4, #0]
 8007c5e:	68e5      	ldr	r5, [r4, #12]
 8007c60:	f8d9 2000 	ldr.w	r2, [r9]
 8007c64:	f003 0306 	and.w	r3, r3, #6
 8007c68:	2b04      	cmp	r3, #4
 8007c6a:	bf08      	it	eq
 8007c6c:	1aad      	subeq	r5, r5, r2
 8007c6e:	68a3      	ldr	r3, [r4, #8]
 8007c70:	6922      	ldr	r2, [r4, #16]
 8007c72:	bf0c      	ite	eq
 8007c74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007c78:	2500      	movne	r5, #0
 8007c7a:	4293      	cmp	r3, r2
 8007c7c:	bfc4      	itt	gt
 8007c7e:	1a9b      	subgt	r3, r3, r2
 8007c80:	18ed      	addgt	r5, r5, r3
 8007c82:	f04f 0900 	mov.w	r9, #0
 8007c86:	341a      	adds	r4, #26
 8007c88:	454d      	cmp	r5, r9
 8007c8a:	d11a      	bne.n	8007cc2 <_printf_common+0xd6>
 8007c8c:	2000      	movs	r0, #0
 8007c8e:	e008      	b.n	8007ca2 <_printf_common+0xb6>
 8007c90:	2301      	movs	r3, #1
 8007c92:	4652      	mov	r2, sl
 8007c94:	4639      	mov	r1, r7
 8007c96:	4630      	mov	r0, r6
 8007c98:	47c0      	blx	r8
 8007c9a:	3001      	adds	r0, #1
 8007c9c:	d103      	bne.n	8007ca6 <_printf_common+0xba>
 8007c9e:	f04f 30ff 	mov.w	r0, #4294967295
 8007ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ca6:	3501      	adds	r5, #1
 8007ca8:	e7c3      	b.n	8007c32 <_printf_common+0x46>
 8007caa:	18e1      	adds	r1, r4, r3
 8007cac:	1c5a      	adds	r2, r3, #1
 8007cae:	2030      	movs	r0, #48	; 0x30
 8007cb0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007cb4:	4422      	add	r2, r4
 8007cb6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007cba:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007cbe:	3302      	adds	r3, #2
 8007cc0:	e7c5      	b.n	8007c4e <_printf_common+0x62>
 8007cc2:	2301      	movs	r3, #1
 8007cc4:	4622      	mov	r2, r4
 8007cc6:	4639      	mov	r1, r7
 8007cc8:	4630      	mov	r0, r6
 8007cca:	47c0      	blx	r8
 8007ccc:	3001      	adds	r0, #1
 8007cce:	d0e6      	beq.n	8007c9e <_printf_common+0xb2>
 8007cd0:	f109 0901 	add.w	r9, r9, #1
 8007cd4:	e7d8      	b.n	8007c88 <_printf_common+0x9c>
	...

08007cd8 <_printf_i>:
 8007cd8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007cdc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007ce0:	460c      	mov	r4, r1
 8007ce2:	7e09      	ldrb	r1, [r1, #24]
 8007ce4:	b085      	sub	sp, #20
 8007ce6:	296e      	cmp	r1, #110	; 0x6e
 8007ce8:	4617      	mov	r7, r2
 8007cea:	4606      	mov	r6, r0
 8007cec:	4698      	mov	r8, r3
 8007cee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007cf0:	f000 80b3 	beq.w	8007e5a <_printf_i+0x182>
 8007cf4:	d822      	bhi.n	8007d3c <_printf_i+0x64>
 8007cf6:	2963      	cmp	r1, #99	; 0x63
 8007cf8:	d036      	beq.n	8007d68 <_printf_i+0x90>
 8007cfa:	d80a      	bhi.n	8007d12 <_printf_i+0x3a>
 8007cfc:	2900      	cmp	r1, #0
 8007cfe:	f000 80b9 	beq.w	8007e74 <_printf_i+0x19c>
 8007d02:	2958      	cmp	r1, #88	; 0x58
 8007d04:	f000 8083 	beq.w	8007e0e <_printf_i+0x136>
 8007d08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007d0c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007d10:	e032      	b.n	8007d78 <_printf_i+0xa0>
 8007d12:	2964      	cmp	r1, #100	; 0x64
 8007d14:	d001      	beq.n	8007d1a <_printf_i+0x42>
 8007d16:	2969      	cmp	r1, #105	; 0x69
 8007d18:	d1f6      	bne.n	8007d08 <_printf_i+0x30>
 8007d1a:	6820      	ldr	r0, [r4, #0]
 8007d1c:	6813      	ldr	r3, [r2, #0]
 8007d1e:	0605      	lsls	r5, r0, #24
 8007d20:	f103 0104 	add.w	r1, r3, #4
 8007d24:	d52a      	bpl.n	8007d7c <_printf_i+0xa4>
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	6011      	str	r1, [r2, #0]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	da03      	bge.n	8007d36 <_printf_i+0x5e>
 8007d2e:	222d      	movs	r2, #45	; 0x2d
 8007d30:	425b      	negs	r3, r3
 8007d32:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007d36:	486f      	ldr	r0, [pc, #444]	; (8007ef4 <_printf_i+0x21c>)
 8007d38:	220a      	movs	r2, #10
 8007d3a:	e039      	b.n	8007db0 <_printf_i+0xd8>
 8007d3c:	2973      	cmp	r1, #115	; 0x73
 8007d3e:	f000 809d 	beq.w	8007e7c <_printf_i+0x1a4>
 8007d42:	d808      	bhi.n	8007d56 <_printf_i+0x7e>
 8007d44:	296f      	cmp	r1, #111	; 0x6f
 8007d46:	d020      	beq.n	8007d8a <_printf_i+0xb2>
 8007d48:	2970      	cmp	r1, #112	; 0x70
 8007d4a:	d1dd      	bne.n	8007d08 <_printf_i+0x30>
 8007d4c:	6823      	ldr	r3, [r4, #0]
 8007d4e:	f043 0320 	orr.w	r3, r3, #32
 8007d52:	6023      	str	r3, [r4, #0]
 8007d54:	e003      	b.n	8007d5e <_printf_i+0x86>
 8007d56:	2975      	cmp	r1, #117	; 0x75
 8007d58:	d017      	beq.n	8007d8a <_printf_i+0xb2>
 8007d5a:	2978      	cmp	r1, #120	; 0x78
 8007d5c:	d1d4      	bne.n	8007d08 <_printf_i+0x30>
 8007d5e:	2378      	movs	r3, #120	; 0x78
 8007d60:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007d64:	4864      	ldr	r0, [pc, #400]	; (8007ef8 <_printf_i+0x220>)
 8007d66:	e055      	b.n	8007e14 <_printf_i+0x13c>
 8007d68:	6813      	ldr	r3, [r2, #0]
 8007d6a:	1d19      	adds	r1, r3, #4
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	6011      	str	r1, [r2, #0]
 8007d70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007d74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007d78:	2301      	movs	r3, #1
 8007d7a:	e08c      	b.n	8007e96 <_printf_i+0x1be>
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	6011      	str	r1, [r2, #0]
 8007d80:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007d84:	bf18      	it	ne
 8007d86:	b21b      	sxthne	r3, r3
 8007d88:	e7cf      	b.n	8007d2a <_printf_i+0x52>
 8007d8a:	6813      	ldr	r3, [r2, #0]
 8007d8c:	6825      	ldr	r5, [r4, #0]
 8007d8e:	1d18      	adds	r0, r3, #4
 8007d90:	6010      	str	r0, [r2, #0]
 8007d92:	0628      	lsls	r0, r5, #24
 8007d94:	d501      	bpl.n	8007d9a <_printf_i+0xc2>
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	e002      	b.n	8007da0 <_printf_i+0xc8>
 8007d9a:	0668      	lsls	r0, r5, #25
 8007d9c:	d5fb      	bpl.n	8007d96 <_printf_i+0xbe>
 8007d9e:	881b      	ldrh	r3, [r3, #0]
 8007da0:	4854      	ldr	r0, [pc, #336]	; (8007ef4 <_printf_i+0x21c>)
 8007da2:	296f      	cmp	r1, #111	; 0x6f
 8007da4:	bf14      	ite	ne
 8007da6:	220a      	movne	r2, #10
 8007da8:	2208      	moveq	r2, #8
 8007daa:	2100      	movs	r1, #0
 8007dac:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007db0:	6865      	ldr	r5, [r4, #4]
 8007db2:	60a5      	str	r5, [r4, #8]
 8007db4:	2d00      	cmp	r5, #0
 8007db6:	f2c0 8095 	blt.w	8007ee4 <_printf_i+0x20c>
 8007dba:	6821      	ldr	r1, [r4, #0]
 8007dbc:	f021 0104 	bic.w	r1, r1, #4
 8007dc0:	6021      	str	r1, [r4, #0]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d13d      	bne.n	8007e42 <_printf_i+0x16a>
 8007dc6:	2d00      	cmp	r5, #0
 8007dc8:	f040 808e 	bne.w	8007ee8 <_printf_i+0x210>
 8007dcc:	4665      	mov	r5, ip
 8007dce:	2a08      	cmp	r2, #8
 8007dd0:	d10b      	bne.n	8007dea <_printf_i+0x112>
 8007dd2:	6823      	ldr	r3, [r4, #0]
 8007dd4:	07db      	lsls	r3, r3, #31
 8007dd6:	d508      	bpl.n	8007dea <_printf_i+0x112>
 8007dd8:	6923      	ldr	r3, [r4, #16]
 8007dda:	6862      	ldr	r2, [r4, #4]
 8007ddc:	429a      	cmp	r2, r3
 8007dde:	bfde      	ittt	le
 8007de0:	2330      	movle	r3, #48	; 0x30
 8007de2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007de6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007dea:	ebac 0305 	sub.w	r3, ip, r5
 8007dee:	6123      	str	r3, [r4, #16]
 8007df0:	f8cd 8000 	str.w	r8, [sp]
 8007df4:	463b      	mov	r3, r7
 8007df6:	aa03      	add	r2, sp, #12
 8007df8:	4621      	mov	r1, r4
 8007dfa:	4630      	mov	r0, r6
 8007dfc:	f7ff fef6 	bl	8007bec <_printf_common>
 8007e00:	3001      	adds	r0, #1
 8007e02:	d14d      	bne.n	8007ea0 <_printf_i+0x1c8>
 8007e04:	f04f 30ff 	mov.w	r0, #4294967295
 8007e08:	b005      	add	sp, #20
 8007e0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007e0e:	4839      	ldr	r0, [pc, #228]	; (8007ef4 <_printf_i+0x21c>)
 8007e10:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007e14:	6813      	ldr	r3, [r2, #0]
 8007e16:	6821      	ldr	r1, [r4, #0]
 8007e18:	1d1d      	adds	r5, r3, #4
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	6015      	str	r5, [r2, #0]
 8007e1e:	060a      	lsls	r2, r1, #24
 8007e20:	d50b      	bpl.n	8007e3a <_printf_i+0x162>
 8007e22:	07ca      	lsls	r2, r1, #31
 8007e24:	bf44      	itt	mi
 8007e26:	f041 0120 	orrmi.w	r1, r1, #32
 8007e2a:	6021      	strmi	r1, [r4, #0]
 8007e2c:	b91b      	cbnz	r3, 8007e36 <_printf_i+0x15e>
 8007e2e:	6822      	ldr	r2, [r4, #0]
 8007e30:	f022 0220 	bic.w	r2, r2, #32
 8007e34:	6022      	str	r2, [r4, #0]
 8007e36:	2210      	movs	r2, #16
 8007e38:	e7b7      	b.n	8007daa <_printf_i+0xd2>
 8007e3a:	064d      	lsls	r5, r1, #25
 8007e3c:	bf48      	it	mi
 8007e3e:	b29b      	uxthmi	r3, r3
 8007e40:	e7ef      	b.n	8007e22 <_printf_i+0x14a>
 8007e42:	4665      	mov	r5, ip
 8007e44:	fbb3 f1f2 	udiv	r1, r3, r2
 8007e48:	fb02 3311 	mls	r3, r2, r1, r3
 8007e4c:	5cc3      	ldrb	r3, [r0, r3]
 8007e4e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007e52:	460b      	mov	r3, r1
 8007e54:	2900      	cmp	r1, #0
 8007e56:	d1f5      	bne.n	8007e44 <_printf_i+0x16c>
 8007e58:	e7b9      	b.n	8007dce <_printf_i+0xf6>
 8007e5a:	6813      	ldr	r3, [r2, #0]
 8007e5c:	6825      	ldr	r5, [r4, #0]
 8007e5e:	6961      	ldr	r1, [r4, #20]
 8007e60:	1d18      	adds	r0, r3, #4
 8007e62:	6010      	str	r0, [r2, #0]
 8007e64:	0628      	lsls	r0, r5, #24
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	d501      	bpl.n	8007e6e <_printf_i+0x196>
 8007e6a:	6019      	str	r1, [r3, #0]
 8007e6c:	e002      	b.n	8007e74 <_printf_i+0x19c>
 8007e6e:	066a      	lsls	r2, r5, #25
 8007e70:	d5fb      	bpl.n	8007e6a <_printf_i+0x192>
 8007e72:	8019      	strh	r1, [r3, #0]
 8007e74:	2300      	movs	r3, #0
 8007e76:	6123      	str	r3, [r4, #16]
 8007e78:	4665      	mov	r5, ip
 8007e7a:	e7b9      	b.n	8007df0 <_printf_i+0x118>
 8007e7c:	6813      	ldr	r3, [r2, #0]
 8007e7e:	1d19      	adds	r1, r3, #4
 8007e80:	6011      	str	r1, [r2, #0]
 8007e82:	681d      	ldr	r5, [r3, #0]
 8007e84:	6862      	ldr	r2, [r4, #4]
 8007e86:	2100      	movs	r1, #0
 8007e88:	4628      	mov	r0, r5
 8007e8a:	f7f8 f9b1 	bl	80001f0 <memchr>
 8007e8e:	b108      	cbz	r0, 8007e94 <_printf_i+0x1bc>
 8007e90:	1b40      	subs	r0, r0, r5
 8007e92:	6060      	str	r0, [r4, #4]
 8007e94:	6863      	ldr	r3, [r4, #4]
 8007e96:	6123      	str	r3, [r4, #16]
 8007e98:	2300      	movs	r3, #0
 8007e9a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e9e:	e7a7      	b.n	8007df0 <_printf_i+0x118>
 8007ea0:	6923      	ldr	r3, [r4, #16]
 8007ea2:	462a      	mov	r2, r5
 8007ea4:	4639      	mov	r1, r7
 8007ea6:	4630      	mov	r0, r6
 8007ea8:	47c0      	blx	r8
 8007eaa:	3001      	adds	r0, #1
 8007eac:	d0aa      	beq.n	8007e04 <_printf_i+0x12c>
 8007eae:	6823      	ldr	r3, [r4, #0]
 8007eb0:	079b      	lsls	r3, r3, #30
 8007eb2:	d413      	bmi.n	8007edc <_printf_i+0x204>
 8007eb4:	68e0      	ldr	r0, [r4, #12]
 8007eb6:	9b03      	ldr	r3, [sp, #12]
 8007eb8:	4298      	cmp	r0, r3
 8007eba:	bfb8      	it	lt
 8007ebc:	4618      	movlt	r0, r3
 8007ebe:	e7a3      	b.n	8007e08 <_printf_i+0x130>
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	464a      	mov	r2, r9
 8007ec4:	4639      	mov	r1, r7
 8007ec6:	4630      	mov	r0, r6
 8007ec8:	47c0      	blx	r8
 8007eca:	3001      	adds	r0, #1
 8007ecc:	d09a      	beq.n	8007e04 <_printf_i+0x12c>
 8007ece:	3501      	adds	r5, #1
 8007ed0:	68e3      	ldr	r3, [r4, #12]
 8007ed2:	9a03      	ldr	r2, [sp, #12]
 8007ed4:	1a9b      	subs	r3, r3, r2
 8007ed6:	42ab      	cmp	r3, r5
 8007ed8:	dcf2      	bgt.n	8007ec0 <_printf_i+0x1e8>
 8007eda:	e7eb      	b.n	8007eb4 <_printf_i+0x1dc>
 8007edc:	2500      	movs	r5, #0
 8007ede:	f104 0919 	add.w	r9, r4, #25
 8007ee2:	e7f5      	b.n	8007ed0 <_printf_i+0x1f8>
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d1ac      	bne.n	8007e42 <_printf_i+0x16a>
 8007ee8:	7803      	ldrb	r3, [r0, #0]
 8007eea:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007eee:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007ef2:	e76c      	b.n	8007dce <_printf_i+0xf6>
 8007ef4:	0800c336 	.word	0x0800c336
 8007ef8:	0800c347 	.word	0x0800c347

08007efc <_scanf_float>:
 8007efc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f00:	469a      	mov	sl, r3
 8007f02:	688b      	ldr	r3, [r1, #8]
 8007f04:	4616      	mov	r6, r2
 8007f06:	1e5a      	subs	r2, r3, #1
 8007f08:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007f0c:	b087      	sub	sp, #28
 8007f0e:	bf83      	ittte	hi
 8007f10:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8007f14:	189b      	addhi	r3, r3, r2
 8007f16:	9301      	strhi	r3, [sp, #4]
 8007f18:	2300      	movls	r3, #0
 8007f1a:	bf86      	itte	hi
 8007f1c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007f20:	608b      	strhi	r3, [r1, #8]
 8007f22:	9301      	strls	r3, [sp, #4]
 8007f24:	680b      	ldr	r3, [r1, #0]
 8007f26:	4688      	mov	r8, r1
 8007f28:	f04f 0b00 	mov.w	fp, #0
 8007f2c:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8007f30:	f848 3b1c 	str.w	r3, [r8], #28
 8007f34:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8007f38:	4607      	mov	r7, r0
 8007f3a:	460c      	mov	r4, r1
 8007f3c:	4645      	mov	r5, r8
 8007f3e:	465a      	mov	r2, fp
 8007f40:	46d9      	mov	r9, fp
 8007f42:	f8cd b008 	str.w	fp, [sp, #8]
 8007f46:	68a1      	ldr	r1, [r4, #8]
 8007f48:	b181      	cbz	r1, 8007f6c <_scanf_float+0x70>
 8007f4a:	6833      	ldr	r3, [r6, #0]
 8007f4c:	781b      	ldrb	r3, [r3, #0]
 8007f4e:	2b49      	cmp	r3, #73	; 0x49
 8007f50:	d071      	beq.n	8008036 <_scanf_float+0x13a>
 8007f52:	d84d      	bhi.n	8007ff0 <_scanf_float+0xf4>
 8007f54:	2b39      	cmp	r3, #57	; 0x39
 8007f56:	d840      	bhi.n	8007fda <_scanf_float+0xde>
 8007f58:	2b31      	cmp	r3, #49	; 0x31
 8007f5a:	f080 8088 	bcs.w	800806e <_scanf_float+0x172>
 8007f5e:	2b2d      	cmp	r3, #45	; 0x2d
 8007f60:	f000 8090 	beq.w	8008084 <_scanf_float+0x188>
 8007f64:	d815      	bhi.n	8007f92 <_scanf_float+0x96>
 8007f66:	2b2b      	cmp	r3, #43	; 0x2b
 8007f68:	f000 808c 	beq.w	8008084 <_scanf_float+0x188>
 8007f6c:	f1b9 0f00 	cmp.w	r9, #0
 8007f70:	d003      	beq.n	8007f7a <_scanf_float+0x7e>
 8007f72:	6823      	ldr	r3, [r4, #0]
 8007f74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007f78:	6023      	str	r3, [r4, #0]
 8007f7a:	3a01      	subs	r2, #1
 8007f7c:	2a01      	cmp	r2, #1
 8007f7e:	f200 80ea 	bhi.w	8008156 <_scanf_float+0x25a>
 8007f82:	4545      	cmp	r5, r8
 8007f84:	f200 80dc 	bhi.w	8008140 <_scanf_float+0x244>
 8007f88:	2601      	movs	r6, #1
 8007f8a:	4630      	mov	r0, r6
 8007f8c:	b007      	add	sp, #28
 8007f8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f92:	2b2e      	cmp	r3, #46	; 0x2e
 8007f94:	f000 809f 	beq.w	80080d6 <_scanf_float+0x1da>
 8007f98:	2b30      	cmp	r3, #48	; 0x30
 8007f9a:	d1e7      	bne.n	8007f6c <_scanf_float+0x70>
 8007f9c:	6820      	ldr	r0, [r4, #0]
 8007f9e:	f410 7f80 	tst.w	r0, #256	; 0x100
 8007fa2:	d064      	beq.n	800806e <_scanf_float+0x172>
 8007fa4:	9b01      	ldr	r3, [sp, #4]
 8007fa6:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8007faa:	6020      	str	r0, [r4, #0]
 8007fac:	f109 0901 	add.w	r9, r9, #1
 8007fb0:	b11b      	cbz	r3, 8007fba <_scanf_float+0xbe>
 8007fb2:	3b01      	subs	r3, #1
 8007fb4:	3101      	adds	r1, #1
 8007fb6:	9301      	str	r3, [sp, #4]
 8007fb8:	60a1      	str	r1, [r4, #8]
 8007fba:	68a3      	ldr	r3, [r4, #8]
 8007fbc:	3b01      	subs	r3, #1
 8007fbe:	60a3      	str	r3, [r4, #8]
 8007fc0:	6923      	ldr	r3, [r4, #16]
 8007fc2:	3301      	adds	r3, #1
 8007fc4:	6123      	str	r3, [r4, #16]
 8007fc6:	6873      	ldr	r3, [r6, #4]
 8007fc8:	3b01      	subs	r3, #1
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	6073      	str	r3, [r6, #4]
 8007fce:	f340 80ac 	ble.w	800812a <_scanf_float+0x22e>
 8007fd2:	6833      	ldr	r3, [r6, #0]
 8007fd4:	3301      	adds	r3, #1
 8007fd6:	6033      	str	r3, [r6, #0]
 8007fd8:	e7b5      	b.n	8007f46 <_scanf_float+0x4a>
 8007fda:	2b45      	cmp	r3, #69	; 0x45
 8007fdc:	f000 8085 	beq.w	80080ea <_scanf_float+0x1ee>
 8007fe0:	2b46      	cmp	r3, #70	; 0x46
 8007fe2:	d06a      	beq.n	80080ba <_scanf_float+0x1be>
 8007fe4:	2b41      	cmp	r3, #65	; 0x41
 8007fe6:	d1c1      	bne.n	8007f6c <_scanf_float+0x70>
 8007fe8:	2a01      	cmp	r2, #1
 8007fea:	d1bf      	bne.n	8007f6c <_scanf_float+0x70>
 8007fec:	2202      	movs	r2, #2
 8007fee:	e046      	b.n	800807e <_scanf_float+0x182>
 8007ff0:	2b65      	cmp	r3, #101	; 0x65
 8007ff2:	d07a      	beq.n	80080ea <_scanf_float+0x1ee>
 8007ff4:	d818      	bhi.n	8008028 <_scanf_float+0x12c>
 8007ff6:	2b54      	cmp	r3, #84	; 0x54
 8007ff8:	d066      	beq.n	80080c8 <_scanf_float+0x1cc>
 8007ffa:	d811      	bhi.n	8008020 <_scanf_float+0x124>
 8007ffc:	2b4e      	cmp	r3, #78	; 0x4e
 8007ffe:	d1b5      	bne.n	8007f6c <_scanf_float+0x70>
 8008000:	2a00      	cmp	r2, #0
 8008002:	d146      	bne.n	8008092 <_scanf_float+0x196>
 8008004:	f1b9 0f00 	cmp.w	r9, #0
 8008008:	d145      	bne.n	8008096 <_scanf_float+0x19a>
 800800a:	6821      	ldr	r1, [r4, #0]
 800800c:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8008010:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8008014:	d13f      	bne.n	8008096 <_scanf_float+0x19a>
 8008016:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800801a:	6021      	str	r1, [r4, #0]
 800801c:	2201      	movs	r2, #1
 800801e:	e02e      	b.n	800807e <_scanf_float+0x182>
 8008020:	2b59      	cmp	r3, #89	; 0x59
 8008022:	d01e      	beq.n	8008062 <_scanf_float+0x166>
 8008024:	2b61      	cmp	r3, #97	; 0x61
 8008026:	e7de      	b.n	8007fe6 <_scanf_float+0xea>
 8008028:	2b6e      	cmp	r3, #110	; 0x6e
 800802a:	d0e9      	beq.n	8008000 <_scanf_float+0x104>
 800802c:	d815      	bhi.n	800805a <_scanf_float+0x15e>
 800802e:	2b66      	cmp	r3, #102	; 0x66
 8008030:	d043      	beq.n	80080ba <_scanf_float+0x1be>
 8008032:	2b69      	cmp	r3, #105	; 0x69
 8008034:	d19a      	bne.n	8007f6c <_scanf_float+0x70>
 8008036:	f1bb 0f00 	cmp.w	fp, #0
 800803a:	d138      	bne.n	80080ae <_scanf_float+0x1b2>
 800803c:	f1b9 0f00 	cmp.w	r9, #0
 8008040:	d197      	bne.n	8007f72 <_scanf_float+0x76>
 8008042:	6821      	ldr	r1, [r4, #0]
 8008044:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8008048:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800804c:	d195      	bne.n	8007f7a <_scanf_float+0x7e>
 800804e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8008052:	6021      	str	r1, [r4, #0]
 8008054:	f04f 0b01 	mov.w	fp, #1
 8008058:	e011      	b.n	800807e <_scanf_float+0x182>
 800805a:	2b74      	cmp	r3, #116	; 0x74
 800805c:	d034      	beq.n	80080c8 <_scanf_float+0x1cc>
 800805e:	2b79      	cmp	r3, #121	; 0x79
 8008060:	d184      	bne.n	8007f6c <_scanf_float+0x70>
 8008062:	f1bb 0f07 	cmp.w	fp, #7
 8008066:	d181      	bne.n	8007f6c <_scanf_float+0x70>
 8008068:	f04f 0b08 	mov.w	fp, #8
 800806c:	e007      	b.n	800807e <_scanf_float+0x182>
 800806e:	eb12 0f0b 	cmn.w	r2, fp
 8008072:	f47f af7b 	bne.w	8007f6c <_scanf_float+0x70>
 8008076:	6821      	ldr	r1, [r4, #0]
 8008078:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 800807c:	6021      	str	r1, [r4, #0]
 800807e:	702b      	strb	r3, [r5, #0]
 8008080:	3501      	adds	r5, #1
 8008082:	e79a      	b.n	8007fba <_scanf_float+0xbe>
 8008084:	6821      	ldr	r1, [r4, #0]
 8008086:	0608      	lsls	r0, r1, #24
 8008088:	f57f af70 	bpl.w	8007f6c <_scanf_float+0x70>
 800808c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008090:	e7f4      	b.n	800807c <_scanf_float+0x180>
 8008092:	2a02      	cmp	r2, #2
 8008094:	d047      	beq.n	8008126 <_scanf_float+0x22a>
 8008096:	f1bb 0f01 	cmp.w	fp, #1
 800809a:	d003      	beq.n	80080a4 <_scanf_float+0x1a8>
 800809c:	f1bb 0f04 	cmp.w	fp, #4
 80080a0:	f47f af64 	bne.w	8007f6c <_scanf_float+0x70>
 80080a4:	f10b 0b01 	add.w	fp, fp, #1
 80080a8:	fa5f fb8b 	uxtb.w	fp, fp
 80080ac:	e7e7      	b.n	800807e <_scanf_float+0x182>
 80080ae:	f1bb 0f03 	cmp.w	fp, #3
 80080b2:	d0f7      	beq.n	80080a4 <_scanf_float+0x1a8>
 80080b4:	f1bb 0f05 	cmp.w	fp, #5
 80080b8:	e7f2      	b.n	80080a0 <_scanf_float+0x1a4>
 80080ba:	f1bb 0f02 	cmp.w	fp, #2
 80080be:	f47f af55 	bne.w	8007f6c <_scanf_float+0x70>
 80080c2:	f04f 0b03 	mov.w	fp, #3
 80080c6:	e7da      	b.n	800807e <_scanf_float+0x182>
 80080c8:	f1bb 0f06 	cmp.w	fp, #6
 80080cc:	f47f af4e 	bne.w	8007f6c <_scanf_float+0x70>
 80080d0:	f04f 0b07 	mov.w	fp, #7
 80080d4:	e7d3      	b.n	800807e <_scanf_float+0x182>
 80080d6:	6821      	ldr	r1, [r4, #0]
 80080d8:	0588      	lsls	r0, r1, #22
 80080da:	f57f af47 	bpl.w	8007f6c <_scanf_float+0x70>
 80080de:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 80080e2:	6021      	str	r1, [r4, #0]
 80080e4:	f8cd 9008 	str.w	r9, [sp, #8]
 80080e8:	e7c9      	b.n	800807e <_scanf_float+0x182>
 80080ea:	6821      	ldr	r1, [r4, #0]
 80080ec:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 80080f0:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80080f4:	d006      	beq.n	8008104 <_scanf_float+0x208>
 80080f6:	0548      	lsls	r0, r1, #21
 80080f8:	f57f af38 	bpl.w	8007f6c <_scanf_float+0x70>
 80080fc:	f1b9 0f00 	cmp.w	r9, #0
 8008100:	f43f af3b 	beq.w	8007f7a <_scanf_float+0x7e>
 8008104:	0588      	lsls	r0, r1, #22
 8008106:	bf58      	it	pl
 8008108:	9802      	ldrpl	r0, [sp, #8]
 800810a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800810e:	bf58      	it	pl
 8008110:	eba9 0000 	subpl.w	r0, r9, r0
 8008114:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8008118:	bf58      	it	pl
 800811a:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 800811e:	6021      	str	r1, [r4, #0]
 8008120:	f04f 0900 	mov.w	r9, #0
 8008124:	e7ab      	b.n	800807e <_scanf_float+0x182>
 8008126:	2203      	movs	r2, #3
 8008128:	e7a9      	b.n	800807e <_scanf_float+0x182>
 800812a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800812e:	9205      	str	r2, [sp, #20]
 8008130:	4631      	mov	r1, r6
 8008132:	4638      	mov	r0, r7
 8008134:	4798      	blx	r3
 8008136:	9a05      	ldr	r2, [sp, #20]
 8008138:	2800      	cmp	r0, #0
 800813a:	f43f af04 	beq.w	8007f46 <_scanf_float+0x4a>
 800813e:	e715      	b.n	8007f6c <_scanf_float+0x70>
 8008140:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008144:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8008148:	4632      	mov	r2, r6
 800814a:	4638      	mov	r0, r7
 800814c:	4798      	blx	r3
 800814e:	6923      	ldr	r3, [r4, #16]
 8008150:	3b01      	subs	r3, #1
 8008152:	6123      	str	r3, [r4, #16]
 8008154:	e715      	b.n	8007f82 <_scanf_float+0x86>
 8008156:	f10b 33ff 	add.w	r3, fp, #4294967295
 800815a:	2b06      	cmp	r3, #6
 800815c:	d80a      	bhi.n	8008174 <_scanf_float+0x278>
 800815e:	f1bb 0f02 	cmp.w	fp, #2
 8008162:	d968      	bls.n	8008236 <_scanf_float+0x33a>
 8008164:	f1ab 0b03 	sub.w	fp, fp, #3
 8008168:	fa5f fb8b 	uxtb.w	fp, fp
 800816c:	eba5 0b0b 	sub.w	fp, r5, fp
 8008170:	455d      	cmp	r5, fp
 8008172:	d14b      	bne.n	800820c <_scanf_float+0x310>
 8008174:	6823      	ldr	r3, [r4, #0]
 8008176:	05da      	lsls	r2, r3, #23
 8008178:	d51f      	bpl.n	80081ba <_scanf_float+0x2be>
 800817a:	055b      	lsls	r3, r3, #21
 800817c:	d468      	bmi.n	8008250 <_scanf_float+0x354>
 800817e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8008182:	6923      	ldr	r3, [r4, #16]
 8008184:	2965      	cmp	r1, #101	; 0x65
 8008186:	f103 33ff 	add.w	r3, r3, #4294967295
 800818a:	f105 3bff 	add.w	fp, r5, #4294967295
 800818e:	6123      	str	r3, [r4, #16]
 8008190:	d00d      	beq.n	80081ae <_scanf_float+0x2b2>
 8008192:	2945      	cmp	r1, #69	; 0x45
 8008194:	d00b      	beq.n	80081ae <_scanf_float+0x2b2>
 8008196:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800819a:	4632      	mov	r2, r6
 800819c:	4638      	mov	r0, r7
 800819e:	4798      	blx	r3
 80081a0:	6923      	ldr	r3, [r4, #16]
 80081a2:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 80081a6:	3b01      	subs	r3, #1
 80081a8:	f1a5 0b02 	sub.w	fp, r5, #2
 80081ac:	6123      	str	r3, [r4, #16]
 80081ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80081b2:	4632      	mov	r2, r6
 80081b4:	4638      	mov	r0, r7
 80081b6:	4798      	blx	r3
 80081b8:	465d      	mov	r5, fp
 80081ba:	6826      	ldr	r6, [r4, #0]
 80081bc:	f016 0610 	ands.w	r6, r6, #16
 80081c0:	d17a      	bne.n	80082b8 <_scanf_float+0x3bc>
 80081c2:	702e      	strb	r6, [r5, #0]
 80081c4:	6823      	ldr	r3, [r4, #0]
 80081c6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80081ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081ce:	d142      	bne.n	8008256 <_scanf_float+0x35a>
 80081d0:	9b02      	ldr	r3, [sp, #8]
 80081d2:	eba9 0303 	sub.w	r3, r9, r3
 80081d6:	425a      	negs	r2, r3
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d149      	bne.n	8008270 <_scanf_float+0x374>
 80081dc:	2200      	movs	r2, #0
 80081de:	4641      	mov	r1, r8
 80081e0:	4638      	mov	r0, r7
 80081e2:	f000 fea5 	bl	8008f30 <_strtod_r>
 80081e6:	6825      	ldr	r5, [r4, #0]
 80081e8:	f8da 3000 	ldr.w	r3, [sl]
 80081ec:	f015 0f02 	tst.w	r5, #2
 80081f0:	f103 0204 	add.w	r2, r3, #4
 80081f4:	ec59 8b10 	vmov	r8, r9, d0
 80081f8:	f8ca 2000 	str.w	r2, [sl]
 80081fc:	d043      	beq.n	8008286 <_scanf_float+0x38a>
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	e9c3 8900 	strd	r8, r9, [r3]
 8008204:	68e3      	ldr	r3, [r4, #12]
 8008206:	3301      	adds	r3, #1
 8008208:	60e3      	str	r3, [r4, #12]
 800820a:	e6be      	b.n	8007f8a <_scanf_float+0x8e>
 800820c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008210:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8008214:	4632      	mov	r2, r6
 8008216:	4638      	mov	r0, r7
 8008218:	4798      	blx	r3
 800821a:	6923      	ldr	r3, [r4, #16]
 800821c:	3b01      	subs	r3, #1
 800821e:	6123      	str	r3, [r4, #16]
 8008220:	e7a6      	b.n	8008170 <_scanf_float+0x274>
 8008222:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008226:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800822a:	4632      	mov	r2, r6
 800822c:	4638      	mov	r0, r7
 800822e:	4798      	blx	r3
 8008230:	6923      	ldr	r3, [r4, #16]
 8008232:	3b01      	subs	r3, #1
 8008234:	6123      	str	r3, [r4, #16]
 8008236:	4545      	cmp	r5, r8
 8008238:	d8f3      	bhi.n	8008222 <_scanf_float+0x326>
 800823a:	e6a5      	b.n	8007f88 <_scanf_float+0x8c>
 800823c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008240:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8008244:	4632      	mov	r2, r6
 8008246:	4638      	mov	r0, r7
 8008248:	4798      	blx	r3
 800824a:	6923      	ldr	r3, [r4, #16]
 800824c:	3b01      	subs	r3, #1
 800824e:	6123      	str	r3, [r4, #16]
 8008250:	4545      	cmp	r5, r8
 8008252:	d8f3      	bhi.n	800823c <_scanf_float+0x340>
 8008254:	e698      	b.n	8007f88 <_scanf_float+0x8c>
 8008256:	9b03      	ldr	r3, [sp, #12]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d0bf      	beq.n	80081dc <_scanf_float+0x2e0>
 800825c:	9904      	ldr	r1, [sp, #16]
 800825e:	230a      	movs	r3, #10
 8008260:	4632      	mov	r2, r6
 8008262:	3101      	adds	r1, #1
 8008264:	4638      	mov	r0, r7
 8008266:	f000 feef 	bl	8009048 <_strtol_r>
 800826a:	9b03      	ldr	r3, [sp, #12]
 800826c:	9d04      	ldr	r5, [sp, #16]
 800826e:	1ac2      	subs	r2, r0, r3
 8008270:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008274:	429d      	cmp	r5, r3
 8008276:	bf28      	it	cs
 8008278:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 800827c:	490f      	ldr	r1, [pc, #60]	; (80082bc <_scanf_float+0x3c0>)
 800827e:	4628      	mov	r0, r5
 8008280:	f000 f824 	bl	80082cc <siprintf>
 8008284:	e7aa      	b.n	80081dc <_scanf_float+0x2e0>
 8008286:	f015 0504 	ands.w	r5, r5, #4
 800828a:	d1b8      	bne.n	80081fe <_scanf_float+0x302>
 800828c:	681f      	ldr	r7, [r3, #0]
 800828e:	ee10 2a10 	vmov	r2, s0
 8008292:	464b      	mov	r3, r9
 8008294:	ee10 0a10 	vmov	r0, s0
 8008298:	4649      	mov	r1, r9
 800829a:	f7f8 fc4f 	bl	8000b3c <__aeabi_dcmpun>
 800829e:	b128      	cbz	r0, 80082ac <_scanf_float+0x3b0>
 80082a0:	4628      	mov	r0, r5
 80082a2:	f000 f80d 	bl	80082c0 <nanf>
 80082a6:	ed87 0a00 	vstr	s0, [r7]
 80082aa:	e7ab      	b.n	8008204 <_scanf_float+0x308>
 80082ac:	4640      	mov	r0, r8
 80082ae:	4649      	mov	r1, r9
 80082b0:	f7f8 fca2 	bl	8000bf8 <__aeabi_d2f>
 80082b4:	6038      	str	r0, [r7, #0]
 80082b6:	e7a5      	b.n	8008204 <_scanf_float+0x308>
 80082b8:	2600      	movs	r6, #0
 80082ba:	e666      	b.n	8007f8a <_scanf_float+0x8e>
 80082bc:	0800c358 	.word	0x0800c358

080082c0 <nanf>:
 80082c0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80082c8 <nanf+0x8>
 80082c4:	4770      	bx	lr
 80082c6:	bf00      	nop
 80082c8:	7fc00000 	.word	0x7fc00000

080082cc <siprintf>:
 80082cc:	b40e      	push	{r1, r2, r3}
 80082ce:	b500      	push	{lr}
 80082d0:	b09c      	sub	sp, #112	; 0x70
 80082d2:	ab1d      	add	r3, sp, #116	; 0x74
 80082d4:	9002      	str	r0, [sp, #8]
 80082d6:	9006      	str	r0, [sp, #24]
 80082d8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80082dc:	4809      	ldr	r0, [pc, #36]	; (8008304 <siprintf+0x38>)
 80082de:	9107      	str	r1, [sp, #28]
 80082e0:	9104      	str	r1, [sp, #16]
 80082e2:	4909      	ldr	r1, [pc, #36]	; (8008308 <siprintf+0x3c>)
 80082e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80082e8:	9105      	str	r1, [sp, #20]
 80082ea:	6800      	ldr	r0, [r0, #0]
 80082ec:	9301      	str	r3, [sp, #4]
 80082ee:	a902      	add	r1, sp, #8
 80082f0:	f002 fd70 	bl	800add4 <_svfiprintf_r>
 80082f4:	9b02      	ldr	r3, [sp, #8]
 80082f6:	2200      	movs	r2, #0
 80082f8:	701a      	strb	r2, [r3, #0]
 80082fa:	b01c      	add	sp, #112	; 0x70
 80082fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8008300:	b003      	add	sp, #12
 8008302:	4770      	bx	lr
 8008304:	20000030 	.word	0x20000030
 8008308:	ffff0208 	.word	0xffff0208

0800830c <sulp>:
 800830c:	b570      	push	{r4, r5, r6, lr}
 800830e:	4604      	mov	r4, r0
 8008310:	460d      	mov	r5, r1
 8008312:	ec45 4b10 	vmov	d0, r4, r5
 8008316:	4616      	mov	r6, r2
 8008318:	f002 fb18 	bl	800a94c <__ulp>
 800831c:	ec51 0b10 	vmov	r0, r1, d0
 8008320:	b17e      	cbz	r6, 8008342 <sulp+0x36>
 8008322:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008326:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800832a:	2b00      	cmp	r3, #0
 800832c:	dd09      	ble.n	8008342 <sulp+0x36>
 800832e:	051b      	lsls	r3, r3, #20
 8008330:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008334:	2400      	movs	r4, #0
 8008336:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800833a:	4622      	mov	r2, r4
 800833c:	462b      	mov	r3, r5
 800833e:	f7f8 f963 	bl	8000608 <__aeabi_dmul>
 8008342:	bd70      	pop	{r4, r5, r6, pc}
 8008344:	0000      	movs	r0, r0
	...

08008348 <_strtod_l>:
 8008348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800834c:	461f      	mov	r7, r3
 800834e:	b0a1      	sub	sp, #132	; 0x84
 8008350:	2300      	movs	r3, #0
 8008352:	4681      	mov	r9, r0
 8008354:	4638      	mov	r0, r7
 8008356:	460e      	mov	r6, r1
 8008358:	9217      	str	r2, [sp, #92]	; 0x5c
 800835a:	931c      	str	r3, [sp, #112]	; 0x70
 800835c:	f001 fff5 	bl	800a34a <__localeconv_l>
 8008360:	4680      	mov	r8, r0
 8008362:	6800      	ldr	r0, [r0, #0]
 8008364:	f7f7 ff3c 	bl	80001e0 <strlen>
 8008368:	f04f 0a00 	mov.w	sl, #0
 800836c:	4604      	mov	r4, r0
 800836e:	f04f 0b00 	mov.w	fp, #0
 8008372:	961b      	str	r6, [sp, #108]	; 0x6c
 8008374:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008376:	781a      	ldrb	r2, [r3, #0]
 8008378:	2a0d      	cmp	r2, #13
 800837a:	d832      	bhi.n	80083e2 <_strtod_l+0x9a>
 800837c:	2a09      	cmp	r2, #9
 800837e:	d236      	bcs.n	80083ee <_strtod_l+0xa6>
 8008380:	2a00      	cmp	r2, #0
 8008382:	d03e      	beq.n	8008402 <_strtod_l+0xba>
 8008384:	2300      	movs	r3, #0
 8008386:	930d      	str	r3, [sp, #52]	; 0x34
 8008388:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800838a:	782b      	ldrb	r3, [r5, #0]
 800838c:	2b30      	cmp	r3, #48	; 0x30
 800838e:	f040 80ac 	bne.w	80084ea <_strtod_l+0x1a2>
 8008392:	786b      	ldrb	r3, [r5, #1]
 8008394:	2b58      	cmp	r3, #88	; 0x58
 8008396:	d001      	beq.n	800839c <_strtod_l+0x54>
 8008398:	2b78      	cmp	r3, #120	; 0x78
 800839a:	d167      	bne.n	800846c <_strtod_l+0x124>
 800839c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800839e:	9301      	str	r3, [sp, #4]
 80083a0:	ab1c      	add	r3, sp, #112	; 0x70
 80083a2:	9300      	str	r3, [sp, #0]
 80083a4:	9702      	str	r7, [sp, #8]
 80083a6:	ab1d      	add	r3, sp, #116	; 0x74
 80083a8:	4a88      	ldr	r2, [pc, #544]	; (80085cc <_strtod_l+0x284>)
 80083aa:	a91b      	add	r1, sp, #108	; 0x6c
 80083ac:	4648      	mov	r0, r9
 80083ae:	f001 fcf2 	bl	8009d96 <__gethex>
 80083b2:	f010 0407 	ands.w	r4, r0, #7
 80083b6:	4606      	mov	r6, r0
 80083b8:	d005      	beq.n	80083c6 <_strtod_l+0x7e>
 80083ba:	2c06      	cmp	r4, #6
 80083bc:	d12b      	bne.n	8008416 <_strtod_l+0xce>
 80083be:	3501      	adds	r5, #1
 80083c0:	2300      	movs	r3, #0
 80083c2:	951b      	str	r5, [sp, #108]	; 0x6c
 80083c4:	930d      	str	r3, [sp, #52]	; 0x34
 80083c6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	f040 859a 	bne.w	8008f02 <_strtod_l+0xbba>
 80083ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80083d0:	b1e3      	cbz	r3, 800840c <_strtod_l+0xc4>
 80083d2:	4652      	mov	r2, sl
 80083d4:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80083d8:	ec43 2b10 	vmov	d0, r2, r3
 80083dc:	b021      	add	sp, #132	; 0x84
 80083de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083e2:	2a2b      	cmp	r2, #43	; 0x2b
 80083e4:	d015      	beq.n	8008412 <_strtod_l+0xca>
 80083e6:	2a2d      	cmp	r2, #45	; 0x2d
 80083e8:	d004      	beq.n	80083f4 <_strtod_l+0xac>
 80083ea:	2a20      	cmp	r2, #32
 80083ec:	d1ca      	bne.n	8008384 <_strtod_l+0x3c>
 80083ee:	3301      	adds	r3, #1
 80083f0:	931b      	str	r3, [sp, #108]	; 0x6c
 80083f2:	e7bf      	b.n	8008374 <_strtod_l+0x2c>
 80083f4:	2201      	movs	r2, #1
 80083f6:	920d      	str	r2, [sp, #52]	; 0x34
 80083f8:	1c5a      	adds	r2, r3, #1
 80083fa:	921b      	str	r2, [sp, #108]	; 0x6c
 80083fc:	785b      	ldrb	r3, [r3, #1]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d1c2      	bne.n	8008388 <_strtod_l+0x40>
 8008402:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008404:	961b      	str	r6, [sp, #108]	; 0x6c
 8008406:	2b00      	cmp	r3, #0
 8008408:	f040 8579 	bne.w	8008efe <_strtod_l+0xbb6>
 800840c:	4652      	mov	r2, sl
 800840e:	465b      	mov	r3, fp
 8008410:	e7e2      	b.n	80083d8 <_strtod_l+0x90>
 8008412:	2200      	movs	r2, #0
 8008414:	e7ef      	b.n	80083f6 <_strtod_l+0xae>
 8008416:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008418:	b13a      	cbz	r2, 800842a <_strtod_l+0xe2>
 800841a:	2135      	movs	r1, #53	; 0x35
 800841c:	a81e      	add	r0, sp, #120	; 0x78
 800841e:	f002 fb8d 	bl	800ab3c <__copybits>
 8008422:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008424:	4648      	mov	r0, r9
 8008426:	f001 fffa 	bl	800a41e <_Bfree>
 800842a:	3c01      	subs	r4, #1
 800842c:	2c04      	cmp	r4, #4
 800842e:	d806      	bhi.n	800843e <_strtod_l+0xf6>
 8008430:	e8df f004 	tbb	[pc, r4]
 8008434:	1714030a 	.word	0x1714030a
 8008438:	0a          	.byte	0x0a
 8008439:	00          	.byte	0x00
 800843a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800843e:	0730      	lsls	r0, r6, #28
 8008440:	d5c1      	bpl.n	80083c6 <_strtod_l+0x7e>
 8008442:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8008446:	e7be      	b.n	80083c6 <_strtod_l+0x7e>
 8008448:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800844c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800844e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008452:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008456:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800845a:	e7f0      	b.n	800843e <_strtod_l+0xf6>
 800845c:	f8df b170 	ldr.w	fp, [pc, #368]	; 80085d0 <_strtod_l+0x288>
 8008460:	e7ed      	b.n	800843e <_strtod_l+0xf6>
 8008462:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8008466:	f04f 3aff 	mov.w	sl, #4294967295
 800846a:	e7e8      	b.n	800843e <_strtod_l+0xf6>
 800846c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800846e:	1c5a      	adds	r2, r3, #1
 8008470:	921b      	str	r2, [sp, #108]	; 0x6c
 8008472:	785b      	ldrb	r3, [r3, #1]
 8008474:	2b30      	cmp	r3, #48	; 0x30
 8008476:	d0f9      	beq.n	800846c <_strtod_l+0x124>
 8008478:	2b00      	cmp	r3, #0
 800847a:	d0a4      	beq.n	80083c6 <_strtod_l+0x7e>
 800847c:	2301      	movs	r3, #1
 800847e:	2500      	movs	r5, #0
 8008480:	9306      	str	r3, [sp, #24]
 8008482:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008484:	9308      	str	r3, [sp, #32]
 8008486:	9507      	str	r5, [sp, #28]
 8008488:	9505      	str	r5, [sp, #20]
 800848a:	220a      	movs	r2, #10
 800848c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800848e:	7807      	ldrb	r7, [r0, #0]
 8008490:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8008494:	b2d9      	uxtb	r1, r3
 8008496:	2909      	cmp	r1, #9
 8008498:	d929      	bls.n	80084ee <_strtod_l+0x1a6>
 800849a:	4622      	mov	r2, r4
 800849c:	f8d8 1000 	ldr.w	r1, [r8]
 80084a0:	f002 fda0 	bl	800afe4 <strncmp>
 80084a4:	2800      	cmp	r0, #0
 80084a6:	d031      	beq.n	800850c <_strtod_l+0x1c4>
 80084a8:	2000      	movs	r0, #0
 80084aa:	9c05      	ldr	r4, [sp, #20]
 80084ac:	9004      	str	r0, [sp, #16]
 80084ae:	463b      	mov	r3, r7
 80084b0:	4602      	mov	r2, r0
 80084b2:	2b65      	cmp	r3, #101	; 0x65
 80084b4:	d001      	beq.n	80084ba <_strtod_l+0x172>
 80084b6:	2b45      	cmp	r3, #69	; 0x45
 80084b8:	d114      	bne.n	80084e4 <_strtod_l+0x19c>
 80084ba:	b924      	cbnz	r4, 80084c6 <_strtod_l+0x17e>
 80084bc:	b910      	cbnz	r0, 80084c4 <_strtod_l+0x17c>
 80084be:	9b06      	ldr	r3, [sp, #24]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d09e      	beq.n	8008402 <_strtod_l+0xba>
 80084c4:	2400      	movs	r4, #0
 80084c6:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80084c8:	1c73      	adds	r3, r6, #1
 80084ca:	931b      	str	r3, [sp, #108]	; 0x6c
 80084cc:	7873      	ldrb	r3, [r6, #1]
 80084ce:	2b2b      	cmp	r3, #43	; 0x2b
 80084d0:	d078      	beq.n	80085c4 <_strtod_l+0x27c>
 80084d2:	2b2d      	cmp	r3, #45	; 0x2d
 80084d4:	d070      	beq.n	80085b8 <_strtod_l+0x270>
 80084d6:	f04f 0c00 	mov.w	ip, #0
 80084da:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 80084de:	2f09      	cmp	r7, #9
 80084e0:	d97c      	bls.n	80085dc <_strtod_l+0x294>
 80084e2:	961b      	str	r6, [sp, #108]	; 0x6c
 80084e4:	f04f 0e00 	mov.w	lr, #0
 80084e8:	e09a      	b.n	8008620 <_strtod_l+0x2d8>
 80084ea:	2300      	movs	r3, #0
 80084ec:	e7c7      	b.n	800847e <_strtod_l+0x136>
 80084ee:	9905      	ldr	r1, [sp, #20]
 80084f0:	2908      	cmp	r1, #8
 80084f2:	bfdd      	ittte	le
 80084f4:	9907      	ldrle	r1, [sp, #28]
 80084f6:	fb02 3301 	mlale	r3, r2, r1, r3
 80084fa:	9307      	strle	r3, [sp, #28]
 80084fc:	fb02 3505 	mlagt	r5, r2, r5, r3
 8008500:	9b05      	ldr	r3, [sp, #20]
 8008502:	3001      	adds	r0, #1
 8008504:	3301      	adds	r3, #1
 8008506:	9305      	str	r3, [sp, #20]
 8008508:	901b      	str	r0, [sp, #108]	; 0x6c
 800850a:	e7bf      	b.n	800848c <_strtod_l+0x144>
 800850c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800850e:	191a      	adds	r2, r3, r4
 8008510:	921b      	str	r2, [sp, #108]	; 0x6c
 8008512:	9a05      	ldr	r2, [sp, #20]
 8008514:	5d1b      	ldrb	r3, [r3, r4]
 8008516:	2a00      	cmp	r2, #0
 8008518:	d037      	beq.n	800858a <_strtod_l+0x242>
 800851a:	9c05      	ldr	r4, [sp, #20]
 800851c:	4602      	mov	r2, r0
 800851e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8008522:	2909      	cmp	r1, #9
 8008524:	d913      	bls.n	800854e <_strtod_l+0x206>
 8008526:	2101      	movs	r1, #1
 8008528:	9104      	str	r1, [sp, #16]
 800852a:	e7c2      	b.n	80084b2 <_strtod_l+0x16a>
 800852c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800852e:	1c5a      	adds	r2, r3, #1
 8008530:	921b      	str	r2, [sp, #108]	; 0x6c
 8008532:	785b      	ldrb	r3, [r3, #1]
 8008534:	3001      	adds	r0, #1
 8008536:	2b30      	cmp	r3, #48	; 0x30
 8008538:	d0f8      	beq.n	800852c <_strtod_l+0x1e4>
 800853a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800853e:	2a08      	cmp	r2, #8
 8008540:	f200 84e4 	bhi.w	8008f0c <_strtod_l+0xbc4>
 8008544:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008546:	9208      	str	r2, [sp, #32]
 8008548:	4602      	mov	r2, r0
 800854a:	2000      	movs	r0, #0
 800854c:	4604      	mov	r4, r0
 800854e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8008552:	f100 0101 	add.w	r1, r0, #1
 8008556:	d012      	beq.n	800857e <_strtod_l+0x236>
 8008558:	440a      	add	r2, r1
 800855a:	eb00 0c04 	add.w	ip, r0, r4
 800855e:	4621      	mov	r1, r4
 8008560:	270a      	movs	r7, #10
 8008562:	458c      	cmp	ip, r1
 8008564:	d113      	bne.n	800858e <_strtod_l+0x246>
 8008566:	1821      	adds	r1, r4, r0
 8008568:	2908      	cmp	r1, #8
 800856a:	f104 0401 	add.w	r4, r4, #1
 800856e:	4404      	add	r4, r0
 8008570:	dc19      	bgt.n	80085a6 <_strtod_l+0x25e>
 8008572:	9b07      	ldr	r3, [sp, #28]
 8008574:	210a      	movs	r1, #10
 8008576:	fb01 e303 	mla	r3, r1, r3, lr
 800857a:	9307      	str	r3, [sp, #28]
 800857c:	2100      	movs	r1, #0
 800857e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008580:	1c58      	adds	r0, r3, #1
 8008582:	901b      	str	r0, [sp, #108]	; 0x6c
 8008584:	785b      	ldrb	r3, [r3, #1]
 8008586:	4608      	mov	r0, r1
 8008588:	e7c9      	b.n	800851e <_strtod_l+0x1d6>
 800858a:	9805      	ldr	r0, [sp, #20]
 800858c:	e7d3      	b.n	8008536 <_strtod_l+0x1ee>
 800858e:	2908      	cmp	r1, #8
 8008590:	f101 0101 	add.w	r1, r1, #1
 8008594:	dc03      	bgt.n	800859e <_strtod_l+0x256>
 8008596:	9b07      	ldr	r3, [sp, #28]
 8008598:	437b      	muls	r3, r7
 800859a:	9307      	str	r3, [sp, #28]
 800859c:	e7e1      	b.n	8008562 <_strtod_l+0x21a>
 800859e:	2910      	cmp	r1, #16
 80085a0:	bfd8      	it	le
 80085a2:	437d      	mulle	r5, r7
 80085a4:	e7dd      	b.n	8008562 <_strtod_l+0x21a>
 80085a6:	2c10      	cmp	r4, #16
 80085a8:	bfdc      	itt	le
 80085aa:	210a      	movle	r1, #10
 80085ac:	fb01 e505 	mlale	r5, r1, r5, lr
 80085b0:	e7e4      	b.n	800857c <_strtod_l+0x234>
 80085b2:	2301      	movs	r3, #1
 80085b4:	9304      	str	r3, [sp, #16]
 80085b6:	e781      	b.n	80084bc <_strtod_l+0x174>
 80085b8:	f04f 0c01 	mov.w	ip, #1
 80085bc:	1cb3      	adds	r3, r6, #2
 80085be:	931b      	str	r3, [sp, #108]	; 0x6c
 80085c0:	78b3      	ldrb	r3, [r6, #2]
 80085c2:	e78a      	b.n	80084da <_strtod_l+0x192>
 80085c4:	f04f 0c00 	mov.w	ip, #0
 80085c8:	e7f8      	b.n	80085bc <_strtod_l+0x274>
 80085ca:	bf00      	nop
 80085cc:	0800c360 	.word	0x0800c360
 80085d0:	7ff00000 	.word	0x7ff00000
 80085d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80085d6:	1c5f      	adds	r7, r3, #1
 80085d8:	971b      	str	r7, [sp, #108]	; 0x6c
 80085da:	785b      	ldrb	r3, [r3, #1]
 80085dc:	2b30      	cmp	r3, #48	; 0x30
 80085de:	d0f9      	beq.n	80085d4 <_strtod_l+0x28c>
 80085e0:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 80085e4:	2f08      	cmp	r7, #8
 80085e6:	f63f af7d 	bhi.w	80084e4 <_strtod_l+0x19c>
 80085ea:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80085ee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80085f0:	930a      	str	r3, [sp, #40]	; 0x28
 80085f2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80085f4:	1c5f      	adds	r7, r3, #1
 80085f6:	971b      	str	r7, [sp, #108]	; 0x6c
 80085f8:	785b      	ldrb	r3, [r3, #1]
 80085fa:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 80085fe:	f1b8 0f09 	cmp.w	r8, #9
 8008602:	d937      	bls.n	8008674 <_strtod_l+0x32c>
 8008604:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008606:	1a7f      	subs	r7, r7, r1
 8008608:	2f08      	cmp	r7, #8
 800860a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800860e:	dc37      	bgt.n	8008680 <_strtod_l+0x338>
 8008610:	45be      	cmp	lr, r7
 8008612:	bfa8      	it	ge
 8008614:	46be      	movge	lr, r7
 8008616:	f1bc 0f00 	cmp.w	ip, #0
 800861a:	d001      	beq.n	8008620 <_strtod_l+0x2d8>
 800861c:	f1ce 0e00 	rsb	lr, lr, #0
 8008620:	2c00      	cmp	r4, #0
 8008622:	d151      	bne.n	80086c8 <_strtod_l+0x380>
 8008624:	2800      	cmp	r0, #0
 8008626:	f47f aece 	bne.w	80083c6 <_strtod_l+0x7e>
 800862a:	9a06      	ldr	r2, [sp, #24]
 800862c:	2a00      	cmp	r2, #0
 800862e:	f47f aeca 	bne.w	80083c6 <_strtod_l+0x7e>
 8008632:	9a04      	ldr	r2, [sp, #16]
 8008634:	2a00      	cmp	r2, #0
 8008636:	f47f aee4 	bne.w	8008402 <_strtod_l+0xba>
 800863a:	2b4e      	cmp	r3, #78	; 0x4e
 800863c:	d027      	beq.n	800868e <_strtod_l+0x346>
 800863e:	dc21      	bgt.n	8008684 <_strtod_l+0x33c>
 8008640:	2b49      	cmp	r3, #73	; 0x49
 8008642:	f47f aede 	bne.w	8008402 <_strtod_l+0xba>
 8008646:	49a0      	ldr	r1, [pc, #640]	; (80088c8 <_strtod_l+0x580>)
 8008648:	a81b      	add	r0, sp, #108	; 0x6c
 800864a:	f001 fdd7 	bl	800a1fc <__match>
 800864e:	2800      	cmp	r0, #0
 8008650:	f43f aed7 	beq.w	8008402 <_strtod_l+0xba>
 8008654:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008656:	499d      	ldr	r1, [pc, #628]	; (80088cc <_strtod_l+0x584>)
 8008658:	3b01      	subs	r3, #1
 800865a:	a81b      	add	r0, sp, #108	; 0x6c
 800865c:	931b      	str	r3, [sp, #108]	; 0x6c
 800865e:	f001 fdcd 	bl	800a1fc <__match>
 8008662:	b910      	cbnz	r0, 800866a <_strtod_l+0x322>
 8008664:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008666:	3301      	adds	r3, #1
 8008668:	931b      	str	r3, [sp, #108]	; 0x6c
 800866a:	f8df b274 	ldr.w	fp, [pc, #628]	; 80088e0 <_strtod_l+0x598>
 800866e:	f04f 0a00 	mov.w	sl, #0
 8008672:	e6a8      	b.n	80083c6 <_strtod_l+0x7e>
 8008674:	210a      	movs	r1, #10
 8008676:	fb01 3e0e 	mla	lr, r1, lr, r3
 800867a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800867e:	e7b8      	b.n	80085f2 <_strtod_l+0x2aa>
 8008680:	46be      	mov	lr, r7
 8008682:	e7c8      	b.n	8008616 <_strtod_l+0x2ce>
 8008684:	2b69      	cmp	r3, #105	; 0x69
 8008686:	d0de      	beq.n	8008646 <_strtod_l+0x2fe>
 8008688:	2b6e      	cmp	r3, #110	; 0x6e
 800868a:	f47f aeba 	bne.w	8008402 <_strtod_l+0xba>
 800868e:	4990      	ldr	r1, [pc, #576]	; (80088d0 <_strtod_l+0x588>)
 8008690:	a81b      	add	r0, sp, #108	; 0x6c
 8008692:	f001 fdb3 	bl	800a1fc <__match>
 8008696:	2800      	cmp	r0, #0
 8008698:	f43f aeb3 	beq.w	8008402 <_strtod_l+0xba>
 800869c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800869e:	781b      	ldrb	r3, [r3, #0]
 80086a0:	2b28      	cmp	r3, #40	; 0x28
 80086a2:	d10e      	bne.n	80086c2 <_strtod_l+0x37a>
 80086a4:	aa1e      	add	r2, sp, #120	; 0x78
 80086a6:	498b      	ldr	r1, [pc, #556]	; (80088d4 <_strtod_l+0x58c>)
 80086a8:	a81b      	add	r0, sp, #108	; 0x6c
 80086aa:	f001 fdbb 	bl	800a224 <__hexnan>
 80086ae:	2805      	cmp	r0, #5
 80086b0:	d107      	bne.n	80086c2 <_strtod_l+0x37a>
 80086b2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80086b4:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 80086b8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80086bc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80086c0:	e681      	b.n	80083c6 <_strtod_l+0x7e>
 80086c2:	f8df b224 	ldr.w	fp, [pc, #548]	; 80088e8 <_strtod_l+0x5a0>
 80086c6:	e7d2      	b.n	800866e <_strtod_l+0x326>
 80086c8:	ebae 0302 	sub.w	r3, lr, r2
 80086cc:	9306      	str	r3, [sp, #24]
 80086ce:	9b05      	ldr	r3, [sp, #20]
 80086d0:	9807      	ldr	r0, [sp, #28]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	bf08      	it	eq
 80086d6:	4623      	moveq	r3, r4
 80086d8:	2c10      	cmp	r4, #16
 80086da:	9305      	str	r3, [sp, #20]
 80086dc:	46a0      	mov	r8, r4
 80086de:	bfa8      	it	ge
 80086e0:	f04f 0810 	movge.w	r8, #16
 80086e4:	f7f7 ff16 	bl	8000514 <__aeabi_ui2d>
 80086e8:	2c09      	cmp	r4, #9
 80086ea:	4682      	mov	sl, r0
 80086ec:	468b      	mov	fp, r1
 80086ee:	dc13      	bgt.n	8008718 <_strtod_l+0x3d0>
 80086f0:	9b06      	ldr	r3, [sp, #24]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	f43f ae67 	beq.w	80083c6 <_strtod_l+0x7e>
 80086f8:	9b06      	ldr	r3, [sp, #24]
 80086fa:	dd7a      	ble.n	80087f2 <_strtod_l+0x4aa>
 80086fc:	2b16      	cmp	r3, #22
 80086fe:	dc61      	bgt.n	80087c4 <_strtod_l+0x47c>
 8008700:	4a75      	ldr	r2, [pc, #468]	; (80088d8 <_strtod_l+0x590>)
 8008702:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8008706:	e9de 0100 	ldrd	r0, r1, [lr]
 800870a:	4652      	mov	r2, sl
 800870c:	465b      	mov	r3, fp
 800870e:	f7f7 ff7b 	bl	8000608 <__aeabi_dmul>
 8008712:	4682      	mov	sl, r0
 8008714:	468b      	mov	fp, r1
 8008716:	e656      	b.n	80083c6 <_strtod_l+0x7e>
 8008718:	4b6f      	ldr	r3, [pc, #444]	; (80088d8 <_strtod_l+0x590>)
 800871a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800871e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008722:	f7f7 ff71 	bl	8000608 <__aeabi_dmul>
 8008726:	4606      	mov	r6, r0
 8008728:	4628      	mov	r0, r5
 800872a:	460f      	mov	r7, r1
 800872c:	f7f7 fef2 	bl	8000514 <__aeabi_ui2d>
 8008730:	4602      	mov	r2, r0
 8008732:	460b      	mov	r3, r1
 8008734:	4630      	mov	r0, r6
 8008736:	4639      	mov	r1, r7
 8008738:	f7f7 fdb0 	bl	800029c <__adddf3>
 800873c:	2c0f      	cmp	r4, #15
 800873e:	4682      	mov	sl, r0
 8008740:	468b      	mov	fp, r1
 8008742:	ddd5      	ble.n	80086f0 <_strtod_l+0x3a8>
 8008744:	9b06      	ldr	r3, [sp, #24]
 8008746:	eba4 0808 	sub.w	r8, r4, r8
 800874a:	4498      	add	r8, r3
 800874c:	f1b8 0f00 	cmp.w	r8, #0
 8008750:	f340 8096 	ble.w	8008880 <_strtod_l+0x538>
 8008754:	f018 030f 	ands.w	r3, r8, #15
 8008758:	d00a      	beq.n	8008770 <_strtod_l+0x428>
 800875a:	495f      	ldr	r1, [pc, #380]	; (80088d8 <_strtod_l+0x590>)
 800875c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008760:	4652      	mov	r2, sl
 8008762:	465b      	mov	r3, fp
 8008764:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008768:	f7f7 ff4e 	bl	8000608 <__aeabi_dmul>
 800876c:	4682      	mov	sl, r0
 800876e:	468b      	mov	fp, r1
 8008770:	f038 080f 	bics.w	r8, r8, #15
 8008774:	d073      	beq.n	800885e <_strtod_l+0x516>
 8008776:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800877a:	dd47      	ble.n	800880c <_strtod_l+0x4c4>
 800877c:	2400      	movs	r4, #0
 800877e:	46a0      	mov	r8, r4
 8008780:	9407      	str	r4, [sp, #28]
 8008782:	9405      	str	r4, [sp, #20]
 8008784:	2322      	movs	r3, #34	; 0x22
 8008786:	f8df b158 	ldr.w	fp, [pc, #344]	; 80088e0 <_strtod_l+0x598>
 800878a:	f8c9 3000 	str.w	r3, [r9]
 800878e:	f04f 0a00 	mov.w	sl, #0
 8008792:	9b07      	ldr	r3, [sp, #28]
 8008794:	2b00      	cmp	r3, #0
 8008796:	f43f ae16 	beq.w	80083c6 <_strtod_l+0x7e>
 800879a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800879c:	4648      	mov	r0, r9
 800879e:	f001 fe3e 	bl	800a41e <_Bfree>
 80087a2:	9905      	ldr	r1, [sp, #20]
 80087a4:	4648      	mov	r0, r9
 80087a6:	f001 fe3a 	bl	800a41e <_Bfree>
 80087aa:	4641      	mov	r1, r8
 80087ac:	4648      	mov	r0, r9
 80087ae:	f001 fe36 	bl	800a41e <_Bfree>
 80087b2:	9907      	ldr	r1, [sp, #28]
 80087b4:	4648      	mov	r0, r9
 80087b6:	f001 fe32 	bl	800a41e <_Bfree>
 80087ba:	4621      	mov	r1, r4
 80087bc:	4648      	mov	r0, r9
 80087be:	f001 fe2e 	bl	800a41e <_Bfree>
 80087c2:	e600      	b.n	80083c6 <_strtod_l+0x7e>
 80087c4:	9a06      	ldr	r2, [sp, #24]
 80087c6:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80087ca:	4293      	cmp	r3, r2
 80087cc:	dbba      	blt.n	8008744 <_strtod_l+0x3fc>
 80087ce:	4d42      	ldr	r5, [pc, #264]	; (80088d8 <_strtod_l+0x590>)
 80087d0:	f1c4 040f 	rsb	r4, r4, #15
 80087d4:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80087d8:	4652      	mov	r2, sl
 80087da:	465b      	mov	r3, fp
 80087dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80087e0:	f7f7 ff12 	bl	8000608 <__aeabi_dmul>
 80087e4:	9b06      	ldr	r3, [sp, #24]
 80087e6:	1b1c      	subs	r4, r3, r4
 80087e8:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80087ec:	e9d5 2300 	ldrd	r2, r3, [r5]
 80087f0:	e78d      	b.n	800870e <_strtod_l+0x3c6>
 80087f2:	f113 0f16 	cmn.w	r3, #22
 80087f6:	dba5      	blt.n	8008744 <_strtod_l+0x3fc>
 80087f8:	4a37      	ldr	r2, [pc, #220]	; (80088d8 <_strtod_l+0x590>)
 80087fa:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 80087fe:	e9d2 2300 	ldrd	r2, r3, [r2]
 8008802:	4650      	mov	r0, sl
 8008804:	4659      	mov	r1, fp
 8008806:	f7f8 f829 	bl	800085c <__aeabi_ddiv>
 800880a:	e782      	b.n	8008712 <_strtod_l+0x3ca>
 800880c:	2300      	movs	r3, #0
 800880e:	4e33      	ldr	r6, [pc, #204]	; (80088dc <_strtod_l+0x594>)
 8008810:	ea4f 1828 	mov.w	r8, r8, asr #4
 8008814:	4650      	mov	r0, sl
 8008816:	4659      	mov	r1, fp
 8008818:	461d      	mov	r5, r3
 800881a:	f1b8 0f01 	cmp.w	r8, #1
 800881e:	dc21      	bgt.n	8008864 <_strtod_l+0x51c>
 8008820:	b10b      	cbz	r3, 8008826 <_strtod_l+0x4de>
 8008822:	4682      	mov	sl, r0
 8008824:	468b      	mov	fp, r1
 8008826:	4b2d      	ldr	r3, [pc, #180]	; (80088dc <_strtod_l+0x594>)
 8008828:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800882c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8008830:	4652      	mov	r2, sl
 8008832:	465b      	mov	r3, fp
 8008834:	e9d5 0100 	ldrd	r0, r1, [r5]
 8008838:	f7f7 fee6 	bl	8000608 <__aeabi_dmul>
 800883c:	4b28      	ldr	r3, [pc, #160]	; (80088e0 <_strtod_l+0x598>)
 800883e:	460a      	mov	r2, r1
 8008840:	400b      	ands	r3, r1
 8008842:	4928      	ldr	r1, [pc, #160]	; (80088e4 <_strtod_l+0x59c>)
 8008844:	428b      	cmp	r3, r1
 8008846:	4682      	mov	sl, r0
 8008848:	d898      	bhi.n	800877c <_strtod_l+0x434>
 800884a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800884e:	428b      	cmp	r3, r1
 8008850:	bf86      	itte	hi
 8008852:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80088ec <_strtod_l+0x5a4>
 8008856:	f04f 3aff 	movhi.w	sl, #4294967295
 800885a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800885e:	2300      	movs	r3, #0
 8008860:	9304      	str	r3, [sp, #16]
 8008862:	e077      	b.n	8008954 <_strtod_l+0x60c>
 8008864:	f018 0f01 	tst.w	r8, #1
 8008868:	d006      	beq.n	8008878 <_strtod_l+0x530>
 800886a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800886e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008872:	f7f7 fec9 	bl	8000608 <__aeabi_dmul>
 8008876:	2301      	movs	r3, #1
 8008878:	3501      	adds	r5, #1
 800887a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800887e:	e7cc      	b.n	800881a <_strtod_l+0x4d2>
 8008880:	d0ed      	beq.n	800885e <_strtod_l+0x516>
 8008882:	f1c8 0800 	rsb	r8, r8, #0
 8008886:	f018 020f 	ands.w	r2, r8, #15
 800888a:	d00a      	beq.n	80088a2 <_strtod_l+0x55a>
 800888c:	4b12      	ldr	r3, [pc, #72]	; (80088d8 <_strtod_l+0x590>)
 800888e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008892:	4650      	mov	r0, sl
 8008894:	4659      	mov	r1, fp
 8008896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800889a:	f7f7 ffdf 	bl	800085c <__aeabi_ddiv>
 800889e:	4682      	mov	sl, r0
 80088a0:	468b      	mov	fp, r1
 80088a2:	ea5f 1828 	movs.w	r8, r8, asr #4
 80088a6:	d0da      	beq.n	800885e <_strtod_l+0x516>
 80088a8:	f1b8 0f1f 	cmp.w	r8, #31
 80088ac:	dd20      	ble.n	80088f0 <_strtod_l+0x5a8>
 80088ae:	2400      	movs	r4, #0
 80088b0:	46a0      	mov	r8, r4
 80088b2:	9407      	str	r4, [sp, #28]
 80088b4:	9405      	str	r4, [sp, #20]
 80088b6:	2322      	movs	r3, #34	; 0x22
 80088b8:	f04f 0a00 	mov.w	sl, #0
 80088bc:	f04f 0b00 	mov.w	fp, #0
 80088c0:	f8c9 3000 	str.w	r3, [r9]
 80088c4:	e765      	b.n	8008792 <_strtod_l+0x44a>
 80088c6:	bf00      	nop
 80088c8:	0800c329 	.word	0x0800c329
 80088cc:	0800c3b3 	.word	0x0800c3b3
 80088d0:	0800c331 	.word	0x0800c331
 80088d4:	0800c374 	.word	0x0800c374
 80088d8:	0800c3f0 	.word	0x0800c3f0
 80088dc:	0800c3c8 	.word	0x0800c3c8
 80088e0:	7ff00000 	.word	0x7ff00000
 80088e4:	7ca00000 	.word	0x7ca00000
 80088e8:	fff80000 	.word	0xfff80000
 80088ec:	7fefffff 	.word	0x7fefffff
 80088f0:	f018 0310 	ands.w	r3, r8, #16
 80088f4:	bf18      	it	ne
 80088f6:	236a      	movne	r3, #106	; 0x6a
 80088f8:	4da0      	ldr	r5, [pc, #640]	; (8008b7c <_strtod_l+0x834>)
 80088fa:	9304      	str	r3, [sp, #16]
 80088fc:	4650      	mov	r0, sl
 80088fe:	4659      	mov	r1, fp
 8008900:	2300      	movs	r3, #0
 8008902:	f1b8 0f00 	cmp.w	r8, #0
 8008906:	f300 810a 	bgt.w	8008b1e <_strtod_l+0x7d6>
 800890a:	b10b      	cbz	r3, 8008910 <_strtod_l+0x5c8>
 800890c:	4682      	mov	sl, r0
 800890e:	468b      	mov	fp, r1
 8008910:	9b04      	ldr	r3, [sp, #16]
 8008912:	b1bb      	cbz	r3, 8008944 <_strtod_l+0x5fc>
 8008914:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8008918:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800891c:	2b00      	cmp	r3, #0
 800891e:	4659      	mov	r1, fp
 8008920:	dd10      	ble.n	8008944 <_strtod_l+0x5fc>
 8008922:	2b1f      	cmp	r3, #31
 8008924:	f340 8107 	ble.w	8008b36 <_strtod_l+0x7ee>
 8008928:	2b34      	cmp	r3, #52	; 0x34
 800892a:	bfde      	ittt	le
 800892c:	3b20      	suble	r3, #32
 800892e:	f04f 32ff 	movle.w	r2, #4294967295
 8008932:	fa02 f303 	lslle.w	r3, r2, r3
 8008936:	f04f 0a00 	mov.w	sl, #0
 800893a:	bfcc      	ite	gt
 800893c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8008940:	ea03 0b01 	andle.w	fp, r3, r1
 8008944:	2200      	movs	r2, #0
 8008946:	2300      	movs	r3, #0
 8008948:	4650      	mov	r0, sl
 800894a:	4659      	mov	r1, fp
 800894c:	f7f8 f8c4 	bl	8000ad8 <__aeabi_dcmpeq>
 8008950:	2800      	cmp	r0, #0
 8008952:	d1ac      	bne.n	80088ae <_strtod_l+0x566>
 8008954:	9b07      	ldr	r3, [sp, #28]
 8008956:	9300      	str	r3, [sp, #0]
 8008958:	9a05      	ldr	r2, [sp, #20]
 800895a:	9908      	ldr	r1, [sp, #32]
 800895c:	4623      	mov	r3, r4
 800895e:	4648      	mov	r0, r9
 8008960:	f001 fdaf 	bl	800a4c2 <__s2b>
 8008964:	9007      	str	r0, [sp, #28]
 8008966:	2800      	cmp	r0, #0
 8008968:	f43f af08 	beq.w	800877c <_strtod_l+0x434>
 800896c:	9a06      	ldr	r2, [sp, #24]
 800896e:	9b06      	ldr	r3, [sp, #24]
 8008970:	2a00      	cmp	r2, #0
 8008972:	f1c3 0300 	rsb	r3, r3, #0
 8008976:	bfa8      	it	ge
 8008978:	2300      	movge	r3, #0
 800897a:	930e      	str	r3, [sp, #56]	; 0x38
 800897c:	2400      	movs	r4, #0
 800897e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008982:	9316      	str	r3, [sp, #88]	; 0x58
 8008984:	46a0      	mov	r8, r4
 8008986:	9b07      	ldr	r3, [sp, #28]
 8008988:	4648      	mov	r0, r9
 800898a:	6859      	ldr	r1, [r3, #4]
 800898c:	f001 fd13 	bl	800a3b6 <_Balloc>
 8008990:	9005      	str	r0, [sp, #20]
 8008992:	2800      	cmp	r0, #0
 8008994:	f43f aef6 	beq.w	8008784 <_strtod_l+0x43c>
 8008998:	9b07      	ldr	r3, [sp, #28]
 800899a:	691a      	ldr	r2, [r3, #16]
 800899c:	3202      	adds	r2, #2
 800899e:	f103 010c 	add.w	r1, r3, #12
 80089a2:	0092      	lsls	r2, r2, #2
 80089a4:	300c      	adds	r0, #12
 80089a6:	f001 fcfb 	bl	800a3a0 <memcpy>
 80089aa:	aa1e      	add	r2, sp, #120	; 0x78
 80089ac:	a91d      	add	r1, sp, #116	; 0x74
 80089ae:	ec4b ab10 	vmov	d0, sl, fp
 80089b2:	4648      	mov	r0, r9
 80089b4:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80089b8:	f002 f83e 	bl	800aa38 <__d2b>
 80089bc:	901c      	str	r0, [sp, #112]	; 0x70
 80089be:	2800      	cmp	r0, #0
 80089c0:	f43f aee0 	beq.w	8008784 <_strtod_l+0x43c>
 80089c4:	2101      	movs	r1, #1
 80089c6:	4648      	mov	r0, r9
 80089c8:	f001 fe07 	bl	800a5da <__i2b>
 80089cc:	4680      	mov	r8, r0
 80089ce:	2800      	cmp	r0, #0
 80089d0:	f43f aed8 	beq.w	8008784 <_strtod_l+0x43c>
 80089d4:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80089d6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80089d8:	2e00      	cmp	r6, #0
 80089da:	bfab      	itete	ge
 80089dc:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80089de:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80089e0:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 80089e2:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 80089e4:	bfac      	ite	ge
 80089e6:	18f7      	addge	r7, r6, r3
 80089e8:	1b9d      	sublt	r5, r3, r6
 80089ea:	9b04      	ldr	r3, [sp, #16]
 80089ec:	1af6      	subs	r6, r6, r3
 80089ee:	4416      	add	r6, r2
 80089f0:	4b63      	ldr	r3, [pc, #396]	; (8008b80 <_strtod_l+0x838>)
 80089f2:	3e01      	subs	r6, #1
 80089f4:	429e      	cmp	r6, r3
 80089f6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80089fa:	f280 80af 	bge.w	8008b5c <_strtod_l+0x814>
 80089fe:	1b9b      	subs	r3, r3, r6
 8008a00:	2b1f      	cmp	r3, #31
 8008a02:	eba2 0203 	sub.w	r2, r2, r3
 8008a06:	f04f 0101 	mov.w	r1, #1
 8008a0a:	f300 809b 	bgt.w	8008b44 <_strtod_l+0x7fc>
 8008a0e:	fa01 f303 	lsl.w	r3, r1, r3
 8008a12:	930f      	str	r3, [sp, #60]	; 0x3c
 8008a14:	2300      	movs	r3, #0
 8008a16:	930a      	str	r3, [sp, #40]	; 0x28
 8008a18:	18be      	adds	r6, r7, r2
 8008a1a:	9b04      	ldr	r3, [sp, #16]
 8008a1c:	42b7      	cmp	r7, r6
 8008a1e:	4415      	add	r5, r2
 8008a20:	441d      	add	r5, r3
 8008a22:	463b      	mov	r3, r7
 8008a24:	bfa8      	it	ge
 8008a26:	4633      	movge	r3, r6
 8008a28:	42ab      	cmp	r3, r5
 8008a2a:	bfa8      	it	ge
 8008a2c:	462b      	movge	r3, r5
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	bfc2      	ittt	gt
 8008a32:	1af6      	subgt	r6, r6, r3
 8008a34:	1aed      	subgt	r5, r5, r3
 8008a36:	1aff      	subgt	r7, r7, r3
 8008a38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008a3a:	b1bb      	cbz	r3, 8008a6c <_strtod_l+0x724>
 8008a3c:	4641      	mov	r1, r8
 8008a3e:	461a      	mov	r2, r3
 8008a40:	4648      	mov	r0, r9
 8008a42:	f001 fe69 	bl	800a718 <__pow5mult>
 8008a46:	4680      	mov	r8, r0
 8008a48:	2800      	cmp	r0, #0
 8008a4a:	f43f ae9b 	beq.w	8008784 <_strtod_l+0x43c>
 8008a4e:	4601      	mov	r1, r0
 8008a50:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008a52:	4648      	mov	r0, r9
 8008a54:	f001 fdca 	bl	800a5ec <__multiply>
 8008a58:	900c      	str	r0, [sp, #48]	; 0x30
 8008a5a:	2800      	cmp	r0, #0
 8008a5c:	f43f ae92 	beq.w	8008784 <_strtod_l+0x43c>
 8008a60:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008a62:	4648      	mov	r0, r9
 8008a64:	f001 fcdb 	bl	800a41e <_Bfree>
 8008a68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008a6a:	931c      	str	r3, [sp, #112]	; 0x70
 8008a6c:	2e00      	cmp	r6, #0
 8008a6e:	dc7a      	bgt.n	8008b66 <_strtod_l+0x81e>
 8008a70:	9b06      	ldr	r3, [sp, #24]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	dd08      	ble.n	8008a88 <_strtod_l+0x740>
 8008a76:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008a78:	9905      	ldr	r1, [sp, #20]
 8008a7a:	4648      	mov	r0, r9
 8008a7c:	f001 fe4c 	bl	800a718 <__pow5mult>
 8008a80:	9005      	str	r0, [sp, #20]
 8008a82:	2800      	cmp	r0, #0
 8008a84:	f43f ae7e 	beq.w	8008784 <_strtod_l+0x43c>
 8008a88:	2d00      	cmp	r5, #0
 8008a8a:	dd08      	ble.n	8008a9e <_strtod_l+0x756>
 8008a8c:	462a      	mov	r2, r5
 8008a8e:	9905      	ldr	r1, [sp, #20]
 8008a90:	4648      	mov	r0, r9
 8008a92:	f001 fe8f 	bl	800a7b4 <__lshift>
 8008a96:	9005      	str	r0, [sp, #20]
 8008a98:	2800      	cmp	r0, #0
 8008a9a:	f43f ae73 	beq.w	8008784 <_strtod_l+0x43c>
 8008a9e:	2f00      	cmp	r7, #0
 8008aa0:	dd08      	ble.n	8008ab4 <_strtod_l+0x76c>
 8008aa2:	4641      	mov	r1, r8
 8008aa4:	463a      	mov	r2, r7
 8008aa6:	4648      	mov	r0, r9
 8008aa8:	f001 fe84 	bl	800a7b4 <__lshift>
 8008aac:	4680      	mov	r8, r0
 8008aae:	2800      	cmp	r0, #0
 8008ab0:	f43f ae68 	beq.w	8008784 <_strtod_l+0x43c>
 8008ab4:	9a05      	ldr	r2, [sp, #20]
 8008ab6:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008ab8:	4648      	mov	r0, r9
 8008aba:	f001 fee9 	bl	800a890 <__mdiff>
 8008abe:	4604      	mov	r4, r0
 8008ac0:	2800      	cmp	r0, #0
 8008ac2:	f43f ae5f 	beq.w	8008784 <_strtod_l+0x43c>
 8008ac6:	68c3      	ldr	r3, [r0, #12]
 8008ac8:	930c      	str	r3, [sp, #48]	; 0x30
 8008aca:	2300      	movs	r3, #0
 8008acc:	60c3      	str	r3, [r0, #12]
 8008ace:	4641      	mov	r1, r8
 8008ad0:	f001 fec4 	bl	800a85c <__mcmp>
 8008ad4:	2800      	cmp	r0, #0
 8008ad6:	da55      	bge.n	8008b84 <_strtod_l+0x83c>
 8008ad8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008ada:	b9e3      	cbnz	r3, 8008b16 <_strtod_l+0x7ce>
 8008adc:	f1ba 0f00 	cmp.w	sl, #0
 8008ae0:	d119      	bne.n	8008b16 <_strtod_l+0x7ce>
 8008ae2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008ae6:	b9b3      	cbnz	r3, 8008b16 <_strtod_l+0x7ce>
 8008ae8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008aec:	0d1b      	lsrs	r3, r3, #20
 8008aee:	051b      	lsls	r3, r3, #20
 8008af0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008af4:	d90f      	bls.n	8008b16 <_strtod_l+0x7ce>
 8008af6:	6963      	ldr	r3, [r4, #20]
 8008af8:	b913      	cbnz	r3, 8008b00 <_strtod_l+0x7b8>
 8008afa:	6923      	ldr	r3, [r4, #16]
 8008afc:	2b01      	cmp	r3, #1
 8008afe:	dd0a      	ble.n	8008b16 <_strtod_l+0x7ce>
 8008b00:	4621      	mov	r1, r4
 8008b02:	2201      	movs	r2, #1
 8008b04:	4648      	mov	r0, r9
 8008b06:	f001 fe55 	bl	800a7b4 <__lshift>
 8008b0a:	4641      	mov	r1, r8
 8008b0c:	4604      	mov	r4, r0
 8008b0e:	f001 fea5 	bl	800a85c <__mcmp>
 8008b12:	2800      	cmp	r0, #0
 8008b14:	dc67      	bgt.n	8008be6 <_strtod_l+0x89e>
 8008b16:	9b04      	ldr	r3, [sp, #16]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d171      	bne.n	8008c00 <_strtod_l+0x8b8>
 8008b1c:	e63d      	b.n	800879a <_strtod_l+0x452>
 8008b1e:	f018 0f01 	tst.w	r8, #1
 8008b22:	d004      	beq.n	8008b2e <_strtod_l+0x7e6>
 8008b24:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008b28:	f7f7 fd6e 	bl	8000608 <__aeabi_dmul>
 8008b2c:	2301      	movs	r3, #1
 8008b2e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008b32:	3508      	adds	r5, #8
 8008b34:	e6e5      	b.n	8008902 <_strtod_l+0x5ba>
 8008b36:	f04f 32ff 	mov.w	r2, #4294967295
 8008b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8008b3e:	ea03 0a0a 	and.w	sl, r3, sl
 8008b42:	e6ff      	b.n	8008944 <_strtod_l+0x5fc>
 8008b44:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8008b48:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8008b4c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8008b50:	36e2      	adds	r6, #226	; 0xe2
 8008b52:	fa01 f306 	lsl.w	r3, r1, r6
 8008b56:	930a      	str	r3, [sp, #40]	; 0x28
 8008b58:	910f      	str	r1, [sp, #60]	; 0x3c
 8008b5a:	e75d      	b.n	8008a18 <_strtod_l+0x6d0>
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	930a      	str	r3, [sp, #40]	; 0x28
 8008b60:	2301      	movs	r3, #1
 8008b62:	930f      	str	r3, [sp, #60]	; 0x3c
 8008b64:	e758      	b.n	8008a18 <_strtod_l+0x6d0>
 8008b66:	4632      	mov	r2, r6
 8008b68:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008b6a:	4648      	mov	r0, r9
 8008b6c:	f001 fe22 	bl	800a7b4 <__lshift>
 8008b70:	901c      	str	r0, [sp, #112]	; 0x70
 8008b72:	2800      	cmp	r0, #0
 8008b74:	f47f af7c 	bne.w	8008a70 <_strtod_l+0x728>
 8008b78:	e604      	b.n	8008784 <_strtod_l+0x43c>
 8008b7a:	bf00      	nop
 8008b7c:	0800c388 	.word	0x0800c388
 8008b80:	fffffc02 	.word	0xfffffc02
 8008b84:	465d      	mov	r5, fp
 8008b86:	f040 8086 	bne.w	8008c96 <_strtod_l+0x94e>
 8008b8a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008b8c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008b90:	b32a      	cbz	r2, 8008bde <_strtod_l+0x896>
 8008b92:	4aaf      	ldr	r2, [pc, #700]	; (8008e50 <_strtod_l+0xb08>)
 8008b94:	4293      	cmp	r3, r2
 8008b96:	d153      	bne.n	8008c40 <_strtod_l+0x8f8>
 8008b98:	9b04      	ldr	r3, [sp, #16]
 8008b9a:	4650      	mov	r0, sl
 8008b9c:	b1d3      	cbz	r3, 8008bd4 <_strtod_l+0x88c>
 8008b9e:	4aad      	ldr	r2, [pc, #692]	; (8008e54 <_strtod_l+0xb0c>)
 8008ba0:	402a      	ands	r2, r5
 8008ba2:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8008ba6:	f04f 31ff 	mov.w	r1, #4294967295
 8008baa:	d816      	bhi.n	8008bda <_strtod_l+0x892>
 8008bac:	0d12      	lsrs	r2, r2, #20
 8008bae:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008bb2:	fa01 f303 	lsl.w	r3, r1, r3
 8008bb6:	4298      	cmp	r0, r3
 8008bb8:	d142      	bne.n	8008c40 <_strtod_l+0x8f8>
 8008bba:	4ba7      	ldr	r3, [pc, #668]	; (8008e58 <_strtod_l+0xb10>)
 8008bbc:	429d      	cmp	r5, r3
 8008bbe:	d102      	bne.n	8008bc6 <_strtod_l+0x87e>
 8008bc0:	3001      	adds	r0, #1
 8008bc2:	f43f addf 	beq.w	8008784 <_strtod_l+0x43c>
 8008bc6:	4ba3      	ldr	r3, [pc, #652]	; (8008e54 <_strtod_l+0xb0c>)
 8008bc8:	402b      	ands	r3, r5
 8008bca:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8008bce:	f04f 0a00 	mov.w	sl, #0
 8008bd2:	e7a0      	b.n	8008b16 <_strtod_l+0x7ce>
 8008bd4:	f04f 33ff 	mov.w	r3, #4294967295
 8008bd8:	e7ed      	b.n	8008bb6 <_strtod_l+0x86e>
 8008bda:	460b      	mov	r3, r1
 8008bdc:	e7eb      	b.n	8008bb6 <_strtod_l+0x86e>
 8008bde:	bb7b      	cbnz	r3, 8008c40 <_strtod_l+0x8f8>
 8008be0:	f1ba 0f00 	cmp.w	sl, #0
 8008be4:	d12c      	bne.n	8008c40 <_strtod_l+0x8f8>
 8008be6:	9904      	ldr	r1, [sp, #16]
 8008be8:	4a9a      	ldr	r2, [pc, #616]	; (8008e54 <_strtod_l+0xb0c>)
 8008bea:	465b      	mov	r3, fp
 8008bec:	b1f1      	cbz	r1, 8008c2c <_strtod_l+0x8e4>
 8008bee:	ea02 010b 	and.w	r1, r2, fp
 8008bf2:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008bf6:	dc19      	bgt.n	8008c2c <_strtod_l+0x8e4>
 8008bf8:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008bfc:	f77f ae5b 	ble.w	80088b6 <_strtod_l+0x56e>
 8008c00:	4a96      	ldr	r2, [pc, #600]	; (8008e5c <_strtod_l+0xb14>)
 8008c02:	2300      	movs	r3, #0
 8008c04:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8008c08:	4650      	mov	r0, sl
 8008c0a:	4659      	mov	r1, fp
 8008c0c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8008c10:	f7f7 fcfa 	bl	8000608 <__aeabi_dmul>
 8008c14:	4682      	mov	sl, r0
 8008c16:	468b      	mov	fp, r1
 8008c18:	2900      	cmp	r1, #0
 8008c1a:	f47f adbe 	bne.w	800879a <_strtod_l+0x452>
 8008c1e:	2800      	cmp	r0, #0
 8008c20:	f47f adbb 	bne.w	800879a <_strtod_l+0x452>
 8008c24:	2322      	movs	r3, #34	; 0x22
 8008c26:	f8c9 3000 	str.w	r3, [r9]
 8008c2a:	e5b6      	b.n	800879a <_strtod_l+0x452>
 8008c2c:	4013      	ands	r3, r2
 8008c2e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008c32:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008c36:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008c3a:	f04f 3aff 	mov.w	sl, #4294967295
 8008c3e:	e76a      	b.n	8008b16 <_strtod_l+0x7ce>
 8008c40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c42:	b193      	cbz	r3, 8008c6a <_strtod_l+0x922>
 8008c44:	422b      	tst	r3, r5
 8008c46:	f43f af66 	beq.w	8008b16 <_strtod_l+0x7ce>
 8008c4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008c4c:	9a04      	ldr	r2, [sp, #16]
 8008c4e:	4650      	mov	r0, sl
 8008c50:	4659      	mov	r1, fp
 8008c52:	b173      	cbz	r3, 8008c72 <_strtod_l+0x92a>
 8008c54:	f7ff fb5a 	bl	800830c <sulp>
 8008c58:	4602      	mov	r2, r0
 8008c5a:	460b      	mov	r3, r1
 8008c5c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008c60:	f7f7 fb1c 	bl	800029c <__adddf3>
 8008c64:	4682      	mov	sl, r0
 8008c66:	468b      	mov	fp, r1
 8008c68:	e755      	b.n	8008b16 <_strtod_l+0x7ce>
 8008c6a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008c6c:	ea13 0f0a 	tst.w	r3, sl
 8008c70:	e7e9      	b.n	8008c46 <_strtod_l+0x8fe>
 8008c72:	f7ff fb4b 	bl	800830c <sulp>
 8008c76:	4602      	mov	r2, r0
 8008c78:	460b      	mov	r3, r1
 8008c7a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008c7e:	f7f7 fb0b 	bl	8000298 <__aeabi_dsub>
 8008c82:	2200      	movs	r2, #0
 8008c84:	2300      	movs	r3, #0
 8008c86:	4682      	mov	sl, r0
 8008c88:	468b      	mov	fp, r1
 8008c8a:	f7f7 ff25 	bl	8000ad8 <__aeabi_dcmpeq>
 8008c8e:	2800      	cmp	r0, #0
 8008c90:	f47f ae11 	bne.w	80088b6 <_strtod_l+0x56e>
 8008c94:	e73f      	b.n	8008b16 <_strtod_l+0x7ce>
 8008c96:	4641      	mov	r1, r8
 8008c98:	4620      	mov	r0, r4
 8008c9a:	f001 ff1c 	bl	800aad6 <__ratio>
 8008c9e:	ec57 6b10 	vmov	r6, r7, d0
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008ca8:	ee10 0a10 	vmov	r0, s0
 8008cac:	4639      	mov	r1, r7
 8008cae:	f7f7 ff27 	bl	8000b00 <__aeabi_dcmple>
 8008cb2:	2800      	cmp	r0, #0
 8008cb4:	d077      	beq.n	8008da6 <_strtod_l+0xa5e>
 8008cb6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d04a      	beq.n	8008d52 <_strtod_l+0xa0a>
 8008cbc:	4b68      	ldr	r3, [pc, #416]	; (8008e60 <_strtod_l+0xb18>)
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8008cc4:	4f66      	ldr	r7, [pc, #408]	; (8008e60 <_strtod_l+0xb18>)
 8008cc6:	2600      	movs	r6, #0
 8008cc8:	4b62      	ldr	r3, [pc, #392]	; (8008e54 <_strtod_l+0xb0c>)
 8008cca:	402b      	ands	r3, r5
 8008ccc:	930f      	str	r3, [sp, #60]	; 0x3c
 8008cce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008cd0:	4b64      	ldr	r3, [pc, #400]	; (8008e64 <_strtod_l+0xb1c>)
 8008cd2:	429a      	cmp	r2, r3
 8008cd4:	f040 80ce 	bne.w	8008e74 <_strtod_l+0xb2c>
 8008cd8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008cdc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008ce0:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8008ce4:	ec4b ab10 	vmov	d0, sl, fp
 8008ce8:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8008cec:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008cf0:	f001 fe2c 	bl	800a94c <__ulp>
 8008cf4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008cf8:	ec53 2b10 	vmov	r2, r3, d0
 8008cfc:	f7f7 fc84 	bl	8000608 <__aeabi_dmul>
 8008d00:	4652      	mov	r2, sl
 8008d02:	465b      	mov	r3, fp
 8008d04:	f7f7 faca 	bl	800029c <__adddf3>
 8008d08:	460b      	mov	r3, r1
 8008d0a:	4952      	ldr	r1, [pc, #328]	; (8008e54 <_strtod_l+0xb0c>)
 8008d0c:	4a56      	ldr	r2, [pc, #344]	; (8008e68 <_strtod_l+0xb20>)
 8008d0e:	4019      	ands	r1, r3
 8008d10:	4291      	cmp	r1, r2
 8008d12:	4682      	mov	sl, r0
 8008d14:	d95b      	bls.n	8008dce <_strtod_l+0xa86>
 8008d16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d18:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8008d1c:	4293      	cmp	r3, r2
 8008d1e:	d103      	bne.n	8008d28 <_strtod_l+0x9e0>
 8008d20:	9b08      	ldr	r3, [sp, #32]
 8008d22:	3301      	adds	r3, #1
 8008d24:	f43f ad2e 	beq.w	8008784 <_strtod_l+0x43c>
 8008d28:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8008e58 <_strtod_l+0xb10>
 8008d2c:	f04f 3aff 	mov.w	sl, #4294967295
 8008d30:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008d32:	4648      	mov	r0, r9
 8008d34:	f001 fb73 	bl	800a41e <_Bfree>
 8008d38:	9905      	ldr	r1, [sp, #20]
 8008d3a:	4648      	mov	r0, r9
 8008d3c:	f001 fb6f 	bl	800a41e <_Bfree>
 8008d40:	4641      	mov	r1, r8
 8008d42:	4648      	mov	r0, r9
 8008d44:	f001 fb6b 	bl	800a41e <_Bfree>
 8008d48:	4621      	mov	r1, r4
 8008d4a:	4648      	mov	r0, r9
 8008d4c:	f001 fb67 	bl	800a41e <_Bfree>
 8008d50:	e619      	b.n	8008986 <_strtod_l+0x63e>
 8008d52:	f1ba 0f00 	cmp.w	sl, #0
 8008d56:	d11a      	bne.n	8008d8e <_strtod_l+0xa46>
 8008d58:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008d5c:	b9eb      	cbnz	r3, 8008d9a <_strtod_l+0xa52>
 8008d5e:	2200      	movs	r2, #0
 8008d60:	4b3f      	ldr	r3, [pc, #252]	; (8008e60 <_strtod_l+0xb18>)
 8008d62:	4630      	mov	r0, r6
 8008d64:	4639      	mov	r1, r7
 8008d66:	f7f7 fec1 	bl	8000aec <__aeabi_dcmplt>
 8008d6a:	b9c8      	cbnz	r0, 8008da0 <_strtod_l+0xa58>
 8008d6c:	4630      	mov	r0, r6
 8008d6e:	4639      	mov	r1, r7
 8008d70:	2200      	movs	r2, #0
 8008d72:	4b3e      	ldr	r3, [pc, #248]	; (8008e6c <_strtod_l+0xb24>)
 8008d74:	f7f7 fc48 	bl	8000608 <__aeabi_dmul>
 8008d78:	4606      	mov	r6, r0
 8008d7a:	460f      	mov	r7, r1
 8008d7c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8008d80:	9618      	str	r6, [sp, #96]	; 0x60
 8008d82:	9319      	str	r3, [sp, #100]	; 0x64
 8008d84:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8008d88:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8008d8c:	e79c      	b.n	8008cc8 <_strtod_l+0x980>
 8008d8e:	f1ba 0f01 	cmp.w	sl, #1
 8008d92:	d102      	bne.n	8008d9a <_strtod_l+0xa52>
 8008d94:	2d00      	cmp	r5, #0
 8008d96:	f43f ad8e 	beq.w	80088b6 <_strtod_l+0x56e>
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	4b34      	ldr	r3, [pc, #208]	; (8008e70 <_strtod_l+0xb28>)
 8008d9e:	e78f      	b.n	8008cc0 <_strtod_l+0x978>
 8008da0:	2600      	movs	r6, #0
 8008da2:	4f32      	ldr	r7, [pc, #200]	; (8008e6c <_strtod_l+0xb24>)
 8008da4:	e7ea      	b.n	8008d7c <_strtod_l+0xa34>
 8008da6:	4b31      	ldr	r3, [pc, #196]	; (8008e6c <_strtod_l+0xb24>)
 8008da8:	4630      	mov	r0, r6
 8008daa:	4639      	mov	r1, r7
 8008dac:	2200      	movs	r2, #0
 8008dae:	f7f7 fc2b 	bl	8000608 <__aeabi_dmul>
 8008db2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008db4:	4606      	mov	r6, r0
 8008db6:	460f      	mov	r7, r1
 8008db8:	b933      	cbnz	r3, 8008dc8 <_strtod_l+0xa80>
 8008dba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008dbe:	9010      	str	r0, [sp, #64]	; 0x40
 8008dc0:	9311      	str	r3, [sp, #68]	; 0x44
 8008dc2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008dc6:	e7df      	b.n	8008d88 <_strtod_l+0xa40>
 8008dc8:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8008dcc:	e7f9      	b.n	8008dc2 <_strtod_l+0xa7a>
 8008dce:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8008dd2:	9b04      	ldr	r3, [sp, #16]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d1ab      	bne.n	8008d30 <_strtod_l+0x9e8>
 8008dd8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008ddc:	0d1b      	lsrs	r3, r3, #20
 8008dde:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008de0:	051b      	lsls	r3, r3, #20
 8008de2:	429a      	cmp	r2, r3
 8008de4:	465d      	mov	r5, fp
 8008de6:	d1a3      	bne.n	8008d30 <_strtod_l+0x9e8>
 8008de8:	4639      	mov	r1, r7
 8008dea:	4630      	mov	r0, r6
 8008dec:	f7f7 febc 	bl	8000b68 <__aeabi_d2iz>
 8008df0:	f7f7 fba0 	bl	8000534 <__aeabi_i2d>
 8008df4:	460b      	mov	r3, r1
 8008df6:	4602      	mov	r2, r0
 8008df8:	4639      	mov	r1, r7
 8008dfa:	4630      	mov	r0, r6
 8008dfc:	f7f7 fa4c 	bl	8000298 <__aeabi_dsub>
 8008e00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008e02:	4606      	mov	r6, r0
 8008e04:	460f      	mov	r7, r1
 8008e06:	b933      	cbnz	r3, 8008e16 <_strtod_l+0xace>
 8008e08:	f1ba 0f00 	cmp.w	sl, #0
 8008e0c:	d103      	bne.n	8008e16 <_strtod_l+0xace>
 8008e0e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8008e12:	2d00      	cmp	r5, #0
 8008e14:	d06d      	beq.n	8008ef2 <_strtod_l+0xbaa>
 8008e16:	a30a      	add	r3, pc, #40	; (adr r3, 8008e40 <_strtod_l+0xaf8>)
 8008e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e1c:	4630      	mov	r0, r6
 8008e1e:	4639      	mov	r1, r7
 8008e20:	f7f7 fe64 	bl	8000aec <__aeabi_dcmplt>
 8008e24:	2800      	cmp	r0, #0
 8008e26:	f47f acb8 	bne.w	800879a <_strtod_l+0x452>
 8008e2a:	a307      	add	r3, pc, #28	; (adr r3, 8008e48 <_strtod_l+0xb00>)
 8008e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e30:	4630      	mov	r0, r6
 8008e32:	4639      	mov	r1, r7
 8008e34:	f7f7 fe78 	bl	8000b28 <__aeabi_dcmpgt>
 8008e38:	2800      	cmp	r0, #0
 8008e3a:	f43f af79 	beq.w	8008d30 <_strtod_l+0x9e8>
 8008e3e:	e4ac      	b.n	800879a <_strtod_l+0x452>
 8008e40:	94a03595 	.word	0x94a03595
 8008e44:	3fdfffff 	.word	0x3fdfffff
 8008e48:	35afe535 	.word	0x35afe535
 8008e4c:	3fe00000 	.word	0x3fe00000
 8008e50:	000fffff 	.word	0x000fffff
 8008e54:	7ff00000 	.word	0x7ff00000
 8008e58:	7fefffff 	.word	0x7fefffff
 8008e5c:	39500000 	.word	0x39500000
 8008e60:	3ff00000 	.word	0x3ff00000
 8008e64:	7fe00000 	.word	0x7fe00000
 8008e68:	7c9fffff 	.word	0x7c9fffff
 8008e6c:	3fe00000 	.word	0x3fe00000
 8008e70:	bff00000 	.word	0xbff00000
 8008e74:	9b04      	ldr	r3, [sp, #16]
 8008e76:	b333      	cbz	r3, 8008ec6 <_strtod_l+0xb7e>
 8008e78:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008e7a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008e7e:	d822      	bhi.n	8008ec6 <_strtod_l+0xb7e>
 8008e80:	a327      	add	r3, pc, #156	; (adr r3, 8008f20 <_strtod_l+0xbd8>)
 8008e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e86:	4630      	mov	r0, r6
 8008e88:	4639      	mov	r1, r7
 8008e8a:	f7f7 fe39 	bl	8000b00 <__aeabi_dcmple>
 8008e8e:	b1a0      	cbz	r0, 8008eba <_strtod_l+0xb72>
 8008e90:	4639      	mov	r1, r7
 8008e92:	4630      	mov	r0, r6
 8008e94:	f7f7 fe90 	bl	8000bb8 <__aeabi_d2uiz>
 8008e98:	2800      	cmp	r0, #0
 8008e9a:	bf08      	it	eq
 8008e9c:	2001      	moveq	r0, #1
 8008e9e:	f7f7 fb39 	bl	8000514 <__aeabi_ui2d>
 8008ea2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008ea4:	4606      	mov	r6, r0
 8008ea6:	460f      	mov	r7, r1
 8008ea8:	bb03      	cbnz	r3, 8008eec <_strtod_l+0xba4>
 8008eaa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008eae:	9012      	str	r0, [sp, #72]	; 0x48
 8008eb0:	9313      	str	r3, [sp, #76]	; 0x4c
 8008eb2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8008eb6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8008eba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ebc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008ebe:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008ec2:	1a9b      	subs	r3, r3, r2
 8008ec4:	930b      	str	r3, [sp, #44]	; 0x2c
 8008ec6:	ed9d 0b08 	vldr	d0, [sp, #32]
 8008eca:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8008ece:	f001 fd3d 	bl	800a94c <__ulp>
 8008ed2:	4650      	mov	r0, sl
 8008ed4:	ec53 2b10 	vmov	r2, r3, d0
 8008ed8:	4659      	mov	r1, fp
 8008eda:	f7f7 fb95 	bl	8000608 <__aeabi_dmul>
 8008ede:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008ee2:	f7f7 f9db 	bl	800029c <__adddf3>
 8008ee6:	4682      	mov	sl, r0
 8008ee8:	468b      	mov	fp, r1
 8008eea:	e772      	b.n	8008dd2 <_strtod_l+0xa8a>
 8008eec:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8008ef0:	e7df      	b.n	8008eb2 <_strtod_l+0xb6a>
 8008ef2:	a30d      	add	r3, pc, #52	; (adr r3, 8008f28 <_strtod_l+0xbe0>)
 8008ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ef8:	f7f7 fdf8 	bl	8000aec <__aeabi_dcmplt>
 8008efc:	e79c      	b.n	8008e38 <_strtod_l+0xaf0>
 8008efe:	2300      	movs	r3, #0
 8008f00:	930d      	str	r3, [sp, #52]	; 0x34
 8008f02:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008f04:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008f06:	6013      	str	r3, [r2, #0]
 8008f08:	f7ff ba61 	b.w	80083ce <_strtod_l+0x86>
 8008f0c:	2b65      	cmp	r3, #101	; 0x65
 8008f0e:	f04f 0200 	mov.w	r2, #0
 8008f12:	f43f ab4e 	beq.w	80085b2 <_strtod_l+0x26a>
 8008f16:	2101      	movs	r1, #1
 8008f18:	4614      	mov	r4, r2
 8008f1a:	9104      	str	r1, [sp, #16]
 8008f1c:	f7ff bacb 	b.w	80084b6 <_strtod_l+0x16e>
 8008f20:	ffc00000 	.word	0xffc00000
 8008f24:	41dfffff 	.word	0x41dfffff
 8008f28:	94a03595 	.word	0x94a03595
 8008f2c:	3fcfffff 	.word	0x3fcfffff

08008f30 <_strtod_r>:
 8008f30:	4b05      	ldr	r3, [pc, #20]	; (8008f48 <_strtod_r+0x18>)
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	b410      	push	{r4}
 8008f36:	6a1b      	ldr	r3, [r3, #32]
 8008f38:	4c04      	ldr	r4, [pc, #16]	; (8008f4c <_strtod_r+0x1c>)
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	bf08      	it	eq
 8008f3e:	4623      	moveq	r3, r4
 8008f40:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f44:	f7ff ba00 	b.w	8008348 <_strtod_l>
 8008f48:	20000030 	.word	0x20000030
 8008f4c:	20000094 	.word	0x20000094

08008f50 <_strtol_l.isra.0>:
 8008f50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f54:	4680      	mov	r8, r0
 8008f56:	4689      	mov	r9, r1
 8008f58:	4692      	mov	sl, r2
 8008f5a:	461e      	mov	r6, r3
 8008f5c:	460f      	mov	r7, r1
 8008f5e:	463d      	mov	r5, r7
 8008f60:	9808      	ldr	r0, [sp, #32]
 8008f62:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008f66:	f001 f9ed 	bl	800a344 <__locale_ctype_ptr_l>
 8008f6a:	4420      	add	r0, r4
 8008f6c:	7843      	ldrb	r3, [r0, #1]
 8008f6e:	f013 0308 	ands.w	r3, r3, #8
 8008f72:	d132      	bne.n	8008fda <_strtol_l.isra.0+0x8a>
 8008f74:	2c2d      	cmp	r4, #45	; 0x2d
 8008f76:	d132      	bne.n	8008fde <_strtol_l.isra.0+0x8e>
 8008f78:	787c      	ldrb	r4, [r7, #1]
 8008f7a:	1cbd      	adds	r5, r7, #2
 8008f7c:	2201      	movs	r2, #1
 8008f7e:	2e00      	cmp	r6, #0
 8008f80:	d05d      	beq.n	800903e <_strtol_l.isra.0+0xee>
 8008f82:	2e10      	cmp	r6, #16
 8008f84:	d109      	bne.n	8008f9a <_strtol_l.isra.0+0x4a>
 8008f86:	2c30      	cmp	r4, #48	; 0x30
 8008f88:	d107      	bne.n	8008f9a <_strtol_l.isra.0+0x4a>
 8008f8a:	782b      	ldrb	r3, [r5, #0]
 8008f8c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008f90:	2b58      	cmp	r3, #88	; 0x58
 8008f92:	d14f      	bne.n	8009034 <_strtol_l.isra.0+0xe4>
 8008f94:	786c      	ldrb	r4, [r5, #1]
 8008f96:	2610      	movs	r6, #16
 8008f98:	3502      	adds	r5, #2
 8008f9a:	2a00      	cmp	r2, #0
 8008f9c:	bf14      	ite	ne
 8008f9e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8008fa2:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8008fa6:	2700      	movs	r7, #0
 8008fa8:	fbb1 fcf6 	udiv	ip, r1, r6
 8008fac:	4638      	mov	r0, r7
 8008fae:	fb06 1e1c 	mls	lr, r6, ip, r1
 8008fb2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8008fb6:	2b09      	cmp	r3, #9
 8008fb8:	d817      	bhi.n	8008fea <_strtol_l.isra.0+0x9a>
 8008fba:	461c      	mov	r4, r3
 8008fbc:	42a6      	cmp	r6, r4
 8008fbe:	dd23      	ble.n	8009008 <_strtol_l.isra.0+0xb8>
 8008fc0:	1c7b      	adds	r3, r7, #1
 8008fc2:	d007      	beq.n	8008fd4 <_strtol_l.isra.0+0x84>
 8008fc4:	4584      	cmp	ip, r0
 8008fc6:	d31c      	bcc.n	8009002 <_strtol_l.isra.0+0xb2>
 8008fc8:	d101      	bne.n	8008fce <_strtol_l.isra.0+0x7e>
 8008fca:	45a6      	cmp	lr, r4
 8008fcc:	db19      	blt.n	8009002 <_strtol_l.isra.0+0xb2>
 8008fce:	fb00 4006 	mla	r0, r0, r6, r4
 8008fd2:	2701      	movs	r7, #1
 8008fd4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008fd8:	e7eb      	b.n	8008fb2 <_strtol_l.isra.0+0x62>
 8008fda:	462f      	mov	r7, r5
 8008fdc:	e7bf      	b.n	8008f5e <_strtol_l.isra.0+0xe>
 8008fde:	2c2b      	cmp	r4, #43	; 0x2b
 8008fe0:	bf04      	itt	eq
 8008fe2:	1cbd      	addeq	r5, r7, #2
 8008fe4:	787c      	ldrbeq	r4, [r7, #1]
 8008fe6:	461a      	mov	r2, r3
 8008fe8:	e7c9      	b.n	8008f7e <_strtol_l.isra.0+0x2e>
 8008fea:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8008fee:	2b19      	cmp	r3, #25
 8008ff0:	d801      	bhi.n	8008ff6 <_strtol_l.isra.0+0xa6>
 8008ff2:	3c37      	subs	r4, #55	; 0x37
 8008ff4:	e7e2      	b.n	8008fbc <_strtol_l.isra.0+0x6c>
 8008ff6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8008ffa:	2b19      	cmp	r3, #25
 8008ffc:	d804      	bhi.n	8009008 <_strtol_l.isra.0+0xb8>
 8008ffe:	3c57      	subs	r4, #87	; 0x57
 8009000:	e7dc      	b.n	8008fbc <_strtol_l.isra.0+0x6c>
 8009002:	f04f 37ff 	mov.w	r7, #4294967295
 8009006:	e7e5      	b.n	8008fd4 <_strtol_l.isra.0+0x84>
 8009008:	1c7b      	adds	r3, r7, #1
 800900a:	d108      	bne.n	800901e <_strtol_l.isra.0+0xce>
 800900c:	2322      	movs	r3, #34	; 0x22
 800900e:	f8c8 3000 	str.w	r3, [r8]
 8009012:	4608      	mov	r0, r1
 8009014:	f1ba 0f00 	cmp.w	sl, #0
 8009018:	d107      	bne.n	800902a <_strtol_l.isra.0+0xda>
 800901a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800901e:	b102      	cbz	r2, 8009022 <_strtol_l.isra.0+0xd2>
 8009020:	4240      	negs	r0, r0
 8009022:	f1ba 0f00 	cmp.w	sl, #0
 8009026:	d0f8      	beq.n	800901a <_strtol_l.isra.0+0xca>
 8009028:	b10f      	cbz	r7, 800902e <_strtol_l.isra.0+0xde>
 800902a:	f105 39ff 	add.w	r9, r5, #4294967295
 800902e:	f8ca 9000 	str.w	r9, [sl]
 8009032:	e7f2      	b.n	800901a <_strtol_l.isra.0+0xca>
 8009034:	2430      	movs	r4, #48	; 0x30
 8009036:	2e00      	cmp	r6, #0
 8009038:	d1af      	bne.n	8008f9a <_strtol_l.isra.0+0x4a>
 800903a:	2608      	movs	r6, #8
 800903c:	e7ad      	b.n	8008f9a <_strtol_l.isra.0+0x4a>
 800903e:	2c30      	cmp	r4, #48	; 0x30
 8009040:	d0a3      	beq.n	8008f8a <_strtol_l.isra.0+0x3a>
 8009042:	260a      	movs	r6, #10
 8009044:	e7a9      	b.n	8008f9a <_strtol_l.isra.0+0x4a>
	...

08009048 <_strtol_r>:
 8009048:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800904a:	4c06      	ldr	r4, [pc, #24]	; (8009064 <_strtol_r+0x1c>)
 800904c:	4d06      	ldr	r5, [pc, #24]	; (8009068 <_strtol_r+0x20>)
 800904e:	6824      	ldr	r4, [r4, #0]
 8009050:	6a24      	ldr	r4, [r4, #32]
 8009052:	2c00      	cmp	r4, #0
 8009054:	bf08      	it	eq
 8009056:	462c      	moveq	r4, r5
 8009058:	9400      	str	r4, [sp, #0]
 800905a:	f7ff ff79 	bl	8008f50 <_strtol_l.isra.0>
 800905e:	b003      	add	sp, #12
 8009060:	bd30      	pop	{r4, r5, pc}
 8009062:	bf00      	nop
 8009064:	20000030 	.word	0x20000030
 8009068:	20000094 	.word	0x20000094

0800906c <quorem>:
 800906c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009070:	6903      	ldr	r3, [r0, #16]
 8009072:	690c      	ldr	r4, [r1, #16]
 8009074:	42a3      	cmp	r3, r4
 8009076:	4680      	mov	r8, r0
 8009078:	f2c0 8082 	blt.w	8009180 <quorem+0x114>
 800907c:	3c01      	subs	r4, #1
 800907e:	f101 0714 	add.w	r7, r1, #20
 8009082:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8009086:	f100 0614 	add.w	r6, r0, #20
 800908a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800908e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8009092:	eb06 030c 	add.w	r3, r6, ip
 8009096:	3501      	adds	r5, #1
 8009098:	eb07 090c 	add.w	r9, r7, ip
 800909c:	9301      	str	r3, [sp, #4]
 800909e:	fbb0 f5f5 	udiv	r5, r0, r5
 80090a2:	b395      	cbz	r5, 800910a <quorem+0x9e>
 80090a4:	f04f 0a00 	mov.w	sl, #0
 80090a8:	4638      	mov	r0, r7
 80090aa:	46b6      	mov	lr, r6
 80090ac:	46d3      	mov	fp, sl
 80090ae:	f850 2b04 	ldr.w	r2, [r0], #4
 80090b2:	b293      	uxth	r3, r2
 80090b4:	fb05 a303 	mla	r3, r5, r3, sl
 80090b8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80090bc:	b29b      	uxth	r3, r3
 80090be:	ebab 0303 	sub.w	r3, fp, r3
 80090c2:	0c12      	lsrs	r2, r2, #16
 80090c4:	f8de b000 	ldr.w	fp, [lr]
 80090c8:	fb05 a202 	mla	r2, r5, r2, sl
 80090cc:	fa13 f38b 	uxtah	r3, r3, fp
 80090d0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80090d4:	fa1f fb82 	uxth.w	fp, r2
 80090d8:	f8de 2000 	ldr.w	r2, [lr]
 80090dc:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80090e0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80090e4:	b29b      	uxth	r3, r3
 80090e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80090ea:	4581      	cmp	r9, r0
 80090ec:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80090f0:	f84e 3b04 	str.w	r3, [lr], #4
 80090f4:	d2db      	bcs.n	80090ae <quorem+0x42>
 80090f6:	f856 300c 	ldr.w	r3, [r6, ip]
 80090fa:	b933      	cbnz	r3, 800910a <quorem+0x9e>
 80090fc:	9b01      	ldr	r3, [sp, #4]
 80090fe:	3b04      	subs	r3, #4
 8009100:	429e      	cmp	r6, r3
 8009102:	461a      	mov	r2, r3
 8009104:	d330      	bcc.n	8009168 <quorem+0xfc>
 8009106:	f8c8 4010 	str.w	r4, [r8, #16]
 800910a:	4640      	mov	r0, r8
 800910c:	f001 fba6 	bl	800a85c <__mcmp>
 8009110:	2800      	cmp	r0, #0
 8009112:	db25      	blt.n	8009160 <quorem+0xf4>
 8009114:	3501      	adds	r5, #1
 8009116:	4630      	mov	r0, r6
 8009118:	f04f 0c00 	mov.w	ip, #0
 800911c:	f857 2b04 	ldr.w	r2, [r7], #4
 8009120:	f8d0 e000 	ldr.w	lr, [r0]
 8009124:	b293      	uxth	r3, r2
 8009126:	ebac 0303 	sub.w	r3, ip, r3
 800912a:	0c12      	lsrs	r2, r2, #16
 800912c:	fa13 f38e 	uxtah	r3, r3, lr
 8009130:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009134:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009138:	b29b      	uxth	r3, r3
 800913a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800913e:	45b9      	cmp	r9, r7
 8009140:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009144:	f840 3b04 	str.w	r3, [r0], #4
 8009148:	d2e8      	bcs.n	800911c <quorem+0xb0>
 800914a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800914e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8009152:	b92a      	cbnz	r2, 8009160 <quorem+0xf4>
 8009154:	3b04      	subs	r3, #4
 8009156:	429e      	cmp	r6, r3
 8009158:	461a      	mov	r2, r3
 800915a:	d30b      	bcc.n	8009174 <quorem+0x108>
 800915c:	f8c8 4010 	str.w	r4, [r8, #16]
 8009160:	4628      	mov	r0, r5
 8009162:	b003      	add	sp, #12
 8009164:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009168:	6812      	ldr	r2, [r2, #0]
 800916a:	3b04      	subs	r3, #4
 800916c:	2a00      	cmp	r2, #0
 800916e:	d1ca      	bne.n	8009106 <quorem+0x9a>
 8009170:	3c01      	subs	r4, #1
 8009172:	e7c5      	b.n	8009100 <quorem+0x94>
 8009174:	6812      	ldr	r2, [r2, #0]
 8009176:	3b04      	subs	r3, #4
 8009178:	2a00      	cmp	r2, #0
 800917a:	d1ef      	bne.n	800915c <quorem+0xf0>
 800917c:	3c01      	subs	r4, #1
 800917e:	e7ea      	b.n	8009156 <quorem+0xea>
 8009180:	2000      	movs	r0, #0
 8009182:	e7ee      	b.n	8009162 <quorem+0xf6>
 8009184:	0000      	movs	r0, r0
	...

08009188 <_dtoa_r>:
 8009188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800918c:	ec57 6b10 	vmov	r6, r7, d0
 8009190:	b097      	sub	sp, #92	; 0x5c
 8009192:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009194:	9106      	str	r1, [sp, #24]
 8009196:	4604      	mov	r4, r0
 8009198:	920b      	str	r2, [sp, #44]	; 0x2c
 800919a:	9312      	str	r3, [sp, #72]	; 0x48
 800919c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80091a0:	e9cd 6700 	strd	r6, r7, [sp]
 80091a4:	b93d      	cbnz	r5, 80091b6 <_dtoa_r+0x2e>
 80091a6:	2010      	movs	r0, #16
 80091a8:	f001 f8e0 	bl	800a36c <malloc>
 80091ac:	6260      	str	r0, [r4, #36]	; 0x24
 80091ae:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80091b2:	6005      	str	r5, [r0, #0]
 80091b4:	60c5      	str	r5, [r0, #12]
 80091b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80091b8:	6819      	ldr	r1, [r3, #0]
 80091ba:	b151      	cbz	r1, 80091d2 <_dtoa_r+0x4a>
 80091bc:	685a      	ldr	r2, [r3, #4]
 80091be:	604a      	str	r2, [r1, #4]
 80091c0:	2301      	movs	r3, #1
 80091c2:	4093      	lsls	r3, r2
 80091c4:	608b      	str	r3, [r1, #8]
 80091c6:	4620      	mov	r0, r4
 80091c8:	f001 f929 	bl	800a41e <_Bfree>
 80091cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80091ce:	2200      	movs	r2, #0
 80091d0:	601a      	str	r2, [r3, #0]
 80091d2:	1e3b      	subs	r3, r7, #0
 80091d4:	bfbb      	ittet	lt
 80091d6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80091da:	9301      	strlt	r3, [sp, #4]
 80091dc:	2300      	movge	r3, #0
 80091de:	2201      	movlt	r2, #1
 80091e0:	bfac      	ite	ge
 80091e2:	f8c8 3000 	strge.w	r3, [r8]
 80091e6:	f8c8 2000 	strlt.w	r2, [r8]
 80091ea:	4baf      	ldr	r3, [pc, #700]	; (80094a8 <_dtoa_r+0x320>)
 80091ec:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80091f0:	ea33 0308 	bics.w	r3, r3, r8
 80091f4:	d114      	bne.n	8009220 <_dtoa_r+0x98>
 80091f6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80091f8:	f242 730f 	movw	r3, #9999	; 0x270f
 80091fc:	6013      	str	r3, [r2, #0]
 80091fe:	9b00      	ldr	r3, [sp, #0]
 8009200:	b923      	cbnz	r3, 800920c <_dtoa_r+0x84>
 8009202:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8009206:	2800      	cmp	r0, #0
 8009208:	f000 8542 	beq.w	8009c90 <_dtoa_r+0xb08>
 800920c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800920e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80094bc <_dtoa_r+0x334>
 8009212:	2b00      	cmp	r3, #0
 8009214:	f000 8544 	beq.w	8009ca0 <_dtoa_r+0xb18>
 8009218:	f10b 0303 	add.w	r3, fp, #3
 800921c:	f000 bd3e 	b.w	8009c9c <_dtoa_r+0xb14>
 8009220:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009224:	2200      	movs	r2, #0
 8009226:	2300      	movs	r3, #0
 8009228:	4630      	mov	r0, r6
 800922a:	4639      	mov	r1, r7
 800922c:	f7f7 fc54 	bl	8000ad8 <__aeabi_dcmpeq>
 8009230:	4681      	mov	r9, r0
 8009232:	b168      	cbz	r0, 8009250 <_dtoa_r+0xc8>
 8009234:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009236:	2301      	movs	r3, #1
 8009238:	6013      	str	r3, [r2, #0]
 800923a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800923c:	2b00      	cmp	r3, #0
 800923e:	f000 8524 	beq.w	8009c8a <_dtoa_r+0xb02>
 8009242:	4b9a      	ldr	r3, [pc, #616]	; (80094ac <_dtoa_r+0x324>)
 8009244:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009246:	f103 3bff 	add.w	fp, r3, #4294967295
 800924a:	6013      	str	r3, [r2, #0]
 800924c:	f000 bd28 	b.w	8009ca0 <_dtoa_r+0xb18>
 8009250:	aa14      	add	r2, sp, #80	; 0x50
 8009252:	a915      	add	r1, sp, #84	; 0x54
 8009254:	ec47 6b10 	vmov	d0, r6, r7
 8009258:	4620      	mov	r0, r4
 800925a:	f001 fbed 	bl	800aa38 <__d2b>
 800925e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8009262:	9004      	str	r0, [sp, #16]
 8009264:	2d00      	cmp	r5, #0
 8009266:	d07c      	beq.n	8009362 <_dtoa_r+0x1da>
 8009268:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800926c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8009270:	46b2      	mov	sl, r6
 8009272:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8009276:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800927a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800927e:	2200      	movs	r2, #0
 8009280:	4b8b      	ldr	r3, [pc, #556]	; (80094b0 <_dtoa_r+0x328>)
 8009282:	4650      	mov	r0, sl
 8009284:	4659      	mov	r1, fp
 8009286:	f7f7 f807 	bl	8000298 <__aeabi_dsub>
 800928a:	a381      	add	r3, pc, #516	; (adr r3, 8009490 <_dtoa_r+0x308>)
 800928c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009290:	f7f7 f9ba 	bl	8000608 <__aeabi_dmul>
 8009294:	a380      	add	r3, pc, #512	; (adr r3, 8009498 <_dtoa_r+0x310>)
 8009296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800929a:	f7f6 ffff 	bl	800029c <__adddf3>
 800929e:	4606      	mov	r6, r0
 80092a0:	4628      	mov	r0, r5
 80092a2:	460f      	mov	r7, r1
 80092a4:	f7f7 f946 	bl	8000534 <__aeabi_i2d>
 80092a8:	a37d      	add	r3, pc, #500	; (adr r3, 80094a0 <_dtoa_r+0x318>)
 80092aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092ae:	f7f7 f9ab 	bl	8000608 <__aeabi_dmul>
 80092b2:	4602      	mov	r2, r0
 80092b4:	460b      	mov	r3, r1
 80092b6:	4630      	mov	r0, r6
 80092b8:	4639      	mov	r1, r7
 80092ba:	f7f6 ffef 	bl	800029c <__adddf3>
 80092be:	4606      	mov	r6, r0
 80092c0:	460f      	mov	r7, r1
 80092c2:	f7f7 fc51 	bl	8000b68 <__aeabi_d2iz>
 80092c6:	2200      	movs	r2, #0
 80092c8:	4682      	mov	sl, r0
 80092ca:	2300      	movs	r3, #0
 80092cc:	4630      	mov	r0, r6
 80092ce:	4639      	mov	r1, r7
 80092d0:	f7f7 fc0c 	bl	8000aec <__aeabi_dcmplt>
 80092d4:	b148      	cbz	r0, 80092ea <_dtoa_r+0x162>
 80092d6:	4650      	mov	r0, sl
 80092d8:	f7f7 f92c 	bl	8000534 <__aeabi_i2d>
 80092dc:	4632      	mov	r2, r6
 80092de:	463b      	mov	r3, r7
 80092e0:	f7f7 fbfa 	bl	8000ad8 <__aeabi_dcmpeq>
 80092e4:	b908      	cbnz	r0, 80092ea <_dtoa_r+0x162>
 80092e6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80092ea:	f1ba 0f16 	cmp.w	sl, #22
 80092ee:	d859      	bhi.n	80093a4 <_dtoa_r+0x21c>
 80092f0:	4970      	ldr	r1, [pc, #448]	; (80094b4 <_dtoa_r+0x32c>)
 80092f2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80092f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80092fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80092fe:	f7f7 fc13 	bl	8000b28 <__aeabi_dcmpgt>
 8009302:	2800      	cmp	r0, #0
 8009304:	d050      	beq.n	80093a8 <_dtoa_r+0x220>
 8009306:	f10a 3aff 	add.w	sl, sl, #4294967295
 800930a:	2300      	movs	r3, #0
 800930c:	930f      	str	r3, [sp, #60]	; 0x3c
 800930e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009310:	1b5d      	subs	r5, r3, r5
 8009312:	f1b5 0801 	subs.w	r8, r5, #1
 8009316:	bf49      	itett	mi
 8009318:	f1c5 0301 	rsbmi	r3, r5, #1
 800931c:	2300      	movpl	r3, #0
 800931e:	9305      	strmi	r3, [sp, #20]
 8009320:	f04f 0800 	movmi.w	r8, #0
 8009324:	bf58      	it	pl
 8009326:	9305      	strpl	r3, [sp, #20]
 8009328:	f1ba 0f00 	cmp.w	sl, #0
 800932c:	db3e      	blt.n	80093ac <_dtoa_r+0x224>
 800932e:	2300      	movs	r3, #0
 8009330:	44d0      	add	r8, sl
 8009332:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8009336:	9307      	str	r3, [sp, #28]
 8009338:	9b06      	ldr	r3, [sp, #24]
 800933a:	2b09      	cmp	r3, #9
 800933c:	f200 8090 	bhi.w	8009460 <_dtoa_r+0x2d8>
 8009340:	2b05      	cmp	r3, #5
 8009342:	bfc4      	itt	gt
 8009344:	3b04      	subgt	r3, #4
 8009346:	9306      	strgt	r3, [sp, #24]
 8009348:	9b06      	ldr	r3, [sp, #24]
 800934a:	f1a3 0302 	sub.w	r3, r3, #2
 800934e:	bfcc      	ite	gt
 8009350:	2500      	movgt	r5, #0
 8009352:	2501      	movle	r5, #1
 8009354:	2b03      	cmp	r3, #3
 8009356:	f200 808f 	bhi.w	8009478 <_dtoa_r+0x2f0>
 800935a:	e8df f003 	tbb	[pc, r3]
 800935e:	7f7d      	.short	0x7f7d
 8009360:	7131      	.short	0x7131
 8009362:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8009366:	441d      	add	r5, r3
 8009368:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800936c:	2820      	cmp	r0, #32
 800936e:	dd13      	ble.n	8009398 <_dtoa_r+0x210>
 8009370:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8009374:	9b00      	ldr	r3, [sp, #0]
 8009376:	fa08 f800 	lsl.w	r8, r8, r0
 800937a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800937e:	fa23 f000 	lsr.w	r0, r3, r0
 8009382:	ea48 0000 	orr.w	r0, r8, r0
 8009386:	f7f7 f8c5 	bl	8000514 <__aeabi_ui2d>
 800938a:	2301      	movs	r3, #1
 800938c:	4682      	mov	sl, r0
 800938e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8009392:	3d01      	subs	r5, #1
 8009394:	9313      	str	r3, [sp, #76]	; 0x4c
 8009396:	e772      	b.n	800927e <_dtoa_r+0xf6>
 8009398:	9b00      	ldr	r3, [sp, #0]
 800939a:	f1c0 0020 	rsb	r0, r0, #32
 800939e:	fa03 f000 	lsl.w	r0, r3, r0
 80093a2:	e7f0      	b.n	8009386 <_dtoa_r+0x1fe>
 80093a4:	2301      	movs	r3, #1
 80093a6:	e7b1      	b.n	800930c <_dtoa_r+0x184>
 80093a8:	900f      	str	r0, [sp, #60]	; 0x3c
 80093aa:	e7b0      	b.n	800930e <_dtoa_r+0x186>
 80093ac:	9b05      	ldr	r3, [sp, #20]
 80093ae:	eba3 030a 	sub.w	r3, r3, sl
 80093b2:	9305      	str	r3, [sp, #20]
 80093b4:	f1ca 0300 	rsb	r3, sl, #0
 80093b8:	9307      	str	r3, [sp, #28]
 80093ba:	2300      	movs	r3, #0
 80093bc:	930e      	str	r3, [sp, #56]	; 0x38
 80093be:	e7bb      	b.n	8009338 <_dtoa_r+0x1b0>
 80093c0:	2301      	movs	r3, #1
 80093c2:	930a      	str	r3, [sp, #40]	; 0x28
 80093c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	dd59      	ble.n	800947e <_dtoa_r+0x2f6>
 80093ca:	9302      	str	r3, [sp, #8]
 80093cc:	4699      	mov	r9, r3
 80093ce:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80093d0:	2200      	movs	r2, #0
 80093d2:	6072      	str	r2, [r6, #4]
 80093d4:	2204      	movs	r2, #4
 80093d6:	f102 0014 	add.w	r0, r2, #20
 80093da:	4298      	cmp	r0, r3
 80093dc:	6871      	ldr	r1, [r6, #4]
 80093de:	d953      	bls.n	8009488 <_dtoa_r+0x300>
 80093e0:	4620      	mov	r0, r4
 80093e2:	f000 ffe8 	bl	800a3b6 <_Balloc>
 80093e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80093e8:	6030      	str	r0, [r6, #0]
 80093ea:	f1b9 0f0e 	cmp.w	r9, #14
 80093ee:	f8d3 b000 	ldr.w	fp, [r3]
 80093f2:	f200 80e6 	bhi.w	80095c2 <_dtoa_r+0x43a>
 80093f6:	2d00      	cmp	r5, #0
 80093f8:	f000 80e3 	beq.w	80095c2 <_dtoa_r+0x43a>
 80093fc:	ed9d 7b00 	vldr	d7, [sp]
 8009400:	f1ba 0f00 	cmp.w	sl, #0
 8009404:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8009408:	dd74      	ble.n	80094f4 <_dtoa_r+0x36c>
 800940a:	4a2a      	ldr	r2, [pc, #168]	; (80094b4 <_dtoa_r+0x32c>)
 800940c:	f00a 030f 	and.w	r3, sl, #15
 8009410:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009414:	ed93 7b00 	vldr	d7, [r3]
 8009418:	ea4f 162a 	mov.w	r6, sl, asr #4
 800941c:	06f0      	lsls	r0, r6, #27
 800941e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8009422:	d565      	bpl.n	80094f0 <_dtoa_r+0x368>
 8009424:	4b24      	ldr	r3, [pc, #144]	; (80094b8 <_dtoa_r+0x330>)
 8009426:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800942a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800942e:	f7f7 fa15 	bl	800085c <__aeabi_ddiv>
 8009432:	e9cd 0100 	strd	r0, r1, [sp]
 8009436:	f006 060f 	and.w	r6, r6, #15
 800943a:	2503      	movs	r5, #3
 800943c:	4f1e      	ldr	r7, [pc, #120]	; (80094b8 <_dtoa_r+0x330>)
 800943e:	e04c      	b.n	80094da <_dtoa_r+0x352>
 8009440:	2301      	movs	r3, #1
 8009442:	930a      	str	r3, [sp, #40]	; 0x28
 8009444:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009446:	4453      	add	r3, sl
 8009448:	f103 0901 	add.w	r9, r3, #1
 800944c:	9302      	str	r3, [sp, #8]
 800944e:	464b      	mov	r3, r9
 8009450:	2b01      	cmp	r3, #1
 8009452:	bfb8      	it	lt
 8009454:	2301      	movlt	r3, #1
 8009456:	e7ba      	b.n	80093ce <_dtoa_r+0x246>
 8009458:	2300      	movs	r3, #0
 800945a:	e7b2      	b.n	80093c2 <_dtoa_r+0x23a>
 800945c:	2300      	movs	r3, #0
 800945e:	e7f0      	b.n	8009442 <_dtoa_r+0x2ba>
 8009460:	2501      	movs	r5, #1
 8009462:	2300      	movs	r3, #0
 8009464:	9306      	str	r3, [sp, #24]
 8009466:	950a      	str	r5, [sp, #40]	; 0x28
 8009468:	f04f 33ff 	mov.w	r3, #4294967295
 800946c:	9302      	str	r3, [sp, #8]
 800946e:	4699      	mov	r9, r3
 8009470:	2200      	movs	r2, #0
 8009472:	2312      	movs	r3, #18
 8009474:	920b      	str	r2, [sp, #44]	; 0x2c
 8009476:	e7aa      	b.n	80093ce <_dtoa_r+0x246>
 8009478:	2301      	movs	r3, #1
 800947a:	930a      	str	r3, [sp, #40]	; 0x28
 800947c:	e7f4      	b.n	8009468 <_dtoa_r+0x2e0>
 800947e:	2301      	movs	r3, #1
 8009480:	9302      	str	r3, [sp, #8]
 8009482:	4699      	mov	r9, r3
 8009484:	461a      	mov	r2, r3
 8009486:	e7f5      	b.n	8009474 <_dtoa_r+0x2ec>
 8009488:	3101      	adds	r1, #1
 800948a:	6071      	str	r1, [r6, #4]
 800948c:	0052      	lsls	r2, r2, #1
 800948e:	e7a2      	b.n	80093d6 <_dtoa_r+0x24e>
 8009490:	636f4361 	.word	0x636f4361
 8009494:	3fd287a7 	.word	0x3fd287a7
 8009498:	8b60c8b3 	.word	0x8b60c8b3
 800949c:	3fc68a28 	.word	0x3fc68a28
 80094a0:	509f79fb 	.word	0x509f79fb
 80094a4:	3fd34413 	.word	0x3fd34413
 80094a8:	7ff00000 	.word	0x7ff00000
 80094ac:	0800c335 	.word	0x0800c335
 80094b0:	3ff80000 	.word	0x3ff80000
 80094b4:	0800c3f0 	.word	0x0800c3f0
 80094b8:	0800c3c8 	.word	0x0800c3c8
 80094bc:	0800c3b9 	.word	0x0800c3b9
 80094c0:	07f1      	lsls	r1, r6, #31
 80094c2:	d508      	bpl.n	80094d6 <_dtoa_r+0x34e>
 80094c4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80094c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80094cc:	f7f7 f89c 	bl	8000608 <__aeabi_dmul>
 80094d0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80094d4:	3501      	adds	r5, #1
 80094d6:	1076      	asrs	r6, r6, #1
 80094d8:	3708      	adds	r7, #8
 80094da:	2e00      	cmp	r6, #0
 80094dc:	d1f0      	bne.n	80094c0 <_dtoa_r+0x338>
 80094de:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80094e2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80094e6:	f7f7 f9b9 	bl	800085c <__aeabi_ddiv>
 80094ea:	e9cd 0100 	strd	r0, r1, [sp]
 80094ee:	e01a      	b.n	8009526 <_dtoa_r+0x39e>
 80094f0:	2502      	movs	r5, #2
 80094f2:	e7a3      	b.n	800943c <_dtoa_r+0x2b4>
 80094f4:	f000 80a0 	beq.w	8009638 <_dtoa_r+0x4b0>
 80094f8:	f1ca 0600 	rsb	r6, sl, #0
 80094fc:	4b9f      	ldr	r3, [pc, #636]	; (800977c <_dtoa_r+0x5f4>)
 80094fe:	4fa0      	ldr	r7, [pc, #640]	; (8009780 <_dtoa_r+0x5f8>)
 8009500:	f006 020f 	and.w	r2, r6, #15
 8009504:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800950c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009510:	f7f7 f87a 	bl	8000608 <__aeabi_dmul>
 8009514:	e9cd 0100 	strd	r0, r1, [sp]
 8009518:	1136      	asrs	r6, r6, #4
 800951a:	2300      	movs	r3, #0
 800951c:	2502      	movs	r5, #2
 800951e:	2e00      	cmp	r6, #0
 8009520:	d17f      	bne.n	8009622 <_dtoa_r+0x49a>
 8009522:	2b00      	cmp	r3, #0
 8009524:	d1e1      	bne.n	80094ea <_dtoa_r+0x362>
 8009526:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009528:	2b00      	cmp	r3, #0
 800952a:	f000 8087 	beq.w	800963c <_dtoa_r+0x4b4>
 800952e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009532:	2200      	movs	r2, #0
 8009534:	4b93      	ldr	r3, [pc, #588]	; (8009784 <_dtoa_r+0x5fc>)
 8009536:	4630      	mov	r0, r6
 8009538:	4639      	mov	r1, r7
 800953a:	f7f7 fad7 	bl	8000aec <__aeabi_dcmplt>
 800953e:	2800      	cmp	r0, #0
 8009540:	d07c      	beq.n	800963c <_dtoa_r+0x4b4>
 8009542:	f1b9 0f00 	cmp.w	r9, #0
 8009546:	d079      	beq.n	800963c <_dtoa_r+0x4b4>
 8009548:	9b02      	ldr	r3, [sp, #8]
 800954a:	2b00      	cmp	r3, #0
 800954c:	dd35      	ble.n	80095ba <_dtoa_r+0x432>
 800954e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009552:	9308      	str	r3, [sp, #32]
 8009554:	4639      	mov	r1, r7
 8009556:	2200      	movs	r2, #0
 8009558:	4b8b      	ldr	r3, [pc, #556]	; (8009788 <_dtoa_r+0x600>)
 800955a:	4630      	mov	r0, r6
 800955c:	f7f7 f854 	bl	8000608 <__aeabi_dmul>
 8009560:	e9cd 0100 	strd	r0, r1, [sp]
 8009564:	9f02      	ldr	r7, [sp, #8]
 8009566:	3501      	adds	r5, #1
 8009568:	4628      	mov	r0, r5
 800956a:	f7f6 ffe3 	bl	8000534 <__aeabi_i2d>
 800956e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009572:	f7f7 f849 	bl	8000608 <__aeabi_dmul>
 8009576:	2200      	movs	r2, #0
 8009578:	4b84      	ldr	r3, [pc, #528]	; (800978c <_dtoa_r+0x604>)
 800957a:	f7f6 fe8f 	bl	800029c <__adddf3>
 800957e:	4605      	mov	r5, r0
 8009580:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8009584:	2f00      	cmp	r7, #0
 8009586:	d15d      	bne.n	8009644 <_dtoa_r+0x4bc>
 8009588:	2200      	movs	r2, #0
 800958a:	4b81      	ldr	r3, [pc, #516]	; (8009790 <_dtoa_r+0x608>)
 800958c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009590:	f7f6 fe82 	bl	8000298 <__aeabi_dsub>
 8009594:	462a      	mov	r2, r5
 8009596:	4633      	mov	r3, r6
 8009598:	e9cd 0100 	strd	r0, r1, [sp]
 800959c:	f7f7 fac4 	bl	8000b28 <__aeabi_dcmpgt>
 80095a0:	2800      	cmp	r0, #0
 80095a2:	f040 8288 	bne.w	8009ab6 <_dtoa_r+0x92e>
 80095a6:	462a      	mov	r2, r5
 80095a8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80095ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 80095b0:	f7f7 fa9c 	bl	8000aec <__aeabi_dcmplt>
 80095b4:	2800      	cmp	r0, #0
 80095b6:	f040 827c 	bne.w	8009ab2 <_dtoa_r+0x92a>
 80095ba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80095be:	e9cd 2300 	strd	r2, r3, [sp]
 80095c2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	f2c0 8150 	blt.w	800986a <_dtoa_r+0x6e2>
 80095ca:	f1ba 0f0e 	cmp.w	sl, #14
 80095ce:	f300 814c 	bgt.w	800986a <_dtoa_r+0x6e2>
 80095d2:	4b6a      	ldr	r3, [pc, #424]	; (800977c <_dtoa_r+0x5f4>)
 80095d4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80095d8:	ed93 7b00 	vldr	d7, [r3]
 80095dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80095de:	2b00      	cmp	r3, #0
 80095e0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80095e4:	f280 80d8 	bge.w	8009798 <_dtoa_r+0x610>
 80095e8:	f1b9 0f00 	cmp.w	r9, #0
 80095ec:	f300 80d4 	bgt.w	8009798 <_dtoa_r+0x610>
 80095f0:	f040 825e 	bne.w	8009ab0 <_dtoa_r+0x928>
 80095f4:	2200      	movs	r2, #0
 80095f6:	4b66      	ldr	r3, [pc, #408]	; (8009790 <_dtoa_r+0x608>)
 80095f8:	ec51 0b17 	vmov	r0, r1, d7
 80095fc:	f7f7 f804 	bl	8000608 <__aeabi_dmul>
 8009600:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009604:	f7f7 fa86 	bl	8000b14 <__aeabi_dcmpge>
 8009608:	464f      	mov	r7, r9
 800960a:	464e      	mov	r6, r9
 800960c:	2800      	cmp	r0, #0
 800960e:	f040 8234 	bne.w	8009a7a <_dtoa_r+0x8f2>
 8009612:	2331      	movs	r3, #49	; 0x31
 8009614:	f10b 0501 	add.w	r5, fp, #1
 8009618:	f88b 3000 	strb.w	r3, [fp]
 800961c:	f10a 0a01 	add.w	sl, sl, #1
 8009620:	e22f      	b.n	8009a82 <_dtoa_r+0x8fa>
 8009622:	07f2      	lsls	r2, r6, #31
 8009624:	d505      	bpl.n	8009632 <_dtoa_r+0x4aa>
 8009626:	e9d7 2300 	ldrd	r2, r3, [r7]
 800962a:	f7f6 ffed 	bl	8000608 <__aeabi_dmul>
 800962e:	3501      	adds	r5, #1
 8009630:	2301      	movs	r3, #1
 8009632:	1076      	asrs	r6, r6, #1
 8009634:	3708      	adds	r7, #8
 8009636:	e772      	b.n	800951e <_dtoa_r+0x396>
 8009638:	2502      	movs	r5, #2
 800963a:	e774      	b.n	8009526 <_dtoa_r+0x39e>
 800963c:	f8cd a020 	str.w	sl, [sp, #32]
 8009640:	464f      	mov	r7, r9
 8009642:	e791      	b.n	8009568 <_dtoa_r+0x3e0>
 8009644:	4b4d      	ldr	r3, [pc, #308]	; (800977c <_dtoa_r+0x5f4>)
 8009646:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800964a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800964e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009650:	2b00      	cmp	r3, #0
 8009652:	d047      	beq.n	80096e4 <_dtoa_r+0x55c>
 8009654:	4602      	mov	r2, r0
 8009656:	460b      	mov	r3, r1
 8009658:	2000      	movs	r0, #0
 800965a:	494e      	ldr	r1, [pc, #312]	; (8009794 <_dtoa_r+0x60c>)
 800965c:	f7f7 f8fe 	bl	800085c <__aeabi_ddiv>
 8009660:	462a      	mov	r2, r5
 8009662:	4633      	mov	r3, r6
 8009664:	f7f6 fe18 	bl	8000298 <__aeabi_dsub>
 8009668:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800966c:	465d      	mov	r5, fp
 800966e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009672:	f7f7 fa79 	bl	8000b68 <__aeabi_d2iz>
 8009676:	4606      	mov	r6, r0
 8009678:	f7f6 ff5c 	bl	8000534 <__aeabi_i2d>
 800967c:	4602      	mov	r2, r0
 800967e:	460b      	mov	r3, r1
 8009680:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009684:	f7f6 fe08 	bl	8000298 <__aeabi_dsub>
 8009688:	3630      	adds	r6, #48	; 0x30
 800968a:	f805 6b01 	strb.w	r6, [r5], #1
 800968e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009692:	e9cd 0100 	strd	r0, r1, [sp]
 8009696:	f7f7 fa29 	bl	8000aec <__aeabi_dcmplt>
 800969a:	2800      	cmp	r0, #0
 800969c:	d163      	bne.n	8009766 <_dtoa_r+0x5de>
 800969e:	e9dd 2300 	ldrd	r2, r3, [sp]
 80096a2:	2000      	movs	r0, #0
 80096a4:	4937      	ldr	r1, [pc, #220]	; (8009784 <_dtoa_r+0x5fc>)
 80096a6:	f7f6 fdf7 	bl	8000298 <__aeabi_dsub>
 80096aa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80096ae:	f7f7 fa1d 	bl	8000aec <__aeabi_dcmplt>
 80096b2:	2800      	cmp	r0, #0
 80096b4:	f040 80b7 	bne.w	8009826 <_dtoa_r+0x69e>
 80096b8:	eba5 030b 	sub.w	r3, r5, fp
 80096bc:	429f      	cmp	r7, r3
 80096be:	f77f af7c 	ble.w	80095ba <_dtoa_r+0x432>
 80096c2:	2200      	movs	r2, #0
 80096c4:	4b30      	ldr	r3, [pc, #192]	; (8009788 <_dtoa_r+0x600>)
 80096c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80096ca:	f7f6 ff9d 	bl	8000608 <__aeabi_dmul>
 80096ce:	2200      	movs	r2, #0
 80096d0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80096d4:	4b2c      	ldr	r3, [pc, #176]	; (8009788 <_dtoa_r+0x600>)
 80096d6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80096da:	f7f6 ff95 	bl	8000608 <__aeabi_dmul>
 80096de:	e9cd 0100 	strd	r0, r1, [sp]
 80096e2:	e7c4      	b.n	800966e <_dtoa_r+0x4e6>
 80096e4:	462a      	mov	r2, r5
 80096e6:	4633      	mov	r3, r6
 80096e8:	f7f6 ff8e 	bl	8000608 <__aeabi_dmul>
 80096ec:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80096f0:	eb0b 0507 	add.w	r5, fp, r7
 80096f4:	465e      	mov	r6, fp
 80096f6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80096fa:	f7f7 fa35 	bl	8000b68 <__aeabi_d2iz>
 80096fe:	4607      	mov	r7, r0
 8009700:	f7f6 ff18 	bl	8000534 <__aeabi_i2d>
 8009704:	3730      	adds	r7, #48	; 0x30
 8009706:	4602      	mov	r2, r0
 8009708:	460b      	mov	r3, r1
 800970a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800970e:	f7f6 fdc3 	bl	8000298 <__aeabi_dsub>
 8009712:	f806 7b01 	strb.w	r7, [r6], #1
 8009716:	42ae      	cmp	r6, r5
 8009718:	e9cd 0100 	strd	r0, r1, [sp]
 800971c:	f04f 0200 	mov.w	r2, #0
 8009720:	d126      	bne.n	8009770 <_dtoa_r+0x5e8>
 8009722:	4b1c      	ldr	r3, [pc, #112]	; (8009794 <_dtoa_r+0x60c>)
 8009724:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009728:	f7f6 fdb8 	bl	800029c <__adddf3>
 800972c:	4602      	mov	r2, r0
 800972e:	460b      	mov	r3, r1
 8009730:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009734:	f7f7 f9f8 	bl	8000b28 <__aeabi_dcmpgt>
 8009738:	2800      	cmp	r0, #0
 800973a:	d174      	bne.n	8009826 <_dtoa_r+0x69e>
 800973c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009740:	2000      	movs	r0, #0
 8009742:	4914      	ldr	r1, [pc, #80]	; (8009794 <_dtoa_r+0x60c>)
 8009744:	f7f6 fda8 	bl	8000298 <__aeabi_dsub>
 8009748:	4602      	mov	r2, r0
 800974a:	460b      	mov	r3, r1
 800974c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009750:	f7f7 f9cc 	bl	8000aec <__aeabi_dcmplt>
 8009754:	2800      	cmp	r0, #0
 8009756:	f43f af30 	beq.w	80095ba <_dtoa_r+0x432>
 800975a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800975e:	2b30      	cmp	r3, #48	; 0x30
 8009760:	f105 32ff 	add.w	r2, r5, #4294967295
 8009764:	d002      	beq.n	800976c <_dtoa_r+0x5e4>
 8009766:	f8dd a020 	ldr.w	sl, [sp, #32]
 800976a:	e04a      	b.n	8009802 <_dtoa_r+0x67a>
 800976c:	4615      	mov	r5, r2
 800976e:	e7f4      	b.n	800975a <_dtoa_r+0x5d2>
 8009770:	4b05      	ldr	r3, [pc, #20]	; (8009788 <_dtoa_r+0x600>)
 8009772:	f7f6 ff49 	bl	8000608 <__aeabi_dmul>
 8009776:	e9cd 0100 	strd	r0, r1, [sp]
 800977a:	e7bc      	b.n	80096f6 <_dtoa_r+0x56e>
 800977c:	0800c3f0 	.word	0x0800c3f0
 8009780:	0800c3c8 	.word	0x0800c3c8
 8009784:	3ff00000 	.word	0x3ff00000
 8009788:	40240000 	.word	0x40240000
 800978c:	401c0000 	.word	0x401c0000
 8009790:	40140000 	.word	0x40140000
 8009794:	3fe00000 	.word	0x3fe00000
 8009798:	e9dd 6700 	ldrd	r6, r7, [sp]
 800979c:	465d      	mov	r5, fp
 800979e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80097a2:	4630      	mov	r0, r6
 80097a4:	4639      	mov	r1, r7
 80097a6:	f7f7 f859 	bl	800085c <__aeabi_ddiv>
 80097aa:	f7f7 f9dd 	bl	8000b68 <__aeabi_d2iz>
 80097ae:	4680      	mov	r8, r0
 80097b0:	f7f6 fec0 	bl	8000534 <__aeabi_i2d>
 80097b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80097b8:	f7f6 ff26 	bl	8000608 <__aeabi_dmul>
 80097bc:	4602      	mov	r2, r0
 80097be:	460b      	mov	r3, r1
 80097c0:	4630      	mov	r0, r6
 80097c2:	4639      	mov	r1, r7
 80097c4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80097c8:	f7f6 fd66 	bl	8000298 <__aeabi_dsub>
 80097cc:	f805 6b01 	strb.w	r6, [r5], #1
 80097d0:	eba5 060b 	sub.w	r6, r5, fp
 80097d4:	45b1      	cmp	r9, r6
 80097d6:	4602      	mov	r2, r0
 80097d8:	460b      	mov	r3, r1
 80097da:	d139      	bne.n	8009850 <_dtoa_r+0x6c8>
 80097dc:	f7f6 fd5e 	bl	800029c <__adddf3>
 80097e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80097e4:	4606      	mov	r6, r0
 80097e6:	460f      	mov	r7, r1
 80097e8:	f7f7 f99e 	bl	8000b28 <__aeabi_dcmpgt>
 80097ec:	b9c8      	cbnz	r0, 8009822 <_dtoa_r+0x69a>
 80097ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80097f2:	4630      	mov	r0, r6
 80097f4:	4639      	mov	r1, r7
 80097f6:	f7f7 f96f 	bl	8000ad8 <__aeabi_dcmpeq>
 80097fa:	b110      	cbz	r0, 8009802 <_dtoa_r+0x67a>
 80097fc:	f018 0f01 	tst.w	r8, #1
 8009800:	d10f      	bne.n	8009822 <_dtoa_r+0x69a>
 8009802:	9904      	ldr	r1, [sp, #16]
 8009804:	4620      	mov	r0, r4
 8009806:	f000 fe0a 	bl	800a41e <_Bfree>
 800980a:	2300      	movs	r3, #0
 800980c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800980e:	702b      	strb	r3, [r5, #0]
 8009810:	f10a 0301 	add.w	r3, sl, #1
 8009814:	6013      	str	r3, [r2, #0]
 8009816:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009818:	2b00      	cmp	r3, #0
 800981a:	f000 8241 	beq.w	8009ca0 <_dtoa_r+0xb18>
 800981e:	601d      	str	r5, [r3, #0]
 8009820:	e23e      	b.n	8009ca0 <_dtoa_r+0xb18>
 8009822:	f8cd a020 	str.w	sl, [sp, #32]
 8009826:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800982a:	2a39      	cmp	r2, #57	; 0x39
 800982c:	f105 33ff 	add.w	r3, r5, #4294967295
 8009830:	d108      	bne.n	8009844 <_dtoa_r+0x6bc>
 8009832:	459b      	cmp	fp, r3
 8009834:	d10a      	bne.n	800984c <_dtoa_r+0x6c4>
 8009836:	9b08      	ldr	r3, [sp, #32]
 8009838:	3301      	adds	r3, #1
 800983a:	9308      	str	r3, [sp, #32]
 800983c:	2330      	movs	r3, #48	; 0x30
 800983e:	f88b 3000 	strb.w	r3, [fp]
 8009842:	465b      	mov	r3, fp
 8009844:	781a      	ldrb	r2, [r3, #0]
 8009846:	3201      	adds	r2, #1
 8009848:	701a      	strb	r2, [r3, #0]
 800984a:	e78c      	b.n	8009766 <_dtoa_r+0x5de>
 800984c:	461d      	mov	r5, r3
 800984e:	e7ea      	b.n	8009826 <_dtoa_r+0x69e>
 8009850:	2200      	movs	r2, #0
 8009852:	4b9b      	ldr	r3, [pc, #620]	; (8009ac0 <_dtoa_r+0x938>)
 8009854:	f7f6 fed8 	bl	8000608 <__aeabi_dmul>
 8009858:	2200      	movs	r2, #0
 800985a:	2300      	movs	r3, #0
 800985c:	4606      	mov	r6, r0
 800985e:	460f      	mov	r7, r1
 8009860:	f7f7 f93a 	bl	8000ad8 <__aeabi_dcmpeq>
 8009864:	2800      	cmp	r0, #0
 8009866:	d09a      	beq.n	800979e <_dtoa_r+0x616>
 8009868:	e7cb      	b.n	8009802 <_dtoa_r+0x67a>
 800986a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800986c:	2a00      	cmp	r2, #0
 800986e:	f000 808b 	beq.w	8009988 <_dtoa_r+0x800>
 8009872:	9a06      	ldr	r2, [sp, #24]
 8009874:	2a01      	cmp	r2, #1
 8009876:	dc6e      	bgt.n	8009956 <_dtoa_r+0x7ce>
 8009878:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800987a:	2a00      	cmp	r2, #0
 800987c:	d067      	beq.n	800994e <_dtoa_r+0x7c6>
 800987e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009882:	9f07      	ldr	r7, [sp, #28]
 8009884:	9d05      	ldr	r5, [sp, #20]
 8009886:	9a05      	ldr	r2, [sp, #20]
 8009888:	2101      	movs	r1, #1
 800988a:	441a      	add	r2, r3
 800988c:	4620      	mov	r0, r4
 800988e:	9205      	str	r2, [sp, #20]
 8009890:	4498      	add	r8, r3
 8009892:	f000 fea2 	bl	800a5da <__i2b>
 8009896:	4606      	mov	r6, r0
 8009898:	2d00      	cmp	r5, #0
 800989a:	dd0c      	ble.n	80098b6 <_dtoa_r+0x72e>
 800989c:	f1b8 0f00 	cmp.w	r8, #0
 80098a0:	dd09      	ble.n	80098b6 <_dtoa_r+0x72e>
 80098a2:	4545      	cmp	r5, r8
 80098a4:	9a05      	ldr	r2, [sp, #20]
 80098a6:	462b      	mov	r3, r5
 80098a8:	bfa8      	it	ge
 80098aa:	4643      	movge	r3, r8
 80098ac:	1ad2      	subs	r2, r2, r3
 80098ae:	9205      	str	r2, [sp, #20]
 80098b0:	1aed      	subs	r5, r5, r3
 80098b2:	eba8 0803 	sub.w	r8, r8, r3
 80098b6:	9b07      	ldr	r3, [sp, #28]
 80098b8:	b1eb      	cbz	r3, 80098f6 <_dtoa_r+0x76e>
 80098ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d067      	beq.n	8009990 <_dtoa_r+0x808>
 80098c0:	b18f      	cbz	r7, 80098e6 <_dtoa_r+0x75e>
 80098c2:	4631      	mov	r1, r6
 80098c4:	463a      	mov	r2, r7
 80098c6:	4620      	mov	r0, r4
 80098c8:	f000 ff26 	bl	800a718 <__pow5mult>
 80098cc:	9a04      	ldr	r2, [sp, #16]
 80098ce:	4601      	mov	r1, r0
 80098d0:	4606      	mov	r6, r0
 80098d2:	4620      	mov	r0, r4
 80098d4:	f000 fe8a 	bl	800a5ec <__multiply>
 80098d8:	9904      	ldr	r1, [sp, #16]
 80098da:	9008      	str	r0, [sp, #32]
 80098dc:	4620      	mov	r0, r4
 80098de:	f000 fd9e 	bl	800a41e <_Bfree>
 80098e2:	9b08      	ldr	r3, [sp, #32]
 80098e4:	9304      	str	r3, [sp, #16]
 80098e6:	9b07      	ldr	r3, [sp, #28]
 80098e8:	1bda      	subs	r2, r3, r7
 80098ea:	d004      	beq.n	80098f6 <_dtoa_r+0x76e>
 80098ec:	9904      	ldr	r1, [sp, #16]
 80098ee:	4620      	mov	r0, r4
 80098f0:	f000 ff12 	bl	800a718 <__pow5mult>
 80098f4:	9004      	str	r0, [sp, #16]
 80098f6:	2101      	movs	r1, #1
 80098f8:	4620      	mov	r0, r4
 80098fa:	f000 fe6e 	bl	800a5da <__i2b>
 80098fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009900:	4607      	mov	r7, r0
 8009902:	2b00      	cmp	r3, #0
 8009904:	f000 81d0 	beq.w	8009ca8 <_dtoa_r+0xb20>
 8009908:	461a      	mov	r2, r3
 800990a:	4601      	mov	r1, r0
 800990c:	4620      	mov	r0, r4
 800990e:	f000 ff03 	bl	800a718 <__pow5mult>
 8009912:	9b06      	ldr	r3, [sp, #24]
 8009914:	2b01      	cmp	r3, #1
 8009916:	4607      	mov	r7, r0
 8009918:	dc40      	bgt.n	800999c <_dtoa_r+0x814>
 800991a:	9b00      	ldr	r3, [sp, #0]
 800991c:	2b00      	cmp	r3, #0
 800991e:	d139      	bne.n	8009994 <_dtoa_r+0x80c>
 8009920:	9b01      	ldr	r3, [sp, #4]
 8009922:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009926:	2b00      	cmp	r3, #0
 8009928:	d136      	bne.n	8009998 <_dtoa_r+0x810>
 800992a:	9b01      	ldr	r3, [sp, #4]
 800992c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009930:	0d1b      	lsrs	r3, r3, #20
 8009932:	051b      	lsls	r3, r3, #20
 8009934:	b12b      	cbz	r3, 8009942 <_dtoa_r+0x7ba>
 8009936:	9b05      	ldr	r3, [sp, #20]
 8009938:	3301      	adds	r3, #1
 800993a:	9305      	str	r3, [sp, #20]
 800993c:	f108 0801 	add.w	r8, r8, #1
 8009940:	2301      	movs	r3, #1
 8009942:	9307      	str	r3, [sp, #28]
 8009944:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009946:	2b00      	cmp	r3, #0
 8009948:	d12a      	bne.n	80099a0 <_dtoa_r+0x818>
 800994a:	2001      	movs	r0, #1
 800994c:	e030      	b.n	80099b0 <_dtoa_r+0x828>
 800994e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009950:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009954:	e795      	b.n	8009882 <_dtoa_r+0x6fa>
 8009956:	9b07      	ldr	r3, [sp, #28]
 8009958:	f109 37ff 	add.w	r7, r9, #4294967295
 800995c:	42bb      	cmp	r3, r7
 800995e:	bfbf      	itttt	lt
 8009960:	9b07      	ldrlt	r3, [sp, #28]
 8009962:	9707      	strlt	r7, [sp, #28]
 8009964:	1afa      	sublt	r2, r7, r3
 8009966:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8009968:	bfbb      	ittet	lt
 800996a:	189b      	addlt	r3, r3, r2
 800996c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800996e:	1bdf      	subge	r7, r3, r7
 8009970:	2700      	movlt	r7, #0
 8009972:	f1b9 0f00 	cmp.w	r9, #0
 8009976:	bfb5      	itete	lt
 8009978:	9b05      	ldrlt	r3, [sp, #20]
 800997a:	9d05      	ldrge	r5, [sp, #20]
 800997c:	eba3 0509 	sublt.w	r5, r3, r9
 8009980:	464b      	movge	r3, r9
 8009982:	bfb8      	it	lt
 8009984:	2300      	movlt	r3, #0
 8009986:	e77e      	b.n	8009886 <_dtoa_r+0x6fe>
 8009988:	9f07      	ldr	r7, [sp, #28]
 800998a:	9d05      	ldr	r5, [sp, #20]
 800998c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800998e:	e783      	b.n	8009898 <_dtoa_r+0x710>
 8009990:	9a07      	ldr	r2, [sp, #28]
 8009992:	e7ab      	b.n	80098ec <_dtoa_r+0x764>
 8009994:	2300      	movs	r3, #0
 8009996:	e7d4      	b.n	8009942 <_dtoa_r+0x7ba>
 8009998:	9b00      	ldr	r3, [sp, #0]
 800999a:	e7d2      	b.n	8009942 <_dtoa_r+0x7ba>
 800999c:	2300      	movs	r3, #0
 800999e:	9307      	str	r3, [sp, #28]
 80099a0:	693b      	ldr	r3, [r7, #16]
 80099a2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80099a6:	6918      	ldr	r0, [r3, #16]
 80099a8:	f000 fdc9 	bl	800a53e <__hi0bits>
 80099ac:	f1c0 0020 	rsb	r0, r0, #32
 80099b0:	4440      	add	r0, r8
 80099b2:	f010 001f 	ands.w	r0, r0, #31
 80099b6:	d047      	beq.n	8009a48 <_dtoa_r+0x8c0>
 80099b8:	f1c0 0320 	rsb	r3, r0, #32
 80099bc:	2b04      	cmp	r3, #4
 80099be:	dd3b      	ble.n	8009a38 <_dtoa_r+0x8b0>
 80099c0:	9b05      	ldr	r3, [sp, #20]
 80099c2:	f1c0 001c 	rsb	r0, r0, #28
 80099c6:	4403      	add	r3, r0
 80099c8:	9305      	str	r3, [sp, #20]
 80099ca:	4405      	add	r5, r0
 80099cc:	4480      	add	r8, r0
 80099ce:	9b05      	ldr	r3, [sp, #20]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	dd05      	ble.n	80099e0 <_dtoa_r+0x858>
 80099d4:	461a      	mov	r2, r3
 80099d6:	9904      	ldr	r1, [sp, #16]
 80099d8:	4620      	mov	r0, r4
 80099da:	f000 feeb 	bl	800a7b4 <__lshift>
 80099de:	9004      	str	r0, [sp, #16]
 80099e0:	f1b8 0f00 	cmp.w	r8, #0
 80099e4:	dd05      	ble.n	80099f2 <_dtoa_r+0x86a>
 80099e6:	4639      	mov	r1, r7
 80099e8:	4642      	mov	r2, r8
 80099ea:	4620      	mov	r0, r4
 80099ec:	f000 fee2 	bl	800a7b4 <__lshift>
 80099f0:	4607      	mov	r7, r0
 80099f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80099f4:	b353      	cbz	r3, 8009a4c <_dtoa_r+0x8c4>
 80099f6:	4639      	mov	r1, r7
 80099f8:	9804      	ldr	r0, [sp, #16]
 80099fa:	f000 ff2f 	bl	800a85c <__mcmp>
 80099fe:	2800      	cmp	r0, #0
 8009a00:	da24      	bge.n	8009a4c <_dtoa_r+0x8c4>
 8009a02:	2300      	movs	r3, #0
 8009a04:	220a      	movs	r2, #10
 8009a06:	9904      	ldr	r1, [sp, #16]
 8009a08:	4620      	mov	r0, r4
 8009a0a:	f000 fd1f 	bl	800a44c <__multadd>
 8009a0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a10:	9004      	str	r0, [sp, #16]
 8009a12:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	f000 814d 	beq.w	8009cb6 <_dtoa_r+0xb2e>
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	4631      	mov	r1, r6
 8009a20:	220a      	movs	r2, #10
 8009a22:	4620      	mov	r0, r4
 8009a24:	f000 fd12 	bl	800a44c <__multadd>
 8009a28:	9b02      	ldr	r3, [sp, #8]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	4606      	mov	r6, r0
 8009a2e:	dc4f      	bgt.n	8009ad0 <_dtoa_r+0x948>
 8009a30:	9b06      	ldr	r3, [sp, #24]
 8009a32:	2b02      	cmp	r3, #2
 8009a34:	dd4c      	ble.n	8009ad0 <_dtoa_r+0x948>
 8009a36:	e011      	b.n	8009a5c <_dtoa_r+0x8d4>
 8009a38:	d0c9      	beq.n	80099ce <_dtoa_r+0x846>
 8009a3a:	9a05      	ldr	r2, [sp, #20]
 8009a3c:	331c      	adds	r3, #28
 8009a3e:	441a      	add	r2, r3
 8009a40:	9205      	str	r2, [sp, #20]
 8009a42:	441d      	add	r5, r3
 8009a44:	4498      	add	r8, r3
 8009a46:	e7c2      	b.n	80099ce <_dtoa_r+0x846>
 8009a48:	4603      	mov	r3, r0
 8009a4a:	e7f6      	b.n	8009a3a <_dtoa_r+0x8b2>
 8009a4c:	f1b9 0f00 	cmp.w	r9, #0
 8009a50:	dc38      	bgt.n	8009ac4 <_dtoa_r+0x93c>
 8009a52:	9b06      	ldr	r3, [sp, #24]
 8009a54:	2b02      	cmp	r3, #2
 8009a56:	dd35      	ble.n	8009ac4 <_dtoa_r+0x93c>
 8009a58:	f8cd 9008 	str.w	r9, [sp, #8]
 8009a5c:	9b02      	ldr	r3, [sp, #8]
 8009a5e:	b963      	cbnz	r3, 8009a7a <_dtoa_r+0x8f2>
 8009a60:	4639      	mov	r1, r7
 8009a62:	2205      	movs	r2, #5
 8009a64:	4620      	mov	r0, r4
 8009a66:	f000 fcf1 	bl	800a44c <__multadd>
 8009a6a:	4601      	mov	r1, r0
 8009a6c:	4607      	mov	r7, r0
 8009a6e:	9804      	ldr	r0, [sp, #16]
 8009a70:	f000 fef4 	bl	800a85c <__mcmp>
 8009a74:	2800      	cmp	r0, #0
 8009a76:	f73f adcc 	bgt.w	8009612 <_dtoa_r+0x48a>
 8009a7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a7c:	465d      	mov	r5, fp
 8009a7e:	ea6f 0a03 	mvn.w	sl, r3
 8009a82:	f04f 0900 	mov.w	r9, #0
 8009a86:	4639      	mov	r1, r7
 8009a88:	4620      	mov	r0, r4
 8009a8a:	f000 fcc8 	bl	800a41e <_Bfree>
 8009a8e:	2e00      	cmp	r6, #0
 8009a90:	f43f aeb7 	beq.w	8009802 <_dtoa_r+0x67a>
 8009a94:	f1b9 0f00 	cmp.w	r9, #0
 8009a98:	d005      	beq.n	8009aa6 <_dtoa_r+0x91e>
 8009a9a:	45b1      	cmp	r9, r6
 8009a9c:	d003      	beq.n	8009aa6 <_dtoa_r+0x91e>
 8009a9e:	4649      	mov	r1, r9
 8009aa0:	4620      	mov	r0, r4
 8009aa2:	f000 fcbc 	bl	800a41e <_Bfree>
 8009aa6:	4631      	mov	r1, r6
 8009aa8:	4620      	mov	r0, r4
 8009aaa:	f000 fcb8 	bl	800a41e <_Bfree>
 8009aae:	e6a8      	b.n	8009802 <_dtoa_r+0x67a>
 8009ab0:	2700      	movs	r7, #0
 8009ab2:	463e      	mov	r6, r7
 8009ab4:	e7e1      	b.n	8009a7a <_dtoa_r+0x8f2>
 8009ab6:	f8dd a020 	ldr.w	sl, [sp, #32]
 8009aba:	463e      	mov	r6, r7
 8009abc:	e5a9      	b.n	8009612 <_dtoa_r+0x48a>
 8009abe:	bf00      	nop
 8009ac0:	40240000 	.word	0x40240000
 8009ac4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ac6:	f8cd 9008 	str.w	r9, [sp, #8]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	f000 80fa 	beq.w	8009cc4 <_dtoa_r+0xb3c>
 8009ad0:	2d00      	cmp	r5, #0
 8009ad2:	dd05      	ble.n	8009ae0 <_dtoa_r+0x958>
 8009ad4:	4631      	mov	r1, r6
 8009ad6:	462a      	mov	r2, r5
 8009ad8:	4620      	mov	r0, r4
 8009ada:	f000 fe6b 	bl	800a7b4 <__lshift>
 8009ade:	4606      	mov	r6, r0
 8009ae0:	9b07      	ldr	r3, [sp, #28]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d04c      	beq.n	8009b80 <_dtoa_r+0x9f8>
 8009ae6:	6871      	ldr	r1, [r6, #4]
 8009ae8:	4620      	mov	r0, r4
 8009aea:	f000 fc64 	bl	800a3b6 <_Balloc>
 8009aee:	6932      	ldr	r2, [r6, #16]
 8009af0:	3202      	adds	r2, #2
 8009af2:	4605      	mov	r5, r0
 8009af4:	0092      	lsls	r2, r2, #2
 8009af6:	f106 010c 	add.w	r1, r6, #12
 8009afa:	300c      	adds	r0, #12
 8009afc:	f000 fc50 	bl	800a3a0 <memcpy>
 8009b00:	2201      	movs	r2, #1
 8009b02:	4629      	mov	r1, r5
 8009b04:	4620      	mov	r0, r4
 8009b06:	f000 fe55 	bl	800a7b4 <__lshift>
 8009b0a:	9b00      	ldr	r3, [sp, #0]
 8009b0c:	f8cd b014 	str.w	fp, [sp, #20]
 8009b10:	f003 0301 	and.w	r3, r3, #1
 8009b14:	46b1      	mov	r9, r6
 8009b16:	9307      	str	r3, [sp, #28]
 8009b18:	4606      	mov	r6, r0
 8009b1a:	4639      	mov	r1, r7
 8009b1c:	9804      	ldr	r0, [sp, #16]
 8009b1e:	f7ff faa5 	bl	800906c <quorem>
 8009b22:	4649      	mov	r1, r9
 8009b24:	4605      	mov	r5, r0
 8009b26:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8009b2a:	9804      	ldr	r0, [sp, #16]
 8009b2c:	f000 fe96 	bl	800a85c <__mcmp>
 8009b30:	4632      	mov	r2, r6
 8009b32:	9000      	str	r0, [sp, #0]
 8009b34:	4639      	mov	r1, r7
 8009b36:	4620      	mov	r0, r4
 8009b38:	f000 feaa 	bl	800a890 <__mdiff>
 8009b3c:	68c3      	ldr	r3, [r0, #12]
 8009b3e:	4602      	mov	r2, r0
 8009b40:	bb03      	cbnz	r3, 8009b84 <_dtoa_r+0x9fc>
 8009b42:	4601      	mov	r1, r0
 8009b44:	9008      	str	r0, [sp, #32]
 8009b46:	9804      	ldr	r0, [sp, #16]
 8009b48:	f000 fe88 	bl	800a85c <__mcmp>
 8009b4c:	9a08      	ldr	r2, [sp, #32]
 8009b4e:	4603      	mov	r3, r0
 8009b50:	4611      	mov	r1, r2
 8009b52:	4620      	mov	r0, r4
 8009b54:	9308      	str	r3, [sp, #32]
 8009b56:	f000 fc62 	bl	800a41e <_Bfree>
 8009b5a:	9b08      	ldr	r3, [sp, #32]
 8009b5c:	b9a3      	cbnz	r3, 8009b88 <_dtoa_r+0xa00>
 8009b5e:	9a06      	ldr	r2, [sp, #24]
 8009b60:	b992      	cbnz	r2, 8009b88 <_dtoa_r+0xa00>
 8009b62:	9a07      	ldr	r2, [sp, #28]
 8009b64:	b982      	cbnz	r2, 8009b88 <_dtoa_r+0xa00>
 8009b66:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009b6a:	d029      	beq.n	8009bc0 <_dtoa_r+0xa38>
 8009b6c:	9b00      	ldr	r3, [sp, #0]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	dd01      	ble.n	8009b76 <_dtoa_r+0x9ee>
 8009b72:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8009b76:	9b05      	ldr	r3, [sp, #20]
 8009b78:	1c5d      	adds	r5, r3, #1
 8009b7a:	f883 8000 	strb.w	r8, [r3]
 8009b7e:	e782      	b.n	8009a86 <_dtoa_r+0x8fe>
 8009b80:	4630      	mov	r0, r6
 8009b82:	e7c2      	b.n	8009b0a <_dtoa_r+0x982>
 8009b84:	2301      	movs	r3, #1
 8009b86:	e7e3      	b.n	8009b50 <_dtoa_r+0x9c8>
 8009b88:	9a00      	ldr	r2, [sp, #0]
 8009b8a:	2a00      	cmp	r2, #0
 8009b8c:	db04      	blt.n	8009b98 <_dtoa_r+0xa10>
 8009b8e:	d125      	bne.n	8009bdc <_dtoa_r+0xa54>
 8009b90:	9a06      	ldr	r2, [sp, #24]
 8009b92:	bb1a      	cbnz	r2, 8009bdc <_dtoa_r+0xa54>
 8009b94:	9a07      	ldr	r2, [sp, #28]
 8009b96:	bb0a      	cbnz	r2, 8009bdc <_dtoa_r+0xa54>
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	ddec      	ble.n	8009b76 <_dtoa_r+0x9ee>
 8009b9c:	2201      	movs	r2, #1
 8009b9e:	9904      	ldr	r1, [sp, #16]
 8009ba0:	4620      	mov	r0, r4
 8009ba2:	f000 fe07 	bl	800a7b4 <__lshift>
 8009ba6:	4639      	mov	r1, r7
 8009ba8:	9004      	str	r0, [sp, #16]
 8009baa:	f000 fe57 	bl	800a85c <__mcmp>
 8009bae:	2800      	cmp	r0, #0
 8009bb0:	dc03      	bgt.n	8009bba <_dtoa_r+0xa32>
 8009bb2:	d1e0      	bne.n	8009b76 <_dtoa_r+0x9ee>
 8009bb4:	f018 0f01 	tst.w	r8, #1
 8009bb8:	d0dd      	beq.n	8009b76 <_dtoa_r+0x9ee>
 8009bba:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009bbe:	d1d8      	bne.n	8009b72 <_dtoa_r+0x9ea>
 8009bc0:	9b05      	ldr	r3, [sp, #20]
 8009bc2:	9a05      	ldr	r2, [sp, #20]
 8009bc4:	1c5d      	adds	r5, r3, #1
 8009bc6:	2339      	movs	r3, #57	; 0x39
 8009bc8:	7013      	strb	r3, [r2, #0]
 8009bca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009bce:	2b39      	cmp	r3, #57	; 0x39
 8009bd0:	f105 32ff 	add.w	r2, r5, #4294967295
 8009bd4:	d04f      	beq.n	8009c76 <_dtoa_r+0xaee>
 8009bd6:	3301      	adds	r3, #1
 8009bd8:	7013      	strb	r3, [r2, #0]
 8009bda:	e754      	b.n	8009a86 <_dtoa_r+0x8fe>
 8009bdc:	9a05      	ldr	r2, [sp, #20]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	f102 0501 	add.w	r5, r2, #1
 8009be4:	dd06      	ble.n	8009bf4 <_dtoa_r+0xa6c>
 8009be6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009bea:	d0e9      	beq.n	8009bc0 <_dtoa_r+0xa38>
 8009bec:	f108 0801 	add.w	r8, r8, #1
 8009bf0:	9b05      	ldr	r3, [sp, #20]
 8009bf2:	e7c2      	b.n	8009b7a <_dtoa_r+0x9f2>
 8009bf4:	9a02      	ldr	r2, [sp, #8]
 8009bf6:	f805 8c01 	strb.w	r8, [r5, #-1]
 8009bfa:	eba5 030b 	sub.w	r3, r5, fp
 8009bfe:	4293      	cmp	r3, r2
 8009c00:	d021      	beq.n	8009c46 <_dtoa_r+0xabe>
 8009c02:	2300      	movs	r3, #0
 8009c04:	220a      	movs	r2, #10
 8009c06:	9904      	ldr	r1, [sp, #16]
 8009c08:	4620      	mov	r0, r4
 8009c0a:	f000 fc1f 	bl	800a44c <__multadd>
 8009c0e:	45b1      	cmp	r9, r6
 8009c10:	9004      	str	r0, [sp, #16]
 8009c12:	f04f 0300 	mov.w	r3, #0
 8009c16:	f04f 020a 	mov.w	r2, #10
 8009c1a:	4649      	mov	r1, r9
 8009c1c:	4620      	mov	r0, r4
 8009c1e:	d105      	bne.n	8009c2c <_dtoa_r+0xaa4>
 8009c20:	f000 fc14 	bl	800a44c <__multadd>
 8009c24:	4681      	mov	r9, r0
 8009c26:	4606      	mov	r6, r0
 8009c28:	9505      	str	r5, [sp, #20]
 8009c2a:	e776      	b.n	8009b1a <_dtoa_r+0x992>
 8009c2c:	f000 fc0e 	bl	800a44c <__multadd>
 8009c30:	4631      	mov	r1, r6
 8009c32:	4681      	mov	r9, r0
 8009c34:	2300      	movs	r3, #0
 8009c36:	220a      	movs	r2, #10
 8009c38:	4620      	mov	r0, r4
 8009c3a:	f000 fc07 	bl	800a44c <__multadd>
 8009c3e:	4606      	mov	r6, r0
 8009c40:	e7f2      	b.n	8009c28 <_dtoa_r+0xaa0>
 8009c42:	f04f 0900 	mov.w	r9, #0
 8009c46:	2201      	movs	r2, #1
 8009c48:	9904      	ldr	r1, [sp, #16]
 8009c4a:	4620      	mov	r0, r4
 8009c4c:	f000 fdb2 	bl	800a7b4 <__lshift>
 8009c50:	4639      	mov	r1, r7
 8009c52:	9004      	str	r0, [sp, #16]
 8009c54:	f000 fe02 	bl	800a85c <__mcmp>
 8009c58:	2800      	cmp	r0, #0
 8009c5a:	dcb6      	bgt.n	8009bca <_dtoa_r+0xa42>
 8009c5c:	d102      	bne.n	8009c64 <_dtoa_r+0xadc>
 8009c5e:	f018 0f01 	tst.w	r8, #1
 8009c62:	d1b2      	bne.n	8009bca <_dtoa_r+0xa42>
 8009c64:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009c68:	2b30      	cmp	r3, #48	; 0x30
 8009c6a:	f105 32ff 	add.w	r2, r5, #4294967295
 8009c6e:	f47f af0a 	bne.w	8009a86 <_dtoa_r+0x8fe>
 8009c72:	4615      	mov	r5, r2
 8009c74:	e7f6      	b.n	8009c64 <_dtoa_r+0xadc>
 8009c76:	4593      	cmp	fp, r2
 8009c78:	d105      	bne.n	8009c86 <_dtoa_r+0xafe>
 8009c7a:	2331      	movs	r3, #49	; 0x31
 8009c7c:	f10a 0a01 	add.w	sl, sl, #1
 8009c80:	f88b 3000 	strb.w	r3, [fp]
 8009c84:	e6ff      	b.n	8009a86 <_dtoa_r+0x8fe>
 8009c86:	4615      	mov	r5, r2
 8009c88:	e79f      	b.n	8009bca <_dtoa_r+0xa42>
 8009c8a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8009cf0 <_dtoa_r+0xb68>
 8009c8e:	e007      	b.n	8009ca0 <_dtoa_r+0xb18>
 8009c90:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009c92:	f8df b060 	ldr.w	fp, [pc, #96]	; 8009cf4 <_dtoa_r+0xb6c>
 8009c96:	b11b      	cbz	r3, 8009ca0 <_dtoa_r+0xb18>
 8009c98:	f10b 0308 	add.w	r3, fp, #8
 8009c9c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009c9e:	6013      	str	r3, [r2, #0]
 8009ca0:	4658      	mov	r0, fp
 8009ca2:	b017      	add	sp, #92	; 0x5c
 8009ca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ca8:	9b06      	ldr	r3, [sp, #24]
 8009caa:	2b01      	cmp	r3, #1
 8009cac:	f77f ae35 	ble.w	800991a <_dtoa_r+0x792>
 8009cb0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009cb2:	9307      	str	r3, [sp, #28]
 8009cb4:	e649      	b.n	800994a <_dtoa_r+0x7c2>
 8009cb6:	9b02      	ldr	r3, [sp, #8]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	dc03      	bgt.n	8009cc4 <_dtoa_r+0xb3c>
 8009cbc:	9b06      	ldr	r3, [sp, #24]
 8009cbe:	2b02      	cmp	r3, #2
 8009cc0:	f73f aecc 	bgt.w	8009a5c <_dtoa_r+0x8d4>
 8009cc4:	465d      	mov	r5, fp
 8009cc6:	4639      	mov	r1, r7
 8009cc8:	9804      	ldr	r0, [sp, #16]
 8009cca:	f7ff f9cf 	bl	800906c <quorem>
 8009cce:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8009cd2:	f805 8b01 	strb.w	r8, [r5], #1
 8009cd6:	9a02      	ldr	r2, [sp, #8]
 8009cd8:	eba5 030b 	sub.w	r3, r5, fp
 8009cdc:	429a      	cmp	r2, r3
 8009cde:	ddb0      	ble.n	8009c42 <_dtoa_r+0xaba>
 8009ce0:	2300      	movs	r3, #0
 8009ce2:	220a      	movs	r2, #10
 8009ce4:	9904      	ldr	r1, [sp, #16]
 8009ce6:	4620      	mov	r0, r4
 8009ce8:	f000 fbb0 	bl	800a44c <__multadd>
 8009cec:	9004      	str	r0, [sp, #16]
 8009cee:	e7ea      	b.n	8009cc6 <_dtoa_r+0xb3e>
 8009cf0:	0800c334 	.word	0x0800c334
 8009cf4:	0800c3b0 	.word	0x0800c3b0

08009cf8 <rshift>:
 8009cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009cfa:	6906      	ldr	r6, [r0, #16]
 8009cfc:	114b      	asrs	r3, r1, #5
 8009cfe:	429e      	cmp	r6, r3
 8009d00:	f100 0414 	add.w	r4, r0, #20
 8009d04:	dd30      	ble.n	8009d68 <rshift+0x70>
 8009d06:	f011 011f 	ands.w	r1, r1, #31
 8009d0a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8009d0e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8009d12:	d108      	bne.n	8009d26 <rshift+0x2e>
 8009d14:	4621      	mov	r1, r4
 8009d16:	42b2      	cmp	r2, r6
 8009d18:	460b      	mov	r3, r1
 8009d1a:	d211      	bcs.n	8009d40 <rshift+0x48>
 8009d1c:	f852 3b04 	ldr.w	r3, [r2], #4
 8009d20:	f841 3b04 	str.w	r3, [r1], #4
 8009d24:	e7f7      	b.n	8009d16 <rshift+0x1e>
 8009d26:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8009d2a:	f1c1 0c20 	rsb	ip, r1, #32
 8009d2e:	40cd      	lsrs	r5, r1
 8009d30:	3204      	adds	r2, #4
 8009d32:	4623      	mov	r3, r4
 8009d34:	42b2      	cmp	r2, r6
 8009d36:	4617      	mov	r7, r2
 8009d38:	d30c      	bcc.n	8009d54 <rshift+0x5c>
 8009d3a:	601d      	str	r5, [r3, #0]
 8009d3c:	b105      	cbz	r5, 8009d40 <rshift+0x48>
 8009d3e:	3304      	adds	r3, #4
 8009d40:	1b1a      	subs	r2, r3, r4
 8009d42:	42a3      	cmp	r3, r4
 8009d44:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009d48:	bf08      	it	eq
 8009d4a:	2300      	moveq	r3, #0
 8009d4c:	6102      	str	r2, [r0, #16]
 8009d4e:	bf08      	it	eq
 8009d50:	6143      	streq	r3, [r0, #20]
 8009d52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d54:	683f      	ldr	r7, [r7, #0]
 8009d56:	fa07 f70c 	lsl.w	r7, r7, ip
 8009d5a:	433d      	orrs	r5, r7
 8009d5c:	f843 5b04 	str.w	r5, [r3], #4
 8009d60:	f852 5b04 	ldr.w	r5, [r2], #4
 8009d64:	40cd      	lsrs	r5, r1
 8009d66:	e7e5      	b.n	8009d34 <rshift+0x3c>
 8009d68:	4623      	mov	r3, r4
 8009d6a:	e7e9      	b.n	8009d40 <rshift+0x48>

08009d6c <__hexdig_fun>:
 8009d6c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009d70:	2b09      	cmp	r3, #9
 8009d72:	d802      	bhi.n	8009d7a <__hexdig_fun+0xe>
 8009d74:	3820      	subs	r0, #32
 8009d76:	b2c0      	uxtb	r0, r0
 8009d78:	4770      	bx	lr
 8009d7a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009d7e:	2b05      	cmp	r3, #5
 8009d80:	d801      	bhi.n	8009d86 <__hexdig_fun+0x1a>
 8009d82:	3847      	subs	r0, #71	; 0x47
 8009d84:	e7f7      	b.n	8009d76 <__hexdig_fun+0xa>
 8009d86:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009d8a:	2b05      	cmp	r3, #5
 8009d8c:	d801      	bhi.n	8009d92 <__hexdig_fun+0x26>
 8009d8e:	3827      	subs	r0, #39	; 0x27
 8009d90:	e7f1      	b.n	8009d76 <__hexdig_fun+0xa>
 8009d92:	2000      	movs	r0, #0
 8009d94:	4770      	bx	lr

08009d96 <__gethex>:
 8009d96:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d9a:	b08b      	sub	sp, #44	; 0x2c
 8009d9c:	468a      	mov	sl, r1
 8009d9e:	9002      	str	r0, [sp, #8]
 8009da0:	9816      	ldr	r0, [sp, #88]	; 0x58
 8009da2:	9306      	str	r3, [sp, #24]
 8009da4:	4690      	mov	r8, r2
 8009da6:	f000 fad0 	bl	800a34a <__localeconv_l>
 8009daa:	6803      	ldr	r3, [r0, #0]
 8009dac:	9303      	str	r3, [sp, #12]
 8009dae:	4618      	mov	r0, r3
 8009db0:	f7f6 fa16 	bl	80001e0 <strlen>
 8009db4:	9b03      	ldr	r3, [sp, #12]
 8009db6:	9001      	str	r0, [sp, #4]
 8009db8:	4403      	add	r3, r0
 8009dba:	f04f 0b00 	mov.w	fp, #0
 8009dbe:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8009dc2:	9307      	str	r3, [sp, #28]
 8009dc4:	f8da 3000 	ldr.w	r3, [sl]
 8009dc8:	3302      	adds	r3, #2
 8009dca:	461f      	mov	r7, r3
 8009dcc:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009dd0:	2830      	cmp	r0, #48	; 0x30
 8009dd2:	d06c      	beq.n	8009eae <__gethex+0x118>
 8009dd4:	f7ff ffca 	bl	8009d6c <__hexdig_fun>
 8009dd8:	4604      	mov	r4, r0
 8009dda:	2800      	cmp	r0, #0
 8009ddc:	d16a      	bne.n	8009eb4 <__gethex+0x11e>
 8009dde:	9a01      	ldr	r2, [sp, #4]
 8009de0:	9903      	ldr	r1, [sp, #12]
 8009de2:	4638      	mov	r0, r7
 8009de4:	f001 f8fe 	bl	800afe4 <strncmp>
 8009de8:	2800      	cmp	r0, #0
 8009dea:	d166      	bne.n	8009eba <__gethex+0x124>
 8009dec:	9b01      	ldr	r3, [sp, #4]
 8009dee:	5cf8      	ldrb	r0, [r7, r3]
 8009df0:	18fe      	adds	r6, r7, r3
 8009df2:	f7ff ffbb 	bl	8009d6c <__hexdig_fun>
 8009df6:	2800      	cmp	r0, #0
 8009df8:	d062      	beq.n	8009ec0 <__gethex+0x12a>
 8009dfa:	4633      	mov	r3, r6
 8009dfc:	7818      	ldrb	r0, [r3, #0]
 8009dfe:	2830      	cmp	r0, #48	; 0x30
 8009e00:	461f      	mov	r7, r3
 8009e02:	f103 0301 	add.w	r3, r3, #1
 8009e06:	d0f9      	beq.n	8009dfc <__gethex+0x66>
 8009e08:	f7ff ffb0 	bl	8009d6c <__hexdig_fun>
 8009e0c:	fab0 f580 	clz	r5, r0
 8009e10:	096d      	lsrs	r5, r5, #5
 8009e12:	4634      	mov	r4, r6
 8009e14:	f04f 0b01 	mov.w	fp, #1
 8009e18:	463a      	mov	r2, r7
 8009e1a:	4616      	mov	r6, r2
 8009e1c:	3201      	adds	r2, #1
 8009e1e:	7830      	ldrb	r0, [r6, #0]
 8009e20:	f7ff ffa4 	bl	8009d6c <__hexdig_fun>
 8009e24:	2800      	cmp	r0, #0
 8009e26:	d1f8      	bne.n	8009e1a <__gethex+0x84>
 8009e28:	9a01      	ldr	r2, [sp, #4]
 8009e2a:	9903      	ldr	r1, [sp, #12]
 8009e2c:	4630      	mov	r0, r6
 8009e2e:	f001 f8d9 	bl	800afe4 <strncmp>
 8009e32:	b950      	cbnz	r0, 8009e4a <__gethex+0xb4>
 8009e34:	b954      	cbnz	r4, 8009e4c <__gethex+0xb6>
 8009e36:	9b01      	ldr	r3, [sp, #4]
 8009e38:	18f4      	adds	r4, r6, r3
 8009e3a:	4622      	mov	r2, r4
 8009e3c:	4616      	mov	r6, r2
 8009e3e:	3201      	adds	r2, #1
 8009e40:	7830      	ldrb	r0, [r6, #0]
 8009e42:	f7ff ff93 	bl	8009d6c <__hexdig_fun>
 8009e46:	2800      	cmp	r0, #0
 8009e48:	d1f8      	bne.n	8009e3c <__gethex+0xa6>
 8009e4a:	b10c      	cbz	r4, 8009e50 <__gethex+0xba>
 8009e4c:	1ba4      	subs	r4, r4, r6
 8009e4e:	00a4      	lsls	r4, r4, #2
 8009e50:	7833      	ldrb	r3, [r6, #0]
 8009e52:	2b50      	cmp	r3, #80	; 0x50
 8009e54:	d001      	beq.n	8009e5a <__gethex+0xc4>
 8009e56:	2b70      	cmp	r3, #112	; 0x70
 8009e58:	d140      	bne.n	8009edc <__gethex+0x146>
 8009e5a:	7873      	ldrb	r3, [r6, #1]
 8009e5c:	2b2b      	cmp	r3, #43	; 0x2b
 8009e5e:	d031      	beq.n	8009ec4 <__gethex+0x12e>
 8009e60:	2b2d      	cmp	r3, #45	; 0x2d
 8009e62:	d033      	beq.n	8009ecc <__gethex+0x136>
 8009e64:	1c71      	adds	r1, r6, #1
 8009e66:	f04f 0900 	mov.w	r9, #0
 8009e6a:	7808      	ldrb	r0, [r1, #0]
 8009e6c:	f7ff ff7e 	bl	8009d6c <__hexdig_fun>
 8009e70:	1e43      	subs	r3, r0, #1
 8009e72:	b2db      	uxtb	r3, r3
 8009e74:	2b18      	cmp	r3, #24
 8009e76:	d831      	bhi.n	8009edc <__gethex+0x146>
 8009e78:	f1a0 0210 	sub.w	r2, r0, #16
 8009e7c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009e80:	f7ff ff74 	bl	8009d6c <__hexdig_fun>
 8009e84:	1e43      	subs	r3, r0, #1
 8009e86:	b2db      	uxtb	r3, r3
 8009e88:	2b18      	cmp	r3, #24
 8009e8a:	d922      	bls.n	8009ed2 <__gethex+0x13c>
 8009e8c:	f1b9 0f00 	cmp.w	r9, #0
 8009e90:	d000      	beq.n	8009e94 <__gethex+0xfe>
 8009e92:	4252      	negs	r2, r2
 8009e94:	4414      	add	r4, r2
 8009e96:	f8ca 1000 	str.w	r1, [sl]
 8009e9a:	b30d      	cbz	r5, 8009ee0 <__gethex+0x14a>
 8009e9c:	f1bb 0f00 	cmp.w	fp, #0
 8009ea0:	bf0c      	ite	eq
 8009ea2:	2706      	moveq	r7, #6
 8009ea4:	2700      	movne	r7, #0
 8009ea6:	4638      	mov	r0, r7
 8009ea8:	b00b      	add	sp, #44	; 0x2c
 8009eaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009eae:	f10b 0b01 	add.w	fp, fp, #1
 8009eb2:	e78a      	b.n	8009dca <__gethex+0x34>
 8009eb4:	2500      	movs	r5, #0
 8009eb6:	462c      	mov	r4, r5
 8009eb8:	e7ae      	b.n	8009e18 <__gethex+0x82>
 8009eba:	463e      	mov	r6, r7
 8009ebc:	2501      	movs	r5, #1
 8009ebe:	e7c7      	b.n	8009e50 <__gethex+0xba>
 8009ec0:	4604      	mov	r4, r0
 8009ec2:	e7fb      	b.n	8009ebc <__gethex+0x126>
 8009ec4:	f04f 0900 	mov.w	r9, #0
 8009ec8:	1cb1      	adds	r1, r6, #2
 8009eca:	e7ce      	b.n	8009e6a <__gethex+0xd4>
 8009ecc:	f04f 0901 	mov.w	r9, #1
 8009ed0:	e7fa      	b.n	8009ec8 <__gethex+0x132>
 8009ed2:	230a      	movs	r3, #10
 8009ed4:	fb03 0202 	mla	r2, r3, r2, r0
 8009ed8:	3a10      	subs	r2, #16
 8009eda:	e7cf      	b.n	8009e7c <__gethex+0xe6>
 8009edc:	4631      	mov	r1, r6
 8009ede:	e7da      	b.n	8009e96 <__gethex+0x100>
 8009ee0:	1bf3      	subs	r3, r6, r7
 8009ee2:	3b01      	subs	r3, #1
 8009ee4:	4629      	mov	r1, r5
 8009ee6:	2b07      	cmp	r3, #7
 8009ee8:	dc49      	bgt.n	8009f7e <__gethex+0x1e8>
 8009eea:	9802      	ldr	r0, [sp, #8]
 8009eec:	f000 fa63 	bl	800a3b6 <_Balloc>
 8009ef0:	9b01      	ldr	r3, [sp, #4]
 8009ef2:	f100 0914 	add.w	r9, r0, #20
 8009ef6:	f04f 0b00 	mov.w	fp, #0
 8009efa:	f1c3 0301 	rsb	r3, r3, #1
 8009efe:	4605      	mov	r5, r0
 8009f00:	f8cd 9010 	str.w	r9, [sp, #16]
 8009f04:	46da      	mov	sl, fp
 8009f06:	9308      	str	r3, [sp, #32]
 8009f08:	42b7      	cmp	r7, r6
 8009f0a:	d33b      	bcc.n	8009f84 <__gethex+0x1ee>
 8009f0c:	9804      	ldr	r0, [sp, #16]
 8009f0e:	f840 ab04 	str.w	sl, [r0], #4
 8009f12:	eba0 0009 	sub.w	r0, r0, r9
 8009f16:	1080      	asrs	r0, r0, #2
 8009f18:	6128      	str	r0, [r5, #16]
 8009f1a:	0147      	lsls	r7, r0, #5
 8009f1c:	4650      	mov	r0, sl
 8009f1e:	f000 fb0e 	bl	800a53e <__hi0bits>
 8009f22:	f8d8 6000 	ldr.w	r6, [r8]
 8009f26:	1a3f      	subs	r7, r7, r0
 8009f28:	42b7      	cmp	r7, r6
 8009f2a:	dd64      	ble.n	8009ff6 <__gethex+0x260>
 8009f2c:	1bbf      	subs	r7, r7, r6
 8009f2e:	4639      	mov	r1, r7
 8009f30:	4628      	mov	r0, r5
 8009f32:	f000 fe1d 	bl	800ab70 <__any_on>
 8009f36:	4682      	mov	sl, r0
 8009f38:	b178      	cbz	r0, 8009f5a <__gethex+0x1c4>
 8009f3a:	1e7b      	subs	r3, r7, #1
 8009f3c:	1159      	asrs	r1, r3, #5
 8009f3e:	f003 021f 	and.w	r2, r3, #31
 8009f42:	f04f 0a01 	mov.w	sl, #1
 8009f46:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009f4a:	fa0a f202 	lsl.w	r2, sl, r2
 8009f4e:	420a      	tst	r2, r1
 8009f50:	d003      	beq.n	8009f5a <__gethex+0x1c4>
 8009f52:	4553      	cmp	r3, sl
 8009f54:	dc46      	bgt.n	8009fe4 <__gethex+0x24e>
 8009f56:	f04f 0a02 	mov.w	sl, #2
 8009f5a:	4639      	mov	r1, r7
 8009f5c:	4628      	mov	r0, r5
 8009f5e:	f7ff fecb 	bl	8009cf8 <rshift>
 8009f62:	443c      	add	r4, r7
 8009f64:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009f68:	42a3      	cmp	r3, r4
 8009f6a:	da52      	bge.n	800a012 <__gethex+0x27c>
 8009f6c:	4629      	mov	r1, r5
 8009f6e:	9802      	ldr	r0, [sp, #8]
 8009f70:	f000 fa55 	bl	800a41e <_Bfree>
 8009f74:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009f76:	2300      	movs	r3, #0
 8009f78:	6013      	str	r3, [r2, #0]
 8009f7a:	27a3      	movs	r7, #163	; 0xa3
 8009f7c:	e793      	b.n	8009ea6 <__gethex+0x110>
 8009f7e:	3101      	adds	r1, #1
 8009f80:	105b      	asrs	r3, r3, #1
 8009f82:	e7b0      	b.n	8009ee6 <__gethex+0x150>
 8009f84:	1e73      	subs	r3, r6, #1
 8009f86:	9305      	str	r3, [sp, #20]
 8009f88:	9a07      	ldr	r2, [sp, #28]
 8009f8a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009f8e:	4293      	cmp	r3, r2
 8009f90:	d018      	beq.n	8009fc4 <__gethex+0x22e>
 8009f92:	f1bb 0f20 	cmp.w	fp, #32
 8009f96:	d107      	bne.n	8009fa8 <__gethex+0x212>
 8009f98:	9b04      	ldr	r3, [sp, #16]
 8009f9a:	f8c3 a000 	str.w	sl, [r3]
 8009f9e:	3304      	adds	r3, #4
 8009fa0:	f04f 0a00 	mov.w	sl, #0
 8009fa4:	9304      	str	r3, [sp, #16]
 8009fa6:	46d3      	mov	fp, sl
 8009fa8:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009fac:	f7ff fede 	bl	8009d6c <__hexdig_fun>
 8009fb0:	f000 000f 	and.w	r0, r0, #15
 8009fb4:	fa00 f00b 	lsl.w	r0, r0, fp
 8009fb8:	ea4a 0a00 	orr.w	sl, sl, r0
 8009fbc:	f10b 0b04 	add.w	fp, fp, #4
 8009fc0:	9b05      	ldr	r3, [sp, #20]
 8009fc2:	e00d      	b.n	8009fe0 <__gethex+0x24a>
 8009fc4:	9b05      	ldr	r3, [sp, #20]
 8009fc6:	9a08      	ldr	r2, [sp, #32]
 8009fc8:	4413      	add	r3, r2
 8009fca:	42bb      	cmp	r3, r7
 8009fcc:	d3e1      	bcc.n	8009f92 <__gethex+0x1fc>
 8009fce:	4618      	mov	r0, r3
 8009fd0:	9a01      	ldr	r2, [sp, #4]
 8009fd2:	9903      	ldr	r1, [sp, #12]
 8009fd4:	9309      	str	r3, [sp, #36]	; 0x24
 8009fd6:	f001 f805 	bl	800afe4 <strncmp>
 8009fda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fdc:	2800      	cmp	r0, #0
 8009fde:	d1d8      	bne.n	8009f92 <__gethex+0x1fc>
 8009fe0:	461e      	mov	r6, r3
 8009fe2:	e791      	b.n	8009f08 <__gethex+0x172>
 8009fe4:	1eb9      	subs	r1, r7, #2
 8009fe6:	4628      	mov	r0, r5
 8009fe8:	f000 fdc2 	bl	800ab70 <__any_on>
 8009fec:	2800      	cmp	r0, #0
 8009fee:	d0b2      	beq.n	8009f56 <__gethex+0x1c0>
 8009ff0:	f04f 0a03 	mov.w	sl, #3
 8009ff4:	e7b1      	b.n	8009f5a <__gethex+0x1c4>
 8009ff6:	da09      	bge.n	800a00c <__gethex+0x276>
 8009ff8:	1bf7      	subs	r7, r6, r7
 8009ffa:	4629      	mov	r1, r5
 8009ffc:	463a      	mov	r2, r7
 8009ffe:	9802      	ldr	r0, [sp, #8]
 800a000:	f000 fbd8 	bl	800a7b4 <__lshift>
 800a004:	1be4      	subs	r4, r4, r7
 800a006:	4605      	mov	r5, r0
 800a008:	f100 0914 	add.w	r9, r0, #20
 800a00c:	f04f 0a00 	mov.w	sl, #0
 800a010:	e7a8      	b.n	8009f64 <__gethex+0x1ce>
 800a012:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a016:	42a0      	cmp	r0, r4
 800a018:	dd6a      	ble.n	800a0f0 <__gethex+0x35a>
 800a01a:	1b04      	subs	r4, r0, r4
 800a01c:	42a6      	cmp	r6, r4
 800a01e:	dc2e      	bgt.n	800a07e <__gethex+0x2e8>
 800a020:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a024:	2b02      	cmp	r3, #2
 800a026:	d022      	beq.n	800a06e <__gethex+0x2d8>
 800a028:	2b03      	cmp	r3, #3
 800a02a:	d024      	beq.n	800a076 <__gethex+0x2e0>
 800a02c:	2b01      	cmp	r3, #1
 800a02e:	d115      	bne.n	800a05c <__gethex+0x2c6>
 800a030:	42a6      	cmp	r6, r4
 800a032:	d113      	bne.n	800a05c <__gethex+0x2c6>
 800a034:	2e01      	cmp	r6, #1
 800a036:	dc0b      	bgt.n	800a050 <__gethex+0x2ba>
 800a038:	9a06      	ldr	r2, [sp, #24]
 800a03a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a03e:	6013      	str	r3, [r2, #0]
 800a040:	2301      	movs	r3, #1
 800a042:	612b      	str	r3, [r5, #16]
 800a044:	f8c9 3000 	str.w	r3, [r9]
 800a048:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a04a:	2762      	movs	r7, #98	; 0x62
 800a04c:	601d      	str	r5, [r3, #0]
 800a04e:	e72a      	b.n	8009ea6 <__gethex+0x110>
 800a050:	1e71      	subs	r1, r6, #1
 800a052:	4628      	mov	r0, r5
 800a054:	f000 fd8c 	bl	800ab70 <__any_on>
 800a058:	2800      	cmp	r0, #0
 800a05a:	d1ed      	bne.n	800a038 <__gethex+0x2a2>
 800a05c:	4629      	mov	r1, r5
 800a05e:	9802      	ldr	r0, [sp, #8]
 800a060:	f000 f9dd 	bl	800a41e <_Bfree>
 800a064:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a066:	2300      	movs	r3, #0
 800a068:	6013      	str	r3, [r2, #0]
 800a06a:	2750      	movs	r7, #80	; 0x50
 800a06c:	e71b      	b.n	8009ea6 <__gethex+0x110>
 800a06e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a070:	2b00      	cmp	r3, #0
 800a072:	d0e1      	beq.n	800a038 <__gethex+0x2a2>
 800a074:	e7f2      	b.n	800a05c <__gethex+0x2c6>
 800a076:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d1dd      	bne.n	800a038 <__gethex+0x2a2>
 800a07c:	e7ee      	b.n	800a05c <__gethex+0x2c6>
 800a07e:	1e67      	subs	r7, r4, #1
 800a080:	f1ba 0f00 	cmp.w	sl, #0
 800a084:	d131      	bne.n	800a0ea <__gethex+0x354>
 800a086:	b127      	cbz	r7, 800a092 <__gethex+0x2fc>
 800a088:	4639      	mov	r1, r7
 800a08a:	4628      	mov	r0, r5
 800a08c:	f000 fd70 	bl	800ab70 <__any_on>
 800a090:	4682      	mov	sl, r0
 800a092:	117a      	asrs	r2, r7, #5
 800a094:	2301      	movs	r3, #1
 800a096:	f007 071f 	and.w	r7, r7, #31
 800a09a:	fa03 f707 	lsl.w	r7, r3, r7
 800a09e:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800a0a2:	4621      	mov	r1, r4
 800a0a4:	421f      	tst	r7, r3
 800a0a6:	4628      	mov	r0, r5
 800a0a8:	bf18      	it	ne
 800a0aa:	f04a 0a02 	orrne.w	sl, sl, #2
 800a0ae:	1b36      	subs	r6, r6, r4
 800a0b0:	f7ff fe22 	bl	8009cf8 <rshift>
 800a0b4:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800a0b8:	2702      	movs	r7, #2
 800a0ba:	f1ba 0f00 	cmp.w	sl, #0
 800a0be:	d048      	beq.n	800a152 <__gethex+0x3bc>
 800a0c0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a0c4:	2b02      	cmp	r3, #2
 800a0c6:	d015      	beq.n	800a0f4 <__gethex+0x35e>
 800a0c8:	2b03      	cmp	r3, #3
 800a0ca:	d017      	beq.n	800a0fc <__gethex+0x366>
 800a0cc:	2b01      	cmp	r3, #1
 800a0ce:	d109      	bne.n	800a0e4 <__gethex+0x34e>
 800a0d0:	f01a 0f02 	tst.w	sl, #2
 800a0d4:	d006      	beq.n	800a0e4 <__gethex+0x34e>
 800a0d6:	f8d9 3000 	ldr.w	r3, [r9]
 800a0da:	ea4a 0a03 	orr.w	sl, sl, r3
 800a0de:	f01a 0f01 	tst.w	sl, #1
 800a0e2:	d10e      	bne.n	800a102 <__gethex+0x36c>
 800a0e4:	f047 0710 	orr.w	r7, r7, #16
 800a0e8:	e033      	b.n	800a152 <__gethex+0x3bc>
 800a0ea:	f04f 0a01 	mov.w	sl, #1
 800a0ee:	e7d0      	b.n	800a092 <__gethex+0x2fc>
 800a0f0:	2701      	movs	r7, #1
 800a0f2:	e7e2      	b.n	800a0ba <__gethex+0x324>
 800a0f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a0f6:	f1c3 0301 	rsb	r3, r3, #1
 800a0fa:	9315      	str	r3, [sp, #84]	; 0x54
 800a0fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d0f0      	beq.n	800a0e4 <__gethex+0x34e>
 800a102:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800a106:	f105 0314 	add.w	r3, r5, #20
 800a10a:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800a10e:	eb03 010a 	add.w	r1, r3, sl
 800a112:	f04f 0c00 	mov.w	ip, #0
 800a116:	4618      	mov	r0, r3
 800a118:	f853 2b04 	ldr.w	r2, [r3], #4
 800a11c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a120:	d01c      	beq.n	800a15c <__gethex+0x3c6>
 800a122:	3201      	adds	r2, #1
 800a124:	6002      	str	r2, [r0, #0]
 800a126:	2f02      	cmp	r7, #2
 800a128:	f105 0314 	add.w	r3, r5, #20
 800a12c:	d138      	bne.n	800a1a0 <__gethex+0x40a>
 800a12e:	f8d8 2000 	ldr.w	r2, [r8]
 800a132:	3a01      	subs	r2, #1
 800a134:	42b2      	cmp	r2, r6
 800a136:	d10a      	bne.n	800a14e <__gethex+0x3b8>
 800a138:	1171      	asrs	r1, r6, #5
 800a13a:	2201      	movs	r2, #1
 800a13c:	f006 061f 	and.w	r6, r6, #31
 800a140:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a144:	fa02 f606 	lsl.w	r6, r2, r6
 800a148:	421e      	tst	r6, r3
 800a14a:	bf18      	it	ne
 800a14c:	4617      	movne	r7, r2
 800a14e:	f047 0720 	orr.w	r7, r7, #32
 800a152:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a154:	601d      	str	r5, [r3, #0]
 800a156:	9b06      	ldr	r3, [sp, #24]
 800a158:	601c      	str	r4, [r3, #0]
 800a15a:	e6a4      	b.n	8009ea6 <__gethex+0x110>
 800a15c:	4299      	cmp	r1, r3
 800a15e:	f843 cc04 	str.w	ip, [r3, #-4]
 800a162:	d8d8      	bhi.n	800a116 <__gethex+0x380>
 800a164:	68ab      	ldr	r3, [r5, #8]
 800a166:	4599      	cmp	r9, r3
 800a168:	db12      	blt.n	800a190 <__gethex+0x3fa>
 800a16a:	6869      	ldr	r1, [r5, #4]
 800a16c:	9802      	ldr	r0, [sp, #8]
 800a16e:	3101      	adds	r1, #1
 800a170:	f000 f921 	bl	800a3b6 <_Balloc>
 800a174:	692a      	ldr	r2, [r5, #16]
 800a176:	3202      	adds	r2, #2
 800a178:	f105 010c 	add.w	r1, r5, #12
 800a17c:	4683      	mov	fp, r0
 800a17e:	0092      	lsls	r2, r2, #2
 800a180:	300c      	adds	r0, #12
 800a182:	f000 f90d 	bl	800a3a0 <memcpy>
 800a186:	4629      	mov	r1, r5
 800a188:	9802      	ldr	r0, [sp, #8]
 800a18a:	f000 f948 	bl	800a41e <_Bfree>
 800a18e:	465d      	mov	r5, fp
 800a190:	692b      	ldr	r3, [r5, #16]
 800a192:	1c5a      	adds	r2, r3, #1
 800a194:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800a198:	612a      	str	r2, [r5, #16]
 800a19a:	2201      	movs	r2, #1
 800a19c:	615a      	str	r2, [r3, #20]
 800a19e:	e7c2      	b.n	800a126 <__gethex+0x390>
 800a1a0:	692a      	ldr	r2, [r5, #16]
 800a1a2:	454a      	cmp	r2, r9
 800a1a4:	dd0b      	ble.n	800a1be <__gethex+0x428>
 800a1a6:	2101      	movs	r1, #1
 800a1a8:	4628      	mov	r0, r5
 800a1aa:	f7ff fda5 	bl	8009cf8 <rshift>
 800a1ae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a1b2:	3401      	adds	r4, #1
 800a1b4:	42a3      	cmp	r3, r4
 800a1b6:	f6ff aed9 	blt.w	8009f6c <__gethex+0x1d6>
 800a1ba:	2701      	movs	r7, #1
 800a1bc:	e7c7      	b.n	800a14e <__gethex+0x3b8>
 800a1be:	f016 061f 	ands.w	r6, r6, #31
 800a1c2:	d0fa      	beq.n	800a1ba <__gethex+0x424>
 800a1c4:	449a      	add	sl, r3
 800a1c6:	f1c6 0620 	rsb	r6, r6, #32
 800a1ca:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800a1ce:	f000 f9b6 	bl	800a53e <__hi0bits>
 800a1d2:	42b0      	cmp	r0, r6
 800a1d4:	dbe7      	blt.n	800a1a6 <__gethex+0x410>
 800a1d6:	e7f0      	b.n	800a1ba <__gethex+0x424>

0800a1d8 <L_shift>:
 800a1d8:	f1c2 0208 	rsb	r2, r2, #8
 800a1dc:	0092      	lsls	r2, r2, #2
 800a1de:	b570      	push	{r4, r5, r6, lr}
 800a1e0:	f1c2 0620 	rsb	r6, r2, #32
 800a1e4:	6843      	ldr	r3, [r0, #4]
 800a1e6:	6804      	ldr	r4, [r0, #0]
 800a1e8:	fa03 f506 	lsl.w	r5, r3, r6
 800a1ec:	432c      	orrs	r4, r5
 800a1ee:	40d3      	lsrs	r3, r2
 800a1f0:	6004      	str	r4, [r0, #0]
 800a1f2:	f840 3f04 	str.w	r3, [r0, #4]!
 800a1f6:	4288      	cmp	r0, r1
 800a1f8:	d3f4      	bcc.n	800a1e4 <L_shift+0xc>
 800a1fa:	bd70      	pop	{r4, r5, r6, pc}

0800a1fc <__match>:
 800a1fc:	b530      	push	{r4, r5, lr}
 800a1fe:	6803      	ldr	r3, [r0, #0]
 800a200:	3301      	adds	r3, #1
 800a202:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a206:	b914      	cbnz	r4, 800a20e <__match+0x12>
 800a208:	6003      	str	r3, [r0, #0]
 800a20a:	2001      	movs	r0, #1
 800a20c:	bd30      	pop	{r4, r5, pc}
 800a20e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a212:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a216:	2d19      	cmp	r5, #25
 800a218:	bf98      	it	ls
 800a21a:	3220      	addls	r2, #32
 800a21c:	42a2      	cmp	r2, r4
 800a21e:	d0f0      	beq.n	800a202 <__match+0x6>
 800a220:	2000      	movs	r0, #0
 800a222:	e7f3      	b.n	800a20c <__match+0x10>

0800a224 <__hexnan>:
 800a224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a228:	680b      	ldr	r3, [r1, #0]
 800a22a:	6801      	ldr	r1, [r0, #0]
 800a22c:	115f      	asrs	r7, r3, #5
 800a22e:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800a232:	f013 031f 	ands.w	r3, r3, #31
 800a236:	b087      	sub	sp, #28
 800a238:	bf18      	it	ne
 800a23a:	3704      	addne	r7, #4
 800a23c:	2500      	movs	r5, #0
 800a23e:	1f3e      	subs	r6, r7, #4
 800a240:	4682      	mov	sl, r0
 800a242:	4690      	mov	r8, r2
 800a244:	9301      	str	r3, [sp, #4]
 800a246:	f847 5c04 	str.w	r5, [r7, #-4]
 800a24a:	46b1      	mov	r9, r6
 800a24c:	4634      	mov	r4, r6
 800a24e:	9502      	str	r5, [sp, #8]
 800a250:	46ab      	mov	fp, r5
 800a252:	784a      	ldrb	r2, [r1, #1]
 800a254:	1c4b      	adds	r3, r1, #1
 800a256:	9303      	str	r3, [sp, #12]
 800a258:	b342      	cbz	r2, 800a2ac <__hexnan+0x88>
 800a25a:	4610      	mov	r0, r2
 800a25c:	9105      	str	r1, [sp, #20]
 800a25e:	9204      	str	r2, [sp, #16]
 800a260:	f7ff fd84 	bl	8009d6c <__hexdig_fun>
 800a264:	2800      	cmp	r0, #0
 800a266:	d143      	bne.n	800a2f0 <__hexnan+0xcc>
 800a268:	9a04      	ldr	r2, [sp, #16]
 800a26a:	9905      	ldr	r1, [sp, #20]
 800a26c:	2a20      	cmp	r2, #32
 800a26e:	d818      	bhi.n	800a2a2 <__hexnan+0x7e>
 800a270:	9b02      	ldr	r3, [sp, #8]
 800a272:	459b      	cmp	fp, r3
 800a274:	dd13      	ble.n	800a29e <__hexnan+0x7a>
 800a276:	454c      	cmp	r4, r9
 800a278:	d206      	bcs.n	800a288 <__hexnan+0x64>
 800a27a:	2d07      	cmp	r5, #7
 800a27c:	dc04      	bgt.n	800a288 <__hexnan+0x64>
 800a27e:	462a      	mov	r2, r5
 800a280:	4649      	mov	r1, r9
 800a282:	4620      	mov	r0, r4
 800a284:	f7ff ffa8 	bl	800a1d8 <L_shift>
 800a288:	4544      	cmp	r4, r8
 800a28a:	d944      	bls.n	800a316 <__hexnan+0xf2>
 800a28c:	2300      	movs	r3, #0
 800a28e:	f1a4 0904 	sub.w	r9, r4, #4
 800a292:	f844 3c04 	str.w	r3, [r4, #-4]
 800a296:	f8cd b008 	str.w	fp, [sp, #8]
 800a29a:	464c      	mov	r4, r9
 800a29c:	461d      	mov	r5, r3
 800a29e:	9903      	ldr	r1, [sp, #12]
 800a2a0:	e7d7      	b.n	800a252 <__hexnan+0x2e>
 800a2a2:	2a29      	cmp	r2, #41	; 0x29
 800a2a4:	d14a      	bne.n	800a33c <__hexnan+0x118>
 800a2a6:	3102      	adds	r1, #2
 800a2a8:	f8ca 1000 	str.w	r1, [sl]
 800a2ac:	f1bb 0f00 	cmp.w	fp, #0
 800a2b0:	d044      	beq.n	800a33c <__hexnan+0x118>
 800a2b2:	454c      	cmp	r4, r9
 800a2b4:	d206      	bcs.n	800a2c4 <__hexnan+0xa0>
 800a2b6:	2d07      	cmp	r5, #7
 800a2b8:	dc04      	bgt.n	800a2c4 <__hexnan+0xa0>
 800a2ba:	462a      	mov	r2, r5
 800a2bc:	4649      	mov	r1, r9
 800a2be:	4620      	mov	r0, r4
 800a2c0:	f7ff ff8a 	bl	800a1d8 <L_shift>
 800a2c4:	4544      	cmp	r4, r8
 800a2c6:	d928      	bls.n	800a31a <__hexnan+0xf6>
 800a2c8:	4643      	mov	r3, r8
 800a2ca:	f854 2b04 	ldr.w	r2, [r4], #4
 800a2ce:	f843 2b04 	str.w	r2, [r3], #4
 800a2d2:	42a6      	cmp	r6, r4
 800a2d4:	d2f9      	bcs.n	800a2ca <__hexnan+0xa6>
 800a2d6:	2200      	movs	r2, #0
 800a2d8:	f843 2b04 	str.w	r2, [r3], #4
 800a2dc:	429e      	cmp	r6, r3
 800a2de:	d2fb      	bcs.n	800a2d8 <__hexnan+0xb4>
 800a2e0:	6833      	ldr	r3, [r6, #0]
 800a2e2:	b91b      	cbnz	r3, 800a2ec <__hexnan+0xc8>
 800a2e4:	4546      	cmp	r6, r8
 800a2e6:	d127      	bne.n	800a338 <__hexnan+0x114>
 800a2e8:	2301      	movs	r3, #1
 800a2ea:	6033      	str	r3, [r6, #0]
 800a2ec:	2005      	movs	r0, #5
 800a2ee:	e026      	b.n	800a33e <__hexnan+0x11a>
 800a2f0:	3501      	adds	r5, #1
 800a2f2:	2d08      	cmp	r5, #8
 800a2f4:	f10b 0b01 	add.w	fp, fp, #1
 800a2f8:	dd06      	ble.n	800a308 <__hexnan+0xe4>
 800a2fa:	4544      	cmp	r4, r8
 800a2fc:	d9cf      	bls.n	800a29e <__hexnan+0x7a>
 800a2fe:	2300      	movs	r3, #0
 800a300:	f844 3c04 	str.w	r3, [r4, #-4]
 800a304:	2501      	movs	r5, #1
 800a306:	3c04      	subs	r4, #4
 800a308:	6822      	ldr	r2, [r4, #0]
 800a30a:	f000 000f 	and.w	r0, r0, #15
 800a30e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a312:	6020      	str	r0, [r4, #0]
 800a314:	e7c3      	b.n	800a29e <__hexnan+0x7a>
 800a316:	2508      	movs	r5, #8
 800a318:	e7c1      	b.n	800a29e <__hexnan+0x7a>
 800a31a:	9b01      	ldr	r3, [sp, #4]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d0df      	beq.n	800a2e0 <__hexnan+0xbc>
 800a320:	f04f 32ff 	mov.w	r2, #4294967295
 800a324:	f1c3 0320 	rsb	r3, r3, #32
 800a328:	fa22 f303 	lsr.w	r3, r2, r3
 800a32c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800a330:	401a      	ands	r2, r3
 800a332:	f847 2c04 	str.w	r2, [r7, #-4]
 800a336:	e7d3      	b.n	800a2e0 <__hexnan+0xbc>
 800a338:	3e04      	subs	r6, #4
 800a33a:	e7d1      	b.n	800a2e0 <__hexnan+0xbc>
 800a33c:	2004      	movs	r0, #4
 800a33e:	b007      	add	sp, #28
 800a340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a344 <__locale_ctype_ptr_l>:
 800a344:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800a348:	4770      	bx	lr

0800a34a <__localeconv_l>:
 800a34a:	30f0      	adds	r0, #240	; 0xf0
 800a34c:	4770      	bx	lr
	...

0800a350 <_localeconv_r>:
 800a350:	4b04      	ldr	r3, [pc, #16]	; (800a364 <_localeconv_r+0x14>)
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	6a18      	ldr	r0, [r3, #32]
 800a356:	4b04      	ldr	r3, [pc, #16]	; (800a368 <_localeconv_r+0x18>)
 800a358:	2800      	cmp	r0, #0
 800a35a:	bf08      	it	eq
 800a35c:	4618      	moveq	r0, r3
 800a35e:	30f0      	adds	r0, #240	; 0xf0
 800a360:	4770      	bx	lr
 800a362:	bf00      	nop
 800a364:	20000030 	.word	0x20000030
 800a368:	20000094 	.word	0x20000094

0800a36c <malloc>:
 800a36c:	4b02      	ldr	r3, [pc, #8]	; (800a378 <malloc+0xc>)
 800a36e:	4601      	mov	r1, r0
 800a370:	6818      	ldr	r0, [r3, #0]
 800a372:	f000 bc7b 	b.w	800ac6c <_malloc_r>
 800a376:	bf00      	nop
 800a378:	20000030 	.word	0x20000030

0800a37c <__ascii_mbtowc>:
 800a37c:	b082      	sub	sp, #8
 800a37e:	b901      	cbnz	r1, 800a382 <__ascii_mbtowc+0x6>
 800a380:	a901      	add	r1, sp, #4
 800a382:	b142      	cbz	r2, 800a396 <__ascii_mbtowc+0x1a>
 800a384:	b14b      	cbz	r3, 800a39a <__ascii_mbtowc+0x1e>
 800a386:	7813      	ldrb	r3, [r2, #0]
 800a388:	600b      	str	r3, [r1, #0]
 800a38a:	7812      	ldrb	r2, [r2, #0]
 800a38c:	1c10      	adds	r0, r2, #0
 800a38e:	bf18      	it	ne
 800a390:	2001      	movne	r0, #1
 800a392:	b002      	add	sp, #8
 800a394:	4770      	bx	lr
 800a396:	4610      	mov	r0, r2
 800a398:	e7fb      	b.n	800a392 <__ascii_mbtowc+0x16>
 800a39a:	f06f 0001 	mvn.w	r0, #1
 800a39e:	e7f8      	b.n	800a392 <__ascii_mbtowc+0x16>

0800a3a0 <memcpy>:
 800a3a0:	b510      	push	{r4, lr}
 800a3a2:	1e43      	subs	r3, r0, #1
 800a3a4:	440a      	add	r2, r1
 800a3a6:	4291      	cmp	r1, r2
 800a3a8:	d100      	bne.n	800a3ac <memcpy+0xc>
 800a3aa:	bd10      	pop	{r4, pc}
 800a3ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a3b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a3b4:	e7f7      	b.n	800a3a6 <memcpy+0x6>

0800a3b6 <_Balloc>:
 800a3b6:	b570      	push	{r4, r5, r6, lr}
 800a3b8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a3ba:	4604      	mov	r4, r0
 800a3bc:	460e      	mov	r6, r1
 800a3be:	b93d      	cbnz	r5, 800a3d0 <_Balloc+0x1a>
 800a3c0:	2010      	movs	r0, #16
 800a3c2:	f7ff ffd3 	bl	800a36c <malloc>
 800a3c6:	6260      	str	r0, [r4, #36]	; 0x24
 800a3c8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a3cc:	6005      	str	r5, [r0, #0]
 800a3ce:	60c5      	str	r5, [r0, #12]
 800a3d0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800a3d2:	68eb      	ldr	r3, [r5, #12]
 800a3d4:	b183      	cbz	r3, 800a3f8 <_Balloc+0x42>
 800a3d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a3d8:	68db      	ldr	r3, [r3, #12]
 800a3da:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800a3de:	b9b8      	cbnz	r0, 800a410 <_Balloc+0x5a>
 800a3e0:	2101      	movs	r1, #1
 800a3e2:	fa01 f506 	lsl.w	r5, r1, r6
 800a3e6:	1d6a      	adds	r2, r5, #5
 800a3e8:	0092      	lsls	r2, r2, #2
 800a3ea:	4620      	mov	r0, r4
 800a3ec:	f000 fbe1 	bl	800abb2 <_calloc_r>
 800a3f0:	b160      	cbz	r0, 800a40c <_Balloc+0x56>
 800a3f2:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800a3f6:	e00e      	b.n	800a416 <_Balloc+0x60>
 800a3f8:	2221      	movs	r2, #33	; 0x21
 800a3fa:	2104      	movs	r1, #4
 800a3fc:	4620      	mov	r0, r4
 800a3fe:	f000 fbd8 	bl	800abb2 <_calloc_r>
 800a402:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a404:	60e8      	str	r0, [r5, #12]
 800a406:	68db      	ldr	r3, [r3, #12]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d1e4      	bne.n	800a3d6 <_Balloc+0x20>
 800a40c:	2000      	movs	r0, #0
 800a40e:	bd70      	pop	{r4, r5, r6, pc}
 800a410:	6802      	ldr	r2, [r0, #0]
 800a412:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800a416:	2300      	movs	r3, #0
 800a418:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a41c:	e7f7      	b.n	800a40e <_Balloc+0x58>

0800a41e <_Bfree>:
 800a41e:	b570      	push	{r4, r5, r6, lr}
 800a420:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a422:	4606      	mov	r6, r0
 800a424:	460d      	mov	r5, r1
 800a426:	b93c      	cbnz	r4, 800a438 <_Bfree+0x1a>
 800a428:	2010      	movs	r0, #16
 800a42a:	f7ff ff9f 	bl	800a36c <malloc>
 800a42e:	6270      	str	r0, [r6, #36]	; 0x24
 800a430:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a434:	6004      	str	r4, [r0, #0]
 800a436:	60c4      	str	r4, [r0, #12]
 800a438:	b13d      	cbz	r5, 800a44a <_Bfree+0x2c>
 800a43a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a43c:	686a      	ldr	r2, [r5, #4]
 800a43e:	68db      	ldr	r3, [r3, #12]
 800a440:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a444:	6029      	str	r1, [r5, #0]
 800a446:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800a44a:	bd70      	pop	{r4, r5, r6, pc}

0800a44c <__multadd>:
 800a44c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a450:	690d      	ldr	r5, [r1, #16]
 800a452:	461f      	mov	r7, r3
 800a454:	4606      	mov	r6, r0
 800a456:	460c      	mov	r4, r1
 800a458:	f101 0c14 	add.w	ip, r1, #20
 800a45c:	2300      	movs	r3, #0
 800a45e:	f8dc 0000 	ldr.w	r0, [ip]
 800a462:	b281      	uxth	r1, r0
 800a464:	fb02 7101 	mla	r1, r2, r1, r7
 800a468:	0c0f      	lsrs	r7, r1, #16
 800a46a:	0c00      	lsrs	r0, r0, #16
 800a46c:	fb02 7000 	mla	r0, r2, r0, r7
 800a470:	b289      	uxth	r1, r1
 800a472:	3301      	adds	r3, #1
 800a474:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800a478:	429d      	cmp	r5, r3
 800a47a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800a47e:	f84c 1b04 	str.w	r1, [ip], #4
 800a482:	dcec      	bgt.n	800a45e <__multadd+0x12>
 800a484:	b1d7      	cbz	r7, 800a4bc <__multadd+0x70>
 800a486:	68a3      	ldr	r3, [r4, #8]
 800a488:	42ab      	cmp	r3, r5
 800a48a:	dc12      	bgt.n	800a4b2 <__multadd+0x66>
 800a48c:	6861      	ldr	r1, [r4, #4]
 800a48e:	4630      	mov	r0, r6
 800a490:	3101      	adds	r1, #1
 800a492:	f7ff ff90 	bl	800a3b6 <_Balloc>
 800a496:	6922      	ldr	r2, [r4, #16]
 800a498:	3202      	adds	r2, #2
 800a49a:	f104 010c 	add.w	r1, r4, #12
 800a49e:	4680      	mov	r8, r0
 800a4a0:	0092      	lsls	r2, r2, #2
 800a4a2:	300c      	adds	r0, #12
 800a4a4:	f7ff ff7c 	bl	800a3a0 <memcpy>
 800a4a8:	4621      	mov	r1, r4
 800a4aa:	4630      	mov	r0, r6
 800a4ac:	f7ff ffb7 	bl	800a41e <_Bfree>
 800a4b0:	4644      	mov	r4, r8
 800a4b2:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a4b6:	3501      	adds	r5, #1
 800a4b8:	615f      	str	r7, [r3, #20]
 800a4ba:	6125      	str	r5, [r4, #16]
 800a4bc:	4620      	mov	r0, r4
 800a4be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a4c2 <__s2b>:
 800a4c2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a4c6:	460c      	mov	r4, r1
 800a4c8:	4615      	mov	r5, r2
 800a4ca:	461f      	mov	r7, r3
 800a4cc:	2209      	movs	r2, #9
 800a4ce:	3308      	adds	r3, #8
 800a4d0:	4606      	mov	r6, r0
 800a4d2:	fb93 f3f2 	sdiv	r3, r3, r2
 800a4d6:	2100      	movs	r1, #0
 800a4d8:	2201      	movs	r2, #1
 800a4da:	429a      	cmp	r2, r3
 800a4dc:	db20      	blt.n	800a520 <__s2b+0x5e>
 800a4de:	4630      	mov	r0, r6
 800a4e0:	f7ff ff69 	bl	800a3b6 <_Balloc>
 800a4e4:	9b08      	ldr	r3, [sp, #32]
 800a4e6:	6143      	str	r3, [r0, #20]
 800a4e8:	2d09      	cmp	r5, #9
 800a4ea:	f04f 0301 	mov.w	r3, #1
 800a4ee:	6103      	str	r3, [r0, #16]
 800a4f0:	dd19      	ble.n	800a526 <__s2b+0x64>
 800a4f2:	f104 0809 	add.w	r8, r4, #9
 800a4f6:	46c1      	mov	r9, r8
 800a4f8:	442c      	add	r4, r5
 800a4fa:	f819 3b01 	ldrb.w	r3, [r9], #1
 800a4fe:	4601      	mov	r1, r0
 800a500:	3b30      	subs	r3, #48	; 0x30
 800a502:	220a      	movs	r2, #10
 800a504:	4630      	mov	r0, r6
 800a506:	f7ff ffa1 	bl	800a44c <__multadd>
 800a50a:	45a1      	cmp	r9, r4
 800a50c:	d1f5      	bne.n	800a4fa <__s2b+0x38>
 800a50e:	eb08 0405 	add.w	r4, r8, r5
 800a512:	3c08      	subs	r4, #8
 800a514:	1b2d      	subs	r5, r5, r4
 800a516:	1963      	adds	r3, r4, r5
 800a518:	42bb      	cmp	r3, r7
 800a51a:	db07      	blt.n	800a52c <__s2b+0x6a>
 800a51c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a520:	0052      	lsls	r2, r2, #1
 800a522:	3101      	adds	r1, #1
 800a524:	e7d9      	b.n	800a4da <__s2b+0x18>
 800a526:	340a      	adds	r4, #10
 800a528:	2509      	movs	r5, #9
 800a52a:	e7f3      	b.n	800a514 <__s2b+0x52>
 800a52c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a530:	4601      	mov	r1, r0
 800a532:	3b30      	subs	r3, #48	; 0x30
 800a534:	220a      	movs	r2, #10
 800a536:	4630      	mov	r0, r6
 800a538:	f7ff ff88 	bl	800a44c <__multadd>
 800a53c:	e7eb      	b.n	800a516 <__s2b+0x54>

0800a53e <__hi0bits>:
 800a53e:	0c02      	lsrs	r2, r0, #16
 800a540:	0412      	lsls	r2, r2, #16
 800a542:	4603      	mov	r3, r0
 800a544:	b9b2      	cbnz	r2, 800a574 <__hi0bits+0x36>
 800a546:	0403      	lsls	r3, r0, #16
 800a548:	2010      	movs	r0, #16
 800a54a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800a54e:	bf04      	itt	eq
 800a550:	021b      	lsleq	r3, r3, #8
 800a552:	3008      	addeq	r0, #8
 800a554:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800a558:	bf04      	itt	eq
 800a55a:	011b      	lsleq	r3, r3, #4
 800a55c:	3004      	addeq	r0, #4
 800a55e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800a562:	bf04      	itt	eq
 800a564:	009b      	lsleq	r3, r3, #2
 800a566:	3002      	addeq	r0, #2
 800a568:	2b00      	cmp	r3, #0
 800a56a:	db06      	blt.n	800a57a <__hi0bits+0x3c>
 800a56c:	005b      	lsls	r3, r3, #1
 800a56e:	d503      	bpl.n	800a578 <__hi0bits+0x3a>
 800a570:	3001      	adds	r0, #1
 800a572:	4770      	bx	lr
 800a574:	2000      	movs	r0, #0
 800a576:	e7e8      	b.n	800a54a <__hi0bits+0xc>
 800a578:	2020      	movs	r0, #32
 800a57a:	4770      	bx	lr

0800a57c <__lo0bits>:
 800a57c:	6803      	ldr	r3, [r0, #0]
 800a57e:	f013 0207 	ands.w	r2, r3, #7
 800a582:	4601      	mov	r1, r0
 800a584:	d00b      	beq.n	800a59e <__lo0bits+0x22>
 800a586:	07da      	lsls	r2, r3, #31
 800a588:	d423      	bmi.n	800a5d2 <__lo0bits+0x56>
 800a58a:	0798      	lsls	r0, r3, #30
 800a58c:	bf49      	itett	mi
 800a58e:	085b      	lsrmi	r3, r3, #1
 800a590:	089b      	lsrpl	r3, r3, #2
 800a592:	2001      	movmi	r0, #1
 800a594:	600b      	strmi	r3, [r1, #0]
 800a596:	bf5c      	itt	pl
 800a598:	600b      	strpl	r3, [r1, #0]
 800a59a:	2002      	movpl	r0, #2
 800a59c:	4770      	bx	lr
 800a59e:	b298      	uxth	r0, r3
 800a5a0:	b9a8      	cbnz	r0, 800a5ce <__lo0bits+0x52>
 800a5a2:	0c1b      	lsrs	r3, r3, #16
 800a5a4:	2010      	movs	r0, #16
 800a5a6:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a5aa:	bf04      	itt	eq
 800a5ac:	0a1b      	lsreq	r3, r3, #8
 800a5ae:	3008      	addeq	r0, #8
 800a5b0:	071a      	lsls	r2, r3, #28
 800a5b2:	bf04      	itt	eq
 800a5b4:	091b      	lsreq	r3, r3, #4
 800a5b6:	3004      	addeq	r0, #4
 800a5b8:	079a      	lsls	r2, r3, #30
 800a5ba:	bf04      	itt	eq
 800a5bc:	089b      	lsreq	r3, r3, #2
 800a5be:	3002      	addeq	r0, #2
 800a5c0:	07da      	lsls	r2, r3, #31
 800a5c2:	d402      	bmi.n	800a5ca <__lo0bits+0x4e>
 800a5c4:	085b      	lsrs	r3, r3, #1
 800a5c6:	d006      	beq.n	800a5d6 <__lo0bits+0x5a>
 800a5c8:	3001      	adds	r0, #1
 800a5ca:	600b      	str	r3, [r1, #0]
 800a5cc:	4770      	bx	lr
 800a5ce:	4610      	mov	r0, r2
 800a5d0:	e7e9      	b.n	800a5a6 <__lo0bits+0x2a>
 800a5d2:	2000      	movs	r0, #0
 800a5d4:	4770      	bx	lr
 800a5d6:	2020      	movs	r0, #32
 800a5d8:	4770      	bx	lr

0800a5da <__i2b>:
 800a5da:	b510      	push	{r4, lr}
 800a5dc:	460c      	mov	r4, r1
 800a5de:	2101      	movs	r1, #1
 800a5e0:	f7ff fee9 	bl	800a3b6 <_Balloc>
 800a5e4:	2201      	movs	r2, #1
 800a5e6:	6144      	str	r4, [r0, #20]
 800a5e8:	6102      	str	r2, [r0, #16]
 800a5ea:	bd10      	pop	{r4, pc}

0800a5ec <__multiply>:
 800a5ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5f0:	4614      	mov	r4, r2
 800a5f2:	690a      	ldr	r2, [r1, #16]
 800a5f4:	6923      	ldr	r3, [r4, #16]
 800a5f6:	429a      	cmp	r2, r3
 800a5f8:	bfb8      	it	lt
 800a5fa:	460b      	movlt	r3, r1
 800a5fc:	4688      	mov	r8, r1
 800a5fe:	bfbc      	itt	lt
 800a600:	46a0      	movlt	r8, r4
 800a602:	461c      	movlt	r4, r3
 800a604:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a608:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a60c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a610:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a614:	eb07 0609 	add.w	r6, r7, r9
 800a618:	42b3      	cmp	r3, r6
 800a61a:	bfb8      	it	lt
 800a61c:	3101      	addlt	r1, #1
 800a61e:	f7ff feca 	bl	800a3b6 <_Balloc>
 800a622:	f100 0514 	add.w	r5, r0, #20
 800a626:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800a62a:	462b      	mov	r3, r5
 800a62c:	2200      	movs	r2, #0
 800a62e:	4573      	cmp	r3, lr
 800a630:	d316      	bcc.n	800a660 <__multiply+0x74>
 800a632:	f104 0214 	add.w	r2, r4, #20
 800a636:	f108 0114 	add.w	r1, r8, #20
 800a63a:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800a63e:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800a642:	9300      	str	r3, [sp, #0]
 800a644:	9b00      	ldr	r3, [sp, #0]
 800a646:	9201      	str	r2, [sp, #4]
 800a648:	4293      	cmp	r3, r2
 800a64a:	d80c      	bhi.n	800a666 <__multiply+0x7a>
 800a64c:	2e00      	cmp	r6, #0
 800a64e:	dd03      	ble.n	800a658 <__multiply+0x6c>
 800a650:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a654:	2b00      	cmp	r3, #0
 800a656:	d05d      	beq.n	800a714 <__multiply+0x128>
 800a658:	6106      	str	r6, [r0, #16]
 800a65a:	b003      	add	sp, #12
 800a65c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a660:	f843 2b04 	str.w	r2, [r3], #4
 800a664:	e7e3      	b.n	800a62e <__multiply+0x42>
 800a666:	f8b2 b000 	ldrh.w	fp, [r2]
 800a66a:	f1bb 0f00 	cmp.w	fp, #0
 800a66e:	d023      	beq.n	800a6b8 <__multiply+0xcc>
 800a670:	4689      	mov	r9, r1
 800a672:	46ac      	mov	ip, r5
 800a674:	f04f 0800 	mov.w	r8, #0
 800a678:	f859 4b04 	ldr.w	r4, [r9], #4
 800a67c:	f8dc a000 	ldr.w	sl, [ip]
 800a680:	b2a3      	uxth	r3, r4
 800a682:	fa1f fa8a 	uxth.w	sl, sl
 800a686:	fb0b a303 	mla	r3, fp, r3, sl
 800a68a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a68e:	f8dc 4000 	ldr.w	r4, [ip]
 800a692:	4443      	add	r3, r8
 800a694:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800a698:	fb0b 840a 	mla	r4, fp, sl, r8
 800a69c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800a6a0:	46e2      	mov	sl, ip
 800a6a2:	b29b      	uxth	r3, r3
 800a6a4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a6a8:	454f      	cmp	r7, r9
 800a6aa:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800a6ae:	f84a 3b04 	str.w	r3, [sl], #4
 800a6b2:	d82b      	bhi.n	800a70c <__multiply+0x120>
 800a6b4:	f8cc 8004 	str.w	r8, [ip, #4]
 800a6b8:	9b01      	ldr	r3, [sp, #4]
 800a6ba:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800a6be:	3204      	adds	r2, #4
 800a6c0:	f1ba 0f00 	cmp.w	sl, #0
 800a6c4:	d020      	beq.n	800a708 <__multiply+0x11c>
 800a6c6:	682b      	ldr	r3, [r5, #0]
 800a6c8:	4689      	mov	r9, r1
 800a6ca:	46a8      	mov	r8, r5
 800a6cc:	f04f 0b00 	mov.w	fp, #0
 800a6d0:	f8b9 c000 	ldrh.w	ip, [r9]
 800a6d4:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800a6d8:	fb0a 440c 	mla	r4, sl, ip, r4
 800a6dc:	445c      	add	r4, fp
 800a6de:	46c4      	mov	ip, r8
 800a6e0:	b29b      	uxth	r3, r3
 800a6e2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a6e6:	f84c 3b04 	str.w	r3, [ip], #4
 800a6ea:	f859 3b04 	ldr.w	r3, [r9], #4
 800a6ee:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800a6f2:	0c1b      	lsrs	r3, r3, #16
 800a6f4:	fb0a b303 	mla	r3, sl, r3, fp
 800a6f8:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800a6fc:	454f      	cmp	r7, r9
 800a6fe:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800a702:	d805      	bhi.n	800a710 <__multiply+0x124>
 800a704:	f8c8 3004 	str.w	r3, [r8, #4]
 800a708:	3504      	adds	r5, #4
 800a70a:	e79b      	b.n	800a644 <__multiply+0x58>
 800a70c:	46d4      	mov	ip, sl
 800a70e:	e7b3      	b.n	800a678 <__multiply+0x8c>
 800a710:	46e0      	mov	r8, ip
 800a712:	e7dd      	b.n	800a6d0 <__multiply+0xe4>
 800a714:	3e01      	subs	r6, #1
 800a716:	e799      	b.n	800a64c <__multiply+0x60>

0800a718 <__pow5mult>:
 800a718:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a71c:	4615      	mov	r5, r2
 800a71e:	f012 0203 	ands.w	r2, r2, #3
 800a722:	4606      	mov	r6, r0
 800a724:	460f      	mov	r7, r1
 800a726:	d007      	beq.n	800a738 <__pow5mult+0x20>
 800a728:	3a01      	subs	r2, #1
 800a72a:	4c21      	ldr	r4, [pc, #132]	; (800a7b0 <__pow5mult+0x98>)
 800a72c:	2300      	movs	r3, #0
 800a72e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a732:	f7ff fe8b 	bl	800a44c <__multadd>
 800a736:	4607      	mov	r7, r0
 800a738:	10ad      	asrs	r5, r5, #2
 800a73a:	d035      	beq.n	800a7a8 <__pow5mult+0x90>
 800a73c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a73e:	b93c      	cbnz	r4, 800a750 <__pow5mult+0x38>
 800a740:	2010      	movs	r0, #16
 800a742:	f7ff fe13 	bl	800a36c <malloc>
 800a746:	6270      	str	r0, [r6, #36]	; 0x24
 800a748:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a74c:	6004      	str	r4, [r0, #0]
 800a74e:	60c4      	str	r4, [r0, #12]
 800a750:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a754:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a758:	b94c      	cbnz	r4, 800a76e <__pow5mult+0x56>
 800a75a:	f240 2171 	movw	r1, #625	; 0x271
 800a75e:	4630      	mov	r0, r6
 800a760:	f7ff ff3b 	bl	800a5da <__i2b>
 800a764:	2300      	movs	r3, #0
 800a766:	f8c8 0008 	str.w	r0, [r8, #8]
 800a76a:	4604      	mov	r4, r0
 800a76c:	6003      	str	r3, [r0, #0]
 800a76e:	f04f 0800 	mov.w	r8, #0
 800a772:	07eb      	lsls	r3, r5, #31
 800a774:	d50a      	bpl.n	800a78c <__pow5mult+0x74>
 800a776:	4639      	mov	r1, r7
 800a778:	4622      	mov	r2, r4
 800a77a:	4630      	mov	r0, r6
 800a77c:	f7ff ff36 	bl	800a5ec <__multiply>
 800a780:	4639      	mov	r1, r7
 800a782:	4681      	mov	r9, r0
 800a784:	4630      	mov	r0, r6
 800a786:	f7ff fe4a 	bl	800a41e <_Bfree>
 800a78a:	464f      	mov	r7, r9
 800a78c:	106d      	asrs	r5, r5, #1
 800a78e:	d00b      	beq.n	800a7a8 <__pow5mult+0x90>
 800a790:	6820      	ldr	r0, [r4, #0]
 800a792:	b938      	cbnz	r0, 800a7a4 <__pow5mult+0x8c>
 800a794:	4622      	mov	r2, r4
 800a796:	4621      	mov	r1, r4
 800a798:	4630      	mov	r0, r6
 800a79a:	f7ff ff27 	bl	800a5ec <__multiply>
 800a79e:	6020      	str	r0, [r4, #0]
 800a7a0:	f8c0 8000 	str.w	r8, [r0]
 800a7a4:	4604      	mov	r4, r0
 800a7a6:	e7e4      	b.n	800a772 <__pow5mult+0x5a>
 800a7a8:	4638      	mov	r0, r7
 800a7aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a7ae:	bf00      	nop
 800a7b0:	0800c4b8 	.word	0x0800c4b8

0800a7b4 <__lshift>:
 800a7b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7b8:	460c      	mov	r4, r1
 800a7ba:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a7be:	6923      	ldr	r3, [r4, #16]
 800a7c0:	6849      	ldr	r1, [r1, #4]
 800a7c2:	eb0a 0903 	add.w	r9, sl, r3
 800a7c6:	68a3      	ldr	r3, [r4, #8]
 800a7c8:	4607      	mov	r7, r0
 800a7ca:	4616      	mov	r6, r2
 800a7cc:	f109 0501 	add.w	r5, r9, #1
 800a7d0:	42ab      	cmp	r3, r5
 800a7d2:	db32      	blt.n	800a83a <__lshift+0x86>
 800a7d4:	4638      	mov	r0, r7
 800a7d6:	f7ff fdee 	bl	800a3b6 <_Balloc>
 800a7da:	2300      	movs	r3, #0
 800a7dc:	4680      	mov	r8, r0
 800a7de:	f100 0114 	add.w	r1, r0, #20
 800a7e2:	461a      	mov	r2, r3
 800a7e4:	4553      	cmp	r3, sl
 800a7e6:	db2b      	blt.n	800a840 <__lshift+0x8c>
 800a7e8:	6920      	ldr	r0, [r4, #16]
 800a7ea:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a7ee:	f104 0314 	add.w	r3, r4, #20
 800a7f2:	f016 021f 	ands.w	r2, r6, #31
 800a7f6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a7fa:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a7fe:	d025      	beq.n	800a84c <__lshift+0x98>
 800a800:	f1c2 0e20 	rsb	lr, r2, #32
 800a804:	2000      	movs	r0, #0
 800a806:	681e      	ldr	r6, [r3, #0]
 800a808:	468a      	mov	sl, r1
 800a80a:	4096      	lsls	r6, r2
 800a80c:	4330      	orrs	r0, r6
 800a80e:	f84a 0b04 	str.w	r0, [sl], #4
 800a812:	f853 0b04 	ldr.w	r0, [r3], #4
 800a816:	459c      	cmp	ip, r3
 800a818:	fa20 f00e 	lsr.w	r0, r0, lr
 800a81c:	d814      	bhi.n	800a848 <__lshift+0x94>
 800a81e:	6048      	str	r0, [r1, #4]
 800a820:	b108      	cbz	r0, 800a826 <__lshift+0x72>
 800a822:	f109 0502 	add.w	r5, r9, #2
 800a826:	3d01      	subs	r5, #1
 800a828:	4638      	mov	r0, r7
 800a82a:	f8c8 5010 	str.w	r5, [r8, #16]
 800a82e:	4621      	mov	r1, r4
 800a830:	f7ff fdf5 	bl	800a41e <_Bfree>
 800a834:	4640      	mov	r0, r8
 800a836:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a83a:	3101      	adds	r1, #1
 800a83c:	005b      	lsls	r3, r3, #1
 800a83e:	e7c7      	b.n	800a7d0 <__lshift+0x1c>
 800a840:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800a844:	3301      	adds	r3, #1
 800a846:	e7cd      	b.n	800a7e4 <__lshift+0x30>
 800a848:	4651      	mov	r1, sl
 800a84a:	e7dc      	b.n	800a806 <__lshift+0x52>
 800a84c:	3904      	subs	r1, #4
 800a84e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a852:	f841 2f04 	str.w	r2, [r1, #4]!
 800a856:	459c      	cmp	ip, r3
 800a858:	d8f9      	bhi.n	800a84e <__lshift+0x9a>
 800a85a:	e7e4      	b.n	800a826 <__lshift+0x72>

0800a85c <__mcmp>:
 800a85c:	6903      	ldr	r3, [r0, #16]
 800a85e:	690a      	ldr	r2, [r1, #16]
 800a860:	1a9b      	subs	r3, r3, r2
 800a862:	b530      	push	{r4, r5, lr}
 800a864:	d10c      	bne.n	800a880 <__mcmp+0x24>
 800a866:	0092      	lsls	r2, r2, #2
 800a868:	3014      	adds	r0, #20
 800a86a:	3114      	adds	r1, #20
 800a86c:	1884      	adds	r4, r0, r2
 800a86e:	4411      	add	r1, r2
 800a870:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a874:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a878:	4295      	cmp	r5, r2
 800a87a:	d003      	beq.n	800a884 <__mcmp+0x28>
 800a87c:	d305      	bcc.n	800a88a <__mcmp+0x2e>
 800a87e:	2301      	movs	r3, #1
 800a880:	4618      	mov	r0, r3
 800a882:	bd30      	pop	{r4, r5, pc}
 800a884:	42a0      	cmp	r0, r4
 800a886:	d3f3      	bcc.n	800a870 <__mcmp+0x14>
 800a888:	e7fa      	b.n	800a880 <__mcmp+0x24>
 800a88a:	f04f 33ff 	mov.w	r3, #4294967295
 800a88e:	e7f7      	b.n	800a880 <__mcmp+0x24>

0800a890 <__mdiff>:
 800a890:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a894:	460d      	mov	r5, r1
 800a896:	4607      	mov	r7, r0
 800a898:	4611      	mov	r1, r2
 800a89a:	4628      	mov	r0, r5
 800a89c:	4614      	mov	r4, r2
 800a89e:	f7ff ffdd 	bl	800a85c <__mcmp>
 800a8a2:	1e06      	subs	r6, r0, #0
 800a8a4:	d108      	bne.n	800a8b8 <__mdiff+0x28>
 800a8a6:	4631      	mov	r1, r6
 800a8a8:	4638      	mov	r0, r7
 800a8aa:	f7ff fd84 	bl	800a3b6 <_Balloc>
 800a8ae:	2301      	movs	r3, #1
 800a8b0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800a8b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8b8:	bfa4      	itt	ge
 800a8ba:	4623      	movge	r3, r4
 800a8bc:	462c      	movge	r4, r5
 800a8be:	4638      	mov	r0, r7
 800a8c0:	6861      	ldr	r1, [r4, #4]
 800a8c2:	bfa6      	itte	ge
 800a8c4:	461d      	movge	r5, r3
 800a8c6:	2600      	movge	r6, #0
 800a8c8:	2601      	movlt	r6, #1
 800a8ca:	f7ff fd74 	bl	800a3b6 <_Balloc>
 800a8ce:	692b      	ldr	r3, [r5, #16]
 800a8d0:	60c6      	str	r6, [r0, #12]
 800a8d2:	6926      	ldr	r6, [r4, #16]
 800a8d4:	f105 0914 	add.w	r9, r5, #20
 800a8d8:	f104 0214 	add.w	r2, r4, #20
 800a8dc:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800a8e0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800a8e4:	f100 0514 	add.w	r5, r0, #20
 800a8e8:	f04f 0e00 	mov.w	lr, #0
 800a8ec:	f852 ab04 	ldr.w	sl, [r2], #4
 800a8f0:	f859 4b04 	ldr.w	r4, [r9], #4
 800a8f4:	fa1e f18a 	uxtah	r1, lr, sl
 800a8f8:	b2a3      	uxth	r3, r4
 800a8fa:	1ac9      	subs	r1, r1, r3
 800a8fc:	0c23      	lsrs	r3, r4, #16
 800a8fe:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800a902:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800a906:	b289      	uxth	r1, r1
 800a908:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800a90c:	45c8      	cmp	r8, r9
 800a90e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800a912:	4694      	mov	ip, r2
 800a914:	f845 3b04 	str.w	r3, [r5], #4
 800a918:	d8e8      	bhi.n	800a8ec <__mdiff+0x5c>
 800a91a:	45bc      	cmp	ip, r7
 800a91c:	d304      	bcc.n	800a928 <__mdiff+0x98>
 800a91e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800a922:	b183      	cbz	r3, 800a946 <__mdiff+0xb6>
 800a924:	6106      	str	r6, [r0, #16]
 800a926:	e7c5      	b.n	800a8b4 <__mdiff+0x24>
 800a928:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a92c:	fa1e f381 	uxtah	r3, lr, r1
 800a930:	141a      	asrs	r2, r3, #16
 800a932:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a936:	b29b      	uxth	r3, r3
 800a938:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a93c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800a940:	f845 3b04 	str.w	r3, [r5], #4
 800a944:	e7e9      	b.n	800a91a <__mdiff+0x8a>
 800a946:	3e01      	subs	r6, #1
 800a948:	e7e9      	b.n	800a91e <__mdiff+0x8e>
	...

0800a94c <__ulp>:
 800a94c:	4b12      	ldr	r3, [pc, #72]	; (800a998 <__ulp+0x4c>)
 800a94e:	ee10 2a90 	vmov	r2, s1
 800a952:	401a      	ands	r2, r3
 800a954:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800a958:	2b00      	cmp	r3, #0
 800a95a:	dd04      	ble.n	800a966 <__ulp+0x1a>
 800a95c:	2000      	movs	r0, #0
 800a95e:	4619      	mov	r1, r3
 800a960:	ec41 0b10 	vmov	d0, r0, r1
 800a964:	4770      	bx	lr
 800a966:	425b      	negs	r3, r3
 800a968:	151b      	asrs	r3, r3, #20
 800a96a:	2b13      	cmp	r3, #19
 800a96c:	f04f 0000 	mov.w	r0, #0
 800a970:	f04f 0100 	mov.w	r1, #0
 800a974:	dc04      	bgt.n	800a980 <__ulp+0x34>
 800a976:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800a97a:	fa42 f103 	asr.w	r1, r2, r3
 800a97e:	e7ef      	b.n	800a960 <__ulp+0x14>
 800a980:	3b14      	subs	r3, #20
 800a982:	2b1e      	cmp	r3, #30
 800a984:	f04f 0201 	mov.w	r2, #1
 800a988:	bfda      	itte	le
 800a98a:	f1c3 031f 	rsble	r3, r3, #31
 800a98e:	fa02 f303 	lslle.w	r3, r2, r3
 800a992:	4613      	movgt	r3, r2
 800a994:	4618      	mov	r0, r3
 800a996:	e7e3      	b.n	800a960 <__ulp+0x14>
 800a998:	7ff00000 	.word	0x7ff00000

0800a99c <__b2d>:
 800a99c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a99e:	6905      	ldr	r5, [r0, #16]
 800a9a0:	f100 0714 	add.w	r7, r0, #20
 800a9a4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800a9a8:	1f2e      	subs	r6, r5, #4
 800a9aa:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800a9ae:	4620      	mov	r0, r4
 800a9b0:	f7ff fdc5 	bl	800a53e <__hi0bits>
 800a9b4:	f1c0 0320 	rsb	r3, r0, #32
 800a9b8:	280a      	cmp	r0, #10
 800a9ba:	600b      	str	r3, [r1, #0]
 800a9bc:	f8df c074 	ldr.w	ip, [pc, #116]	; 800aa34 <__b2d+0x98>
 800a9c0:	dc14      	bgt.n	800a9ec <__b2d+0x50>
 800a9c2:	f1c0 0e0b 	rsb	lr, r0, #11
 800a9c6:	fa24 f10e 	lsr.w	r1, r4, lr
 800a9ca:	42b7      	cmp	r7, r6
 800a9cc:	ea41 030c 	orr.w	r3, r1, ip
 800a9d0:	bf34      	ite	cc
 800a9d2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a9d6:	2100      	movcs	r1, #0
 800a9d8:	3015      	adds	r0, #21
 800a9da:	fa04 f000 	lsl.w	r0, r4, r0
 800a9de:	fa21 f10e 	lsr.w	r1, r1, lr
 800a9e2:	ea40 0201 	orr.w	r2, r0, r1
 800a9e6:	ec43 2b10 	vmov	d0, r2, r3
 800a9ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a9ec:	42b7      	cmp	r7, r6
 800a9ee:	bf3a      	itte	cc
 800a9f0:	f1a5 0608 	subcc.w	r6, r5, #8
 800a9f4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a9f8:	2100      	movcs	r1, #0
 800a9fa:	380b      	subs	r0, #11
 800a9fc:	d015      	beq.n	800aa2a <__b2d+0x8e>
 800a9fe:	4084      	lsls	r4, r0
 800aa00:	f1c0 0520 	rsb	r5, r0, #32
 800aa04:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800aa08:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800aa0c:	42be      	cmp	r6, r7
 800aa0e:	fa21 fc05 	lsr.w	ip, r1, r5
 800aa12:	ea44 030c 	orr.w	r3, r4, ip
 800aa16:	bf8c      	ite	hi
 800aa18:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800aa1c:	2400      	movls	r4, #0
 800aa1e:	fa01 f000 	lsl.w	r0, r1, r0
 800aa22:	40ec      	lsrs	r4, r5
 800aa24:	ea40 0204 	orr.w	r2, r0, r4
 800aa28:	e7dd      	b.n	800a9e6 <__b2d+0x4a>
 800aa2a:	ea44 030c 	orr.w	r3, r4, ip
 800aa2e:	460a      	mov	r2, r1
 800aa30:	e7d9      	b.n	800a9e6 <__b2d+0x4a>
 800aa32:	bf00      	nop
 800aa34:	3ff00000 	.word	0x3ff00000

0800aa38 <__d2b>:
 800aa38:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800aa3c:	460e      	mov	r6, r1
 800aa3e:	2101      	movs	r1, #1
 800aa40:	ec59 8b10 	vmov	r8, r9, d0
 800aa44:	4615      	mov	r5, r2
 800aa46:	f7ff fcb6 	bl	800a3b6 <_Balloc>
 800aa4a:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800aa4e:	4607      	mov	r7, r0
 800aa50:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800aa54:	bb34      	cbnz	r4, 800aaa4 <__d2b+0x6c>
 800aa56:	9301      	str	r3, [sp, #4]
 800aa58:	f1b8 0300 	subs.w	r3, r8, #0
 800aa5c:	d027      	beq.n	800aaae <__d2b+0x76>
 800aa5e:	a802      	add	r0, sp, #8
 800aa60:	f840 3d08 	str.w	r3, [r0, #-8]!
 800aa64:	f7ff fd8a 	bl	800a57c <__lo0bits>
 800aa68:	9900      	ldr	r1, [sp, #0]
 800aa6a:	b1f0      	cbz	r0, 800aaaa <__d2b+0x72>
 800aa6c:	9a01      	ldr	r2, [sp, #4]
 800aa6e:	f1c0 0320 	rsb	r3, r0, #32
 800aa72:	fa02 f303 	lsl.w	r3, r2, r3
 800aa76:	430b      	orrs	r3, r1
 800aa78:	40c2      	lsrs	r2, r0
 800aa7a:	617b      	str	r3, [r7, #20]
 800aa7c:	9201      	str	r2, [sp, #4]
 800aa7e:	9b01      	ldr	r3, [sp, #4]
 800aa80:	61bb      	str	r3, [r7, #24]
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	bf14      	ite	ne
 800aa86:	2102      	movne	r1, #2
 800aa88:	2101      	moveq	r1, #1
 800aa8a:	6139      	str	r1, [r7, #16]
 800aa8c:	b1c4      	cbz	r4, 800aac0 <__d2b+0x88>
 800aa8e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800aa92:	4404      	add	r4, r0
 800aa94:	6034      	str	r4, [r6, #0]
 800aa96:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800aa9a:	6028      	str	r0, [r5, #0]
 800aa9c:	4638      	mov	r0, r7
 800aa9e:	b003      	add	sp, #12
 800aaa0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aaa4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800aaa8:	e7d5      	b.n	800aa56 <__d2b+0x1e>
 800aaaa:	6179      	str	r1, [r7, #20]
 800aaac:	e7e7      	b.n	800aa7e <__d2b+0x46>
 800aaae:	a801      	add	r0, sp, #4
 800aab0:	f7ff fd64 	bl	800a57c <__lo0bits>
 800aab4:	9b01      	ldr	r3, [sp, #4]
 800aab6:	617b      	str	r3, [r7, #20]
 800aab8:	2101      	movs	r1, #1
 800aaba:	6139      	str	r1, [r7, #16]
 800aabc:	3020      	adds	r0, #32
 800aabe:	e7e5      	b.n	800aa8c <__d2b+0x54>
 800aac0:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800aac4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800aac8:	6030      	str	r0, [r6, #0]
 800aaca:	6918      	ldr	r0, [r3, #16]
 800aacc:	f7ff fd37 	bl	800a53e <__hi0bits>
 800aad0:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800aad4:	e7e1      	b.n	800aa9a <__d2b+0x62>

0800aad6 <__ratio>:
 800aad6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aada:	4688      	mov	r8, r1
 800aadc:	4669      	mov	r1, sp
 800aade:	4681      	mov	r9, r0
 800aae0:	f7ff ff5c 	bl	800a99c <__b2d>
 800aae4:	a901      	add	r1, sp, #4
 800aae6:	4640      	mov	r0, r8
 800aae8:	ec57 6b10 	vmov	r6, r7, d0
 800aaec:	f7ff ff56 	bl	800a99c <__b2d>
 800aaf0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800aaf4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800aaf8:	eba3 0c02 	sub.w	ip, r3, r2
 800aafc:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ab00:	1a9b      	subs	r3, r3, r2
 800ab02:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800ab06:	ec5b ab10 	vmov	sl, fp, d0
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	bfce      	itee	gt
 800ab0e:	463a      	movgt	r2, r7
 800ab10:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ab14:	465a      	movle	r2, fp
 800ab16:	4659      	mov	r1, fp
 800ab18:	463d      	mov	r5, r7
 800ab1a:	bfd4      	ite	le
 800ab1c:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800ab20:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800ab24:	4630      	mov	r0, r6
 800ab26:	ee10 2a10 	vmov	r2, s0
 800ab2a:	460b      	mov	r3, r1
 800ab2c:	4629      	mov	r1, r5
 800ab2e:	f7f5 fe95 	bl	800085c <__aeabi_ddiv>
 800ab32:	ec41 0b10 	vmov	d0, r0, r1
 800ab36:	b003      	add	sp, #12
 800ab38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ab3c <__copybits>:
 800ab3c:	3901      	subs	r1, #1
 800ab3e:	b510      	push	{r4, lr}
 800ab40:	1149      	asrs	r1, r1, #5
 800ab42:	6914      	ldr	r4, [r2, #16]
 800ab44:	3101      	adds	r1, #1
 800ab46:	f102 0314 	add.w	r3, r2, #20
 800ab4a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ab4e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ab52:	42a3      	cmp	r3, r4
 800ab54:	4602      	mov	r2, r0
 800ab56:	d303      	bcc.n	800ab60 <__copybits+0x24>
 800ab58:	2300      	movs	r3, #0
 800ab5a:	428a      	cmp	r2, r1
 800ab5c:	d305      	bcc.n	800ab6a <__copybits+0x2e>
 800ab5e:	bd10      	pop	{r4, pc}
 800ab60:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab64:	f840 2b04 	str.w	r2, [r0], #4
 800ab68:	e7f3      	b.n	800ab52 <__copybits+0x16>
 800ab6a:	f842 3b04 	str.w	r3, [r2], #4
 800ab6e:	e7f4      	b.n	800ab5a <__copybits+0x1e>

0800ab70 <__any_on>:
 800ab70:	f100 0214 	add.w	r2, r0, #20
 800ab74:	6900      	ldr	r0, [r0, #16]
 800ab76:	114b      	asrs	r3, r1, #5
 800ab78:	4298      	cmp	r0, r3
 800ab7a:	b510      	push	{r4, lr}
 800ab7c:	db11      	blt.n	800aba2 <__any_on+0x32>
 800ab7e:	dd0a      	ble.n	800ab96 <__any_on+0x26>
 800ab80:	f011 011f 	ands.w	r1, r1, #31
 800ab84:	d007      	beq.n	800ab96 <__any_on+0x26>
 800ab86:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ab8a:	fa24 f001 	lsr.w	r0, r4, r1
 800ab8e:	fa00 f101 	lsl.w	r1, r0, r1
 800ab92:	428c      	cmp	r4, r1
 800ab94:	d10b      	bne.n	800abae <__any_on+0x3e>
 800ab96:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ab9a:	4293      	cmp	r3, r2
 800ab9c:	d803      	bhi.n	800aba6 <__any_on+0x36>
 800ab9e:	2000      	movs	r0, #0
 800aba0:	bd10      	pop	{r4, pc}
 800aba2:	4603      	mov	r3, r0
 800aba4:	e7f7      	b.n	800ab96 <__any_on+0x26>
 800aba6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800abaa:	2900      	cmp	r1, #0
 800abac:	d0f5      	beq.n	800ab9a <__any_on+0x2a>
 800abae:	2001      	movs	r0, #1
 800abb0:	e7f6      	b.n	800aba0 <__any_on+0x30>

0800abb2 <_calloc_r>:
 800abb2:	b538      	push	{r3, r4, r5, lr}
 800abb4:	fb02 f401 	mul.w	r4, r2, r1
 800abb8:	4621      	mov	r1, r4
 800abba:	f000 f857 	bl	800ac6c <_malloc_r>
 800abbe:	4605      	mov	r5, r0
 800abc0:	b118      	cbz	r0, 800abca <_calloc_r+0x18>
 800abc2:	4622      	mov	r2, r4
 800abc4:	2100      	movs	r1, #0
 800abc6:	f7fc fd35 	bl	8007634 <memset>
 800abca:	4628      	mov	r0, r5
 800abcc:	bd38      	pop	{r3, r4, r5, pc}
	...

0800abd0 <_free_r>:
 800abd0:	b538      	push	{r3, r4, r5, lr}
 800abd2:	4605      	mov	r5, r0
 800abd4:	2900      	cmp	r1, #0
 800abd6:	d045      	beq.n	800ac64 <_free_r+0x94>
 800abd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800abdc:	1f0c      	subs	r4, r1, #4
 800abde:	2b00      	cmp	r3, #0
 800abe0:	bfb8      	it	lt
 800abe2:	18e4      	addlt	r4, r4, r3
 800abe4:	f000 fa36 	bl	800b054 <__malloc_lock>
 800abe8:	4a1f      	ldr	r2, [pc, #124]	; (800ac68 <_free_r+0x98>)
 800abea:	6813      	ldr	r3, [r2, #0]
 800abec:	4610      	mov	r0, r2
 800abee:	b933      	cbnz	r3, 800abfe <_free_r+0x2e>
 800abf0:	6063      	str	r3, [r4, #4]
 800abf2:	6014      	str	r4, [r2, #0]
 800abf4:	4628      	mov	r0, r5
 800abf6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800abfa:	f000 ba2c 	b.w	800b056 <__malloc_unlock>
 800abfe:	42a3      	cmp	r3, r4
 800ac00:	d90c      	bls.n	800ac1c <_free_r+0x4c>
 800ac02:	6821      	ldr	r1, [r4, #0]
 800ac04:	1862      	adds	r2, r4, r1
 800ac06:	4293      	cmp	r3, r2
 800ac08:	bf04      	itt	eq
 800ac0a:	681a      	ldreq	r2, [r3, #0]
 800ac0c:	685b      	ldreq	r3, [r3, #4]
 800ac0e:	6063      	str	r3, [r4, #4]
 800ac10:	bf04      	itt	eq
 800ac12:	1852      	addeq	r2, r2, r1
 800ac14:	6022      	streq	r2, [r4, #0]
 800ac16:	6004      	str	r4, [r0, #0]
 800ac18:	e7ec      	b.n	800abf4 <_free_r+0x24>
 800ac1a:	4613      	mov	r3, r2
 800ac1c:	685a      	ldr	r2, [r3, #4]
 800ac1e:	b10a      	cbz	r2, 800ac24 <_free_r+0x54>
 800ac20:	42a2      	cmp	r2, r4
 800ac22:	d9fa      	bls.n	800ac1a <_free_r+0x4a>
 800ac24:	6819      	ldr	r1, [r3, #0]
 800ac26:	1858      	adds	r0, r3, r1
 800ac28:	42a0      	cmp	r0, r4
 800ac2a:	d10b      	bne.n	800ac44 <_free_r+0x74>
 800ac2c:	6820      	ldr	r0, [r4, #0]
 800ac2e:	4401      	add	r1, r0
 800ac30:	1858      	adds	r0, r3, r1
 800ac32:	4282      	cmp	r2, r0
 800ac34:	6019      	str	r1, [r3, #0]
 800ac36:	d1dd      	bne.n	800abf4 <_free_r+0x24>
 800ac38:	6810      	ldr	r0, [r2, #0]
 800ac3a:	6852      	ldr	r2, [r2, #4]
 800ac3c:	605a      	str	r2, [r3, #4]
 800ac3e:	4401      	add	r1, r0
 800ac40:	6019      	str	r1, [r3, #0]
 800ac42:	e7d7      	b.n	800abf4 <_free_r+0x24>
 800ac44:	d902      	bls.n	800ac4c <_free_r+0x7c>
 800ac46:	230c      	movs	r3, #12
 800ac48:	602b      	str	r3, [r5, #0]
 800ac4a:	e7d3      	b.n	800abf4 <_free_r+0x24>
 800ac4c:	6820      	ldr	r0, [r4, #0]
 800ac4e:	1821      	adds	r1, r4, r0
 800ac50:	428a      	cmp	r2, r1
 800ac52:	bf04      	itt	eq
 800ac54:	6811      	ldreq	r1, [r2, #0]
 800ac56:	6852      	ldreq	r2, [r2, #4]
 800ac58:	6062      	str	r2, [r4, #4]
 800ac5a:	bf04      	itt	eq
 800ac5c:	1809      	addeq	r1, r1, r0
 800ac5e:	6021      	streq	r1, [r4, #0]
 800ac60:	605c      	str	r4, [r3, #4]
 800ac62:	e7c7      	b.n	800abf4 <_free_r+0x24>
 800ac64:	bd38      	pop	{r3, r4, r5, pc}
 800ac66:	bf00      	nop
 800ac68:	200002b8 	.word	0x200002b8

0800ac6c <_malloc_r>:
 800ac6c:	b570      	push	{r4, r5, r6, lr}
 800ac6e:	1ccd      	adds	r5, r1, #3
 800ac70:	f025 0503 	bic.w	r5, r5, #3
 800ac74:	3508      	adds	r5, #8
 800ac76:	2d0c      	cmp	r5, #12
 800ac78:	bf38      	it	cc
 800ac7a:	250c      	movcc	r5, #12
 800ac7c:	2d00      	cmp	r5, #0
 800ac7e:	4606      	mov	r6, r0
 800ac80:	db01      	blt.n	800ac86 <_malloc_r+0x1a>
 800ac82:	42a9      	cmp	r1, r5
 800ac84:	d903      	bls.n	800ac8e <_malloc_r+0x22>
 800ac86:	230c      	movs	r3, #12
 800ac88:	6033      	str	r3, [r6, #0]
 800ac8a:	2000      	movs	r0, #0
 800ac8c:	bd70      	pop	{r4, r5, r6, pc}
 800ac8e:	f000 f9e1 	bl	800b054 <__malloc_lock>
 800ac92:	4a21      	ldr	r2, [pc, #132]	; (800ad18 <_malloc_r+0xac>)
 800ac94:	6814      	ldr	r4, [r2, #0]
 800ac96:	4621      	mov	r1, r4
 800ac98:	b991      	cbnz	r1, 800acc0 <_malloc_r+0x54>
 800ac9a:	4c20      	ldr	r4, [pc, #128]	; (800ad1c <_malloc_r+0xb0>)
 800ac9c:	6823      	ldr	r3, [r4, #0]
 800ac9e:	b91b      	cbnz	r3, 800aca8 <_malloc_r+0x3c>
 800aca0:	4630      	mov	r0, r6
 800aca2:	f000 f98f 	bl	800afc4 <_sbrk_r>
 800aca6:	6020      	str	r0, [r4, #0]
 800aca8:	4629      	mov	r1, r5
 800acaa:	4630      	mov	r0, r6
 800acac:	f000 f98a 	bl	800afc4 <_sbrk_r>
 800acb0:	1c43      	adds	r3, r0, #1
 800acb2:	d124      	bne.n	800acfe <_malloc_r+0x92>
 800acb4:	230c      	movs	r3, #12
 800acb6:	6033      	str	r3, [r6, #0]
 800acb8:	4630      	mov	r0, r6
 800acba:	f000 f9cc 	bl	800b056 <__malloc_unlock>
 800acbe:	e7e4      	b.n	800ac8a <_malloc_r+0x1e>
 800acc0:	680b      	ldr	r3, [r1, #0]
 800acc2:	1b5b      	subs	r3, r3, r5
 800acc4:	d418      	bmi.n	800acf8 <_malloc_r+0x8c>
 800acc6:	2b0b      	cmp	r3, #11
 800acc8:	d90f      	bls.n	800acea <_malloc_r+0x7e>
 800acca:	600b      	str	r3, [r1, #0]
 800accc:	50cd      	str	r5, [r1, r3]
 800acce:	18cc      	adds	r4, r1, r3
 800acd0:	4630      	mov	r0, r6
 800acd2:	f000 f9c0 	bl	800b056 <__malloc_unlock>
 800acd6:	f104 000b 	add.w	r0, r4, #11
 800acda:	1d23      	adds	r3, r4, #4
 800acdc:	f020 0007 	bic.w	r0, r0, #7
 800ace0:	1ac3      	subs	r3, r0, r3
 800ace2:	d0d3      	beq.n	800ac8c <_malloc_r+0x20>
 800ace4:	425a      	negs	r2, r3
 800ace6:	50e2      	str	r2, [r4, r3]
 800ace8:	e7d0      	b.n	800ac8c <_malloc_r+0x20>
 800acea:	428c      	cmp	r4, r1
 800acec:	684b      	ldr	r3, [r1, #4]
 800acee:	bf16      	itet	ne
 800acf0:	6063      	strne	r3, [r4, #4]
 800acf2:	6013      	streq	r3, [r2, #0]
 800acf4:	460c      	movne	r4, r1
 800acf6:	e7eb      	b.n	800acd0 <_malloc_r+0x64>
 800acf8:	460c      	mov	r4, r1
 800acfa:	6849      	ldr	r1, [r1, #4]
 800acfc:	e7cc      	b.n	800ac98 <_malloc_r+0x2c>
 800acfe:	1cc4      	adds	r4, r0, #3
 800ad00:	f024 0403 	bic.w	r4, r4, #3
 800ad04:	42a0      	cmp	r0, r4
 800ad06:	d005      	beq.n	800ad14 <_malloc_r+0xa8>
 800ad08:	1a21      	subs	r1, r4, r0
 800ad0a:	4630      	mov	r0, r6
 800ad0c:	f000 f95a 	bl	800afc4 <_sbrk_r>
 800ad10:	3001      	adds	r0, #1
 800ad12:	d0cf      	beq.n	800acb4 <_malloc_r+0x48>
 800ad14:	6025      	str	r5, [r4, #0]
 800ad16:	e7db      	b.n	800acd0 <_malloc_r+0x64>
 800ad18:	200002b8 	.word	0x200002b8
 800ad1c:	200002bc 	.word	0x200002bc

0800ad20 <__ssputs_r>:
 800ad20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad24:	688e      	ldr	r6, [r1, #8]
 800ad26:	429e      	cmp	r6, r3
 800ad28:	4682      	mov	sl, r0
 800ad2a:	460c      	mov	r4, r1
 800ad2c:	4690      	mov	r8, r2
 800ad2e:	4699      	mov	r9, r3
 800ad30:	d837      	bhi.n	800ada2 <__ssputs_r+0x82>
 800ad32:	898a      	ldrh	r2, [r1, #12]
 800ad34:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ad38:	d031      	beq.n	800ad9e <__ssputs_r+0x7e>
 800ad3a:	6825      	ldr	r5, [r4, #0]
 800ad3c:	6909      	ldr	r1, [r1, #16]
 800ad3e:	1a6f      	subs	r7, r5, r1
 800ad40:	6965      	ldr	r5, [r4, #20]
 800ad42:	2302      	movs	r3, #2
 800ad44:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ad48:	fb95 f5f3 	sdiv	r5, r5, r3
 800ad4c:	f109 0301 	add.w	r3, r9, #1
 800ad50:	443b      	add	r3, r7
 800ad52:	429d      	cmp	r5, r3
 800ad54:	bf38      	it	cc
 800ad56:	461d      	movcc	r5, r3
 800ad58:	0553      	lsls	r3, r2, #21
 800ad5a:	d530      	bpl.n	800adbe <__ssputs_r+0x9e>
 800ad5c:	4629      	mov	r1, r5
 800ad5e:	f7ff ff85 	bl	800ac6c <_malloc_r>
 800ad62:	4606      	mov	r6, r0
 800ad64:	b950      	cbnz	r0, 800ad7c <__ssputs_r+0x5c>
 800ad66:	230c      	movs	r3, #12
 800ad68:	f8ca 3000 	str.w	r3, [sl]
 800ad6c:	89a3      	ldrh	r3, [r4, #12]
 800ad6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad72:	81a3      	strh	r3, [r4, #12]
 800ad74:	f04f 30ff 	mov.w	r0, #4294967295
 800ad78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad7c:	463a      	mov	r2, r7
 800ad7e:	6921      	ldr	r1, [r4, #16]
 800ad80:	f7ff fb0e 	bl	800a3a0 <memcpy>
 800ad84:	89a3      	ldrh	r3, [r4, #12]
 800ad86:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ad8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad8e:	81a3      	strh	r3, [r4, #12]
 800ad90:	6126      	str	r6, [r4, #16]
 800ad92:	6165      	str	r5, [r4, #20]
 800ad94:	443e      	add	r6, r7
 800ad96:	1bed      	subs	r5, r5, r7
 800ad98:	6026      	str	r6, [r4, #0]
 800ad9a:	60a5      	str	r5, [r4, #8]
 800ad9c:	464e      	mov	r6, r9
 800ad9e:	454e      	cmp	r6, r9
 800ada0:	d900      	bls.n	800ada4 <__ssputs_r+0x84>
 800ada2:	464e      	mov	r6, r9
 800ada4:	4632      	mov	r2, r6
 800ada6:	4641      	mov	r1, r8
 800ada8:	6820      	ldr	r0, [r4, #0]
 800adaa:	f000 f93a 	bl	800b022 <memmove>
 800adae:	68a3      	ldr	r3, [r4, #8]
 800adb0:	1b9b      	subs	r3, r3, r6
 800adb2:	60a3      	str	r3, [r4, #8]
 800adb4:	6823      	ldr	r3, [r4, #0]
 800adb6:	441e      	add	r6, r3
 800adb8:	6026      	str	r6, [r4, #0]
 800adba:	2000      	movs	r0, #0
 800adbc:	e7dc      	b.n	800ad78 <__ssputs_r+0x58>
 800adbe:	462a      	mov	r2, r5
 800adc0:	f000 f94a 	bl	800b058 <_realloc_r>
 800adc4:	4606      	mov	r6, r0
 800adc6:	2800      	cmp	r0, #0
 800adc8:	d1e2      	bne.n	800ad90 <__ssputs_r+0x70>
 800adca:	6921      	ldr	r1, [r4, #16]
 800adcc:	4650      	mov	r0, sl
 800adce:	f7ff feff 	bl	800abd0 <_free_r>
 800add2:	e7c8      	b.n	800ad66 <__ssputs_r+0x46>

0800add4 <_svfiprintf_r>:
 800add4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800add8:	461d      	mov	r5, r3
 800adda:	898b      	ldrh	r3, [r1, #12]
 800addc:	061f      	lsls	r7, r3, #24
 800adde:	b09d      	sub	sp, #116	; 0x74
 800ade0:	4680      	mov	r8, r0
 800ade2:	460c      	mov	r4, r1
 800ade4:	4616      	mov	r6, r2
 800ade6:	d50f      	bpl.n	800ae08 <_svfiprintf_r+0x34>
 800ade8:	690b      	ldr	r3, [r1, #16]
 800adea:	b96b      	cbnz	r3, 800ae08 <_svfiprintf_r+0x34>
 800adec:	2140      	movs	r1, #64	; 0x40
 800adee:	f7ff ff3d 	bl	800ac6c <_malloc_r>
 800adf2:	6020      	str	r0, [r4, #0]
 800adf4:	6120      	str	r0, [r4, #16]
 800adf6:	b928      	cbnz	r0, 800ae04 <_svfiprintf_r+0x30>
 800adf8:	230c      	movs	r3, #12
 800adfa:	f8c8 3000 	str.w	r3, [r8]
 800adfe:	f04f 30ff 	mov.w	r0, #4294967295
 800ae02:	e0c8      	b.n	800af96 <_svfiprintf_r+0x1c2>
 800ae04:	2340      	movs	r3, #64	; 0x40
 800ae06:	6163      	str	r3, [r4, #20]
 800ae08:	2300      	movs	r3, #0
 800ae0a:	9309      	str	r3, [sp, #36]	; 0x24
 800ae0c:	2320      	movs	r3, #32
 800ae0e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ae12:	2330      	movs	r3, #48	; 0x30
 800ae14:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ae18:	9503      	str	r5, [sp, #12]
 800ae1a:	f04f 0b01 	mov.w	fp, #1
 800ae1e:	4637      	mov	r7, r6
 800ae20:	463d      	mov	r5, r7
 800ae22:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ae26:	b10b      	cbz	r3, 800ae2c <_svfiprintf_r+0x58>
 800ae28:	2b25      	cmp	r3, #37	; 0x25
 800ae2a:	d13e      	bne.n	800aeaa <_svfiprintf_r+0xd6>
 800ae2c:	ebb7 0a06 	subs.w	sl, r7, r6
 800ae30:	d00b      	beq.n	800ae4a <_svfiprintf_r+0x76>
 800ae32:	4653      	mov	r3, sl
 800ae34:	4632      	mov	r2, r6
 800ae36:	4621      	mov	r1, r4
 800ae38:	4640      	mov	r0, r8
 800ae3a:	f7ff ff71 	bl	800ad20 <__ssputs_r>
 800ae3e:	3001      	adds	r0, #1
 800ae40:	f000 80a4 	beq.w	800af8c <_svfiprintf_r+0x1b8>
 800ae44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae46:	4453      	add	r3, sl
 800ae48:	9309      	str	r3, [sp, #36]	; 0x24
 800ae4a:	783b      	ldrb	r3, [r7, #0]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	f000 809d 	beq.w	800af8c <_svfiprintf_r+0x1b8>
 800ae52:	2300      	movs	r3, #0
 800ae54:	f04f 32ff 	mov.w	r2, #4294967295
 800ae58:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ae5c:	9304      	str	r3, [sp, #16]
 800ae5e:	9307      	str	r3, [sp, #28]
 800ae60:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ae64:	931a      	str	r3, [sp, #104]	; 0x68
 800ae66:	462f      	mov	r7, r5
 800ae68:	2205      	movs	r2, #5
 800ae6a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800ae6e:	4850      	ldr	r0, [pc, #320]	; (800afb0 <_svfiprintf_r+0x1dc>)
 800ae70:	f7f5 f9be 	bl	80001f0 <memchr>
 800ae74:	9b04      	ldr	r3, [sp, #16]
 800ae76:	b9d0      	cbnz	r0, 800aeae <_svfiprintf_r+0xda>
 800ae78:	06d9      	lsls	r1, r3, #27
 800ae7a:	bf44      	itt	mi
 800ae7c:	2220      	movmi	r2, #32
 800ae7e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ae82:	071a      	lsls	r2, r3, #28
 800ae84:	bf44      	itt	mi
 800ae86:	222b      	movmi	r2, #43	; 0x2b
 800ae88:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ae8c:	782a      	ldrb	r2, [r5, #0]
 800ae8e:	2a2a      	cmp	r2, #42	; 0x2a
 800ae90:	d015      	beq.n	800aebe <_svfiprintf_r+0xea>
 800ae92:	9a07      	ldr	r2, [sp, #28]
 800ae94:	462f      	mov	r7, r5
 800ae96:	2000      	movs	r0, #0
 800ae98:	250a      	movs	r5, #10
 800ae9a:	4639      	mov	r1, r7
 800ae9c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aea0:	3b30      	subs	r3, #48	; 0x30
 800aea2:	2b09      	cmp	r3, #9
 800aea4:	d94d      	bls.n	800af42 <_svfiprintf_r+0x16e>
 800aea6:	b1b8      	cbz	r0, 800aed8 <_svfiprintf_r+0x104>
 800aea8:	e00f      	b.n	800aeca <_svfiprintf_r+0xf6>
 800aeaa:	462f      	mov	r7, r5
 800aeac:	e7b8      	b.n	800ae20 <_svfiprintf_r+0x4c>
 800aeae:	4a40      	ldr	r2, [pc, #256]	; (800afb0 <_svfiprintf_r+0x1dc>)
 800aeb0:	1a80      	subs	r0, r0, r2
 800aeb2:	fa0b f000 	lsl.w	r0, fp, r0
 800aeb6:	4318      	orrs	r0, r3
 800aeb8:	9004      	str	r0, [sp, #16]
 800aeba:	463d      	mov	r5, r7
 800aebc:	e7d3      	b.n	800ae66 <_svfiprintf_r+0x92>
 800aebe:	9a03      	ldr	r2, [sp, #12]
 800aec0:	1d11      	adds	r1, r2, #4
 800aec2:	6812      	ldr	r2, [r2, #0]
 800aec4:	9103      	str	r1, [sp, #12]
 800aec6:	2a00      	cmp	r2, #0
 800aec8:	db01      	blt.n	800aece <_svfiprintf_r+0xfa>
 800aeca:	9207      	str	r2, [sp, #28]
 800aecc:	e004      	b.n	800aed8 <_svfiprintf_r+0x104>
 800aece:	4252      	negs	r2, r2
 800aed0:	f043 0302 	orr.w	r3, r3, #2
 800aed4:	9207      	str	r2, [sp, #28]
 800aed6:	9304      	str	r3, [sp, #16]
 800aed8:	783b      	ldrb	r3, [r7, #0]
 800aeda:	2b2e      	cmp	r3, #46	; 0x2e
 800aedc:	d10c      	bne.n	800aef8 <_svfiprintf_r+0x124>
 800aede:	787b      	ldrb	r3, [r7, #1]
 800aee0:	2b2a      	cmp	r3, #42	; 0x2a
 800aee2:	d133      	bne.n	800af4c <_svfiprintf_r+0x178>
 800aee4:	9b03      	ldr	r3, [sp, #12]
 800aee6:	1d1a      	adds	r2, r3, #4
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	9203      	str	r2, [sp, #12]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	bfb8      	it	lt
 800aef0:	f04f 33ff 	movlt.w	r3, #4294967295
 800aef4:	3702      	adds	r7, #2
 800aef6:	9305      	str	r3, [sp, #20]
 800aef8:	4d2e      	ldr	r5, [pc, #184]	; (800afb4 <_svfiprintf_r+0x1e0>)
 800aefa:	7839      	ldrb	r1, [r7, #0]
 800aefc:	2203      	movs	r2, #3
 800aefe:	4628      	mov	r0, r5
 800af00:	f7f5 f976 	bl	80001f0 <memchr>
 800af04:	b138      	cbz	r0, 800af16 <_svfiprintf_r+0x142>
 800af06:	2340      	movs	r3, #64	; 0x40
 800af08:	1b40      	subs	r0, r0, r5
 800af0a:	fa03 f000 	lsl.w	r0, r3, r0
 800af0e:	9b04      	ldr	r3, [sp, #16]
 800af10:	4303      	orrs	r3, r0
 800af12:	3701      	adds	r7, #1
 800af14:	9304      	str	r3, [sp, #16]
 800af16:	7839      	ldrb	r1, [r7, #0]
 800af18:	4827      	ldr	r0, [pc, #156]	; (800afb8 <_svfiprintf_r+0x1e4>)
 800af1a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800af1e:	2206      	movs	r2, #6
 800af20:	1c7e      	adds	r6, r7, #1
 800af22:	f7f5 f965 	bl	80001f0 <memchr>
 800af26:	2800      	cmp	r0, #0
 800af28:	d038      	beq.n	800af9c <_svfiprintf_r+0x1c8>
 800af2a:	4b24      	ldr	r3, [pc, #144]	; (800afbc <_svfiprintf_r+0x1e8>)
 800af2c:	bb13      	cbnz	r3, 800af74 <_svfiprintf_r+0x1a0>
 800af2e:	9b03      	ldr	r3, [sp, #12]
 800af30:	3307      	adds	r3, #7
 800af32:	f023 0307 	bic.w	r3, r3, #7
 800af36:	3308      	adds	r3, #8
 800af38:	9303      	str	r3, [sp, #12]
 800af3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af3c:	444b      	add	r3, r9
 800af3e:	9309      	str	r3, [sp, #36]	; 0x24
 800af40:	e76d      	b.n	800ae1e <_svfiprintf_r+0x4a>
 800af42:	fb05 3202 	mla	r2, r5, r2, r3
 800af46:	2001      	movs	r0, #1
 800af48:	460f      	mov	r7, r1
 800af4a:	e7a6      	b.n	800ae9a <_svfiprintf_r+0xc6>
 800af4c:	2300      	movs	r3, #0
 800af4e:	3701      	adds	r7, #1
 800af50:	9305      	str	r3, [sp, #20]
 800af52:	4619      	mov	r1, r3
 800af54:	250a      	movs	r5, #10
 800af56:	4638      	mov	r0, r7
 800af58:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af5c:	3a30      	subs	r2, #48	; 0x30
 800af5e:	2a09      	cmp	r2, #9
 800af60:	d903      	bls.n	800af6a <_svfiprintf_r+0x196>
 800af62:	2b00      	cmp	r3, #0
 800af64:	d0c8      	beq.n	800aef8 <_svfiprintf_r+0x124>
 800af66:	9105      	str	r1, [sp, #20]
 800af68:	e7c6      	b.n	800aef8 <_svfiprintf_r+0x124>
 800af6a:	fb05 2101 	mla	r1, r5, r1, r2
 800af6e:	2301      	movs	r3, #1
 800af70:	4607      	mov	r7, r0
 800af72:	e7f0      	b.n	800af56 <_svfiprintf_r+0x182>
 800af74:	ab03      	add	r3, sp, #12
 800af76:	9300      	str	r3, [sp, #0]
 800af78:	4622      	mov	r2, r4
 800af7a:	4b11      	ldr	r3, [pc, #68]	; (800afc0 <_svfiprintf_r+0x1ec>)
 800af7c:	a904      	add	r1, sp, #16
 800af7e:	4640      	mov	r0, r8
 800af80:	f7fc fbf4 	bl	800776c <_printf_float>
 800af84:	f1b0 3fff 	cmp.w	r0, #4294967295
 800af88:	4681      	mov	r9, r0
 800af8a:	d1d6      	bne.n	800af3a <_svfiprintf_r+0x166>
 800af8c:	89a3      	ldrh	r3, [r4, #12]
 800af8e:	065b      	lsls	r3, r3, #25
 800af90:	f53f af35 	bmi.w	800adfe <_svfiprintf_r+0x2a>
 800af94:	9809      	ldr	r0, [sp, #36]	; 0x24
 800af96:	b01d      	add	sp, #116	; 0x74
 800af98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af9c:	ab03      	add	r3, sp, #12
 800af9e:	9300      	str	r3, [sp, #0]
 800afa0:	4622      	mov	r2, r4
 800afa2:	4b07      	ldr	r3, [pc, #28]	; (800afc0 <_svfiprintf_r+0x1ec>)
 800afa4:	a904      	add	r1, sp, #16
 800afa6:	4640      	mov	r0, r8
 800afa8:	f7fc fe96 	bl	8007cd8 <_printf_i>
 800afac:	e7ea      	b.n	800af84 <_svfiprintf_r+0x1b0>
 800afae:	bf00      	nop
 800afb0:	0800c4c4 	.word	0x0800c4c4
 800afb4:	0800c4ca 	.word	0x0800c4ca
 800afb8:	0800c4ce 	.word	0x0800c4ce
 800afbc:	0800776d 	.word	0x0800776d
 800afc0:	0800ad21 	.word	0x0800ad21

0800afc4 <_sbrk_r>:
 800afc4:	b538      	push	{r3, r4, r5, lr}
 800afc6:	4c06      	ldr	r4, [pc, #24]	; (800afe0 <_sbrk_r+0x1c>)
 800afc8:	2300      	movs	r3, #0
 800afca:	4605      	mov	r5, r0
 800afcc:	4608      	mov	r0, r1
 800afce:	6023      	str	r3, [r4, #0]
 800afd0:	f7f8 f8c6 	bl	8003160 <_sbrk>
 800afd4:	1c43      	adds	r3, r0, #1
 800afd6:	d102      	bne.n	800afde <_sbrk_r+0x1a>
 800afd8:	6823      	ldr	r3, [r4, #0]
 800afda:	b103      	cbz	r3, 800afde <_sbrk_r+0x1a>
 800afdc:	602b      	str	r3, [r5, #0]
 800afde:	bd38      	pop	{r3, r4, r5, pc}
 800afe0:	20000484 	.word	0x20000484

0800afe4 <strncmp>:
 800afe4:	b510      	push	{r4, lr}
 800afe6:	b16a      	cbz	r2, 800b004 <strncmp+0x20>
 800afe8:	3901      	subs	r1, #1
 800afea:	1884      	adds	r4, r0, r2
 800afec:	f810 3b01 	ldrb.w	r3, [r0], #1
 800aff0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800aff4:	4293      	cmp	r3, r2
 800aff6:	d103      	bne.n	800b000 <strncmp+0x1c>
 800aff8:	42a0      	cmp	r0, r4
 800affa:	d001      	beq.n	800b000 <strncmp+0x1c>
 800affc:	2b00      	cmp	r3, #0
 800affe:	d1f5      	bne.n	800afec <strncmp+0x8>
 800b000:	1a98      	subs	r0, r3, r2
 800b002:	bd10      	pop	{r4, pc}
 800b004:	4610      	mov	r0, r2
 800b006:	e7fc      	b.n	800b002 <strncmp+0x1e>

0800b008 <__ascii_wctomb>:
 800b008:	b149      	cbz	r1, 800b01e <__ascii_wctomb+0x16>
 800b00a:	2aff      	cmp	r2, #255	; 0xff
 800b00c:	bf85      	ittet	hi
 800b00e:	238a      	movhi	r3, #138	; 0x8a
 800b010:	6003      	strhi	r3, [r0, #0]
 800b012:	700a      	strbls	r2, [r1, #0]
 800b014:	f04f 30ff 	movhi.w	r0, #4294967295
 800b018:	bf98      	it	ls
 800b01a:	2001      	movls	r0, #1
 800b01c:	4770      	bx	lr
 800b01e:	4608      	mov	r0, r1
 800b020:	4770      	bx	lr

0800b022 <memmove>:
 800b022:	4288      	cmp	r0, r1
 800b024:	b510      	push	{r4, lr}
 800b026:	eb01 0302 	add.w	r3, r1, r2
 800b02a:	d807      	bhi.n	800b03c <memmove+0x1a>
 800b02c:	1e42      	subs	r2, r0, #1
 800b02e:	4299      	cmp	r1, r3
 800b030:	d00a      	beq.n	800b048 <memmove+0x26>
 800b032:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b036:	f802 4f01 	strb.w	r4, [r2, #1]!
 800b03a:	e7f8      	b.n	800b02e <memmove+0xc>
 800b03c:	4283      	cmp	r3, r0
 800b03e:	d9f5      	bls.n	800b02c <memmove+0xa>
 800b040:	1881      	adds	r1, r0, r2
 800b042:	1ad2      	subs	r2, r2, r3
 800b044:	42d3      	cmn	r3, r2
 800b046:	d100      	bne.n	800b04a <memmove+0x28>
 800b048:	bd10      	pop	{r4, pc}
 800b04a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b04e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800b052:	e7f7      	b.n	800b044 <memmove+0x22>

0800b054 <__malloc_lock>:
 800b054:	4770      	bx	lr

0800b056 <__malloc_unlock>:
 800b056:	4770      	bx	lr

0800b058 <_realloc_r>:
 800b058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b05a:	4607      	mov	r7, r0
 800b05c:	4614      	mov	r4, r2
 800b05e:	460e      	mov	r6, r1
 800b060:	b921      	cbnz	r1, 800b06c <_realloc_r+0x14>
 800b062:	4611      	mov	r1, r2
 800b064:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b068:	f7ff be00 	b.w	800ac6c <_malloc_r>
 800b06c:	b922      	cbnz	r2, 800b078 <_realloc_r+0x20>
 800b06e:	f7ff fdaf 	bl	800abd0 <_free_r>
 800b072:	4625      	mov	r5, r4
 800b074:	4628      	mov	r0, r5
 800b076:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b078:	f000 f814 	bl	800b0a4 <_malloc_usable_size_r>
 800b07c:	42a0      	cmp	r0, r4
 800b07e:	d20f      	bcs.n	800b0a0 <_realloc_r+0x48>
 800b080:	4621      	mov	r1, r4
 800b082:	4638      	mov	r0, r7
 800b084:	f7ff fdf2 	bl	800ac6c <_malloc_r>
 800b088:	4605      	mov	r5, r0
 800b08a:	2800      	cmp	r0, #0
 800b08c:	d0f2      	beq.n	800b074 <_realloc_r+0x1c>
 800b08e:	4631      	mov	r1, r6
 800b090:	4622      	mov	r2, r4
 800b092:	f7ff f985 	bl	800a3a0 <memcpy>
 800b096:	4631      	mov	r1, r6
 800b098:	4638      	mov	r0, r7
 800b09a:	f7ff fd99 	bl	800abd0 <_free_r>
 800b09e:	e7e9      	b.n	800b074 <_realloc_r+0x1c>
 800b0a0:	4635      	mov	r5, r6
 800b0a2:	e7e7      	b.n	800b074 <_realloc_r+0x1c>

0800b0a4 <_malloc_usable_size_r>:
 800b0a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b0a8:	1f18      	subs	r0, r3, #4
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	bfbc      	itt	lt
 800b0ae:	580b      	ldrlt	r3, [r1, r0]
 800b0b0:	18c0      	addlt	r0, r0, r3
 800b0b2:	4770      	bx	lr
 800b0b4:	0000      	movs	r0, r0
	...

0800b0b8 <sin>:
 800b0b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b0ba:	ec51 0b10 	vmov	r0, r1, d0
 800b0be:	4a20      	ldr	r2, [pc, #128]	; (800b140 <sin+0x88>)
 800b0c0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b0c4:	4293      	cmp	r3, r2
 800b0c6:	dc07      	bgt.n	800b0d8 <sin+0x20>
 800b0c8:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 800b138 <sin+0x80>
 800b0cc:	2000      	movs	r0, #0
 800b0ce:	f000 fe37 	bl	800bd40 <__kernel_sin>
 800b0d2:	ec51 0b10 	vmov	r0, r1, d0
 800b0d6:	e007      	b.n	800b0e8 <sin+0x30>
 800b0d8:	4a1a      	ldr	r2, [pc, #104]	; (800b144 <sin+0x8c>)
 800b0da:	4293      	cmp	r3, r2
 800b0dc:	dd09      	ble.n	800b0f2 <sin+0x3a>
 800b0de:	ee10 2a10 	vmov	r2, s0
 800b0e2:	460b      	mov	r3, r1
 800b0e4:	f7f5 f8d8 	bl	8000298 <__aeabi_dsub>
 800b0e8:	ec41 0b10 	vmov	d0, r0, r1
 800b0ec:	b005      	add	sp, #20
 800b0ee:	f85d fb04 	ldr.w	pc, [sp], #4
 800b0f2:	4668      	mov	r0, sp
 800b0f4:	f000 f828 	bl	800b148 <__ieee754_rem_pio2>
 800b0f8:	f000 0003 	and.w	r0, r0, #3
 800b0fc:	2801      	cmp	r0, #1
 800b0fe:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b102:	ed9d 0b00 	vldr	d0, [sp]
 800b106:	d004      	beq.n	800b112 <sin+0x5a>
 800b108:	2802      	cmp	r0, #2
 800b10a:	d005      	beq.n	800b118 <sin+0x60>
 800b10c:	b970      	cbnz	r0, 800b12c <sin+0x74>
 800b10e:	2001      	movs	r0, #1
 800b110:	e7dd      	b.n	800b0ce <sin+0x16>
 800b112:	f000 fa0d 	bl	800b530 <__kernel_cos>
 800b116:	e7dc      	b.n	800b0d2 <sin+0x1a>
 800b118:	2001      	movs	r0, #1
 800b11a:	f000 fe11 	bl	800bd40 <__kernel_sin>
 800b11e:	ec53 2b10 	vmov	r2, r3, d0
 800b122:	ee10 0a10 	vmov	r0, s0
 800b126:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b12a:	e7dd      	b.n	800b0e8 <sin+0x30>
 800b12c:	f000 fa00 	bl	800b530 <__kernel_cos>
 800b130:	e7f5      	b.n	800b11e <sin+0x66>
 800b132:	bf00      	nop
 800b134:	f3af 8000 	nop.w
	...
 800b140:	3fe921fb 	.word	0x3fe921fb
 800b144:	7fefffff 	.word	0x7fefffff

0800b148 <__ieee754_rem_pio2>:
 800b148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b14c:	ec57 6b10 	vmov	r6, r7, d0
 800b150:	4bc3      	ldr	r3, [pc, #780]	; (800b460 <__ieee754_rem_pio2+0x318>)
 800b152:	b08d      	sub	sp, #52	; 0x34
 800b154:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800b158:	4598      	cmp	r8, r3
 800b15a:	4604      	mov	r4, r0
 800b15c:	9704      	str	r7, [sp, #16]
 800b15e:	dc07      	bgt.n	800b170 <__ieee754_rem_pio2+0x28>
 800b160:	2200      	movs	r2, #0
 800b162:	2300      	movs	r3, #0
 800b164:	ed84 0b00 	vstr	d0, [r4]
 800b168:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800b16c:	2500      	movs	r5, #0
 800b16e:	e027      	b.n	800b1c0 <__ieee754_rem_pio2+0x78>
 800b170:	4bbc      	ldr	r3, [pc, #752]	; (800b464 <__ieee754_rem_pio2+0x31c>)
 800b172:	4598      	cmp	r8, r3
 800b174:	dc75      	bgt.n	800b262 <__ieee754_rem_pio2+0x11a>
 800b176:	9b04      	ldr	r3, [sp, #16]
 800b178:	4dbb      	ldr	r5, [pc, #748]	; (800b468 <__ieee754_rem_pio2+0x320>)
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	ee10 0a10 	vmov	r0, s0
 800b180:	a3a9      	add	r3, pc, #676	; (adr r3, 800b428 <__ieee754_rem_pio2+0x2e0>)
 800b182:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b186:	4639      	mov	r1, r7
 800b188:	dd36      	ble.n	800b1f8 <__ieee754_rem_pio2+0xb0>
 800b18a:	f7f5 f885 	bl	8000298 <__aeabi_dsub>
 800b18e:	45a8      	cmp	r8, r5
 800b190:	4606      	mov	r6, r0
 800b192:	460f      	mov	r7, r1
 800b194:	d018      	beq.n	800b1c8 <__ieee754_rem_pio2+0x80>
 800b196:	a3a6      	add	r3, pc, #664	; (adr r3, 800b430 <__ieee754_rem_pio2+0x2e8>)
 800b198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b19c:	f7f5 f87c 	bl	8000298 <__aeabi_dsub>
 800b1a0:	4602      	mov	r2, r0
 800b1a2:	460b      	mov	r3, r1
 800b1a4:	e9c4 2300 	strd	r2, r3, [r4]
 800b1a8:	4630      	mov	r0, r6
 800b1aa:	4639      	mov	r1, r7
 800b1ac:	f7f5 f874 	bl	8000298 <__aeabi_dsub>
 800b1b0:	a39f      	add	r3, pc, #636	; (adr r3, 800b430 <__ieee754_rem_pio2+0x2e8>)
 800b1b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1b6:	f7f5 f86f 	bl	8000298 <__aeabi_dsub>
 800b1ba:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b1be:	2501      	movs	r5, #1
 800b1c0:	4628      	mov	r0, r5
 800b1c2:	b00d      	add	sp, #52	; 0x34
 800b1c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1c8:	a39b      	add	r3, pc, #620	; (adr r3, 800b438 <__ieee754_rem_pio2+0x2f0>)
 800b1ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1ce:	f7f5 f863 	bl	8000298 <__aeabi_dsub>
 800b1d2:	a39b      	add	r3, pc, #620	; (adr r3, 800b440 <__ieee754_rem_pio2+0x2f8>)
 800b1d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1d8:	4606      	mov	r6, r0
 800b1da:	460f      	mov	r7, r1
 800b1dc:	f7f5 f85c 	bl	8000298 <__aeabi_dsub>
 800b1e0:	4602      	mov	r2, r0
 800b1e2:	460b      	mov	r3, r1
 800b1e4:	e9c4 2300 	strd	r2, r3, [r4]
 800b1e8:	4630      	mov	r0, r6
 800b1ea:	4639      	mov	r1, r7
 800b1ec:	f7f5 f854 	bl	8000298 <__aeabi_dsub>
 800b1f0:	a393      	add	r3, pc, #588	; (adr r3, 800b440 <__ieee754_rem_pio2+0x2f8>)
 800b1f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1f6:	e7de      	b.n	800b1b6 <__ieee754_rem_pio2+0x6e>
 800b1f8:	f7f5 f850 	bl	800029c <__adddf3>
 800b1fc:	45a8      	cmp	r8, r5
 800b1fe:	4606      	mov	r6, r0
 800b200:	460f      	mov	r7, r1
 800b202:	d016      	beq.n	800b232 <__ieee754_rem_pio2+0xea>
 800b204:	a38a      	add	r3, pc, #552	; (adr r3, 800b430 <__ieee754_rem_pio2+0x2e8>)
 800b206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b20a:	f7f5 f847 	bl	800029c <__adddf3>
 800b20e:	4602      	mov	r2, r0
 800b210:	460b      	mov	r3, r1
 800b212:	e9c4 2300 	strd	r2, r3, [r4]
 800b216:	4630      	mov	r0, r6
 800b218:	4639      	mov	r1, r7
 800b21a:	f7f5 f83d 	bl	8000298 <__aeabi_dsub>
 800b21e:	a384      	add	r3, pc, #528	; (adr r3, 800b430 <__ieee754_rem_pio2+0x2e8>)
 800b220:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b224:	f7f5 f83a 	bl	800029c <__adddf3>
 800b228:	f04f 35ff 	mov.w	r5, #4294967295
 800b22c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b230:	e7c6      	b.n	800b1c0 <__ieee754_rem_pio2+0x78>
 800b232:	a381      	add	r3, pc, #516	; (adr r3, 800b438 <__ieee754_rem_pio2+0x2f0>)
 800b234:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b238:	f7f5 f830 	bl	800029c <__adddf3>
 800b23c:	a380      	add	r3, pc, #512	; (adr r3, 800b440 <__ieee754_rem_pio2+0x2f8>)
 800b23e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b242:	4606      	mov	r6, r0
 800b244:	460f      	mov	r7, r1
 800b246:	f7f5 f829 	bl	800029c <__adddf3>
 800b24a:	4602      	mov	r2, r0
 800b24c:	460b      	mov	r3, r1
 800b24e:	e9c4 2300 	strd	r2, r3, [r4]
 800b252:	4630      	mov	r0, r6
 800b254:	4639      	mov	r1, r7
 800b256:	f7f5 f81f 	bl	8000298 <__aeabi_dsub>
 800b25a:	a379      	add	r3, pc, #484	; (adr r3, 800b440 <__ieee754_rem_pio2+0x2f8>)
 800b25c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b260:	e7e0      	b.n	800b224 <__ieee754_rem_pio2+0xdc>
 800b262:	4b82      	ldr	r3, [pc, #520]	; (800b46c <__ieee754_rem_pio2+0x324>)
 800b264:	4598      	cmp	r8, r3
 800b266:	f300 80d0 	bgt.w	800b40a <__ieee754_rem_pio2+0x2c2>
 800b26a:	f000 fe23 	bl	800beb4 <fabs>
 800b26e:	ec57 6b10 	vmov	r6, r7, d0
 800b272:	ee10 0a10 	vmov	r0, s0
 800b276:	a374      	add	r3, pc, #464	; (adr r3, 800b448 <__ieee754_rem_pio2+0x300>)
 800b278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b27c:	4639      	mov	r1, r7
 800b27e:	f7f5 f9c3 	bl	8000608 <__aeabi_dmul>
 800b282:	2200      	movs	r2, #0
 800b284:	4b7a      	ldr	r3, [pc, #488]	; (800b470 <__ieee754_rem_pio2+0x328>)
 800b286:	f7f5 f809 	bl	800029c <__adddf3>
 800b28a:	f7f5 fc6d 	bl	8000b68 <__aeabi_d2iz>
 800b28e:	4605      	mov	r5, r0
 800b290:	f7f5 f950 	bl	8000534 <__aeabi_i2d>
 800b294:	a364      	add	r3, pc, #400	; (adr r3, 800b428 <__ieee754_rem_pio2+0x2e0>)
 800b296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b29a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b29e:	f7f5 f9b3 	bl	8000608 <__aeabi_dmul>
 800b2a2:	4602      	mov	r2, r0
 800b2a4:	460b      	mov	r3, r1
 800b2a6:	4630      	mov	r0, r6
 800b2a8:	4639      	mov	r1, r7
 800b2aa:	f7f4 fff5 	bl	8000298 <__aeabi_dsub>
 800b2ae:	a360      	add	r3, pc, #384	; (adr r3, 800b430 <__ieee754_rem_pio2+0x2e8>)
 800b2b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2b4:	4682      	mov	sl, r0
 800b2b6:	468b      	mov	fp, r1
 800b2b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b2bc:	f7f5 f9a4 	bl	8000608 <__aeabi_dmul>
 800b2c0:	2d1f      	cmp	r5, #31
 800b2c2:	4606      	mov	r6, r0
 800b2c4:	460f      	mov	r7, r1
 800b2c6:	dc0c      	bgt.n	800b2e2 <__ieee754_rem_pio2+0x19a>
 800b2c8:	1e6a      	subs	r2, r5, #1
 800b2ca:	4b6a      	ldr	r3, [pc, #424]	; (800b474 <__ieee754_rem_pio2+0x32c>)
 800b2cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2d0:	4543      	cmp	r3, r8
 800b2d2:	d006      	beq.n	800b2e2 <__ieee754_rem_pio2+0x19a>
 800b2d4:	4632      	mov	r2, r6
 800b2d6:	463b      	mov	r3, r7
 800b2d8:	4650      	mov	r0, sl
 800b2da:	4659      	mov	r1, fp
 800b2dc:	f7f4 ffdc 	bl	8000298 <__aeabi_dsub>
 800b2e0:	e00e      	b.n	800b300 <__ieee754_rem_pio2+0x1b8>
 800b2e2:	4632      	mov	r2, r6
 800b2e4:	463b      	mov	r3, r7
 800b2e6:	4650      	mov	r0, sl
 800b2e8:	4659      	mov	r1, fp
 800b2ea:	f7f4 ffd5 	bl	8000298 <__aeabi_dsub>
 800b2ee:	ea4f 5328 	mov.w	r3, r8, asr #20
 800b2f2:	9305      	str	r3, [sp, #20]
 800b2f4:	9a05      	ldr	r2, [sp, #20]
 800b2f6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b2fa:	1ad3      	subs	r3, r2, r3
 800b2fc:	2b10      	cmp	r3, #16
 800b2fe:	dc02      	bgt.n	800b306 <__ieee754_rem_pio2+0x1be>
 800b300:	e9c4 0100 	strd	r0, r1, [r4]
 800b304:	e039      	b.n	800b37a <__ieee754_rem_pio2+0x232>
 800b306:	a34c      	add	r3, pc, #304	; (adr r3, 800b438 <__ieee754_rem_pio2+0x2f0>)
 800b308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b30c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b310:	f7f5 f97a 	bl	8000608 <__aeabi_dmul>
 800b314:	4606      	mov	r6, r0
 800b316:	460f      	mov	r7, r1
 800b318:	4602      	mov	r2, r0
 800b31a:	460b      	mov	r3, r1
 800b31c:	4650      	mov	r0, sl
 800b31e:	4659      	mov	r1, fp
 800b320:	f7f4 ffba 	bl	8000298 <__aeabi_dsub>
 800b324:	4602      	mov	r2, r0
 800b326:	460b      	mov	r3, r1
 800b328:	4680      	mov	r8, r0
 800b32a:	4689      	mov	r9, r1
 800b32c:	4650      	mov	r0, sl
 800b32e:	4659      	mov	r1, fp
 800b330:	f7f4 ffb2 	bl	8000298 <__aeabi_dsub>
 800b334:	4632      	mov	r2, r6
 800b336:	463b      	mov	r3, r7
 800b338:	f7f4 ffae 	bl	8000298 <__aeabi_dsub>
 800b33c:	a340      	add	r3, pc, #256	; (adr r3, 800b440 <__ieee754_rem_pio2+0x2f8>)
 800b33e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b342:	4606      	mov	r6, r0
 800b344:	460f      	mov	r7, r1
 800b346:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b34a:	f7f5 f95d 	bl	8000608 <__aeabi_dmul>
 800b34e:	4632      	mov	r2, r6
 800b350:	463b      	mov	r3, r7
 800b352:	f7f4 ffa1 	bl	8000298 <__aeabi_dsub>
 800b356:	4602      	mov	r2, r0
 800b358:	460b      	mov	r3, r1
 800b35a:	4606      	mov	r6, r0
 800b35c:	460f      	mov	r7, r1
 800b35e:	4640      	mov	r0, r8
 800b360:	4649      	mov	r1, r9
 800b362:	f7f4 ff99 	bl	8000298 <__aeabi_dsub>
 800b366:	9a05      	ldr	r2, [sp, #20]
 800b368:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b36c:	1ad3      	subs	r3, r2, r3
 800b36e:	2b31      	cmp	r3, #49	; 0x31
 800b370:	dc20      	bgt.n	800b3b4 <__ieee754_rem_pio2+0x26c>
 800b372:	e9c4 0100 	strd	r0, r1, [r4]
 800b376:	46c2      	mov	sl, r8
 800b378:	46cb      	mov	fp, r9
 800b37a:	e9d4 8900 	ldrd	r8, r9, [r4]
 800b37e:	4650      	mov	r0, sl
 800b380:	4642      	mov	r2, r8
 800b382:	464b      	mov	r3, r9
 800b384:	4659      	mov	r1, fp
 800b386:	f7f4 ff87 	bl	8000298 <__aeabi_dsub>
 800b38a:	463b      	mov	r3, r7
 800b38c:	4632      	mov	r2, r6
 800b38e:	f7f4 ff83 	bl	8000298 <__aeabi_dsub>
 800b392:	9b04      	ldr	r3, [sp, #16]
 800b394:	2b00      	cmp	r3, #0
 800b396:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b39a:	f6bf af11 	bge.w	800b1c0 <__ieee754_rem_pio2+0x78>
 800b39e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b3a2:	6063      	str	r3, [r4, #4]
 800b3a4:	f8c4 8000 	str.w	r8, [r4]
 800b3a8:	60a0      	str	r0, [r4, #8]
 800b3aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b3ae:	60e3      	str	r3, [r4, #12]
 800b3b0:	426d      	negs	r5, r5
 800b3b2:	e705      	b.n	800b1c0 <__ieee754_rem_pio2+0x78>
 800b3b4:	a326      	add	r3, pc, #152	; (adr r3, 800b450 <__ieee754_rem_pio2+0x308>)
 800b3b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b3be:	f7f5 f923 	bl	8000608 <__aeabi_dmul>
 800b3c2:	4606      	mov	r6, r0
 800b3c4:	460f      	mov	r7, r1
 800b3c6:	4602      	mov	r2, r0
 800b3c8:	460b      	mov	r3, r1
 800b3ca:	4640      	mov	r0, r8
 800b3cc:	4649      	mov	r1, r9
 800b3ce:	f7f4 ff63 	bl	8000298 <__aeabi_dsub>
 800b3d2:	4602      	mov	r2, r0
 800b3d4:	460b      	mov	r3, r1
 800b3d6:	4682      	mov	sl, r0
 800b3d8:	468b      	mov	fp, r1
 800b3da:	4640      	mov	r0, r8
 800b3dc:	4649      	mov	r1, r9
 800b3de:	f7f4 ff5b 	bl	8000298 <__aeabi_dsub>
 800b3e2:	4632      	mov	r2, r6
 800b3e4:	463b      	mov	r3, r7
 800b3e6:	f7f4 ff57 	bl	8000298 <__aeabi_dsub>
 800b3ea:	a31b      	add	r3, pc, #108	; (adr r3, 800b458 <__ieee754_rem_pio2+0x310>)
 800b3ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3f0:	4606      	mov	r6, r0
 800b3f2:	460f      	mov	r7, r1
 800b3f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b3f8:	f7f5 f906 	bl	8000608 <__aeabi_dmul>
 800b3fc:	4632      	mov	r2, r6
 800b3fe:	463b      	mov	r3, r7
 800b400:	f7f4 ff4a 	bl	8000298 <__aeabi_dsub>
 800b404:	4606      	mov	r6, r0
 800b406:	460f      	mov	r7, r1
 800b408:	e764      	b.n	800b2d4 <__ieee754_rem_pio2+0x18c>
 800b40a:	4b1b      	ldr	r3, [pc, #108]	; (800b478 <__ieee754_rem_pio2+0x330>)
 800b40c:	4598      	cmp	r8, r3
 800b40e:	dd35      	ble.n	800b47c <__ieee754_rem_pio2+0x334>
 800b410:	ee10 2a10 	vmov	r2, s0
 800b414:	463b      	mov	r3, r7
 800b416:	4630      	mov	r0, r6
 800b418:	4639      	mov	r1, r7
 800b41a:	f7f4 ff3d 	bl	8000298 <__aeabi_dsub>
 800b41e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b422:	e9c4 0100 	strd	r0, r1, [r4]
 800b426:	e6a1      	b.n	800b16c <__ieee754_rem_pio2+0x24>
 800b428:	54400000 	.word	0x54400000
 800b42c:	3ff921fb 	.word	0x3ff921fb
 800b430:	1a626331 	.word	0x1a626331
 800b434:	3dd0b461 	.word	0x3dd0b461
 800b438:	1a600000 	.word	0x1a600000
 800b43c:	3dd0b461 	.word	0x3dd0b461
 800b440:	2e037073 	.word	0x2e037073
 800b444:	3ba3198a 	.word	0x3ba3198a
 800b448:	6dc9c883 	.word	0x6dc9c883
 800b44c:	3fe45f30 	.word	0x3fe45f30
 800b450:	2e000000 	.word	0x2e000000
 800b454:	3ba3198a 	.word	0x3ba3198a
 800b458:	252049c1 	.word	0x252049c1
 800b45c:	397b839a 	.word	0x397b839a
 800b460:	3fe921fb 	.word	0x3fe921fb
 800b464:	4002d97b 	.word	0x4002d97b
 800b468:	3ff921fb 	.word	0x3ff921fb
 800b46c:	413921fb 	.word	0x413921fb
 800b470:	3fe00000 	.word	0x3fe00000
 800b474:	0800c5d8 	.word	0x0800c5d8
 800b478:	7fefffff 	.word	0x7fefffff
 800b47c:	ea4f 5528 	mov.w	r5, r8, asr #20
 800b480:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800b484:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800b488:	4630      	mov	r0, r6
 800b48a:	460f      	mov	r7, r1
 800b48c:	f7f5 fb6c 	bl	8000b68 <__aeabi_d2iz>
 800b490:	f7f5 f850 	bl	8000534 <__aeabi_i2d>
 800b494:	4602      	mov	r2, r0
 800b496:	460b      	mov	r3, r1
 800b498:	4630      	mov	r0, r6
 800b49a:	4639      	mov	r1, r7
 800b49c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b4a0:	f7f4 fefa 	bl	8000298 <__aeabi_dsub>
 800b4a4:	2200      	movs	r2, #0
 800b4a6:	4b1f      	ldr	r3, [pc, #124]	; (800b524 <__ieee754_rem_pio2+0x3dc>)
 800b4a8:	f7f5 f8ae 	bl	8000608 <__aeabi_dmul>
 800b4ac:	460f      	mov	r7, r1
 800b4ae:	4606      	mov	r6, r0
 800b4b0:	f7f5 fb5a 	bl	8000b68 <__aeabi_d2iz>
 800b4b4:	f7f5 f83e 	bl	8000534 <__aeabi_i2d>
 800b4b8:	4602      	mov	r2, r0
 800b4ba:	460b      	mov	r3, r1
 800b4bc:	4630      	mov	r0, r6
 800b4be:	4639      	mov	r1, r7
 800b4c0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b4c4:	f7f4 fee8 	bl	8000298 <__aeabi_dsub>
 800b4c8:	2200      	movs	r2, #0
 800b4ca:	4b16      	ldr	r3, [pc, #88]	; (800b524 <__ieee754_rem_pio2+0x3dc>)
 800b4cc:	f7f5 f89c 	bl	8000608 <__aeabi_dmul>
 800b4d0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800b4d4:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 800b4d8:	f04f 0803 	mov.w	r8, #3
 800b4dc:	2600      	movs	r6, #0
 800b4de:	2700      	movs	r7, #0
 800b4e0:	4632      	mov	r2, r6
 800b4e2:	463b      	mov	r3, r7
 800b4e4:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800b4e8:	f108 3aff 	add.w	sl, r8, #4294967295
 800b4ec:	f7f5 faf4 	bl	8000ad8 <__aeabi_dcmpeq>
 800b4f0:	b9b0      	cbnz	r0, 800b520 <__ieee754_rem_pio2+0x3d8>
 800b4f2:	4b0d      	ldr	r3, [pc, #52]	; (800b528 <__ieee754_rem_pio2+0x3e0>)
 800b4f4:	9301      	str	r3, [sp, #4]
 800b4f6:	2302      	movs	r3, #2
 800b4f8:	9300      	str	r3, [sp, #0]
 800b4fa:	462a      	mov	r2, r5
 800b4fc:	4643      	mov	r3, r8
 800b4fe:	4621      	mov	r1, r4
 800b500:	a806      	add	r0, sp, #24
 800b502:	f000 f8dd 	bl	800b6c0 <__kernel_rem_pio2>
 800b506:	9b04      	ldr	r3, [sp, #16]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	4605      	mov	r5, r0
 800b50c:	f6bf ae58 	bge.w	800b1c0 <__ieee754_rem_pio2+0x78>
 800b510:	6863      	ldr	r3, [r4, #4]
 800b512:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b516:	6063      	str	r3, [r4, #4]
 800b518:	68e3      	ldr	r3, [r4, #12]
 800b51a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b51e:	e746      	b.n	800b3ae <__ieee754_rem_pio2+0x266>
 800b520:	46d0      	mov	r8, sl
 800b522:	e7dd      	b.n	800b4e0 <__ieee754_rem_pio2+0x398>
 800b524:	41700000 	.word	0x41700000
 800b528:	0800c658 	.word	0x0800c658
 800b52c:	00000000 	.word	0x00000000

0800b530 <__kernel_cos>:
 800b530:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b534:	ec59 8b10 	vmov	r8, r9, d0
 800b538:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 800b53c:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800b540:	ed2d 8b02 	vpush	{d8}
 800b544:	eeb0 8a41 	vmov.f32	s16, s2
 800b548:	eef0 8a61 	vmov.f32	s17, s3
 800b54c:	da07      	bge.n	800b55e <__kernel_cos+0x2e>
 800b54e:	ee10 0a10 	vmov	r0, s0
 800b552:	4649      	mov	r1, r9
 800b554:	f7f5 fb08 	bl	8000b68 <__aeabi_d2iz>
 800b558:	2800      	cmp	r0, #0
 800b55a:	f000 8089 	beq.w	800b670 <__kernel_cos+0x140>
 800b55e:	4642      	mov	r2, r8
 800b560:	464b      	mov	r3, r9
 800b562:	4640      	mov	r0, r8
 800b564:	4649      	mov	r1, r9
 800b566:	f7f5 f84f 	bl	8000608 <__aeabi_dmul>
 800b56a:	2200      	movs	r2, #0
 800b56c:	4b4e      	ldr	r3, [pc, #312]	; (800b6a8 <__kernel_cos+0x178>)
 800b56e:	4604      	mov	r4, r0
 800b570:	460d      	mov	r5, r1
 800b572:	f7f5 f849 	bl	8000608 <__aeabi_dmul>
 800b576:	a340      	add	r3, pc, #256	; (adr r3, 800b678 <__kernel_cos+0x148>)
 800b578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b57c:	4682      	mov	sl, r0
 800b57e:	468b      	mov	fp, r1
 800b580:	4620      	mov	r0, r4
 800b582:	4629      	mov	r1, r5
 800b584:	f7f5 f840 	bl	8000608 <__aeabi_dmul>
 800b588:	a33d      	add	r3, pc, #244	; (adr r3, 800b680 <__kernel_cos+0x150>)
 800b58a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b58e:	f7f4 fe85 	bl	800029c <__adddf3>
 800b592:	4622      	mov	r2, r4
 800b594:	462b      	mov	r3, r5
 800b596:	f7f5 f837 	bl	8000608 <__aeabi_dmul>
 800b59a:	a33b      	add	r3, pc, #236	; (adr r3, 800b688 <__kernel_cos+0x158>)
 800b59c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5a0:	f7f4 fe7a 	bl	8000298 <__aeabi_dsub>
 800b5a4:	4622      	mov	r2, r4
 800b5a6:	462b      	mov	r3, r5
 800b5a8:	f7f5 f82e 	bl	8000608 <__aeabi_dmul>
 800b5ac:	a338      	add	r3, pc, #224	; (adr r3, 800b690 <__kernel_cos+0x160>)
 800b5ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5b2:	f7f4 fe73 	bl	800029c <__adddf3>
 800b5b6:	4622      	mov	r2, r4
 800b5b8:	462b      	mov	r3, r5
 800b5ba:	f7f5 f825 	bl	8000608 <__aeabi_dmul>
 800b5be:	a336      	add	r3, pc, #216	; (adr r3, 800b698 <__kernel_cos+0x168>)
 800b5c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5c4:	f7f4 fe68 	bl	8000298 <__aeabi_dsub>
 800b5c8:	4622      	mov	r2, r4
 800b5ca:	462b      	mov	r3, r5
 800b5cc:	f7f5 f81c 	bl	8000608 <__aeabi_dmul>
 800b5d0:	a333      	add	r3, pc, #204	; (adr r3, 800b6a0 <__kernel_cos+0x170>)
 800b5d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5d6:	f7f4 fe61 	bl	800029c <__adddf3>
 800b5da:	4622      	mov	r2, r4
 800b5dc:	462b      	mov	r3, r5
 800b5de:	f7f5 f813 	bl	8000608 <__aeabi_dmul>
 800b5e2:	4622      	mov	r2, r4
 800b5e4:	462b      	mov	r3, r5
 800b5e6:	f7f5 f80f 	bl	8000608 <__aeabi_dmul>
 800b5ea:	ec53 2b18 	vmov	r2, r3, d8
 800b5ee:	4604      	mov	r4, r0
 800b5f0:	460d      	mov	r5, r1
 800b5f2:	4640      	mov	r0, r8
 800b5f4:	4649      	mov	r1, r9
 800b5f6:	f7f5 f807 	bl	8000608 <__aeabi_dmul>
 800b5fa:	460b      	mov	r3, r1
 800b5fc:	4602      	mov	r2, r0
 800b5fe:	4629      	mov	r1, r5
 800b600:	4620      	mov	r0, r4
 800b602:	f7f4 fe49 	bl	8000298 <__aeabi_dsub>
 800b606:	4b29      	ldr	r3, [pc, #164]	; (800b6ac <__kernel_cos+0x17c>)
 800b608:	429e      	cmp	r6, r3
 800b60a:	4680      	mov	r8, r0
 800b60c:	4689      	mov	r9, r1
 800b60e:	dc11      	bgt.n	800b634 <__kernel_cos+0x104>
 800b610:	4602      	mov	r2, r0
 800b612:	460b      	mov	r3, r1
 800b614:	4650      	mov	r0, sl
 800b616:	4659      	mov	r1, fp
 800b618:	f7f4 fe3e 	bl	8000298 <__aeabi_dsub>
 800b61c:	460b      	mov	r3, r1
 800b61e:	4924      	ldr	r1, [pc, #144]	; (800b6b0 <__kernel_cos+0x180>)
 800b620:	4602      	mov	r2, r0
 800b622:	2000      	movs	r0, #0
 800b624:	f7f4 fe38 	bl	8000298 <__aeabi_dsub>
 800b628:	ecbd 8b02 	vpop	{d8}
 800b62c:	ec41 0b10 	vmov	d0, r0, r1
 800b630:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b634:	4b1f      	ldr	r3, [pc, #124]	; (800b6b4 <__kernel_cos+0x184>)
 800b636:	491e      	ldr	r1, [pc, #120]	; (800b6b0 <__kernel_cos+0x180>)
 800b638:	429e      	cmp	r6, r3
 800b63a:	bfcc      	ite	gt
 800b63c:	4d1e      	ldrgt	r5, [pc, #120]	; (800b6b8 <__kernel_cos+0x188>)
 800b63e:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800b642:	2400      	movs	r4, #0
 800b644:	4622      	mov	r2, r4
 800b646:	462b      	mov	r3, r5
 800b648:	2000      	movs	r0, #0
 800b64a:	f7f4 fe25 	bl	8000298 <__aeabi_dsub>
 800b64e:	4622      	mov	r2, r4
 800b650:	4606      	mov	r6, r0
 800b652:	460f      	mov	r7, r1
 800b654:	462b      	mov	r3, r5
 800b656:	4650      	mov	r0, sl
 800b658:	4659      	mov	r1, fp
 800b65a:	f7f4 fe1d 	bl	8000298 <__aeabi_dsub>
 800b65e:	4642      	mov	r2, r8
 800b660:	464b      	mov	r3, r9
 800b662:	f7f4 fe19 	bl	8000298 <__aeabi_dsub>
 800b666:	4602      	mov	r2, r0
 800b668:	460b      	mov	r3, r1
 800b66a:	4630      	mov	r0, r6
 800b66c:	4639      	mov	r1, r7
 800b66e:	e7d9      	b.n	800b624 <__kernel_cos+0xf4>
 800b670:	2000      	movs	r0, #0
 800b672:	490f      	ldr	r1, [pc, #60]	; (800b6b0 <__kernel_cos+0x180>)
 800b674:	e7d8      	b.n	800b628 <__kernel_cos+0xf8>
 800b676:	bf00      	nop
 800b678:	be8838d4 	.word	0xbe8838d4
 800b67c:	bda8fae9 	.word	0xbda8fae9
 800b680:	bdb4b1c4 	.word	0xbdb4b1c4
 800b684:	3e21ee9e 	.word	0x3e21ee9e
 800b688:	809c52ad 	.word	0x809c52ad
 800b68c:	3e927e4f 	.word	0x3e927e4f
 800b690:	19cb1590 	.word	0x19cb1590
 800b694:	3efa01a0 	.word	0x3efa01a0
 800b698:	16c15177 	.word	0x16c15177
 800b69c:	3f56c16c 	.word	0x3f56c16c
 800b6a0:	5555554c 	.word	0x5555554c
 800b6a4:	3fa55555 	.word	0x3fa55555
 800b6a8:	3fe00000 	.word	0x3fe00000
 800b6ac:	3fd33332 	.word	0x3fd33332
 800b6b0:	3ff00000 	.word	0x3ff00000
 800b6b4:	3fe90000 	.word	0x3fe90000
 800b6b8:	3fd20000 	.word	0x3fd20000
 800b6bc:	00000000 	.word	0x00000000

0800b6c0 <__kernel_rem_pio2>:
 800b6c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6c4:	ed2d 8b02 	vpush	{d8}
 800b6c8:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800b6cc:	1ed4      	subs	r4, r2, #3
 800b6ce:	9308      	str	r3, [sp, #32]
 800b6d0:	9101      	str	r1, [sp, #4]
 800b6d2:	4bc5      	ldr	r3, [pc, #788]	; (800b9e8 <__kernel_rem_pio2+0x328>)
 800b6d4:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800b6d6:	9009      	str	r0, [sp, #36]	; 0x24
 800b6d8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b6dc:	9304      	str	r3, [sp, #16]
 800b6de:	9b08      	ldr	r3, [sp, #32]
 800b6e0:	3b01      	subs	r3, #1
 800b6e2:	9307      	str	r3, [sp, #28]
 800b6e4:	2318      	movs	r3, #24
 800b6e6:	fb94 f4f3 	sdiv	r4, r4, r3
 800b6ea:	f06f 0317 	mvn.w	r3, #23
 800b6ee:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800b6f2:	fb04 3303 	mla	r3, r4, r3, r3
 800b6f6:	eb03 0a02 	add.w	sl, r3, r2
 800b6fa:	9b04      	ldr	r3, [sp, #16]
 800b6fc:	9a07      	ldr	r2, [sp, #28]
 800b6fe:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800b9d8 <__kernel_rem_pio2+0x318>
 800b702:	eb03 0802 	add.w	r8, r3, r2
 800b706:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800b708:	1aa7      	subs	r7, r4, r2
 800b70a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800b70e:	ae22      	add	r6, sp, #136	; 0x88
 800b710:	2500      	movs	r5, #0
 800b712:	4545      	cmp	r5, r8
 800b714:	dd13      	ble.n	800b73e <__kernel_rem_pio2+0x7e>
 800b716:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 800b9d8 <__kernel_rem_pio2+0x318>
 800b71a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800b71e:	2600      	movs	r6, #0
 800b720:	9b04      	ldr	r3, [sp, #16]
 800b722:	429e      	cmp	r6, r3
 800b724:	dc32      	bgt.n	800b78c <__kernel_rem_pio2+0xcc>
 800b726:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b728:	9302      	str	r3, [sp, #8]
 800b72a:	9b08      	ldr	r3, [sp, #32]
 800b72c:	199d      	adds	r5, r3, r6
 800b72e:	ab22      	add	r3, sp, #136	; 0x88
 800b730:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800b734:	9306      	str	r3, [sp, #24]
 800b736:	ec59 8b18 	vmov	r8, r9, d8
 800b73a:	2700      	movs	r7, #0
 800b73c:	e01f      	b.n	800b77e <__kernel_rem_pio2+0xbe>
 800b73e:	42ef      	cmn	r7, r5
 800b740:	d407      	bmi.n	800b752 <__kernel_rem_pio2+0x92>
 800b742:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800b746:	f7f4 fef5 	bl	8000534 <__aeabi_i2d>
 800b74a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800b74e:	3501      	adds	r5, #1
 800b750:	e7df      	b.n	800b712 <__kernel_rem_pio2+0x52>
 800b752:	ec51 0b18 	vmov	r0, r1, d8
 800b756:	e7f8      	b.n	800b74a <__kernel_rem_pio2+0x8a>
 800b758:	9906      	ldr	r1, [sp, #24]
 800b75a:	9d02      	ldr	r5, [sp, #8]
 800b75c:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800b760:	9106      	str	r1, [sp, #24]
 800b762:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800b766:	9502      	str	r5, [sp, #8]
 800b768:	f7f4 ff4e 	bl	8000608 <__aeabi_dmul>
 800b76c:	4602      	mov	r2, r0
 800b76e:	460b      	mov	r3, r1
 800b770:	4640      	mov	r0, r8
 800b772:	4649      	mov	r1, r9
 800b774:	f7f4 fd92 	bl	800029c <__adddf3>
 800b778:	3701      	adds	r7, #1
 800b77a:	4680      	mov	r8, r0
 800b77c:	4689      	mov	r9, r1
 800b77e:	9b07      	ldr	r3, [sp, #28]
 800b780:	429f      	cmp	r7, r3
 800b782:	dde9      	ble.n	800b758 <__kernel_rem_pio2+0x98>
 800b784:	e8eb 8902 	strd	r8, r9, [fp], #8
 800b788:	3601      	adds	r6, #1
 800b78a:	e7c9      	b.n	800b720 <__kernel_rem_pio2+0x60>
 800b78c:	9b04      	ldr	r3, [sp, #16]
 800b78e:	aa0e      	add	r2, sp, #56	; 0x38
 800b790:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b794:	930c      	str	r3, [sp, #48]	; 0x30
 800b796:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800b798:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800b79c:	9c04      	ldr	r4, [sp, #16]
 800b79e:	930b      	str	r3, [sp, #44]	; 0x2c
 800b7a0:	ab9a      	add	r3, sp, #616	; 0x268
 800b7a2:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 800b7a6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b7aa:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b7ae:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800b7b2:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800b7b6:	ab9a      	add	r3, sp, #616	; 0x268
 800b7b8:	445b      	add	r3, fp
 800b7ba:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 800b7be:	2500      	movs	r5, #0
 800b7c0:	1b63      	subs	r3, r4, r5
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	dc78      	bgt.n	800b8b8 <__kernel_rem_pio2+0x1f8>
 800b7c6:	4650      	mov	r0, sl
 800b7c8:	ec49 8b10 	vmov	d0, r8, r9
 800b7cc:	f000 fc00 	bl	800bfd0 <scalbn>
 800b7d0:	ec57 6b10 	vmov	r6, r7, d0
 800b7d4:	2200      	movs	r2, #0
 800b7d6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800b7da:	ee10 0a10 	vmov	r0, s0
 800b7de:	4639      	mov	r1, r7
 800b7e0:	f7f4 ff12 	bl	8000608 <__aeabi_dmul>
 800b7e4:	ec41 0b10 	vmov	d0, r0, r1
 800b7e8:	f000 fb6e 	bl	800bec8 <floor>
 800b7ec:	2200      	movs	r2, #0
 800b7ee:	ec51 0b10 	vmov	r0, r1, d0
 800b7f2:	4b7e      	ldr	r3, [pc, #504]	; (800b9ec <__kernel_rem_pio2+0x32c>)
 800b7f4:	f7f4 ff08 	bl	8000608 <__aeabi_dmul>
 800b7f8:	4602      	mov	r2, r0
 800b7fa:	460b      	mov	r3, r1
 800b7fc:	4630      	mov	r0, r6
 800b7fe:	4639      	mov	r1, r7
 800b800:	f7f4 fd4a 	bl	8000298 <__aeabi_dsub>
 800b804:	460f      	mov	r7, r1
 800b806:	4606      	mov	r6, r0
 800b808:	f7f5 f9ae 	bl	8000b68 <__aeabi_d2iz>
 800b80c:	9006      	str	r0, [sp, #24]
 800b80e:	f7f4 fe91 	bl	8000534 <__aeabi_i2d>
 800b812:	4602      	mov	r2, r0
 800b814:	460b      	mov	r3, r1
 800b816:	4630      	mov	r0, r6
 800b818:	4639      	mov	r1, r7
 800b81a:	f7f4 fd3d 	bl	8000298 <__aeabi_dsub>
 800b81e:	f1ba 0f00 	cmp.w	sl, #0
 800b822:	4606      	mov	r6, r0
 800b824:	460f      	mov	r7, r1
 800b826:	dd6c      	ble.n	800b902 <__kernel_rem_pio2+0x242>
 800b828:	1e62      	subs	r2, r4, #1
 800b82a:	ab0e      	add	r3, sp, #56	; 0x38
 800b82c:	f1ca 0118 	rsb	r1, sl, #24
 800b830:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800b834:	9d06      	ldr	r5, [sp, #24]
 800b836:	fa40 f301 	asr.w	r3, r0, r1
 800b83a:	441d      	add	r5, r3
 800b83c:	408b      	lsls	r3, r1
 800b83e:	1ac0      	subs	r0, r0, r3
 800b840:	ab0e      	add	r3, sp, #56	; 0x38
 800b842:	9506      	str	r5, [sp, #24]
 800b844:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800b848:	f1ca 0317 	rsb	r3, sl, #23
 800b84c:	fa40 f303 	asr.w	r3, r0, r3
 800b850:	9302      	str	r3, [sp, #8]
 800b852:	9b02      	ldr	r3, [sp, #8]
 800b854:	2b00      	cmp	r3, #0
 800b856:	dd62      	ble.n	800b91e <__kernel_rem_pio2+0x25e>
 800b858:	9b06      	ldr	r3, [sp, #24]
 800b85a:	2200      	movs	r2, #0
 800b85c:	3301      	adds	r3, #1
 800b85e:	9306      	str	r3, [sp, #24]
 800b860:	4615      	mov	r5, r2
 800b862:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800b866:	4294      	cmp	r4, r2
 800b868:	f300 8095 	bgt.w	800b996 <__kernel_rem_pio2+0x2d6>
 800b86c:	f1ba 0f00 	cmp.w	sl, #0
 800b870:	dd07      	ble.n	800b882 <__kernel_rem_pio2+0x1c2>
 800b872:	f1ba 0f01 	cmp.w	sl, #1
 800b876:	f000 80a2 	beq.w	800b9be <__kernel_rem_pio2+0x2fe>
 800b87a:	f1ba 0f02 	cmp.w	sl, #2
 800b87e:	f000 80c1 	beq.w	800ba04 <__kernel_rem_pio2+0x344>
 800b882:	9b02      	ldr	r3, [sp, #8]
 800b884:	2b02      	cmp	r3, #2
 800b886:	d14a      	bne.n	800b91e <__kernel_rem_pio2+0x25e>
 800b888:	4632      	mov	r2, r6
 800b88a:	463b      	mov	r3, r7
 800b88c:	2000      	movs	r0, #0
 800b88e:	4958      	ldr	r1, [pc, #352]	; (800b9f0 <__kernel_rem_pio2+0x330>)
 800b890:	f7f4 fd02 	bl	8000298 <__aeabi_dsub>
 800b894:	4606      	mov	r6, r0
 800b896:	460f      	mov	r7, r1
 800b898:	2d00      	cmp	r5, #0
 800b89a:	d040      	beq.n	800b91e <__kernel_rem_pio2+0x25e>
 800b89c:	4650      	mov	r0, sl
 800b89e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800b9e0 <__kernel_rem_pio2+0x320>
 800b8a2:	f000 fb95 	bl	800bfd0 <scalbn>
 800b8a6:	4630      	mov	r0, r6
 800b8a8:	4639      	mov	r1, r7
 800b8aa:	ec53 2b10 	vmov	r2, r3, d0
 800b8ae:	f7f4 fcf3 	bl	8000298 <__aeabi_dsub>
 800b8b2:	4606      	mov	r6, r0
 800b8b4:	460f      	mov	r7, r1
 800b8b6:	e032      	b.n	800b91e <__kernel_rem_pio2+0x25e>
 800b8b8:	2200      	movs	r2, #0
 800b8ba:	4b4e      	ldr	r3, [pc, #312]	; (800b9f4 <__kernel_rem_pio2+0x334>)
 800b8bc:	4640      	mov	r0, r8
 800b8be:	4649      	mov	r1, r9
 800b8c0:	f7f4 fea2 	bl	8000608 <__aeabi_dmul>
 800b8c4:	f7f5 f950 	bl	8000b68 <__aeabi_d2iz>
 800b8c8:	f7f4 fe34 	bl	8000534 <__aeabi_i2d>
 800b8cc:	2200      	movs	r2, #0
 800b8ce:	4b4a      	ldr	r3, [pc, #296]	; (800b9f8 <__kernel_rem_pio2+0x338>)
 800b8d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b8d4:	f7f4 fe98 	bl	8000608 <__aeabi_dmul>
 800b8d8:	4602      	mov	r2, r0
 800b8da:	460b      	mov	r3, r1
 800b8dc:	4640      	mov	r0, r8
 800b8de:	4649      	mov	r1, r9
 800b8e0:	f7f4 fcda 	bl	8000298 <__aeabi_dsub>
 800b8e4:	f7f5 f940 	bl	8000b68 <__aeabi_d2iz>
 800b8e8:	ab0e      	add	r3, sp, #56	; 0x38
 800b8ea:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800b8ee:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800b8f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b8f6:	f7f4 fcd1 	bl	800029c <__adddf3>
 800b8fa:	3501      	adds	r5, #1
 800b8fc:	4680      	mov	r8, r0
 800b8fe:	4689      	mov	r9, r1
 800b900:	e75e      	b.n	800b7c0 <__kernel_rem_pio2+0x100>
 800b902:	d105      	bne.n	800b910 <__kernel_rem_pio2+0x250>
 800b904:	1e63      	subs	r3, r4, #1
 800b906:	aa0e      	add	r2, sp, #56	; 0x38
 800b908:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800b90c:	15c3      	asrs	r3, r0, #23
 800b90e:	e79f      	b.n	800b850 <__kernel_rem_pio2+0x190>
 800b910:	2200      	movs	r2, #0
 800b912:	4b3a      	ldr	r3, [pc, #232]	; (800b9fc <__kernel_rem_pio2+0x33c>)
 800b914:	f7f5 f8fe 	bl	8000b14 <__aeabi_dcmpge>
 800b918:	2800      	cmp	r0, #0
 800b91a:	d139      	bne.n	800b990 <__kernel_rem_pio2+0x2d0>
 800b91c:	9002      	str	r0, [sp, #8]
 800b91e:	2200      	movs	r2, #0
 800b920:	2300      	movs	r3, #0
 800b922:	4630      	mov	r0, r6
 800b924:	4639      	mov	r1, r7
 800b926:	f7f5 f8d7 	bl	8000ad8 <__aeabi_dcmpeq>
 800b92a:	2800      	cmp	r0, #0
 800b92c:	f000 80c7 	beq.w	800babe <__kernel_rem_pio2+0x3fe>
 800b930:	1e65      	subs	r5, r4, #1
 800b932:	462b      	mov	r3, r5
 800b934:	2200      	movs	r2, #0
 800b936:	9904      	ldr	r1, [sp, #16]
 800b938:	428b      	cmp	r3, r1
 800b93a:	da6a      	bge.n	800ba12 <__kernel_rem_pio2+0x352>
 800b93c:	2a00      	cmp	r2, #0
 800b93e:	f000 8088 	beq.w	800ba52 <__kernel_rem_pio2+0x392>
 800b942:	ab0e      	add	r3, sp, #56	; 0x38
 800b944:	f1aa 0a18 	sub.w	sl, sl, #24
 800b948:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	f000 80b4 	beq.w	800baba <__kernel_rem_pio2+0x3fa>
 800b952:	4650      	mov	r0, sl
 800b954:	ed9f 0b22 	vldr	d0, [pc, #136]	; 800b9e0 <__kernel_rem_pio2+0x320>
 800b958:	f000 fb3a 	bl	800bfd0 <scalbn>
 800b95c:	00ec      	lsls	r4, r5, #3
 800b95e:	ab72      	add	r3, sp, #456	; 0x1c8
 800b960:	191e      	adds	r6, r3, r4
 800b962:	ec59 8b10 	vmov	r8, r9, d0
 800b966:	f106 0a08 	add.w	sl, r6, #8
 800b96a:	462f      	mov	r7, r5
 800b96c:	2f00      	cmp	r7, #0
 800b96e:	f280 80df 	bge.w	800bb30 <__kernel_rem_pio2+0x470>
 800b972:	ed9f 8b19 	vldr	d8, [pc, #100]	; 800b9d8 <__kernel_rem_pio2+0x318>
 800b976:	f04f 0a00 	mov.w	sl, #0
 800b97a:	eba5 030a 	sub.w	r3, r5, sl
 800b97e:	2b00      	cmp	r3, #0
 800b980:	f2c0 810a 	blt.w	800bb98 <__kernel_rem_pio2+0x4d8>
 800b984:	f8df b078 	ldr.w	fp, [pc, #120]	; 800ba00 <__kernel_rem_pio2+0x340>
 800b988:	ec59 8b18 	vmov	r8, r9, d8
 800b98c:	2700      	movs	r7, #0
 800b98e:	e0f5      	b.n	800bb7c <__kernel_rem_pio2+0x4bc>
 800b990:	2302      	movs	r3, #2
 800b992:	9302      	str	r3, [sp, #8]
 800b994:	e760      	b.n	800b858 <__kernel_rem_pio2+0x198>
 800b996:	ab0e      	add	r3, sp, #56	; 0x38
 800b998:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b99c:	b94d      	cbnz	r5, 800b9b2 <__kernel_rem_pio2+0x2f2>
 800b99e:	b12b      	cbz	r3, 800b9ac <__kernel_rem_pio2+0x2ec>
 800b9a0:	a80e      	add	r0, sp, #56	; 0x38
 800b9a2:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800b9a6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800b9aa:	2301      	movs	r3, #1
 800b9ac:	3201      	adds	r2, #1
 800b9ae:	461d      	mov	r5, r3
 800b9b0:	e759      	b.n	800b866 <__kernel_rem_pio2+0x1a6>
 800b9b2:	a80e      	add	r0, sp, #56	; 0x38
 800b9b4:	1acb      	subs	r3, r1, r3
 800b9b6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800b9ba:	462b      	mov	r3, r5
 800b9bc:	e7f6      	b.n	800b9ac <__kernel_rem_pio2+0x2ec>
 800b9be:	1e62      	subs	r2, r4, #1
 800b9c0:	ab0e      	add	r3, sp, #56	; 0x38
 800b9c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9c6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800b9ca:	a90e      	add	r1, sp, #56	; 0x38
 800b9cc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800b9d0:	e757      	b.n	800b882 <__kernel_rem_pio2+0x1c2>
 800b9d2:	bf00      	nop
 800b9d4:	f3af 8000 	nop.w
	...
 800b9e4:	3ff00000 	.word	0x3ff00000
 800b9e8:	0800c7a0 	.word	0x0800c7a0
 800b9ec:	40200000 	.word	0x40200000
 800b9f0:	3ff00000 	.word	0x3ff00000
 800b9f4:	3e700000 	.word	0x3e700000
 800b9f8:	41700000 	.word	0x41700000
 800b9fc:	3fe00000 	.word	0x3fe00000
 800ba00:	0800c760 	.word	0x0800c760
 800ba04:	1e62      	subs	r2, r4, #1
 800ba06:	ab0e      	add	r3, sp, #56	; 0x38
 800ba08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba0c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800ba10:	e7db      	b.n	800b9ca <__kernel_rem_pio2+0x30a>
 800ba12:	a90e      	add	r1, sp, #56	; 0x38
 800ba14:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800ba18:	3b01      	subs	r3, #1
 800ba1a:	430a      	orrs	r2, r1
 800ba1c:	e78b      	b.n	800b936 <__kernel_rem_pio2+0x276>
 800ba1e:	3301      	adds	r3, #1
 800ba20:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800ba24:	2900      	cmp	r1, #0
 800ba26:	d0fa      	beq.n	800ba1e <__kernel_rem_pio2+0x35e>
 800ba28:	9a08      	ldr	r2, [sp, #32]
 800ba2a:	4422      	add	r2, r4
 800ba2c:	00d2      	lsls	r2, r2, #3
 800ba2e:	a922      	add	r1, sp, #136	; 0x88
 800ba30:	18e3      	adds	r3, r4, r3
 800ba32:	9206      	str	r2, [sp, #24]
 800ba34:	440a      	add	r2, r1
 800ba36:	9302      	str	r3, [sp, #8]
 800ba38:	f10b 0108 	add.w	r1, fp, #8
 800ba3c:	f102 0308 	add.w	r3, r2, #8
 800ba40:	1c66      	adds	r6, r4, #1
 800ba42:	910a      	str	r1, [sp, #40]	; 0x28
 800ba44:	2500      	movs	r5, #0
 800ba46:	930d      	str	r3, [sp, #52]	; 0x34
 800ba48:	9b02      	ldr	r3, [sp, #8]
 800ba4a:	42b3      	cmp	r3, r6
 800ba4c:	da04      	bge.n	800ba58 <__kernel_rem_pio2+0x398>
 800ba4e:	461c      	mov	r4, r3
 800ba50:	e6a6      	b.n	800b7a0 <__kernel_rem_pio2+0xe0>
 800ba52:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ba54:	2301      	movs	r3, #1
 800ba56:	e7e3      	b.n	800ba20 <__kernel_rem_pio2+0x360>
 800ba58:	9b06      	ldr	r3, [sp, #24]
 800ba5a:	18ef      	adds	r7, r5, r3
 800ba5c:	ab22      	add	r3, sp, #136	; 0x88
 800ba5e:	441f      	add	r7, r3
 800ba60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ba62:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800ba66:	f7f4 fd65 	bl	8000534 <__aeabi_i2d>
 800ba6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba6c:	461c      	mov	r4, r3
 800ba6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ba70:	e9c7 0100 	strd	r0, r1, [r7]
 800ba74:	eb03 0b05 	add.w	fp, r3, r5
 800ba78:	2700      	movs	r7, #0
 800ba7a:	f04f 0800 	mov.w	r8, #0
 800ba7e:	f04f 0900 	mov.w	r9, #0
 800ba82:	9b07      	ldr	r3, [sp, #28]
 800ba84:	429f      	cmp	r7, r3
 800ba86:	dd08      	ble.n	800ba9a <__kernel_rem_pio2+0x3da>
 800ba88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba8a:	aa72      	add	r2, sp, #456	; 0x1c8
 800ba8c:	18eb      	adds	r3, r5, r3
 800ba8e:	4413      	add	r3, r2
 800ba90:	e9c3 8902 	strd	r8, r9, [r3, #8]
 800ba94:	3601      	adds	r6, #1
 800ba96:	3508      	adds	r5, #8
 800ba98:	e7d6      	b.n	800ba48 <__kernel_rem_pio2+0x388>
 800ba9a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800ba9e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800baa2:	f7f4 fdb1 	bl	8000608 <__aeabi_dmul>
 800baa6:	4602      	mov	r2, r0
 800baa8:	460b      	mov	r3, r1
 800baaa:	4640      	mov	r0, r8
 800baac:	4649      	mov	r1, r9
 800baae:	f7f4 fbf5 	bl	800029c <__adddf3>
 800bab2:	3701      	adds	r7, #1
 800bab4:	4680      	mov	r8, r0
 800bab6:	4689      	mov	r9, r1
 800bab8:	e7e3      	b.n	800ba82 <__kernel_rem_pio2+0x3c2>
 800baba:	3d01      	subs	r5, #1
 800babc:	e741      	b.n	800b942 <__kernel_rem_pio2+0x282>
 800babe:	f1ca 0000 	rsb	r0, sl, #0
 800bac2:	ec47 6b10 	vmov	d0, r6, r7
 800bac6:	f000 fa83 	bl	800bfd0 <scalbn>
 800baca:	ec57 6b10 	vmov	r6, r7, d0
 800bace:	2200      	movs	r2, #0
 800bad0:	4b99      	ldr	r3, [pc, #612]	; (800bd38 <__kernel_rem_pio2+0x678>)
 800bad2:	ee10 0a10 	vmov	r0, s0
 800bad6:	4639      	mov	r1, r7
 800bad8:	f7f5 f81c 	bl	8000b14 <__aeabi_dcmpge>
 800badc:	b1f8      	cbz	r0, 800bb1e <__kernel_rem_pio2+0x45e>
 800bade:	2200      	movs	r2, #0
 800bae0:	4b96      	ldr	r3, [pc, #600]	; (800bd3c <__kernel_rem_pio2+0x67c>)
 800bae2:	4630      	mov	r0, r6
 800bae4:	4639      	mov	r1, r7
 800bae6:	f7f4 fd8f 	bl	8000608 <__aeabi_dmul>
 800baea:	f7f5 f83d 	bl	8000b68 <__aeabi_d2iz>
 800baee:	4680      	mov	r8, r0
 800baf0:	f7f4 fd20 	bl	8000534 <__aeabi_i2d>
 800baf4:	2200      	movs	r2, #0
 800baf6:	4b90      	ldr	r3, [pc, #576]	; (800bd38 <__kernel_rem_pio2+0x678>)
 800baf8:	f7f4 fd86 	bl	8000608 <__aeabi_dmul>
 800bafc:	460b      	mov	r3, r1
 800bafe:	4602      	mov	r2, r0
 800bb00:	4639      	mov	r1, r7
 800bb02:	4630      	mov	r0, r6
 800bb04:	f7f4 fbc8 	bl	8000298 <__aeabi_dsub>
 800bb08:	f7f5 f82e 	bl	8000b68 <__aeabi_d2iz>
 800bb0c:	1c65      	adds	r5, r4, #1
 800bb0e:	ab0e      	add	r3, sp, #56	; 0x38
 800bb10:	f10a 0a18 	add.w	sl, sl, #24
 800bb14:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800bb18:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800bb1c:	e719      	b.n	800b952 <__kernel_rem_pio2+0x292>
 800bb1e:	4630      	mov	r0, r6
 800bb20:	4639      	mov	r1, r7
 800bb22:	f7f5 f821 	bl	8000b68 <__aeabi_d2iz>
 800bb26:	ab0e      	add	r3, sp, #56	; 0x38
 800bb28:	4625      	mov	r5, r4
 800bb2a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800bb2e:	e710      	b.n	800b952 <__kernel_rem_pio2+0x292>
 800bb30:	ab0e      	add	r3, sp, #56	; 0x38
 800bb32:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800bb36:	f7f4 fcfd 	bl	8000534 <__aeabi_i2d>
 800bb3a:	4642      	mov	r2, r8
 800bb3c:	464b      	mov	r3, r9
 800bb3e:	f7f4 fd63 	bl	8000608 <__aeabi_dmul>
 800bb42:	2200      	movs	r2, #0
 800bb44:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800bb48:	4b7c      	ldr	r3, [pc, #496]	; (800bd3c <__kernel_rem_pio2+0x67c>)
 800bb4a:	4640      	mov	r0, r8
 800bb4c:	4649      	mov	r1, r9
 800bb4e:	f7f4 fd5b 	bl	8000608 <__aeabi_dmul>
 800bb52:	3f01      	subs	r7, #1
 800bb54:	4680      	mov	r8, r0
 800bb56:	4689      	mov	r9, r1
 800bb58:	e708      	b.n	800b96c <__kernel_rem_pio2+0x2ac>
 800bb5a:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 800bb5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb62:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 800bb66:	f7f4 fd4f 	bl	8000608 <__aeabi_dmul>
 800bb6a:	4602      	mov	r2, r0
 800bb6c:	460b      	mov	r3, r1
 800bb6e:	4640      	mov	r0, r8
 800bb70:	4649      	mov	r1, r9
 800bb72:	f7f4 fb93 	bl	800029c <__adddf3>
 800bb76:	3701      	adds	r7, #1
 800bb78:	4680      	mov	r8, r0
 800bb7a:	4689      	mov	r9, r1
 800bb7c:	9b04      	ldr	r3, [sp, #16]
 800bb7e:	429f      	cmp	r7, r3
 800bb80:	dc01      	bgt.n	800bb86 <__kernel_rem_pio2+0x4c6>
 800bb82:	45ba      	cmp	sl, r7
 800bb84:	dae9      	bge.n	800bb5a <__kernel_rem_pio2+0x49a>
 800bb86:	ab4a      	add	r3, sp, #296	; 0x128
 800bb88:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800bb8c:	e9c3 8900 	strd	r8, r9, [r3]
 800bb90:	f10a 0a01 	add.w	sl, sl, #1
 800bb94:	3e08      	subs	r6, #8
 800bb96:	e6f0      	b.n	800b97a <__kernel_rem_pio2+0x2ba>
 800bb98:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800bb9a:	2b03      	cmp	r3, #3
 800bb9c:	d85b      	bhi.n	800bc56 <__kernel_rem_pio2+0x596>
 800bb9e:	e8df f003 	tbb	[pc, r3]
 800bba2:	264a      	.short	0x264a
 800bba4:	0226      	.short	0x0226
 800bba6:	ab9a      	add	r3, sp, #616	; 0x268
 800bba8:	441c      	add	r4, r3
 800bbaa:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800bbae:	46a2      	mov	sl, r4
 800bbb0:	46ab      	mov	fp, r5
 800bbb2:	f1bb 0f00 	cmp.w	fp, #0
 800bbb6:	dc6c      	bgt.n	800bc92 <__kernel_rem_pio2+0x5d2>
 800bbb8:	46a2      	mov	sl, r4
 800bbba:	46ab      	mov	fp, r5
 800bbbc:	f1bb 0f01 	cmp.w	fp, #1
 800bbc0:	f300 8086 	bgt.w	800bcd0 <__kernel_rem_pio2+0x610>
 800bbc4:	2000      	movs	r0, #0
 800bbc6:	2100      	movs	r1, #0
 800bbc8:	2d01      	cmp	r5, #1
 800bbca:	f300 80a0 	bgt.w	800bd0e <__kernel_rem_pio2+0x64e>
 800bbce:	9b02      	ldr	r3, [sp, #8]
 800bbd0:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800bbd4:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	f040 809e 	bne.w	800bd1a <__kernel_rem_pio2+0x65a>
 800bbde:	9b01      	ldr	r3, [sp, #4]
 800bbe0:	e9c3 7800 	strd	r7, r8, [r3]
 800bbe4:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800bbe8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800bbec:	e033      	b.n	800bc56 <__kernel_rem_pio2+0x596>
 800bbee:	3408      	adds	r4, #8
 800bbf0:	ab4a      	add	r3, sp, #296	; 0x128
 800bbf2:	441c      	add	r4, r3
 800bbf4:	462e      	mov	r6, r5
 800bbf6:	2000      	movs	r0, #0
 800bbf8:	2100      	movs	r1, #0
 800bbfa:	2e00      	cmp	r6, #0
 800bbfc:	da3a      	bge.n	800bc74 <__kernel_rem_pio2+0x5b4>
 800bbfe:	9b02      	ldr	r3, [sp, #8]
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d03d      	beq.n	800bc80 <__kernel_rem_pio2+0x5c0>
 800bc04:	4602      	mov	r2, r0
 800bc06:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bc0a:	9c01      	ldr	r4, [sp, #4]
 800bc0c:	e9c4 2300 	strd	r2, r3, [r4]
 800bc10:	4602      	mov	r2, r0
 800bc12:	460b      	mov	r3, r1
 800bc14:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800bc18:	f7f4 fb3e 	bl	8000298 <__aeabi_dsub>
 800bc1c:	ae4c      	add	r6, sp, #304	; 0x130
 800bc1e:	2401      	movs	r4, #1
 800bc20:	42a5      	cmp	r5, r4
 800bc22:	da30      	bge.n	800bc86 <__kernel_rem_pio2+0x5c6>
 800bc24:	9b02      	ldr	r3, [sp, #8]
 800bc26:	b113      	cbz	r3, 800bc2e <__kernel_rem_pio2+0x56e>
 800bc28:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bc2c:	4619      	mov	r1, r3
 800bc2e:	9b01      	ldr	r3, [sp, #4]
 800bc30:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800bc34:	e00f      	b.n	800bc56 <__kernel_rem_pio2+0x596>
 800bc36:	ab9a      	add	r3, sp, #616	; 0x268
 800bc38:	441c      	add	r4, r3
 800bc3a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800bc3e:	2000      	movs	r0, #0
 800bc40:	2100      	movs	r1, #0
 800bc42:	2d00      	cmp	r5, #0
 800bc44:	da10      	bge.n	800bc68 <__kernel_rem_pio2+0x5a8>
 800bc46:	9b02      	ldr	r3, [sp, #8]
 800bc48:	b113      	cbz	r3, 800bc50 <__kernel_rem_pio2+0x590>
 800bc4a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bc4e:	4619      	mov	r1, r3
 800bc50:	9b01      	ldr	r3, [sp, #4]
 800bc52:	e9c3 0100 	strd	r0, r1, [r3]
 800bc56:	9b06      	ldr	r3, [sp, #24]
 800bc58:	f003 0007 	and.w	r0, r3, #7
 800bc5c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800bc60:	ecbd 8b02 	vpop	{d8}
 800bc64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc68:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800bc6c:	f7f4 fb16 	bl	800029c <__adddf3>
 800bc70:	3d01      	subs	r5, #1
 800bc72:	e7e6      	b.n	800bc42 <__kernel_rem_pio2+0x582>
 800bc74:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800bc78:	f7f4 fb10 	bl	800029c <__adddf3>
 800bc7c:	3e01      	subs	r6, #1
 800bc7e:	e7bc      	b.n	800bbfa <__kernel_rem_pio2+0x53a>
 800bc80:	4602      	mov	r2, r0
 800bc82:	460b      	mov	r3, r1
 800bc84:	e7c1      	b.n	800bc0a <__kernel_rem_pio2+0x54a>
 800bc86:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800bc8a:	f7f4 fb07 	bl	800029c <__adddf3>
 800bc8e:	3401      	adds	r4, #1
 800bc90:	e7c6      	b.n	800bc20 <__kernel_rem_pio2+0x560>
 800bc92:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 800bc96:	ed3a 7b02 	vldmdb	sl!, {d7}
 800bc9a:	4640      	mov	r0, r8
 800bc9c:	ec53 2b17 	vmov	r2, r3, d7
 800bca0:	4649      	mov	r1, r9
 800bca2:	ed8d 7b04 	vstr	d7, [sp, #16]
 800bca6:	f7f4 faf9 	bl	800029c <__adddf3>
 800bcaa:	4602      	mov	r2, r0
 800bcac:	460b      	mov	r3, r1
 800bcae:	4606      	mov	r6, r0
 800bcb0:	460f      	mov	r7, r1
 800bcb2:	4640      	mov	r0, r8
 800bcb4:	4649      	mov	r1, r9
 800bcb6:	f7f4 faef 	bl	8000298 <__aeabi_dsub>
 800bcba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bcbe:	f7f4 faed 	bl	800029c <__adddf3>
 800bcc2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bcc6:	e9ca 0100 	strd	r0, r1, [sl]
 800bcca:	e94a 6702 	strd	r6, r7, [sl, #-8]
 800bcce:	e770      	b.n	800bbb2 <__kernel_rem_pio2+0x4f2>
 800bcd0:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 800bcd4:	ed3a 7b02 	vldmdb	sl!, {d7}
 800bcd8:	4630      	mov	r0, r6
 800bcda:	ec53 2b17 	vmov	r2, r3, d7
 800bcde:	4639      	mov	r1, r7
 800bce0:	ed8d 7b04 	vstr	d7, [sp, #16]
 800bce4:	f7f4 fada 	bl	800029c <__adddf3>
 800bce8:	4602      	mov	r2, r0
 800bcea:	460b      	mov	r3, r1
 800bcec:	4680      	mov	r8, r0
 800bcee:	4689      	mov	r9, r1
 800bcf0:	4630      	mov	r0, r6
 800bcf2:	4639      	mov	r1, r7
 800bcf4:	f7f4 fad0 	bl	8000298 <__aeabi_dsub>
 800bcf8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bcfc:	f7f4 face 	bl	800029c <__adddf3>
 800bd00:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bd04:	e9ca 0100 	strd	r0, r1, [sl]
 800bd08:	e94a 8902 	strd	r8, r9, [sl, #-8]
 800bd0c:	e756      	b.n	800bbbc <__kernel_rem_pio2+0x4fc>
 800bd0e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800bd12:	f7f4 fac3 	bl	800029c <__adddf3>
 800bd16:	3d01      	subs	r5, #1
 800bd18:	e756      	b.n	800bbc8 <__kernel_rem_pio2+0x508>
 800bd1a:	9b01      	ldr	r3, [sp, #4]
 800bd1c:	9a01      	ldr	r2, [sp, #4]
 800bd1e:	601f      	str	r7, [r3, #0]
 800bd20:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800bd24:	605c      	str	r4, [r3, #4]
 800bd26:	609d      	str	r5, [r3, #8]
 800bd28:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800bd2c:	60d3      	str	r3, [r2, #12]
 800bd2e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bd32:	6110      	str	r0, [r2, #16]
 800bd34:	6153      	str	r3, [r2, #20]
 800bd36:	e78e      	b.n	800bc56 <__kernel_rem_pio2+0x596>
 800bd38:	41700000 	.word	0x41700000
 800bd3c:	3e700000 	.word	0x3e700000

0800bd40 <__kernel_sin>:
 800bd40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd44:	ec55 4b10 	vmov	r4, r5, d0
 800bd48:	b085      	sub	sp, #20
 800bd4a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800bd4e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800bd52:	ed8d 1b00 	vstr	d1, [sp]
 800bd56:	9002      	str	r0, [sp, #8]
 800bd58:	da06      	bge.n	800bd68 <__kernel_sin+0x28>
 800bd5a:	ee10 0a10 	vmov	r0, s0
 800bd5e:	4629      	mov	r1, r5
 800bd60:	f7f4 ff02 	bl	8000b68 <__aeabi_d2iz>
 800bd64:	2800      	cmp	r0, #0
 800bd66:	d051      	beq.n	800be0c <__kernel_sin+0xcc>
 800bd68:	4622      	mov	r2, r4
 800bd6a:	462b      	mov	r3, r5
 800bd6c:	4620      	mov	r0, r4
 800bd6e:	4629      	mov	r1, r5
 800bd70:	f7f4 fc4a 	bl	8000608 <__aeabi_dmul>
 800bd74:	4682      	mov	sl, r0
 800bd76:	468b      	mov	fp, r1
 800bd78:	4602      	mov	r2, r0
 800bd7a:	460b      	mov	r3, r1
 800bd7c:	4620      	mov	r0, r4
 800bd7e:	4629      	mov	r1, r5
 800bd80:	f7f4 fc42 	bl	8000608 <__aeabi_dmul>
 800bd84:	a341      	add	r3, pc, #260	; (adr r3, 800be8c <__kernel_sin+0x14c>)
 800bd86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd8a:	4680      	mov	r8, r0
 800bd8c:	4689      	mov	r9, r1
 800bd8e:	4650      	mov	r0, sl
 800bd90:	4659      	mov	r1, fp
 800bd92:	f7f4 fc39 	bl	8000608 <__aeabi_dmul>
 800bd96:	a33f      	add	r3, pc, #252	; (adr r3, 800be94 <__kernel_sin+0x154>)
 800bd98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd9c:	f7f4 fa7c 	bl	8000298 <__aeabi_dsub>
 800bda0:	4652      	mov	r2, sl
 800bda2:	465b      	mov	r3, fp
 800bda4:	f7f4 fc30 	bl	8000608 <__aeabi_dmul>
 800bda8:	a33c      	add	r3, pc, #240	; (adr r3, 800be9c <__kernel_sin+0x15c>)
 800bdaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdae:	f7f4 fa75 	bl	800029c <__adddf3>
 800bdb2:	4652      	mov	r2, sl
 800bdb4:	465b      	mov	r3, fp
 800bdb6:	f7f4 fc27 	bl	8000608 <__aeabi_dmul>
 800bdba:	a33a      	add	r3, pc, #232	; (adr r3, 800bea4 <__kernel_sin+0x164>)
 800bdbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdc0:	f7f4 fa6a 	bl	8000298 <__aeabi_dsub>
 800bdc4:	4652      	mov	r2, sl
 800bdc6:	465b      	mov	r3, fp
 800bdc8:	f7f4 fc1e 	bl	8000608 <__aeabi_dmul>
 800bdcc:	a337      	add	r3, pc, #220	; (adr r3, 800beac <__kernel_sin+0x16c>)
 800bdce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdd2:	f7f4 fa63 	bl	800029c <__adddf3>
 800bdd6:	9b02      	ldr	r3, [sp, #8]
 800bdd8:	4606      	mov	r6, r0
 800bdda:	460f      	mov	r7, r1
 800bddc:	b9db      	cbnz	r3, 800be16 <__kernel_sin+0xd6>
 800bdde:	4602      	mov	r2, r0
 800bde0:	460b      	mov	r3, r1
 800bde2:	4650      	mov	r0, sl
 800bde4:	4659      	mov	r1, fp
 800bde6:	f7f4 fc0f 	bl	8000608 <__aeabi_dmul>
 800bdea:	a325      	add	r3, pc, #148	; (adr r3, 800be80 <__kernel_sin+0x140>)
 800bdec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdf0:	f7f4 fa52 	bl	8000298 <__aeabi_dsub>
 800bdf4:	4642      	mov	r2, r8
 800bdf6:	464b      	mov	r3, r9
 800bdf8:	f7f4 fc06 	bl	8000608 <__aeabi_dmul>
 800bdfc:	4602      	mov	r2, r0
 800bdfe:	460b      	mov	r3, r1
 800be00:	4620      	mov	r0, r4
 800be02:	4629      	mov	r1, r5
 800be04:	f7f4 fa4a 	bl	800029c <__adddf3>
 800be08:	4604      	mov	r4, r0
 800be0a:	460d      	mov	r5, r1
 800be0c:	ec45 4b10 	vmov	d0, r4, r5
 800be10:	b005      	add	sp, #20
 800be12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be16:	2200      	movs	r2, #0
 800be18:	4b1b      	ldr	r3, [pc, #108]	; (800be88 <__kernel_sin+0x148>)
 800be1a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800be1e:	f7f4 fbf3 	bl	8000608 <__aeabi_dmul>
 800be22:	4632      	mov	r2, r6
 800be24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800be28:	463b      	mov	r3, r7
 800be2a:	4640      	mov	r0, r8
 800be2c:	4649      	mov	r1, r9
 800be2e:	f7f4 fbeb 	bl	8000608 <__aeabi_dmul>
 800be32:	4602      	mov	r2, r0
 800be34:	460b      	mov	r3, r1
 800be36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be3a:	f7f4 fa2d 	bl	8000298 <__aeabi_dsub>
 800be3e:	4652      	mov	r2, sl
 800be40:	465b      	mov	r3, fp
 800be42:	f7f4 fbe1 	bl	8000608 <__aeabi_dmul>
 800be46:	e9dd 2300 	ldrd	r2, r3, [sp]
 800be4a:	f7f4 fa25 	bl	8000298 <__aeabi_dsub>
 800be4e:	a30c      	add	r3, pc, #48	; (adr r3, 800be80 <__kernel_sin+0x140>)
 800be50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be54:	4606      	mov	r6, r0
 800be56:	460f      	mov	r7, r1
 800be58:	4640      	mov	r0, r8
 800be5a:	4649      	mov	r1, r9
 800be5c:	f7f4 fbd4 	bl	8000608 <__aeabi_dmul>
 800be60:	4602      	mov	r2, r0
 800be62:	460b      	mov	r3, r1
 800be64:	4630      	mov	r0, r6
 800be66:	4639      	mov	r1, r7
 800be68:	f7f4 fa18 	bl	800029c <__adddf3>
 800be6c:	4602      	mov	r2, r0
 800be6e:	460b      	mov	r3, r1
 800be70:	4620      	mov	r0, r4
 800be72:	4629      	mov	r1, r5
 800be74:	f7f4 fa10 	bl	8000298 <__aeabi_dsub>
 800be78:	e7c6      	b.n	800be08 <__kernel_sin+0xc8>
 800be7a:	bf00      	nop
 800be7c:	f3af 8000 	nop.w
 800be80:	55555549 	.word	0x55555549
 800be84:	3fc55555 	.word	0x3fc55555
 800be88:	3fe00000 	.word	0x3fe00000
 800be8c:	5acfd57c 	.word	0x5acfd57c
 800be90:	3de5d93a 	.word	0x3de5d93a
 800be94:	8a2b9ceb 	.word	0x8a2b9ceb
 800be98:	3e5ae5e6 	.word	0x3e5ae5e6
 800be9c:	57b1fe7d 	.word	0x57b1fe7d
 800bea0:	3ec71de3 	.word	0x3ec71de3
 800bea4:	19c161d5 	.word	0x19c161d5
 800bea8:	3f2a01a0 	.word	0x3f2a01a0
 800beac:	1110f8a6 	.word	0x1110f8a6
 800beb0:	3f811111 	.word	0x3f811111

0800beb4 <fabs>:
 800beb4:	ec51 0b10 	vmov	r0, r1, d0
 800beb8:	ee10 2a10 	vmov	r2, s0
 800bebc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bec0:	ec43 2b10 	vmov	d0, r2, r3
 800bec4:	4770      	bx	lr
	...

0800bec8 <floor>:
 800bec8:	ec51 0b10 	vmov	r0, r1, d0
 800becc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bed0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800bed4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800bed8:	2e13      	cmp	r6, #19
 800beda:	460c      	mov	r4, r1
 800bedc:	ee10 5a10 	vmov	r5, s0
 800bee0:	4680      	mov	r8, r0
 800bee2:	dc34      	bgt.n	800bf4e <floor+0x86>
 800bee4:	2e00      	cmp	r6, #0
 800bee6:	da16      	bge.n	800bf16 <floor+0x4e>
 800bee8:	a335      	add	r3, pc, #212	; (adr r3, 800bfc0 <floor+0xf8>)
 800beea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beee:	f7f4 f9d5 	bl	800029c <__adddf3>
 800bef2:	2200      	movs	r2, #0
 800bef4:	2300      	movs	r3, #0
 800bef6:	f7f4 fe17 	bl	8000b28 <__aeabi_dcmpgt>
 800befa:	b148      	cbz	r0, 800bf10 <floor+0x48>
 800befc:	2c00      	cmp	r4, #0
 800befe:	da59      	bge.n	800bfb4 <floor+0xec>
 800bf00:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800bf04:	4a30      	ldr	r2, [pc, #192]	; (800bfc8 <floor+0x100>)
 800bf06:	432b      	orrs	r3, r5
 800bf08:	2500      	movs	r5, #0
 800bf0a:	42ab      	cmp	r3, r5
 800bf0c:	bf18      	it	ne
 800bf0e:	4614      	movne	r4, r2
 800bf10:	4621      	mov	r1, r4
 800bf12:	4628      	mov	r0, r5
 800bf14:	e025      	b.n	800bf62 <floor+0x9a>
 800bf16:	4f2d      	ldr	r7, [pc, #180]	; (800bfcc <floor+0x104>)
 800bf18:	4137      	asrs	r7, r6
 800bf1a:	ea01 0307 	and.w	r3, r1, r7
 800bf1e:	4303      	orrs	r3, r0
 800bf20:	d01f      	beq.n	800bf62 <floor+0x9a>
 800bf22:	a327      	add	r3, pc, #156	; (adr r3, 800bfc0 <floor+0xf8>)
 800bf24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf28:	f7f4 f9b8 	bl	800029c <__adddf3>
 800bf2c:	2200      	movs	r2, #0
 800bf2e:	2300      	movs	r3, #0
 800bf30:	f7f4 fdfa 	bl	8000b28 <__aeabi_dcmpgt>
 800bf34:	2800      	cmp	r0, #0
 800bf36:	d0eb      	beq.n	800bf10 <floor+0x48>
 800bf38:	2c00      	cmp	r4, #0
 800bf3a:	bfbe      	ittt	lt
 800bf3c:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800bf40:	fa43 f606 	asrlt.w	r6, r3, r6
 800bf44:	19a4      	addlt	r4, r4, r6
 800bf46:	ea24 0407 	bic.w	r4, r4, r7
 800bf4a:	2500      	movs	r5, #0
 800bf4c:	e7e0      	b.n	800bf10 <floor+0x48>
 800bf4e:	2e33      	cmp	r6, #51	; 0x33
 800bf50:	dd0b      	ble.n	800bf6a <floor+0xa2>
 800bf52:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800bf56:	d104      	bne.n	800bf62 <floor+0x9a>
 800bf58:	ee10 2a10 	vmov	r2, s0
 800bf5c:	460b      	mov	r3, r1
 800bf5e:	f7f4 f99d 	bl	800029c <__adddf3>
 800bf62:	ec41 0b10 	vmov	d0, r0, r1
 800bf66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf6a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800bf6e:	f04f 33ff 	mov.w	r3, #4294967295
 800bf72:	fa23 f707 	lsr.w	r7, r3, r7
 800bf76:	4207      	tst	r7, r0
 800bf78:	d0f3      	beq.n	800bf62 <floor+0x9a>
 800bf7a:	a311      	add	r3, pc, #68	; (adr r3, 800bfc0 <floor+0xf8>)
 800bf7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf80:	f7f4 f98c 	bl	800029c <__adddf3>
 800bf84:	2200      	movs	r2, #0
 800bf86:	2300      	movs	r3, #0
 800bf88:	f7f4 fdce 	bl	8000b28 <__aeabi_dcmpgt>
 800bf8c:	2800      	cmp	r0, #0
 800bf8e:	d0bf      	beq.n	800bf10 <floor+0x48>
 800bf90:	2c00      	cmp	r4, #0
 800bf92:	da02      	bge.n	800bf9a <floor+0xd2>
 800bf94:	2e14      	cmp	r6, #20
 800bf96:	d103      	bne.n	800bfa0 <floor+0xd8>
 800bf98:	3401      	adds	r4, #1
 800bf9a:	ea25 0507 	bic.w	r5, r5, r7
 800bf9e:	e7b7      	b.n	800bf10 <floor+0x48>
 800bfa0:	2301      	movs	r3, #1
 800bfa2:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800bfa6:	fa03 f606 	lsl.w	r6, r3, r6
 800bfaa:	4435      	add	r5, r6
 800bfac:	4545      	cmp	r5, r8
 800bfae:	bf38      	it	cc
 800bfb0:	18e4      	addcc	r4, r4, r3
 800bfb2:	e7f2      	b.n	800bf9a <floor+0xd2>
 800bfb4:	2500      	movs	r5, #0
 800bfb6:	462c      	mov	r4, r5
 800bfb8:	e7aa      	b.n	800bf10 <floor+0x48>
 800bfba:	bf00      	nop
 800bfbc:	f3af 8000 	nop.w
 800bfc0:	8800759c 	.word	0x8800759c
 800bfc4:	7e37e43c 	.word	0x7e37e43c
 800bfc8:	bff00000 	.word	0xbff00000
 800bfcc:	000fffff 	.word	0x000fffff

0800bfd0 <scalbn>:
 800bfd0:	b570      	push	{r4, r5, r6, lr}
 800bfd2:	ec55 4b10 	vmov	r4, r5, d0
 800bfd6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800bfda:	4606      	mov	r6, r0
 800bfdc:	462b      	mov	r3, r5
 800bfde:	b9aa      	cbnz	r2, 800c00c <scalbn+0x3c>
 800bfe0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800bfe4:	4323      	orrs	r3, r4
 800bfe6:	d03b      	beq.n	800c060 <scalbn+0x90>
 800bfe8:	4b31      	ldr	r3, [pc, #196]	; (800c0b0 <scalbn+0xe0>)
 800bfea:	4629      	mov	r1, r5
 800bfec:	2200      	movs	r2, #0
 800bfee:	ee10 0a10 	vmov	r0, s0
 800bff2:	f7f4 fb09 	bl	8000608 <__aeabi_dmul>
 800bff6:	4b2f      	ldr	r3, [pc, #188]	; (800c0b4 <scalbn+0xe4>)
 800bff8:	429e      	cmp	r6, r3
 800bffa:	4604      	mov	r4, r0
 800bffc:	460d      	mov	r5, r1
 800bffe:	da12      	bge.n	800c026 <scalbn+0x56>
 800c000:	a327      	add	r3, pc, #156	; (adr r3, 800c0a0 <scalbn+0xd0>)
 800c002:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c006:	f7f4 faff 	bl	8000608 <__aeabi_dmul>
 800c00a:	e009      	b.n	800c020 <scalbn+0x50>
 800c00c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800c010:	428a      	cmp	r2, r1
 800c012:	d10c      	bne.n	800c02e <scalbn+0x5e>
 800c014:	ee10 2a10 	vmov	r2, s0
 800c018:	4620      	mov	r0, r4
 800c01a:	4629      	mov	r1, r5
 800c01c:	f7f4 f93e 	bl	800029c <__adddf3>
 800c020:	4604      	mov	r4, r0
 800c022:	460d      	mov	r5, r1
 800c024:	e01c      	b.n	800c060 <scalbn+0x90>
 800c026:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c02a:	460b      	mov	r3, r1
 800c02c:	3a36      	subs	r2, #54	; 0x36
 800c02e:	4432      	add	r2, r6
 800c030:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c034:	428a      	cmp	r2, r1
 800c036:	dd0b      	ble.n	800c050 <scalbn+0x80>
 800c038:	ec45 4b11 	vmov	d1, r4, r5
 800c03c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800c0a8 <scalbn+0xd8>
 800c040:	f000 f83c 	bl	800c0bc <copysign>
 800c044:	a318      	add	r3, pc, #96	; (adr r3, 800c0a8 <scalbn+0xd8>)
 800c046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c04a:	ec51 0b10 	vmov	r0, r1, d0
 800c04e:	e7da      	b.n	800c006 <scalbn+0x36>
 800c050:	2a00      	cmp	r2, #0
 800c052:	dd08      	ble.n	800c066 <scalbn+0x96>
 800c054:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c058:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c05c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c060:	ec45 4b10 	vmov	d0, r4, r5
 800c064:	bd70      	pop	{r4, r5, r6, pc}
 800c066:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800c06a:	da0d      	bge.n	800c088 <scalbn+0xb8>
 800c06c:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c070:	429e      	cmp	r6, r3
 800c072:	ec45 4b11 	vmov	d1, r4, r5
 800c076:	dce1      	bgt.n	800c03c <scalbn+0x6c>
 800c078:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800c0a0 <scalbn+0xd0>
 800c07c:	f000 f81e 	bl	800c0bc <copysign>
 800c080:	a307      	add	r3, pc, #28	; (adr r3, 800c0a0 <scalbn+0xd0>)
 800c082:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c086:	e7e0      	b.n	800c04a <scalbn+0x7a>
 800c088:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c08c:	3236      	adds	r2, #54	; 0x36
 800c08e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c092:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c096:	4620      	mov	r0, r4
 800c098:	4629      	mov	r1, r5
 800c09a:	2200      	movs	r2, #0
 800c09c:	4b06      	ldr	r3, [pc, #24]	; (800c0b8 <scalbn+0xe8>)
 800c09e:	e7b2      	b.n	800c006 <scalbn+0x36>
 800c0a0:	c2f8f359 	.word	0xc2f8f359
 800c0a4:	01a56e1f 	.word	0x01a56e1f
 800c0a8:	8800759c 	.word	0x8800759c
 800c0ac:	7e37e43c 	.word	0x7e37e43c
 800c0b0:	43500000 	.word	0x43500000
 800c0b4:	ffff3cb0 	.word	0xffff3cb0
 800c0b8:	3c900000 	.word	0x3c900000

0800c0bc <copysign>:
 800c0bc:	ec51 0b10 	vmov	r0, r1, d0
 800c0c0:	ee11 0a90 	vmov	r0, s3
 800c0c4:	ee10 2a10 	vmov	r2, s0
 800c0c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800c0cc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800c0d0:	ea41 0300 	orr.w	r3, r1, r0
 800c0d4:	ec43 2b10 	vmov	d0, r2, r3
 800c0d8:	4770      	bx	lr
	...

0800c0dc <_init>:
 800c0dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0de:	bf00      	nop
 800c0e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c0e2:	bc08      	pop	{r3}
 800c0e4:	469e      	mov	lr, r3
 800c0e6:	4770      	bx	lr

0800c0e8 <_fini>:
 800c0e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0ea:	bf00      	nop
 800c0ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c0ee:	bc08      	pop	{r3}
 800c0f0:	469e      	mov	lr, r3
 800c0f2:	4770      	bx	lr
